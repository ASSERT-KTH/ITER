bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Object[]  fields  =  clazz.getSuperclasses();  [CE]  cannot  find  symbol  [FE]          StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object[]  fields  =  clazz.getSuperclasses();  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object[]  fields  =  clazz.getSuperclasses();	  Object[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
2	[BUG]  [BUGGY]  Object[]  fields  =  object.getDeclaredFields();  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object[]  fields  =  object.getDeclaredFields();  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object[]  fields  =  object.getDeclaredFields();	  Object[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
3	[BUG]  [BUGGY]  Object[]  fields  =  clazz.getSuperclassFields();  [CE]  cannot  find  symbol  [FE]              StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object[]  fields  =  clazz.getSuperclassFields();  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object[]  fields  =  clazz.getSuperclassFields();	  Object[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
4	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getSuperClass();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Class  <?>  object  =  clazz.getSuperClass();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Class  <?>  object  =  clazz.getSuperClass();	  Class    <?>    object    =    clazz.getSuperclass();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	49	None	replace
5	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getInterface();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Class  <?>  object  =  clazz.getInterface();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Class  <?>  object  =  clazz.getInterface();	  Class    <?>    object    =    clazz.getSuperclass();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	49	None	replace
6	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaredObject(iConstant);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getDeclaredObject(iConstant);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getDeclaredObject(iConstant);	  Object    object    =    clazz.getDeclaredObject(0);    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	72	None	replace
7	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaredObject(1);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getDeclaredObject(1);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getDeclaredObject(1);	  Object    object    =    clazz.getDeclaredObject(0);    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	72	None	replace
8	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getDeclaredClass();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Class  <?>  object  =  clazz.getDeclaredClass();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Class  <?>  object  =  clazz.getDeclaredClass();	  Class    <?>    object    =    clazz.getRawClass();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	50	None	replace
9	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getReturnType();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Class  <?>  object  =  clazz.getReturnType();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Class  <?>  object  =  clazz.getReturnType();	  Class    <?>    object    =    clazz.getRawClass();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	50	None	replace
10	[BUG]  [BUGGY]  register(object,  clazz,  excludeFields,  null);  [CE]  method  register  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  register(object,  clazz,  excludeFields,  null);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	register(object,  clazz,  excludeFields,  null);	  register(object,    clazz,    null);    	non-compiled	[CE]  method  register  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	94	None	replace
11	[BUG]  [BUGGY]  register(object,  clazz,  null,  excludeFields);  [CE]  method  register  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  register(object,  clazz,  null,  excludeFields);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	register(object,  clazz,  null,  excludeFields);	  register(object,    clazz,    null);    	non-compiled	[CE]  method  register  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	94	None	replace
12	[BUG]  [BUGGY]  register(object,  builder,  clazz,  null);  [CE]  method  register  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  register(object,  builder,  clazz,  null);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	register(object,  builder,  clazz,  null);	  register(object,    clazz,    null);    	non-compiled	[CE]  method  register  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	94	None	replace
13	[BUG]  [BUGGY]  register(object,  clazz,  fieldValue,  null);  [CE]  cannot  find  symbol  fieldValue  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  register(object,  clazz,  fieldValue,  null);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	register(object,  clazz,  fieldValue,  null);	  register(object,    clazz,    null);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	94	None	replace
14	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaredFields()  [0].toString();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getDeclaredFields()  [0].toString();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getDeclaredFields()  [0].toString();	  Object    object    =    clazz.getDeclaredFields()    [0];    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	100	None	replace
15	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaredObject(fieldValue);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getDeclaredObject(fieldValue);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getDeclaredObject(fieldValue);	  Object    object    =    clazz.getDeclaredObject(object);    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	92	None	replace
16	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaredObject(exclusionFields);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getDeclaredObject(exclusionFields);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getDeclaredObject(exclusionFields);	  Object    object    =    clazz.getDeclaredObject(object);    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	92	None	replace
17	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getDeclaredFields(excludeFields,  useTransients);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Class  <?>  object  =  clazz.getDeclaredFields(excludeFields,  useTransients);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Class  <?>  object  =  clazz.getDeclaredFields(excludeFields,  useTransients);	  Class    <?>    object    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	51	None	replace
18	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getDeclaredFields(fields);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Class  <?>  object  =  clazz.getDeclaredFields(fields);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Class  <?>  object  =  clazz.getDeclaredFields(fields);	  Class    <?>    object    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	51	None	replace
19	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getDeclaredFields(fieldValue);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Class  <?>  object  =  clazz.getDeclaredFields(fieldValue);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Class  <?>  object  =  clazz.getDeclaredFields(fieldValue);	  Class    <?>    object    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	51	None	replace
20	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getDeclaredFields(excludeFields,  builder);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Class  <?>  object  =  clazz.getDeclaredFields(excludeFields,  builder);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Class  <?>  object  =  clazz.getDeclaredFields(excludeFields,  builder);	  Class    <?>    object    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	51	None	replace
21	[BUG]  [BUGGY]  builder.append(object.getDeclaredFields());  [CE]  cannot  find  symbol  [FE]          StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(object.getDeclaredFields());  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append(object.getDeclaredFields());	  builder.append(object);    if(object    instanceof    Accessible)    {    Class    <?>    clazz    =(Class    <?>)object;    builder.append(clazz.getDeclaredFields());    }    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
22	[BUG]  [BUGGY]  Builder.append(object,  clazz.getDeclaredFields());  [CE]  cannot  find  symbol  Builder  [FE]            StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Builder.append(object,  clazz.getDeclaredFields());  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Builder.append(object,  clazz.getDeclaredFields());	  builder.append(object);    if(object    instanceof    Accessible)    {    Class    <?>    clazz    =(Class    <?>)object;    builder.append(clazz.getDeclaredFields());    }    	non-compiled	[CE]  cannot  find  symbol  Builder	56	None	replace
23	[BUG]  [BUGGY]  builder.append(excludeFields[object].getDeclaredFields());  [CE]  incompatible  types  [FE]              StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(excludeFields[object].getDeclaredFields());  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append(excludeFields[object].getDeclaredFields());	  builder.append(object);    if(object    instanceof    Accessible)    {    Class    <?>    clazz    =(Class    <?>)object;    builder.append(clazz.getDeclaredFields());    }    	non-compiled	[CE]  incompatible  types	56	None	replace
24	[BUG]  [BUGGY]  Builder.append(object);  [CE]  cannot  find  symbol  Builder  [FE]                StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Builder.append(object);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Builder.append(object);	  builder.append(object);    if(object    instanceof    Accessible)    {    Class    <?>    clazz    =(Class    <?>)object;    builder.append(clazz.getDeclaredFields());    }    	non-compiled	[CE]  cannot  find  symbol  Builder	56	None	replace
25	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true);  [CE]  no  suitable  method  found  for  setAccessible(String[],boolean)  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	AccessibleObject.setAccessible(excludeFields,  true);	  AccessibleObject.setAccessible(fields,    true);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],boolean)	25	None	replace
26	[BUG]  [BUGGY]  AccessibleObject.setAccessible(emptyFields,  true);  [CE]  cannot  find  symbol  emptyFields  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  AccessibleObject.setAccessible(emptyFields,  true);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	AccessibleObject.setAccessible(emptyFields,  true);	  AccessibleObject.setAccessible(fields,    true);    	non-compiled	[CE]  cannot  find  symbol  emptyFields	25	None	replace
27	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(excludeFields);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	add	builder.append(excludeFields);	  builder.append(field);    	compilable	  [FE]  StackOverflowError  	86	4	replace
28	[BUG]  [BUGGY]  builder.append(excludeFields);  [FE]  StackOverflowError  [FE]          StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(excludeFields);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append(excludeFields);	  builder.append(field);    	compilable	  [FE]  StackOverflowError  	86	4	replace
29	[BUG]  [BUGGY]  builder.append(excludeFields[iConstant]);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]            StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(excludeFields[iConstant]);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append(excludeFields[iConstant]);	  builder.append(field);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	86	None	replace
30	[BUG]  [BUGGY]  object  =  clazz.getDeclaredFields(excludeFields,  builder);  [CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]            IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  object  =  clazz.getDeclaredFields(excludeFields,  builder);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	object  =  clazz.getDeclaredFields(excludeFields,  builder);	  object    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;	39	None	replace
31	[BUG]  [BUGGY]  object  =  clazz.getDeclaredFields(excludeFields,  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]              IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  object  =  clazz.getDeclaredFields(excludeFields,  fieldValue);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	object  =  clazz.getDeclaredFields(excludeFields,  fieldValue);	  object    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	39	None	replace
32	[BUG]  [BUGGY]  object  =  clazz.getDeclaredFields(fields,  excludeFields);  [CE]  cannot  find  symbol  fields  [FE]                IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  object  =  clazz.getDeclaredFields(fields,  excludeFields);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	object  =  clazz.getDeclaredFields(fields,  excludeFields);	  object    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  cannot  find  symbol  fields	39	None	replace
33	[BUG]  [BUGGY]  object  =  clazz.getDeclaredFields(object,  excludeFields);  [CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  object  =  clazz.getDeclaredFields(object,  excludeFields);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	object  =  clazz.getDeclaredFields(object,  excludeFields);	  object    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;	39	None	replace
34	[BUG]  [BUGGY]  Object  object  =  clazz.getReference();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getReference();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getReference();	  Object    object    =    clazz.getReferenceName();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	52	None	replace
35	[BUG]  [BUGGY]  Object  object  =  clazz.getName();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getName();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getName();	  Object    object    =    clazz.getReferenceName();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	52	None	replace
36	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaredObject(excludeFields,  builder);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getDeclaredObject(excludeFields,  builder);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getDeclaredObject(excludeFields,  builder);	  Object    object    =    clazz.getDeclaredObject(excludeFields);    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	71	None	replace
37	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaredObject(excludeFields,  useTransients);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getDeclaredObject(excludeFields,  useTransients);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getDeclaredObject(excludeFields,  useTransients);	  Object    object    =    clazz.getDeclaredObject(excludeFields);    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	71	None	replace
38	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaredObject(fields);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getDeclaredObject(fields);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getDeclaredObject(fields);	  Object    object    =    clazz.getDeclaredObject(excludeFields);    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	71	None	replace
39	[BUG]  [BUGGY]  ReflectionAppend.reflectionAppend(object,  builder,  excludeFields);  [CE]  cannot  find  symbol  ReflectionAppend  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  ReflectionAppend.reflectionAppend(object,  builder,  excludeFields);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	ReflectionAppend.reflectionAppend(object,  builder,  excludeFields);	  ReflectionAppend.reflectionAppend(object,    builder);    	non-compiled	[CE]  cannot  find  symbol  ReflectionAppend	18	None	replace
40	[BUG]  [BUGGY]  ReflectionAppend.reflectionAppend(builder,  object);  [CE]  cannot  find  symbol  ReflectionAppend  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  ReflectionAppend.reflectionAppend(builder,  object);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	ReflectionAppend.reflectionAppend(builder,  object);	  ReflectionAppend.reflectionAppend(object,    builder);    	non-compiled	[CE]  cannot  find  symbol  ReflectionAppend	18	None	replace
41	[BUG]  [BUGGY]  ReflectionAppend.reflectionAppend(object,  builder,  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  ReflectionAppend.reflectionAppend(object,  builder,  iConstant);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	ReflectionAppend.reflectionAppend(object,  builder,  iConstant);	  ReflectionAppend.reflectionAppend(object,    builder);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	18	None	replace
42	[BUG]  [BUGGY]  ReflectionAppend.reflectionAppend(object,  builder,  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  ReflectionAppend.reflectionAppend(object,  builder,  fieldValue);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	ReflectionAppend.reflectionAppend(object,  builder,  fieldValue);	  ReflectionAppend.reflectionAppend(object,    builder);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	18	None	replace
43	[BUG]  [BUGGY]  register(object,  constructer,  clazz);  [CE]  cannot  find  symbol  constructer  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  register(object,  constructer,  clazz);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	register(object,  constructer,  clazz);	  register(object,    clazz,    builder);    	non-compiled	[CE]  cannot  find  symbol  constructer	22	None	replace
44	[BUG]  [BUGGY]  register(base,  object,  builder);  [CE]  cannot  find  symbol  base  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  register(base,  object,  builder);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	register(base,  object,  builder);	  register(object,    clazz,    builder);    	non-compiled	[CE]  cannot  find  symbol  base	22	None	replace
45	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaredFields(fields);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getDeclaredFields(fields);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getDeclaredFields(fields);	  Object    object    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	1	None	replace
46	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaredFields(excludeFields,  useTransients);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getDeclaredFields(excludeFields,  useTransients);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getDeclaredFields(excludeFields,  useTransients);	  Object    object    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	1	None	replace
47	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaredFields(excludeFields,  builder);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getDeclaredFields(excludeFields,  builder);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getDeclaredFields(excludeFields,  builder);	  Object    object    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	1	None	replace
48	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaredFields(fields,  excludeFields);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getDeclaredFields(fields,  excludeFields);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getDeclaredFields(fields,  excludeFields);	  Object    object    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	1	None	replace
49	[BUG]  [BUGGY]  Class  <?>  clazz  =  clazz.getClass();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Class  <?>  clazz  =  clazz.getClass();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Class  <?>  clazz  =  clazz.getClass();	  Field[]    fields    =    clazz.getDeclaredFields();    Class    <?>    clazz    =    clazz.getClass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	89	None	replace
50	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  Class  <?>  clazz  =  clazz.getRawClass();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  Class  <?>  clazz  =  clazz.getRawClass();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  Class  <?>  clazz  =  clazz.getRawClass();	  Field[]    fields    =    clazz.getDeclaredFields();    Class    <?>    clazz    =    clazz.getClass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	89	None	replace
51	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  Class  <?>  clazz  =  clazz.getSuperclass();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  Class  <?>  clazz  =  clazz.getSuperclass();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  Class  <?>  clazz  =  clazz.getSuperclass();	  Field[]    fields    =    clazz.getDeclaredFields();    Class    <?>    clazz    =    clazz.getClass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	89	None	replace
52	[BUG]  [BUGGY]  register(object,  clazz,  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  register(object,  clazz,  fieldValue);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	register(object,  clazz,  fieldValue);	  register(object,    clazz,    constructor);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	23	None	replace
53	[BUG]  [BUGGY]  register(object,  clazz,  constructors);  [CE]  cannot  find  symbol  constructors  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  register(object,  clazz,  constructors);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	register(object,  clazz,  constructors);	  register(object,    clazz,    constructor);    	non-compiled	[CE]  cannot  find  symbol  constructors	23	None	replace
54	[BUG]  [BUGGY]  Class  <?>  clazz  =  object.getReferenceName();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]            StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Class  <?>  clazz  =  object.getReferenceName();  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Class  <?>  clazz  =  object.getReferenceName();	          Class    <?>    clazz    =    object.getDeclaringClass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	70	None	replace
55	[BUG]  [BUGGY]  builder.append(object,  excludeFields[object.getClass().getName()  ]);  [CE]  incompatible  types  [FE]        StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(object,  excludeFields[object.getClass().getName()  ]);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append(object,  excludeFields[object.getClass().getName()  ]);	  builder.append(excludeFields[object.getClass().getName()    ]);    	non-compiled	[CE]  incompatible  types	73	None	replace
56	[BUG]  [BUGGY]  builder.append(excludeFields[object.getClass().getName()  +  1]);  [CE]  incompatible  types  [FE]          StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(excludeFields[object.getClass().getName()  +  1]);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append(excludeFields[object.getClass().getName()  +  1]);	  builder.append(excludeFields[object.getClass().getName()    ]);    	non-compiled	[CE]  incompatible  types	73	None	replace
57	[BUG]  [BUGGY]  Integer  object  =  clazz.getDeclaredInitialValue().intValue();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Integer  object  =  clazz.getDeclaredInitialValue().intValue();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Integer  object  =  clazz.getDeclaredInitialValue().intValue();	  Integer    object    =    clazz.getDeclaredInitialValue();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	7	None	replace
58	[BUG]  [BUGGY]  Integer  object  =  clazz.getAssignedInitialValue();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Integer  object  =  clazz.getAssignedInitialValue();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Integer  object  =  clazz.getAssignedInitialValue();	  Integer    object    =    clazz.getDeclaredInitialValue();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	7	None	replace
59	[BUG]  [BUGGY]  register(object,  clazz,  exception);  [CE]  cannot  find  symbol  exception  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  register(object,  clazz,  exception);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	register(object,  clazz,  exception);	  register(object,    clazz,    iConstant);    	non-compiled	[CE]  cannot  find  symbol  exception	80	None	replace
60	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  false,  useTransients);  [CE]  no  suitable  method  found  for  setAccessible(String[],boolean,boolean)  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  AccessibleObject.setAccessible(excludeFields,  false,  useTransients);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	AccessibleObject.setAccessible(excludeFields,  false,  useTransients);	  AccessibleObject.setAccessible(excludeFields,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],boolean,boolean)	6	None	replace
61	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  false,  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  AccessibleObject.setAccessible(excludeFields,  false,  fieldValue);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	AccessibleObject.setAccessible(excludeFields,  false,  fieldValue);	  AccessibleObject.setAccessible(excludeFields,    false);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	6	None	replace
62	[BUG]  [BUGGY]  AccessibleObject.setAccessible(object,  false);  [CE]  no  suitable  method  found  for  setAccessible(Object,boolean)  [FE]                        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  AccessibleObject.setAccessible(object,  false);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	AccessibleObject.setAccessible(object,  false);	  AccessibleObject.setAccessible(excludeFields,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Object,boolean)	6	None	replace
63	[BUG]  [BUGGY]  rehashCodeBuilder(builder,  object,  excludeFields);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  rehashCodeBuilder(builder,  object,  excludeFields);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	rehashCodeBuilder(builder,  object,  excludeFields);	  rehashCodeBuilder(builder,    object);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
64	[BUG]  [BUGGY]  rehashCodeBuilder(builder,  object,  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  rehashCodeBuilder(builder,  object,  fieldValue);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	rehashCodeBuilder(builder,  object,  fieldValue);	  rehashCodeBuilder(builder,    object);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	17	None	replace
65	[BUG]  [BUGGY]  rehashCodeBuilder(builder,  object,  null);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  rehashCodeBuilder(builder,  object,  null);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	rehashCodeBuilder(builder,  object,  null);	  rehashCodeBuilder(builder,    object);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
66	[BUG]  [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true,  excludeFields);  [CE]  no  suitable  method  found  for  setAccessible(Object[],boolean,String[])  [FE]        StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true,  excludeFields);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true,  excludeFields);	          Object[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(fields,    true);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Object[],boolean,String[])	53	None	replace
67	[BUG]  [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  true);  [CE]  no  suitable  method  found  for  setAccessible(String[],boolean)  [FE]          StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  true);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  true);	          Object[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(fields,    true);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],boolean)	53	None	replace
68	[BUG]  [BUGGY]  clazz  =  clazz.getDeclaredFields();  [CE]  incompatible  types  [FE]            IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  clazz  =  clazz.getDeclaredFields();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	clazz  =  clazz.getDeclaredFields();	          object    =    clazz.getDeclaredFields();    clazz    =    clazz.getDeclaredFields();    	non-compiled	[CE]  incompatible  types	30	None	replace
69	[BUG]  [BUGGY]  null  =  clazz.getDeclaredFields();  [CE]  unexpected  type  [FE]              IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  null  =  clazz.getDeclaredFields();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	null  =  clazz.getDeclaredFields();	          object    =    clazz.getDeclaredFields();    clazz    =    clazz.getDeclaredFields();    	non-compiled	[CE]  unexpected  type	30	None	replace
70	[BUG]  [BUGGY]  Integer  object  =  clazz.getInterface();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Integer  object  =  clazz.getInterface();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Integer  object  =  clazz.getInterface();	  Integer    object    =    clazz.getSuperclass();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	82	None	replace
71	[BUG]  [BUGGY]  Integer  object  =  clazz.getSuperclassIndex();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Integer  object  =  clazz.getSuperclassIndex();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Integer  object  =  clazz.getSuperclassIndex();	  Integer    object    =    clazz.getSuperclass();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	82	None	replace
72	[BUG]  [BUGGY]  Integer  object  =  clazz.getDeclaredFields();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Integer  object  =  clazz.getDeclaredFields();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Integer  object  =  clazz.getDeclaredFields();	  Integer    object    =    clazz.getSuperclass();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	82	None	replace
73	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaredFields();  objects  =  clazz.getDeclaredFields();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]              IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getDeclaredFields();  objects  =  clazz.getDeclaredFields();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getDeclaredFields();  objects  =  clazz.getDeclaredFields();	          object    =    clazz.getDeclaredFields();    objects    =    clazz.getDeclaredFields();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	31	None	replace
74	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaredSuperclasses();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getDeclaredSuperclasses();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getDeclaredSuperclasses();	  Object    object    =    clazz.getSuperclasses();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	65	None	replace
75	[BUG]  [BUGGY]  Object  object  =  clazz.getSuperclasses(excludeFields);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getSuperclasses(excludeFields);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getSuperclasses(excludeFields);	  Object    object    =    clazz.getSuperclasses();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	65	None	replace
76	[BUG]  [BUGGY]  Object  object  =  clazz.getInterfaces();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getInterfaces();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getInterfaces();	  Object    object    =    clazz.getSuperclasses();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	65	None	replace
77	[BUG]  [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  false);  [CE]  no  suitable  method  found  for  setAccessible(String[],boolean)  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  false);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  false);	  Object[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(fields,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],boolean)	83	None	replace
78	[BUG]  [BUGGY]  rehashCode(excludeFields,  builder);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  rehashCode(excludeFields,  builder);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	rehashCode(excludeFields,  builder);	  rehashCode(excludeFields);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
79	[BUG]  [BUGGY]  rehashCode(object,  excludeFields);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  rehashCode(object,  excludeFields);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	rehashCode(object,  excludeFields);	  rehashCode(excludeFields);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
80	[BUG]  [BUGGY]  rehashCode(builder,  excludeFields);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  rehashCode(builder,  excludeFields);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	rehashCode(builder,  excludeFields);	  rehashCode(excludeFields);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
81	[BUG]  [BUGGY]  rehashCodeBuilder(object,  builder,  excludeFields);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  rehashCodeBuilder(object,  builder,  excludeFields);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	rehashCodeBuilder(object,  builder,  excludeFields);	  rehashCodeBuilder(object,    builder);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
82	[BUG]  [BUGGY]  rehashCodeBuilder(object,  builder,  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  rehashCodeBuilder(object,  builder,  fieldValue);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	rehashCodeBuilder(object,  builder,  fieldValue);	  rehashCodeBuilder(object,    builder);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	16	None	replace
83	[BUG]  [BUGGY]  rehashCodeBuilder(object,  builder,  null);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  rehashCodeBuilder(object,  builder,  null);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	rehashCodeBuilder(object,  builder,  null);	  rehashCodeBuilder(object,    builder);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
84	[BUG]  [BUGGY]  Class  <?>  clazz  =  object  ==  null?  null  :  object.getSuperclass();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Class  <?>  clazz  =  object  ==  null?  null  :  object.getSuperclass();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Class  <?>  clazz  =  object  ==  null?  null  :  object.getSuperclass();	  Class    <?>    clazz    =    object.getSuperclass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	11	None	replace
85	[BUG]  [BUGGY]  Class  <?>  clazz  =  object.getSuperClass();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Class  <?>  clazz  =  object.getSuperClass();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Class  <?>  clazz  =  object.getSuperClass();	  Class    <?>    clazz    =    object.getSuperclass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	11	None	replace
86	[BUG]  [BUGGY]  Class  <?>  clazz  =  object  ==  null?  null  :  object.getRawClass();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Class  <?>  clazz  =  object  ==  null?  null  :  object.getRawClass();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Class  <?>  clazz  =  object  ==  null?  null  :  object.getRawClass();	  Class    <?>    clazz    =    object.getRawClass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	10	None	replace
87	[BUG]  [BUGGY]  Class  <?>  clazz  =  object.getValue();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Class  <?>  clazz  =  object.getValue();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Class  <?>  clazz  =  object.getValue();	  Class    <?>    clazz    =    object.getRawClass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	10	None	replace
88	[BUG]  [BUGGY]  register(object,  builder,  excludeFields,  null);  [CE]  method  register  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  register(object,  builder,  excludeFields,  null);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	register(object,  builder,  excludeFields,  null);	  register(object,    builder,    null);    	non-compiled	[CE]  method  register  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	90	None	replace
89	[BUG]  [BUGGY]  register(object,  builder,  fieldValue,  null);  [CE]  cannot  find  symbol  fieldValue  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  register(object,  builder,  fieldValue,  null);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	register(object,  builder,  fieldValue,  null);	  register(object,    builder,    null);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	90	None	replace
90	[BUG]  [BUGGY]  register(object,  builder,  null,  excludeFields);  [CE]  method  register  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  register(object,  builder,  null,  excludeFields);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	register(object,  builder,  null,  excludeFields);	  register(object,    builder,    null);    	non-compiled	[CE]  method  register  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	90	None	replace
91	[BUG]  [BUGGY]  register(object,  builder,  iConstant,  null);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  register(object,  builder,  iConstant,  null);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	register(object,  builder,  iConstant,  null);	  register(object,    builder,    null);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	90	None	replace
92	[BUG]  [BUGGY]  rehashCode(object,  constructorValue);  [CE]  cannot  find  symbol  constructorValue  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  rehashCode(object,  constructorValue);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	rehashCode(object,  constructorValue);	  rehashCode(object,    constructor);    	non-compiled	[CE]  cannot  find  symbol  constructorValue	33	None	replace
93	[BUG]  [BUGGY]  rehashCode(object,  constructor,  excludeFields);  [CE]  cannot  find  symbol  constructor  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  rehashCode(object,  constructor,  excludeFields);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	rehashCode(object,  constructor,  excludeFields);	  rehashCode(object,    constructor);    	non-compiled	[CE]  cannot  find  symbol  constructor	33	None	replace
94	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  object  =  clazz.getSuperclass();  object  =  clazz.getSuperclass();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	add	object    =    clazz.getSuperclass();    object  =  clazz.getSuperclass();	  	compilable	  [FE]  IllegalArgumentException  	36	4	add
95	[BUG]  [BUGGY]  object  =  clazz.getSuperclass();  object  =  clazz.getSuperclass();  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  object  =  clazz.getSuperclass();  object  =  clazz.getSuperclass();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	object    =    clazz.getSuperclass();    object  =  clazz.getSuperclass();	  	compilable	  [FE]  IllegalArgumentException  	36	4	add
96	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      IllegalArgumentException    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  object  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	add	object    =    clazz.getSuperclass();    clazz  =  clazz.getSuperclass();	  	compilable	  [FE]  NullPointerException  	36	4	add
97	[BUG]  [BUGGY]  object  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  [FE]  NullPointerException  [FE]      IllegalArgumentException    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  object  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	object    =    clazz.getSuperclass();    clazz  =  clazz.getSuperclass();	  	compilable	  [FE]  NullPointerException  	36	4	add
98	[BUG]  [BUGGY]  object  =  clazz.getSuperclass();  Object  =  clazz.getSuperclass();  [CE]  cannot  find  symbol  Object  [FE]        IllegalArgumentException    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  object  =  clazz.getSuperclass();  Object  =  clazz.getSuperclass();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	object    =    clazz.getSuperclass();    Object  =  clazz.getSuperclass();	  	non-compiled	[CE]  cannot  find  symbol  Object	36	None	add
99	[BUG]  [BUGGY]  object  =  clazz.getSuperclass();  Object  object  =  clazz.getSuperclass();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]          IllegalArgumentException    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  object  =  clazz.getSuperclass();  Object  object  =  clazz.getSuperclass();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	object    =    clazz.getSuperclass();    Object  object  =  clazz.getSuperclass();	  	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	36	None	add
100	[BUG]  [BUGGY]  Field[]  fields  =  excludeFields.getDeclaredFields();  [CE]  cannot  find  symbol  [FE]        StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Field[]  fields  =  excludeFields.getDeclaredFields();  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Field[]  fields  =  excludeFields.getDeclaredFields();	  Field[]    fields    =    object.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
101	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  if(excludeFields  ==  null)  {  object  =  clazz.getDeclaredFields();  object  =  clazz.getDeclaredFields();  }  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	add	if(excludeFields  ==  null)  {  object  =  clazz.getDeclaredFields();  object  =  clazz.getDeclaredFields();  }	          object    =    clazz.getDeclaredFields();    object    =    clazz.getDeclaredFields();    	compilable	  [FE]  IllegalArgumentException  	28	4	replace
102	[BUG]  [BUGGY]  if(excludeFields  ==  null)  {  object  =  clazz.getDeclaredFields();  object  =  clazz.getDeclaredFields();  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  if(excludeFields  ==  null)  {  object  =  clazz.getDeclaredFields();  object  =  clazz.getDeclaredFields();  }  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	if(excludeFields  ==  null)  {  object  =  clazz.getDeclaredFields();  object  =  clazz.getDeclaredFields();  }	          object    =    clazz.getDeclaredFields();    object    =    clazz.getDeclaredFields();    	compilable	  [FE]  IllegalArgumentException  	28	4	replace
103	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      IllegalArgumentException    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  if(excludeFields.length  ==  0)  {  object  =  clazz.getDeclaredFields();  object  =  clazz.getDeclaredFields();  }  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	add	if(excludeFields.length  ==  0)  {  object  =  clazz.getDeclaredFields();  object  =  clazz.getDeclaredFields();  }	          object    =    clazz.getDeclaredFields();    object    =    clazz.getDeclaredFields();    	compilable	  [FE]  NullPointerException  	28	4	replace
104	[BUG]  [BUGGY]  if(excludeFields.length  ==  0)  {  object  =  clazz.getDeclaredFields();  object  =  clazz.getDeclaredFields();  }  [FE]  NullPointerException  [FE]      IllegalArgumentException    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  if(excludeFields.length  ==  0)  {  object  =  clazz.getDeclaredFields();  object  =  clazz.getDeclaredFields();  }  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	if(excludeFields.length  ==  0)  {  object  =  clazz.getDeclaredFields();  object  =  clazz.getDeclaredFields();  }	          object    =    clazz.getDeclaredFields();    object    =    clazz.getDeclaredFields();    	compilable	  [FE]  NullPointerException  	28	4	replace
105	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  if(excludeFields  ==  null)  {  object  =  clazz.getDeclaredFields();  object  =  clazz.getDeclaredFields();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	add	if(excludeFields  ==  null)  {  object  =  clazz.getDeclaredFields();  object  =  clazz.getDeclaredFields();  }  else  {  throw  new  IllegalArgumentException( " ");  }	          object    =    clazz.getDeclaredFields();    object    =    clazz.getDeclaredFields();    	compilable	  [FE]  IllegalArgumentException  	28	4	replace
106	[BUG]  [BUGGY]  if(excludeFields  ==  null)  {  object  =  clazz.getDeclaredFields();  object  =  clazz.getDeclaredFields();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  if(excludeFields  ==  null)  {  object  =  clazz.getDeclaredFields();  object  =  clazz.getDeclaredFields();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	if(excludeFields  ==  null)  {  object  =  clazz.getDeclaredFields();  object  =  clazz.getDeclaredFields();  }  else  {  throw  new  IllegalArgumentException( " ");  }	          object    =    clazz.getDeclaredFields();    object    =    clazz.getDeclaredFields();    	compilable	  [FE]  IllegalArgumentException  	28	4	replace
107	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclasses(excludeFields);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Field[]  fields  =  clazz.getSuperclasses(excludeFields);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Field[]  fields  =  clazz.getSuperclasses(excludeFields);	  Field[]    fields    =    clazz.getSuperclasses();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
108	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Field[]  fields  =  clazz.getFields();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Field[]  fields  =  clazz.getFields();	  Field[]    fields    =    clazz.getSuperclasses();    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	13	None	replace
109	[BUG]  [BUGGY]  Field[]  fields  =  object.getSuperclasses();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Field[]  fields  =  object.getSuperclasses();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Field[]  fields  =  object.getSuperclasses();	  Field[]    fields    =    clazz.getSuperclasses();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
110	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append('N');  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	add	builder.append('N');	  builder.append('n');    	compilable	  [FE]  StackOverflowError  	46	4	replace
111	[BUG]  [BUGGY]  builder.append('N');  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append('N');  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append('N');	  builder.append('n');    	compilable	  [FE]  StackOverflowError  	46	4	replace
112	[BUG]  [BUGGY]  rehashCode();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  rehashCode();  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	rehashCode();	  rehashCode(field);    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
113	[BUG]  [BUGGY]  rehashCode(fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  rehashCode(fieldValue);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	rehashCode(fieldValue);	  rehashCode(field);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	87	None	replace
114	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  object  =  clazz.getSimpleName();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	add	object  =  clazz.getSimpleName();	  object    =    clazz.getRawClass();    	compilable	  [FE]  IllegalArgumentException  	38	4	replace
115	[BUG]  [BUGGY]  object  =  clazz.getSimpleName();  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  object  =  clazz.getSimpleName();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	object  =  clazz.getSimpleName();	  object    =    clazz.getRawClass();    	compilable	  [FE]  IllegalArgumentException  	38	4	replace
116	[BUG]  [BUGGY]  object  =  class.getRawClass();  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  object  =  class.getRawClass();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	object  =  class.getRawClass();	  object    =    clazz.getRawClass();    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
117	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(object);    builder.append(object);  builder.append(object);  builder.append(object);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	add	builder.append(object);        builder.append(object);    builder.append(object);  builder.append(object);	  	compilable	  [FE]  StackOverflowError  	54	4	add
118	[BUG]  [BUGGY]  builder.append(object);    builder.append(object);  builder.append(object);  builder.append(object);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(object);    builder.append(object);  builder.append(object);  builder.append(object);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append(object);        builder.append(object);    builder.append(object);  builder.append(object);	  	compilable	  [FE]  StackOverflowError  	54	4	add
119	[BUG]  [BUGGY]  builder.append(object);    builder.append(object);  if(excludeFields!=  null)  {  if(isRegistered(object))  {  return;  }  [CE]  'finally'  without  'try'  [FE]      StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(object);    builder.append(object);  if(excludeFields!=  null)  {  if(isRegistered(object))  {  return;  }  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append(object);        builder.append(object);    if(excludeFields!=  null)  {  if(isRegistered(object))  {  return;  }	  	non-compiled	[CE]  'finally'  without  'try'	54	None	add
120	[BUG]  [BUGGY]  builder.append(object);    builder.append(object);  if(excludeFields  ==  null)  {  if(isRegistered(object))  {  return;  }  [CE]  'finally'  without  'try'  [FE]        StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(object);    builder.append(object);  if(excludeFields  ==  null)  {  if(isRegistered(object))  {  return;  }  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append(object);        builder.append(object);    if(excludeFields  ==  null)  {  if(isRegistered(object))  {  return;  }	  	non-compiled	[CE]  'finally'  without  'try'	54	None	add
121	[BUG]  [BUGGY]  builder.append(object);    builder.append(object);  if(excludeFields!=  null)  {  if(!isRegistered(object))  {  return;  }  [CE]  'finally'  without  'try'  [FE]          StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(object);    builder.append(object);  if(excludeFields!=  null)  {  if(!isRegistered(object))  {  return;  }  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append(object);        builder.append(object);    if(excludeFields!=  null)  {  if(!isRegistered(object))  {  return;  }	  	non-compiled	[CE]  'finally'  without  'try'	54	None	add
122	[BUG]  [BUGGY]  builder.append(object);    builder.append(object);  if(excludeFields!=  null)  {  if(!isRegistered(object))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'finally'  without  'try'  [FE]            StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(object);    builder.append(object);  if(excludeFields!=  null)  {  if(!isRegistered(object))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append(object);        builder.append(object);    if(excludeFields!=  null)  {  if(!isRegistered(object))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  'finally'  without  'try'	54	None	add
123	[BUG]  [BUGGY]  Integer  object  =  clazz.getDeclaredInObject(excludeFields);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Integer  object  =  clazz.getDeclaredInObject(excludeFields);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Integer  object  =  clazz.getDeclaredInObject(excludeFields);	  Integer    object    =    clazz.getDeclaredInObject();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	95	None	replace
124	[BUG]  [BUGGY]  Integer  object  =  clazz.getDeclaredObject();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Integer  object  =  clazz.getDeclaredObject();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Integer  object  =  clazz.getDeclaredObject();	  Integer    object    =    clazz.getDeclaredInObject();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	95	None	replace
125	[BUG]  [BUGGY]  Integer  object  =  clazz.getAssignedInObject();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Integer  object  =  clazz.getAssignedInObject();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Integer  object  =  clazz.getAssignedInObject();	  Integer    object    =    clazz.getDeclaredInObject();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	95	None	replace
126	[BUG]  [BUGGY]  Field[]  fields  =  excludeFields.getSuperclassFields();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Field[]  fields  =  excludeFields.getSuperclassFields();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Field[]  fields  =  excludeFields.getSuperclassFields();	  Field[]    fields    =    clazz.getSuperclassFields();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
127	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclassFields(excludeFields);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Field[]  fields  =  clazz.getSuperclassFields(excludeFields);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Field[]  fields  =  clazz.getSuperclassFields(excludeFields);	  Field[]    fields    =    clazz.getSuperclassFields();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
128	[BUG]  [BUGGY]  Field[]  fields  =  object.getSuperclassFields();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Field[]  fields  =  object.getSuperclassFields();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Field[]  fields  =  object.getSuperclassFields();	  Field[]    fields    =    clazz.getSuperclassFields();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
129	[BUG]  [BUGGY]  Object  object  =  clazz.getInterface();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getInterface();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getInterface();	  Object    object    =    clazz.getSuperclass();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	2	None	replace
130	[BUG]  [BUGGY]  register(object,  builder,  excludeFields,  useTransients);  [CE]  method  register  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  register(object,  builder,  excludeFields,  useTransients);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	register(object,  builder,  excludeFields,  useTransients);	  register(object,    builder,    excludeFields);    	non-compiled	[CE]  method  register  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	60	None	replace
131	[BUG]  [BUGGY]  register(object,  builder,  excludeFields,  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  register(object,  builder,  excludeFields,  fieldValue);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	register(object,  builder,  excludeFields,  fieldValue);	  register(object,    builder,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	60	None	replace
132	[BUG]  [BUGGY]  register(object,  builder,  excludeFields,  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  register(object,  builder,  excludeFields,  iConstant);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	register(object,  builder,  excludeFields,  iConstant);	  register(object,    builder,    excludeFields);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	60	None	replace
133	[BUG]  [BUGGY]  register(object,  builder,  fieldValue,  excludeFields);  [CE]  cannot  find  symbol  fieldValue  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  register(object,  builder,  fieldValue,  excludeFields);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	register(object,  builder,  fieldValue,  excludeFields);	  register(object,    builder,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	60	None	replace
134	[BUG]  [BUGGY]  register(object,  builder,  clazz,  excludeFields);  [CE]  method  register  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  register(object,  builder,  clazz,  excludeFields);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	register(object,  builder,  clazz,  excludeFields);	  register(object,    builder,    clazz);    	non-compiled	[CE]  method  register  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	21	None	replace
135	[BUG]  [BUGGY]  register(object,  builder,  clazz,  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  register(object,  builder,  clazz,  iConstant);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	register(object,  builder,  clazz,  iConstant);	  register(object,    builder,    clazz);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	21	None	replace
136	[BUG]  [BUGGY]  register(object,  builder,  clazz,  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  register(object,  builder,  clazz,  fieldValue);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	register(object,  builder,  clazz,  fieldValue);	  register(object,    builder,    clazz);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	21	None	replace
137	[BUG]  [BUGGY]  Class  <?>  clazz  =  object!=  null?  null  :  object.getClass();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Class  <?>  clazz  =  object!=  null?  null  :  object.getClass();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Class  <?>  clazz  =  object!=  null?  null  :  object.getClass();	  Class    <?>    clazz    =    object    ==    null?    null    :    object.getClass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	64	None	replace
138	[BUG]  [BUGGY]  Class  <?>  object  =  object  ==  null?  null  :  object.getClass();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Class  <?>  object  =  object  ==  null?  null  :  object.getClass();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Class  <?>  object  =  object  ==  null?  null  :  object.getClass();	  Class    <?>    clazz    =    object    ==    null?    null    :    object.getClass();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	64	None	replace
139	[BUG]  [BUGGY]  Integer  object  =  clazz.getReturnType().intValue();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Integer  object  =  clazz.getReturnType().intValue();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Integer  object  =  clazz.getReturnType().intValue();	  Integer    object    =    clazz.getReturnType();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	8	None	replace
140	[BUG]  [BUGGY]  Integer  object  =  clazz.getRawType();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Integer  object  =  clazz.getRawType();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Integer  object  =  clazz.getRawType();	  Integer    object    =    clazz.getReturnType();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	8	None	replace
141	[BUG]  [BUGGY]  Integer  object  =  clazz.getImplicitReturnType();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Integer  object  =  clazz.getImplicitReturnType();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Integer  object  =  clazz.getImplicitReturnType();	  Integer    object    =    clazz.getReturnType();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	8	None	replace
142	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  false,  useTransients);  [CE]  no  suitable  method  found  for  setAccessible(String[],boolean,boolean)  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  false,  useTransients);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  false,  useTransients);	  Field[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(excludeFields,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],boolean,boolean)	5	None	replace
143	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  useTransients,  false);  [CE]  no  suitable  method  found  for  setAccessible(String[],boolean,boolean)  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  useTransients,  false);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  useTransients,  false);	  Field[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(excludeFields,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],boolean,boolean)	5	None	replace
144	[BUG]  [BUGGY]  Integer  object  =  clazz.getReturnInitialValue();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Integer  object  =  clazz.getReturnInitialValue();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Integer  object  =  clazz.getReturnInitialValue();	  Integer    object    =    clazz.getSimpleInitialValue();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	9	None	replace
145	[BUG]  [BUGGY]  builder.append(object);  clazz.setAccessible(excludeFields,  true);  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(object);  clazz.setAccessible(excludeFields,  true);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append(object);  clazz.setAccessible(excludeFields,  true);	  builder.append(object);    clazz.setAccessible(fields,    true);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
146	[BUG]  [BUGGY]  builder.append(fieldValue);  clazz.setAccessible(fields,  true);  [CE]  cannot  find  symbol  fieldValue  [FE]              StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(fieldValue);  clazz.setAccessible(fields,  true);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append(fieldValue);  clazz.setAccessible(fields,  true);	  builder.append(object);    clazz.setAccessible(fields,    true);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	78	None	replace
147	[BUG]  [BUGGY]  builder.append(object);  clazz.setAccessible(fieldValue,  true);  [CE]  cannot  find  symbol  fieldValue  [FE]                StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(object);  clazz.setAccessible(fieldValue,  true);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append(object);  clazz.setAccessible(fieldValue,  true);	  builder.append(object);    clazz.setAccessible(fields,    true);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	78	None	replace
148	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(excludeFields[0]);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	add	builder.append(excludeFields[0]);	  builder.append(object);    Object    object    =    clazz.getDeclaredFields();    builder.append(object);    	compilable	  [FE]  NullPointerException  	97	4	replace
149	[BUG]  [BUGGY]  builder.append(excludeFields[0]);  [FE]  NullPointerException  [FE]          StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(excludeFields[0]);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append(excludeFields[0]);	  builder.append(object);    Object    object    =    clazz.getDeclaredFields();    builder.append(object);    	compilable	  [FE]  NullPointerException  	97	4	replace
150	[BUG]  [BUGGY]  builder.append(excludeFields[0].getName());  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(excludeFields[0].getName());  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append(excludeFields[0].getName());	  builder.append(object);    Object    object    =    clazz.getDeclaredFields();    builder.append(object);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
151	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(excludeFields[0].toString());  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	add	builder.append(excludeFields[0].toString());	  builder.append(object);    Object    object    =    clazz.getDeclaredFields();    builder.append(object);    	compilable	  [FE]  NullPointerException  	97	4	replace
152	[BUG]  [BUGGY]  builder.append(excludeFields[0].toString());  [FE]  NullPointerException  [FE]              StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(excludeFields[0].toString());  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append(excludeFields[0].toString());	  builder.append(object);    Object    object    =    clazz.getDeclaredFields();    builder.append(object);    	compilable	  [FE]  NullPointerException  	97	4	replace
153	[BUG]  [BUGGY]  register(object,  builder,  value);  [CE]  cannot  find  symbol  value  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  register(object,  builder,  value);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	register(object,  builder,  value);	  register(object,    builder,    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  value	62	None	replace
154	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  builder);  [CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  builder);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  builder);	  Field[]    fields    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;	15	None	replace
155	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  useTransients);  [CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  useTransients);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  useTransients);	  Field[]    fields    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;	15	None	replace
156	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  object);  [CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  object);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  object);	  Field[]    fields    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;	15	None	replace
157	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(fields,  excludeFields);  [CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(fields,  excludeFields);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Field[]  fields  =  clazz.getDeclaredFields(fields,  excludeFields);	  Field[]    fields    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;	15	None	replace
158	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append('$').append(object);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	add	builder.append('$').append(object);	  builder.append('$');    	compilable	  [FE]  StackOverflowError  	48	4	replace
159	[BUG]  [BUGGY]  builder.append('$').append(object);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append('$').append(object);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append('$').append(object);	  builder.append('$');    	compilable	  [FE]  StackOverflowError  	48	4	replace
160	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append('$').append(excludeFields[0].toString());  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	add	builder.append('$').append(excludeFields[0].toString());	  builder.append('$');    	compilable	  [FE]  NullPointerException  	48	4	replace
161	[BUG]  [BUGGY]  builder.append('$').append(excludeFields[0].toString());  [FE]  NullPointerException  [FE]      StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append('$').append(excludeFields[0].toString());  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append('$').append(excludeFields[0].toString());	  builder.append('$');    	compilable	  [FE]  NullPointerException  	48	4	replace
162	[BUG]  [BUGGY]  builder.append('$').append(excludeFields[iConstant]);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]        StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append('$').append(excludeFields[iConstant]);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append('$').append(excludeFields[iConstant]);	  builder.append('$');    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	48	None	replace
163	[BUG]  [BUGGY]  object  =  clazz.getDeclaredObject();  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  object  =  clazz.getDeclaredObject();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	object  =  clazz.getDeclaredObject();	  object    =    clazz.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
164	[BUG]  [BUGGY]  object  =  clazz.getReferenceName();  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  object  =  clazz.getReferenceName();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	object  =  clazz.getReferenceName();	  object    =    clazz.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
165	[BUG]  [BUGGY]  Class  <?>  clazz  =  object.getRawType();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Class  <?>  clazz  =  object.getRawType();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Class  <?>  clazz  =  object.getRawType();	  Class    <?>    clazz    =    object.getReturnType();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	12	None	replace
166	[BUG]  [BUGGY]  String[]  fields  =  clazz.getSuperclasses();  [CE]  cannot  find  symbol  [FE]        StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  String[]  fields  =  clazz.getSuperclasses();  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	String[]  fields  =  clazz.getSuperclasses();	  String[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
167	[BUG]  [BUGGY]  String[]  fields  =  clazz.getDeclaredFields(excludeFields);  [CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  String[]  fields  =  clazz.getDeclaredFields(excludeFields);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	String[]  fields  =  clazz.getDeclaredFields(excludeFields);	  String[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;	34	None	replace
168	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  builder.append(object);  }  [CE]  cannot  find  symbol  fieldValue  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(object);  }  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	if(fieldValue  ==  null)  {  builder.append(object);  }	  builder.append(object);    builder.append(object);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	55	None	replace
169	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(object);  }  [CE]  cannot  find  symbol  fieldValue  [FE]      StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  if(fieldValue!=  null)  {  builder.append(object);  }  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	if(fieldValue!=  null)  {  builder.append(object);  }	  builder.append(object);    builder.append(object);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	55	None	replace
170	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  builder.append(object);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  fieldValue  [FE]        StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(object);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	if(fieldValue  ==  null)  {  builder.append(object);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(object);    builder.append(object);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	55	None	replace
171	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  builder.append(object);  }  else  {  builder.append( ", ");  }  [CE]  cannot  find  symbol  fieldValue  [FE]          StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(object);  }  else  {  builder.append( ", ");  }  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	if(fieldValue  ==  null)  {  builder.append(object);  }  else  {  builder.append( ", ");  }	  builder.append(object);    builder.append(object);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	55	None	replace
172	[BUG]  [BUGGY]  Object[]  fields  =  object.getDeclaredFields();  Class  <?>  clazz  =  clazz.getClass();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object[]  fields  =  object.getDeclaredFields();  Class  <?>  clazz  =  clazz.getClass();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object[]  fields  =  object.getDeclaredFields();  Class  <?>  clazz  =  clazz.getClass();	  Object[]    fields    =    clazz.getDeclaredFields();    Class    <?>    clazz    =    object.getClass();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
173	[BUG]  [BUGGY]  Object  =  clazz.getDeclaredFields();  [CE]  cannot  find  symbol  Object  [FE]        IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  =  clazz.getDeclaredFields();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  =  clazz.getDeclaredFields();	          object    =    clazz.getDeclaredFields();    Object    =    clazz.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol  Object	81	None	replace
174	[BUG]  [BUGGY]  register(object,  clazz,  excludeFields,  builder);  [CE]  method  register  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  register(object,  clazz,  excludeFields,  builder);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	register(object,  clazz,  excludeFields,  builder);	  register(object,    clazz,    excludeFields);    	non-compiled	[CE]  method  register  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	79	None	replace
175	[BUG]  [BUGGY]  register(excludeFields,  clazz,  object);  [CE]  method  register  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  register(excludeFields,  clazz,  object);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	register(excludeFields,  clazz,  object);	  register(object,    clazz,    excludeFields);    	non-compiled	[CE]  method  register  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	79	None	replace
176	[BUG]  [BUGGY]  register(object,  constructor,  clazz,  excludeFields);  [CE]  cannot  find  symbol  constructor  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  register(object,  constructor,  clazz,  excludeFields);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	register(object,  constructor,  clazz,  excludeFields);	  register(object,    clazz,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol  constructor	79	None	replace
177	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append( ",n ");  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	add	builder.append( ",n ");	  builder.append(   ",   ");    	compilable	  [FE]  StackOverflowError  	85	4	replace
178	[BUG]  [BUGGY]  builder.append( ",n ");  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append( ",n ");  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append( ",n ");	  builder.append(   ",   ");    	compilable	  [FE]  StackOverflowError  	85	4	replace
179	[BUG]  [BUGGY]  rehashCodeBuilder(builder,  excludeFields);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  rehashCodeBuilder(builder,  excludeFields);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	rehashCodeBuilder(builder,  excludeFields);	  rehashCodeBuilder(builder);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
180	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]          object    =    clazz.getDeclaredFields();    object  =  clazz.getDeclaredFields();  object  =  clazz.getDeclaredFields();  object  =  clazz.getDeclaredFields();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	add	                object        =        clazz.getDeclaredFields();        object    =    clazz.getDeclaredFields();    object  =  clazz.getDeclaredFields();  object  =  clazz.getDeclaredFields();	  	compilable	  [FE]  IllegalArgumentException  	27	4	add
181	[BUG]  [BUGGY]          object    =    clazz.getDeclaredFields();    object  =  clazz.getDeclaredFields();  object  =  clazz.getDeclaredFields();  object  =  clazz.getDeclaredFields();  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]          object    =    clazz.getDeclaredFields();    object  =  clazz.getDeclaredFields();  object  =  clazz.getDeclaredFields();  object  =  clazz.getDeclaredFields();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	                object        =        clazz.getDeclaredFields();        object    =    clazz.getDeclaredFields();    object  =  clazz.getDeclaredFields();  object  =  clazz.getDeclaredFields();	  	compilable	  [FE]  IllegalArgumentException  	27	4	add
182	[BUG]  [BUGGY]          object    =    clazz.getDeclaredFields();    object  =  clazz.getDeclaredFields();  Object  object  =  clazz.getDeclaredFields();  object  =  clazz.getDeclaredFields();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]      IllegalArgumentException    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]          object    =    clazz.getDeclaredFields();    object  =  clazz.getDeclaredFields();  Object  object  =  clazz.getDeclaredFields();  object  =  clazz.getDeclaredFields();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	                object        =        clazz.getDeclaredFields();        object    =    clazz.getDeclaredFields();    Object  object  =  clazz.getDeclaredFields();  object  =  clazz.getDeclaredFields();	  	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	27	None	add
183	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]          object    =    clazz.getDeclaredFields();    object  =  clazz.getDeclaredFields();  if(excludeFields  ==  null)  {  object  =  clazz.getDeclaredFields();  object  =  clazz.getDeclaredFields();  }  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	add	                object        =        clazz.getDeclaredFields();        object    =    clazz.getDeclaredFields();    if(excludeFields  ==  null)  {  object  =  clazz.getDeclaredFields();  object  =  clazz.getDeclaredFields();  }	  	compilable	  [FE]  IllegalArgumentException  	27	4	add
184	[BUG]  [BUGGY]          object    =    clazz.getDeclaredFields();    object  =  clazz.getDeclaredFields();  if(excludeFields  ==  null)  {  object  =  clazz.getDeclaredFields();  object  =  clazz.getDeclaredFields();  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]          object    =    clazz.getDeclaredFields();    object  =  clazz.getDeclaredFields();  if(excludeFields  ==  null)  {  object  =  clazz.getDeclaredFields();  object  =  clazz.getDeclaredFields();  }  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	                object        =        clazz.getDeclaredFields();        object    =    clazz.getDeclaredFields();    if(excludeFields  ==  null)  {  object  =  clazz.getDeclaredFields();  object  =  clazz.getDeclaredFields();  }	  	compilable	  [FE]  IllegalArgumentException  	27	4	add
185	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaredField(fields,  true);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getDeclaredField(fields,  true);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getDeclaredField(fields,  true);	  Object    object    =    clazz.getDeclaredField(fields);    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	42	None	replace
186	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaredField(fields,  fieldValue);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getDeclaredField(fields,  fieldValue);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getDeclaredField(fields,  fieldValue);	  Object    object    =    clazz.getDeclaredField(fields);    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	42	None	replace
187	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append('$');  builder.append('$');  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	add	builder.append('$');    builder.append('$');	  	compilable	  [FE]  AssertionFailedError  	47	4	add
188	[BUG]  [BUGGY]  builder.append('$');  builder.append('$');  [FE]  AssertionFailedError  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append('$');  builder.append('$');  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append('$');    builder.append('$');	  	compilable	  [FE]  AssertionFailedError  	47	4	add
189	[BUG]  [BUGGY]  builder.append('$');  Object[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  [CE]  no  suitable  method  found  for  setAccessible(Object[],boolean)  [FE]      StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append('$');  Object[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append('$');    Object[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);	  	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Object[],boolean)	47	None	add
190	[BUG]  [BUGGY]  builder.append('$');  String[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  [CE]  incompatible  types  [FE]        StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append('$');  String[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append('$');    String[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);	  	non-compiled	[CE]  incompatible  types	47	None	add
191	[BUG]  [BUGGY]  builder.append('$');  Object[]  fields  =  clazz.getDeclaredFields();  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]          StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append('$');  Object[]  fields  =  clazz.getDeclaredFields();  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append('$');    Object[]  fields  =  clazz.getDeclaredFields();	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	47	None	add
192	[BUG]  [BUGGY]  builder.append('$');  String[]  fields  =  clazz.getDeclaredFields();  [CE]  incompatible  types  [FE]            StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append('$');  String[]  fields  =  clazz.getDeclaredFields();  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append('$');    String[]  fields  =  clazz.getDeclaredFields();	  	non-compiled	[CE]  incompatible  types	47	None	add
193	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaredField(fields,  useTransients);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getDeclaredField(fields,  useTransients);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getDeclaredField(fields,  useTransients);	  Object    object    =    clazz.getDeclaredField(excludeFields,    useTransients);    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	41	None	replace
194	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaredField(useTransients,  excludeFields);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getDeclaredField(useTransients,  excludeFields);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getDeclaredField(useTransients,  excludeFields);	  Object    object    =    clazz.getDeclaredField(excludeFields,    useTransients);    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	41	None	replace
195	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaredField(field,  useTransients);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getDeclaredField(field,  useTransients);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getDeclaredField(field,  useTransients);	  Object    object    =    clazz.getDeclaredField(excludeFields,    useTransients);    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	41	None	replace
196	[BUG]  [BUGGY]  Class  <?>  clazz  =  getRawClass();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]        StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Class  <?>  clazz  =  getRawClass();  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Class  <?>  clazz  =  getRawClass();	          Class    <?>    clazz    =    getClass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	68	None	replace
197	[BUG]  [BUGGY]  Class  <?>  clazz  =  object;  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]          StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Class  <?>  clazz  =  object;  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Class  <?>  clazz  =  object;	          Class    <?>    clazz    =    getClass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	68	None	replace
198	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaredField(field,  excludeFields);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getDeclaredField(field,  excludeFields);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getDeclaredField(field,  excludeFields);	  Object    object    =    clazz.getDeclaredField(excludeFields,    field);    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	43	None	replace
199	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaredField(fields,  excludeFields);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getDeclaredField(fields,  excludeFields);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getDeclaredField(fields,  excludeFields);	  Object    object    =    clazz.getDeclaredField(excludeFields,    field);    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	43	None	replace
200	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaredField(fieldValue,  excludeFields);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getDeclaredField(fieldValue,  excludeFields);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getDeclaredField(fieldValue,  excludeFields);	  Object    object    =    clazz.getDeclaredField(excludeFields,    field);    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	43	None	replace
201	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(   ",   ");  builder.append( ",   ");  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	add	builder.append(   ",   ");    builder.append( ",   ");	  	compilable	  [FE]  AssertionFailedError  	84	4	add
202	[BUG]  [BUGGY]  builder.append(   ",   ");  builder.append( ",   ");  [FE]  AssertionFailedError  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(   ",   ");  builder.append( ",   ");  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append(   ",   ");    builder.append( ",   ");	  	compilable	  [FE]  AssertionFailedError  	84	4	add
203	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(   ",   ");  builder.append( ".,   ");  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	add	builder.append(   ",   ");    builder.append( ".,   ");	  	compilable	  [FE]  AssertionFailedError  	84	4	add
204	[BUG]  [BUGGY]  builder.append(   ",   ");  builder.append( ".,   ");  [FE]  AssertionFailedError  [FE]      StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(   ",   ");  builder.append( ".,   ");  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append(   ",   ");    builder.append( ".,   ");	  	compilable	  [FE]  AssertionFailedError  	84	4	add
205	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  true,  useTransients);  [CE]  no  suitable  method  found  for  setAccessible(String[],boolean,boolean)  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  true,  useTransients);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  true,  useTransients);	  Field[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(excludeFields,    true);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],boolean,boolean)	26	None	replace
206	[BUG]  [BUGGY]  builder.append(objectValue);  [CE]  cannot  find  symbol  objectValue  [FE]        StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(objectValue);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append(objectValue);	  builder.append(fieldValue);    	non-compiled	[CE]  cannot  find  symbol  objectValue	44	None	replace
207	[BUG]  [BUGGY]  rehashCode(object,  builder,  excludeFields);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  rehashCode(object,  builder,  excludeFields);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	rehashCode(object,  builder,  excludeFields);	  rehashCode(object,    builder);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
208	[BUG]  [BUGGY]  rehashCode(builder,  object);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  rehashCode(builder,  object);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	rehashCode(builder,  object);	  rehashCode(object,    builder);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
209	[BUG]  [BUGGY]  rehashCode(object,  builder,  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  rehashCode(object,  builder,  fieldValue);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	rehashCode(object,  builder,  fieldValue);	  rehashCode(object,    builder);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	32	None	replace
210	[BUG]  [BUGGY]  rehashCode(object,  builder,  null);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  rehashCode(object,  builder,  null);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	rehashCode(object,  builder,  null);	  rehashCode(object,    builder);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
211	[BUG]  [BUGGY]  if(object  instanceof  Accessible)  {  Class  <?>  clazz  =(Class  <?>)object;  builder.append(clazz.getDeclaredFields());  }  else  {  throw  new  IllegalAccessException( " ");  }  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  if(object  instanceof  Accessible)  {  Class  <?>  clazz  =(Class  <?>)object;  builder.append(clazz.getDeclaredFields());  }  else  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	if(object  instanceof  Accessible)  {  Class  <?>  clazz  =(Class  <?>)object;  builder.append(clazz.getDeclaredFields());  }  else  {  throw  new  IllegalAccessException( " ");  }	  builder.append(object);    if(object    instanceof    Accessible)    {    Class    <?>    clazz    =(Class    <?>)object;    builder.append(clazz.getDeclaredFields());    }    else    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
212	[BUG]  [BUGGY]  if(object  instanceof  Accessible)  {  Class  <?>  clazz  =(Class  <?>)object;  builder.append(clazz.getDeclaredFields());  }  [CE]  cannot  find  symbol  [FE]              StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  if(object  instanceof  Accessible)  {  Class  <?>  clazz  =(Class  <?>)object;  builder.append(clazz.getDeclaredFields());  }  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	if(object  instanceof  Accessible)  {  Class  <?>  clazz  =(Class  <?>)object;  builder.append(clazz.getDeclaredFields());  }	  builder.append(object);    if(object    instanceof    Accessible)    {    Class    <?>    clazz    =(Class    <?>)object;    builder.append(clazz.getDeclaredFields());    }    else    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
213	[BUG]  [BUGGY]  rehashCode(object,  clazz,  builder);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  rehashCode(object,  clazz,  builder);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	rehashCode(object,  clazz,  builder);	  rehashCode(object,    clazz);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
214	[BUG]  [BUGGY]  rehashCode(object,  clazz,  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  rehashCode(object,  clazz,  iConstant);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	rehashCode(object,  clazz,  iConstant);	  rehashCode(object,    clazz);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	66	None	replace
215	[BUG]  [BUGGY]  rehashCode(object,  clazz,  constructor);  [CE]  cannot  find  symbol  constructor  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  rehashCode(object,  clazz,  constructor);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	rehashCode(object,  clazz,  constructor);	  rehashCode(object,    clazz);    	non-compiled	[CE]  cannot  find  symbol  constructor	66	None	replace
216	[BUG]  [BUGGY]  Object  object  =  builder.getDeclaredField(excludeFields,  clazz);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  builder.getDeclaredField(excludeFields,  clazz);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  builder.getDeclaredField(excludeFields,  clazz);	  Object    object    =    clazz.getDeclaredField(excludeFields,    builder);    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	40	None	replace
217	[BUG]  [BUGGY]  Object  object  =  builder.getDeclaredField(excludeFields);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  builder.getDeclaredField(excludeFields);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  builder.getDeclaredField(excludeFields);	  Object    object    =    clazz.getDeclaredField(excludeFields,    builder);    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	40	None	replace
218	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaredField(builder,  excludeFields);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getDeclaredField(builder,  excludeFields);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getDeclaredField(builder,  excludeFields);	  Object    object    =    clazz.getDeclaredField(excludeFields,    builder);    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	40	None	replace
219	[BUG]  [BUGGY]  Object  object  =  constructer.getDeclaredField(excludeFields,  builder);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  constructer.getDeclaredField(excludeFields,  builder);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  constructer.getDeclaredField(excludeFields,  builder);	  Object    object    =    clazz.getDeclaredField(excludeFields,    builder);    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	40	None	replace
220	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append('n');  builder.append('n');  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	add	builder.append('n');    builder.append('n');	  	compilable	  [FE]  AssertionFailedError  	45	4	add
221	[BUG]  [BUGGY]  builder.append('n');  builder.append('n');  [FE]  AssertionFailedError  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append('n');  builder.append('n');  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append('n');    builder.append('n');	  	compilable	  [FE]  AssertionFailedError  	45	4	add
222	[BUG]  [BUGGY]  builder.append('n');  Object[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  [CE]  no  suitable  method  found  for  setAccessible(Object[],boolean)  [FE]      StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append('n');  Object[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append('n');    Object[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);	  	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Object[],boolean)	45	None	add
223	[BUG]  [BUGGY]  builder.append('n');  String[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  [CE]  incompatible  types  [FE]        StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append('n');  String[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append('n');    String[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);	  	non-compiled	[CE]  incompatible  types	45	None	add
224	[BUG]  [BUGGY]  builder.append('n');  Object[]  fields  =  clazz.getDeclaredFields();  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]          StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append('n');  Object[]  fields  =  clazz.getDeclaredFields();  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append('n');    Object[]  fields  =  clazz.getDeclaredFields();	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	45	None	add
225	[BUG]  [BUGGY]  builder.append('n');  Object[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  false);  [CE]  no  suitable  method  found  for  setAccessible(Object[],boolean)  [FE]            StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append('n');  Object[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  false);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append('n');    Object[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  false);	  	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Object[],boolean)	45	None	add
226	[BUG]  [BUGGY]  builder.append(object);  clazz.setAccessible(excludeFields);  [CE]  cannot  find  symbol  [FE]        StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(object);  clazz.setAccessible(excludeFields);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append(object);  clazz.setAccessible(excludeFields);	  builder.append(object);    clazz.setAccessible(useTransients);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
227	[BUG]  [BUGGY]  builder.append(object);  clazz.setAccessible(useTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]          StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(object);  clazz.setAccessible(useTransients,  excludeFields);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append(object);  clazz.setAccessible(useTransients,  excludeFields);	  builder.append(object);    clazz.setAccessible(useTransients);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
228	[BUG]  [BUGGY]  clazz.setAccessible(useTransients);  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  clazz.setAccessible(useTransients);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	clazz.setAccessible(useTransients);	  builder.append(object);    clazz.setAccessible(useTransients);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
229	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getSuperClasses();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Class  <?>  object  =  clazz.getSuperClasses();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Class  <?>  object  =  clazz.getSuperClasses();	  Class    <?>    object    =    clazz.getSuperclasses();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	74	None	replace
230	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getSuperclasses(excludeFields);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Class  <?>  object  =  clazz.getSuperclasses(excludeFields);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Class  <?>  object  =  clazz.getSuperclasses(excludeFields);	  Class    <?>    object    =    clazz.getSuperclasses();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	74	None	replace
231	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getDeclaredSuperclasses();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Class  <?>  object  =  clazz.getDeclaredSuperclasses();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Class  <?>  object  =  clazz.getDeclaredSuperclasses();	  Class    <?>    object    =    clazz.getSuperclasses();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	74	None	replace
232	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaredField(field,  builder);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getDeclaredField(field,  builder);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getDeclaredField(field,  builder);	  Object    object    =    clazz.getDeclaredField(field);    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	93	None	replace
233	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaredField(fieldValue);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getDeclaredField(fieldValue);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getDeclaredField(fieldValue);	  Object    object    =    clazz.getDeclaredField(field);    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	93	None	replace
234	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaredField(field,  true);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getDeclaredField(field,  true);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getDeclaredField(field,  true);	  Object    object    =    clazz.getDeclaredField(field);    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	93	None	replace
235	[BUG]  [BUGGY]  if(object  instanceof  Accessible)  {  Class  <?>  clazz  =(Class  <?>)object;  builder.append(clazz.getDeclaredFields());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]              StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  if(object  instanceof  Accessible)  {  Class  <?>  clazz  =(Class  <?>)object;  builder.append(clazz.getDeclaredFields());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	if(object  instanceof  Accessible)  {  Class  <?>  clazz  =(Class  <?>)object;  builder.append(clazz.getDeclaredFields());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(object);    if(object    instanceof    Accessible)    {    Class    <?>    clazz    =(Class    <?>)object;    builder.append(clazz.getDeclaredFields());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
236	[BUG]  [BUGGY]  if(object  instanceof  Accessible)  {  Class  <?>  clazz  =(Class  <?>)object;  builder.append(clazz.getDeclaredFields());  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  cannot  find  symbol  [FE]                StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  if(object  instanceof  Accessible)  {  Class  <?>  clazz  =(Class  <?>)object;  builder.append(clazz.getDeclaredFields());  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	if(object  instanceof  Accessible)  {  Class  <?>  clazz  =(Class  <?>)object;  builder.append(clazz.getDeclaredFields());  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  builder.append(object);    if(object    instanceof    Accessible)    {    Class    <?>    clazz    =(Class    <?>)object;    builder.append(clazz.getDeclaredFields());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
237	[BUG]  [BUGGY]  rehashCode(object,  constructors);  [CE]  cannot  find  symbol  constructors  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  rehashCode(object,  constructors);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	rehashCode(object,  constructors);	  rehashCode(object,    constructor);    	non-compiled	[CE]  cannot  find  symbol  constructors	33	None	replace
238	[BUG]  [BUGGY]  registerObject(object,  builder,  clazz);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  registerObject(object,  builder,  clazz);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	registerObject(object,  builder,  clazz);	  register(object,    clazz,    builder);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
239	[BUG]  [BUGGY]  AccessibleObject.setAccessible(exclusionFields,  true);  [CE]  cannot  find  symbol  exclusionFields  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  AccessibleObject.setAccessible(exclusionFields,  true);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	AccessibleObject.setAccessible(exclusionFields,  true);	  AccessibleObject.setAccessible(fields,    true);    	non-compiled	[CE]  cannot  find  symbol  exclusionFields	25	None	replace
240	[BUG]  [BUGGY]  Class  <?>  clazz  =  clazz.getDeclaredFields();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]            IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Class  <?>  clazz  =  clazz.getDeclaredFields();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Class  <?>  clazz  =  clazz.getDeclaredFields();	          object    =    clazz.getDeclaredFields();    clazz    =    clazz.getDeclaredFields();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	30	None	replace
241	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append('n');  clazz.getDeclaredFields();  builder.append('n');  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	add	builder.append('n');    clazz.getDeclaredFields();  builder.append('n');	  	compilable	  [FE]  AssertionFailedError  	45	4	add
242	[BUG]  [BUGGY]  builder.append('n');  clazz.getDeclaredFields();  builder.append('n');  [FE]  AssertionFailedError  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append('n');  clazz.getDeclaredFields();  builder.append('n');  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append('n');    clazz.getDeclaredFields();  builder.append('n');	  	compilable	  [FE]  AssertionFailedError  	45	4	add
243	[BUG]  [BUGGY]  builder.append('n');  builder.append('n');  clazz.setAccessible(excludeFields,  true);  [CE]  cannot  find  symbol  [FE]      StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append('n');  builder.append('n');  clazz.setAccessible(excludeFields,  true);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append('n');    builder.append('n');  clazz.setAccessible(excludeFields,  true);	  	non-compiled	[CE]  cannot  find  symbol	45	None	add
244	[BUG]  [BUGGY]  builder.append('n');  clazz.setAccessible(useTransients);  builder.append('n');  [CE]  cannot  find  symbol  [FE]        StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append('n');  clazz.setAccessible(useTransients);  builder.append('n');  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append('n');    clazz.setAccessible(useTransients);  builder.append('n');	  	non-compiled	[CE]  cannot  find  symbol	45	None	add
245	[BUG]  [BUGGY]  builder.append('n');  builder.append('n');  clazz.setAccessible(excludeFields,  false);  [CE]  cannot  find  symbol  [FE]          StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append('n');  builder.append('n');  clazz.setAccessible(excludeFields,  false);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append('n');    builder.append('n');  clazz.setAccessible(excludeFields,  false);	  	non-compiled	[CE]  cannot  find  symbol	45	None	add
246	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  builder.append(object);  }  else  {  builder.append('n');  }  [CE]  cannot  find  symbol  fieldValue  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(object);  }  else  {  builder.append('n');  }  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	if(fieldValue  ==  null)  {  builder.append(object);  }  else  {  builder.append('n');  }	  builder.append(object);    builder.append(object);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	55	None	replace
247	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  builder.append(object);  }  else  {  builder.append( "n ");  }  [CE]  cannot  find  symbol  fieldValue  [FE]      StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(object);  }  else  {  builder.append( "n ");  }  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	if(fieldValue  ==  null)  {  builder.append(object);  }  else  {  builder.append( "n ");  }	  builder.append(object);    builder.append(object);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	55	None	replace
248	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaringClass();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getDeclaringClass();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getDeclaringClass();	  Object    object    =    clazz.getReferenceName();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	52	None	replace
249	[BUG]  [BUGGY]  register(object,  builder,  excludeFields,  clazz);  [CE]  method  register  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  register(object,  builder,  excludeFields,  clazz);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	register(object,  builder,  excludeFields,  clazz);	  register(object,    builder,    clazz);    	non-compiled	[CE]  method  register  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	21	None	replace
250	[BUG]  [BUGGY]  register(object,  constructer,  clazz,  excludeFields);  [CE]  cannot  find  symbol  constructer  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  register(object,  constructer,  clazz,  excludeFields);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	register(object,  constructer,  clazz,  excludeFields);	  register(object,    builder,    clazz);    	non-compiled	[CE]  cannot  find  symbol  constructer	21	None	replace
251	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  constructor);  [CE]  cannot  find  symbol  constructor  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  constructor);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  constructor);	  Field[]    fields    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  cannot  find  symbol  constructor	15	None	replace
252	[BUG]  [BUGGY]  Integer  object  =  clazz.getClass();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Integer  object  =  clazz.getClass();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Integer  object  =  clazz.getClass();	  Integer    object    =    clazz.getReturnType();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	8	None	replace
253	[BUG]  [BUGGY]  rehashCode(object,  clazz,  excludeFields);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  rehashCode(object,  clazz,  excludeFields);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	rehashCode(object,  clazz,  excludeFields);	  rehashCode(object,    clazz);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
254	[BUG]  [BUGGY]  Object  object  =  clazz.getImplicitReturn();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getImplicitReturn();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getImplicitReturn();	  Object    object    =    clazz.getAssignedObject();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	3	None	replace
255	[BUG]  [BUGGY]  Object  object  =  clazz.getAssignedObject(excludeFields);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getAssignedObject(excludeFields);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getAssignedObject(excludeFields);	  Object    object    =    clazz.getAssignedObject();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	3	None	replace
256	[BUG]  [BUGGY]  builder.append(object,  clazz.setAccessible(useTransients);  [CE]  ')'  expected  [FE]        StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(object,  clazz.setAccessible(useTransients);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append(object,  clazz.setAccessible(useTransients);	  builder.append(object);    clazz.setAccessible(useTransients);    	non-compiled	[CE]  ')'  expected	76	None	replace
257	[BUG]  [BUGGY]  builder.append(object);  clazz.setAccessible(exclusionFields);  [CE]  cannot  find  symbol  exclusionFields  [FE]          StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(object);  clazz.setAccessible(exclusionFields);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append(object);  clazz.setAccessible(exclusionFields);	  builder.append(object);    clazz.setAccessible(useTransients);    	non-compiled	[CE]  cannot  find  symbol  exclusionFields	76	None	replace
258	[BUG]  [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields(excludeFields);  [CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields(excludeFields);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object[]  fields  =  clazz.getDeclaredFields(excludeFields);	  Object[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;	35	None	replace
259	[BUG]  [BUGGY]  Class  <?>  clazz  =  object!=  null?  null  :  object.getSuperclass();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Class  <?>  clazz  =  object!=  null?  null  :  object.getSuperclass();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Class  <?>  clazz  =  object!=  null?  null  :  object.getSuperclass();	  Class    <?>    clazz    =    object.getSuperclass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	11	None	replace
260	[BUG]  [BUGGY]  register(object,  constructer,  excludeFields,  null);  [CE]  cannot  find  symbol  constructer  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  register(object,  constructer,  excludeFields,  null);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	register(object,  constructer,  excludeFields,  null);	  register(object,    builder,    null);    	non-compiled	[CE]  cannot  find  symbol  constructer	90	None	replace
261	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getSuperclass(excludeFields);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Class  <?>  object  =  clazz.getSuperclass(excludeFields);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Class  <?>  object  =  clazz.getSuperclass(excludeFields);	  Class    <?>    object    =    clazz.getSuperclasses();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	74	None	replace
262	[BUG]  [BUGGY]  ReflectionAppend.reflectionAppend(object,  builder,  clazz);  [CE]  cannot  find  symbol  ReflectionAppend  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  ReflectionAppend.reflectionAppend(object,  builder,  clazz);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	ReflectionAppend.reflectionAppend(object,  builder,  clazz);	  ReflectionAppend.reflectionAppend(object,    builder);    	non-compiled	[CE]  cannot  find  symbol  ReflectionAppend	18	None	replace
263	[BUG]  [BUGGY]  ReflectionAppend.reflectionAppend(object,  builder,  useTransients);  [CE]  cannot  find  symbol  ReflectionAppend  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  ReflectionAppend.reflectionAppend(object,  builder,  useTransients);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	ReflectionAppend.reflectionAppend(object,  builder,  useTransients);	  ReflectionAppend.reflectionAppend(object,    builder);    	non-compiled	[CE]  cannot  find  symbol  ReflectionAppend	18	None	replace
264	[BUG]  [BUGGY]  Class  <?>  clazz  =  getClass(object);  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]        StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Class  <?>  clazz  =  getClass(object);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Class  <?>  clazz  =  getClass(object);	          Class    <?>    clazz    =    getClass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	68	None	replace
265	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  false,  clazz);  [CE]  no  suitable  method  found  for  setAccessible(String[],boolean,Class<CAP#1>)  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  AccessibleObject.setAccessible(excludeFields,  false,  clazz);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	AccessibleObject.setAccessible(excludeFields,  false,  clazz);	  AccessibleObject.setAccessible(excludeFields,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],boolean,Class<CAP#1>)	6	None	replace
266	[BUG]  [BUGGY]  builder.append(excludeField);  [CE]  cannot  find  symbol  excludeField  [FE]          StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(excludeField);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append(excludeField);	  builder.append(field);    	non-compiled	[CE]  cannot  find  symbol  excludeField	86	None	replace
267	[BUG]  [BUGGY]  builder.append(exclusionFields);  [CE]  cannot  find  symbol  exclusionFields  [FE]            StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(exclusionFields);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append(exclusionFields);	  builder.append(field);    	non-compiled	[CE]  cannot  find  symbol  exclusionFields	86	None	replace
268	[BUG]  [BUGGY]  object  =  clazz.getDeclaredFields(excludeFields,  field);  [CE]  cannot  find  symbol  field  [FE]            IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  object  =  clazz.getDeclaredFields(excludeFields,  field);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	object  =  clazz.getDeclaredFields(excludeFields,  field);	  object    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  cannot  find  symbol  field	39	None	replace
269	[BUG]  [BUGGY]  object  =  clazz.getDeclaredFields(excludeFields,  constructor);  [CE]  cannot  find  symbol  constructor  [FE]              IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  object  =  clazz.getDeclaredFields(excludeFields,  constructor);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	object  =  clazz.getDeclaredFields(excludeFields,  constructor);	  object    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  cannot  find  symbol  constructor	39	None	replace
270	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append( "  }   ");  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	add	builder.append( "  }   ");	  builder.append(   ",   ");    	compilable	  [FE]  StackOverflowError  	85	4	replace
271	[BUG]  [BUGGY]  builder.append( "  }   ");  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append( "  }   ");  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append( "  }   ");	  builder.append(   ",   ");    	compilable	  [FE]  StackOverflowError  	85	4	replace
272	[BUG]  [BUGGY]  Integer  object  =  clazz.getImplicitReturn();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Integer  object  =  clazz.getImplicitReturn();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Integer  object  =  clazz.getImplicitReturn();	  Integer    object    =    clazz.getSimpleInitialValue();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	9	None	replace
273	[BUG]  [BUGGY]  Object  object  =  clazz.getSuperclass(excludeFields);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getSuperclass(excludeFields);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getSuperclass(excludeFields);	  Object    object    =    clazz.getSuperclass();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	2	None	replace
274	[BUG]  [BUGGY]  builder.append('$');  Object  fieldValue  =  clazz.getDeclaredFields();  builder.append('$');  [CE]  variable  fieldValue  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append('$');  Object  fieldValue  =  clazz.getDeclaredFields();  builder.append('$');  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append('$');    Object  fieldValue  =  clazz.getDeclaredFields();  builder.append('$');	  	non-compiled	[CE]  variable  fieldValue  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	47	None	add
275	[BUG]  [BUGGY]  builder.append('$');  Object  fieldValue  =  object.get(object);  builder.append('$');  [CE]  cannot  find  symbol  [FE]      StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append('$');  Object  fieldValue  =  object.get(object);  builder.append('$');  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append('$');    Object  fieldValue  =  object.get(object);  builder.append('$');	  	non-compiled	[CE]  cannot  find  symbol	47	None	add
276	[BUG]  [BUGGY]  builder.append('$');  Object  fieldValue  =  clazz.getDeclaredFields();  [CE]  variable  fieldValue  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]        StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append('$');  Object  fieldValue  =  clazz.getDeclaredFields();  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append('$');    Object  fieldValue  =  clazz.getDeclaredFields();	  	non-compiled	[CE]  variable  fieldValue  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	47	None	add
277	[BUG]  [BUGGY]  builder.append('$');  clazz.setAccessible(useTransients);  builder.append('$');  [CE]  cannot  find  symbol  [FE]          StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append('$');  clazz.setAccessible(useTransients);  builder.append('$');  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append('$');    clazz.setAccessible(useTransients);  builder.append('$');	  	non-compiled	[CE]  cannot  find  symbol	47	None	add
278	[BUG]  [BUGGY]  Field[]  fields  =  excludeFields.getSuperclasses();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Field[]  fields  =  excludeFields.getSuperclasses();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Field[]  fields  =  excludeFields.getSuperclasses();	  Field[]    fields    =    clazz.getSuperclasses();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
279	[BUG]  [BUGGY]  builder.append(excludeFields[object].getName());  [CE]  incompatible  types  [FE]              StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(excludeFields[object].getName());  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append(excludeFields[object].getName());	  builder.append(object);    if(object    instanceof    Accessible)    {    Class    <?>    clazz    =(Class    <?>)object;    builder.append(clazz.getDeclaredFields());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  incompatible  types	58	None	replace
280	[BUG]  [BUGGY]  object  =  clazz.getRootClass();  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  object  =  clazz.getRootClass();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	object  =  clazz.getRootClass();	  object    =    clazz.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
281	[BUG]  [BUGGY]  rehashCodeBuilder(builder,  clazz);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  rehashCodeBuilder(builder,  clazz);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	rehashCodeBuilder(builder,  clazz);	  rehashCodeBuilder(builder);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
282	[BUG]  [BUGGY]  builder.append(fieldValue);  Object  object  =  clazz.getDeclaredObject();  [CE]  cannot  find  symbol  fieldValue  [FE]            StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(fieldValue);  Object  object  =  clazz.getDeclaredObject();  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append(fieldValue);  Object  object  =  clazz.getDeclaredObject();	  builder.append(object);    Object    object    =    clazz.getDeclaredObject();    	non-compiled	[CE]  cannot  find  symbol  fieldValue	98	None	replace
283	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    IllegalArgumentException    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  if(excludeFields!=  null)  {  object  =  clazz.getDeclaredFields();  object  =  clazz.getDeclaredFields();  }  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	add	if(excludeFields!=  null)  {  object  =  clazz.getDeclaredFields();  object  =  clazz.getDeclaredFields();  }	          object    =    clazz.getDeclaredFields();    object    =    clazz.getDeclaredFields();    	compilable	  [FE]  StackOverflowError  	28	2	replace
284	[BUG]  [BUGGY]  if(excludeFields!=  null)  {  object  =  clazz.getDeclaredFields();  object  =  clazz.getDeclaredFields();  }  [FE]  StackOverflowError  [FE]    IllegalArgumentException    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  if(excludeFields!=  null)  {  object  =  clazz.getDeclaredFields();  object  =  clazz.getDeclaredFields();  }  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	if(excludeFields!=  null)  {  object  =  clazz.getDeclaredFields();  object  =  clazz.getDeclaredFields();  }	          object    =    clazz.getDeclaredFields();    object    =    clazz.getDeclaredFields();    	compilable	  [FE]  StackOverflowError  	28	2	replace
285	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaredFields()  [0].restrictByNotNullOrUndefined();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getDeclaredFields()  [0].restrictByNotNullOrUndefined();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getDeclaredFields()  [0].restrictByNotNullOrUndefined();	  Object    object    =    clazz.getDeclaredFields()    [0];    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	100	None	replace
286	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaredFields()  [1];  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getDeclaredFields()  [1];  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getDeclaredFields()  [1];	  Object    object    =    clazz.getDeclaredFields()    [0];    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	100	None	replace
287	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaredFields()  [0].getAssignedValue();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getDeclaredFields()  [0].getAssignedValue();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getDeclaredFields()  [0].getAssignedValue();	  Object    object    =    clazz.getDeclaredFields()    [0];    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	100	None	replace
288	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getReferenceName();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Class  <?>  object  =  clazz.getReferenceName();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Class  <?>  object  =  clazz.getReferenceName();	  Class    <?>    object    =    clazz.getRawClass();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	50	None	replace
289	[BUG]  [BUGGY]  rehashCodeBuilder(builder,  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  rehashCodeBuilder(builder,  fieldValue);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	rehashCodeBuilder(builder,  fieldValue);	  rehashCodeBuilder(builder,    object);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	17	None	replace
290	[BUG]  [BUGGY]  rehashCodeBuilder(object,  constructer);  [CE]  cannot  find  symbol  constructer  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  rehashCodeBuilder(object,  constructer);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	rehashCodeBuilder(object,  constructer);	  rehashCodeBuilder(builder,    object);    	non-compiled	[CE]  cannot  find  symbol  constructer	17	None	replace
291	[BUG]  [BUGGY]  rehashCode(excludeFields,  clazz);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  rehashCode(excludeFields,  clazz);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	rehashCode(excludeFields,  clazz);	  rehashCode(excludeFields);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
292	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  useTransients,  true);  [CE]  no  suitable  method  found  for  setAccessible(String[],boolean,boolean)  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  useTransients,  true);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  useTransients,  true);	  Field[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(excludeFields,    true);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],boolean,boolean)	26	None	replace
293	[BUG]  [BUGGY]  Integer  object  =  clazz.getDeclaredInitialValue(includeFields);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Integer  object  =  clazz.getDeclaredInitialValue(includeFields);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Integer  object  =  clazz.getDeclaredInitialValue(includeFields);	  Integer    object    =    clazz.getDeclaredInitialValue();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	7	None	replace
294	[BUG]  [BUGGY]  Integer  object  =  clazz.getSuperclass(excludeFields);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Integer  object  =  clazz.getSuperclass(excludeFields);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Integer  object  =  clazz.getSuperclass(excludeFields);	  Integer    object    =    clazz.getSuperclass();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	82	None	replace
295	[BUG]  [BUGGY]  Integer  object  =  clazz.getObject();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Integer  object  =  clazz.getObject();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Integer  object  =  clazz.getObject();	  Integer    object    =    clazz.getSuperclass();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	82	None	replace
296	[BUG]  [BUGGY]  if(excludeFields  ==  null)  {  object  =  clazz.getDeclaredFields();  Object  object  =  clazz.getDeclaredFields();  }  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]          IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  if(excludeFields  ==  null)  {  object  =  clazz.getDeclaredFields();  Object  object  =  clazz.getDeclaredFields();  }  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	if(excludeFields  ==  null)  {  object  =  clazz.getDeclaredFields();  Object  object  =  clazz.getDeclaredFields();  }	          object    =    clazz.getDeclaredFields();    Object    object    =    clazz.getDeclaredFields();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	29	None	replace
297	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaredField(excludeFields,  field.getName());  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getDeclaredField(excludeFields,  field.getName());  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getDeclaredField(excludeFields,  field.getName());	  Object    object    =    clazz.getDeclaredField(excludeFields,    field);    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	43	None	replace
298	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaredField(excludeFields,  true);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getDeclaredField(excludeFields,  true);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getDeclaredField(excludeFields,  true);	  Object    object    =    clazz.getDeclaredField(fields);    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	42	None	replace
299	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  Class  <?>  object  =  clazz.getClass();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  Class  <?>  object  =  clazz.getClass();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  Class  <?>  object  =  clazz.getClass();	  Field[]    fields    =    object.getDeclaredFields();    Class    <?>    clazz    =    clazz.getClass();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	19	None	replace
300	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaredField(excludeFields,  builder,  useTransients);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getDeclaredField(excludeFields,  builder,  useTransients);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getDeclaredField(excludeFields,  builder,  useTransients);	  Object    object    =    clazz.getDeclaredField(excludeFields,    builder);    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	40	None	replace
301	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaredField(object,  builder);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getDeclaredField(object,  builder);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getDeclaredField(object,  builder);	  Object    object    =    clazz.getDeclaredField(excludeFields,    builder);    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	40	None	replace
302	[BUG]  [BUGGY]  register(object,  null,  excludeFields);  [CE]  method  register  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  register(object,  null,  excludeFields);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	register(object,  null,  excludeFields);	  register(object,    clazz,    null);    	non-compiled	[CE]  method  register  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	94	None	replace
303	[BUG]  [BUGGY]  AccessibleObject.setAccessible(cludeFields,  false);  [CE]  cannot  find  symbol  cludeFields  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  AccessibleObject.setAccessible(cludeFields,  false);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	AccessibleObject.setAccessible(cludeFields,  false);	  AccessibleObject.setAccessible(fields,    false);    	non-compiled	[CE]  cannot  find  symbol  cludeFields	4	None	replace
304	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(clazz.getDeclaredFields());  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	add	builder.append(clazz.getDeclaredFields());	  builder.append(object);    if(object    instanceof    Accessible)    {    Class    <?>    clazz    =(Class    <?>)object;    builder.append(clazz.getDeclaredFields());    }    	compilable	  [FE]  StackOverflowError  	56	4	replace
305	[BUG]  [BUGGY]  builder.append(clazz.getDeclaredFields());  [FE]  StackOverflowError  [FE]          StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(clazz.getDeclaredFields());  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append(clazz.getDeclaredFields());	  builder.append(object);    if(object    instanceof    Accessible)    {    Class    <?>    clazz    =(Class    <?>)object;    builder.append(clazz.getDeclaredFields());    }    	compilable	  [FE]  StackOverflowError  	56	4	replace
306	[BUG]  [BUGGY]  builder.append(object);    builder.append(object);  if(excludeFields!=  null)  {  if(!useTransients  &&  excludeFields.contains(object))  {  return;  }  [CE]  'finally'  without  'try'  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(object);    builder.append(object);  if(excludeFields!=  null)  {  if(!useTransients  &&  excludeFields.contains(object))  {  return;  }  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append(object);        builder.append(object);    if(excludeFields!=  null)  {  if(!useTransients  &&  excludeFields.contains(object))  {  return;  }	  	non-compiled	[CE]  'finally'  without  'try'	54	None	add
307	[BUG]  [BUGGY]  builder.append(object);    builder.append(object);  if(excludeFields!=  null)  {  if(isRegistered(object)||  excludeFields.contains(object))  {  return;  }  [CE]  'finally'  without  'try'  [FE]      StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(object);    builder.append(object);  if(excludeFields!=  null)  {  if(isRegistered(object)||  excludeFields.contains(object))  {  return;  }  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append(object);        builder.append(object);    if(excludeFields!=  null)  {  if(isRegistered(object)||  excludeFields.contains(object))  {  return;  }	  	non-compiled	[CE]  'finally'  without  'try'	54	None	add
308	[BUG]  [BUGGY]  register(object,  builder,  excludeFields,  iTotal);  [CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  register(object,  builder,  excludeFields,  iTotal);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	register(object,  builder,  excludeFields,  iTotal);	  register(object,    builder,    excludeFields);    	non-compiled	[CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context	60	None	replace
309	[BUG]  [BUGGY]  builder.append(excludeFields[object.getClass().getName()  +  1));  [CE]  ']'  expected  [FE]        StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(excludeFields[object.getClass().getName()  +  1));  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append(excludeFields[object.getClass().getName()  +  1));	  builder.append(excludeFields[object.getClass().getName()    ]);    	non-compiled	[CE]  ']'  expected	73	None	replace
310	[BUG]  [BUGGY]  builder.append(excludeFields[object.getClass().getName()  +  '_']);  [CE]  incompatible  types  [FE]          StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(excludeFields[object.getClass().getName()  +  '_']);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append(excludeFields[object.getClass().getName()  +  '_']);	  builder.append(excludeFields[object.getClass().getName()    ]);    	non-compiled	[CE]  incompatible  types	73	None	replace
311	[BUG]  [BUGGY]  Integer  object  =  clazz.getDeclaredInObject(0);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Integer  object  =  clazz.getDeclaredInObject(0);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Integer  object  =  clazz.getDeclaredInObject(0);	  Integer    object    =    clazz.getDeclaredInObject();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	95	None	replace
312	[BUG]  [BUGGY]  Integer  object  =  clazz.getDeclaredInObject(includeFields);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Integer  object  =  clazz.getDeclaredInObject(includeFields);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Integer  object  =  clazz.getDeclaredInObject(includeFields);	  Integer    object    =    clazz.getDeclaredInObject();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	95	None	replace
313	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getDeclaredSuperclass();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Class  <?>  object  =  clazz.getDeclaredSuperclass();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Class  <?>  object  =  clazz.getDeclaredSuperclass();	  Class    <?>    object    =    clazz.getSuperclass();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	49	None	replace
314	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append('$').append(excludeFields);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	add	builder.append('$').append(excludeFields);	  builder.append('$');    	compilable	  [FE]  StackOverflowError  	48	4	replace
315	[BUG]  [BUGGY]  builder.append('$').append(excludeFields);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append('$').append(excludeFields);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append('$').append(excludeFields);	  builder.append('$');    	compilable	  [FE]  StackOverflowError  	48	4	replace
316	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append('$'  +  excludeFields.length);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	add	builder.append('$'  +  excludeFields.length);	  builder.append('$');    	compilable	  [FE]  NullPointerException  	48	4	replace
317	[BUG]  [BUGGY]  builder.append('$'  +  excludeFields.length);  [FE]  NullPointerException  [FE]      StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append('$'  +  excludeFields.length);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append('$'  +  excludeFields.length);	  builder.append('$');    	compilable	  [FE]  NullPointerException  	48	4	replace
318	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append('[');  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	add	builder.append('[');	  builder.append('n');    	compilable	  [FE]  StackOverflowError  	46	4	replace
319	[BUG]  [BUGGY]  builder.append('[');  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append('[');  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append('[');	  builder.append('n');    	compilable	  [FE]  StackOverflowError  	46	4	replace
320	[BUG]  [BUGGY]  Builder.append(object);  clazz.setAccessible(excludeFields);  [CE]  cannot  find  symbol  Builder  [FE]        StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Builder.append(object);  clazz.setAccessible(excludeFields);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Builder.append(object);  clazz.setAccessible(excludeFields);	  builder.append(object);    clazz.setAccessible(useTransients);    	non-compiled	[CE]  cannot  find  symbol  Builder	76	None	replace
321	[BUG]  [BUGGY]  Class  <?>  clazz  =  getClass().getComponentType();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]        StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Class  <?>  clazz  =  getClass().getComponentType();  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Class  <?>  clazz  =  getClass().getComponentType();	          Class    <?>    clazz    =    getClass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	68	None	replace
322	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(object);    builder.append(object);  if(object!=  null)  {  builder.append(object);  builder.append(object);  }  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	add	builder.append(object);        builder.append(object);    if(object!=  null)  {  builder.append(object);  builder.append(object);  }	  	compilable	  [FE]  StackOverflowError  	54	4	add
323	[BUG]  [BUGGY]  builder.append(object);    builder.append(object);  if(object!=  null)  {  builder.append(object);  builder.append(object);  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(object);    builder.append(object);  if(object!=  null)  {  builder.append(object);  builder.append(object);  }  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append(object);        builder.append(object);    if(object!=  null)  {  builder.append(object);  builder.append(object);  }	  	compilable	  [FE]  StackOverflowError  	54	4	add
324	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(object);    builder.append(object);  if(object!=  null)  {  builder.append(object);  builder.append( ", ");  }  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	add	builder.append(object);        builder.append(object);    if(object!=  null)  {  builder.append(object);  builder.append( ", ");  }	  	compilable	  [FE]  StackOverflowError  	54	4	add
325	[BUG]  [BUGGY]  builder.append(object);    builder.append(object);  if(object!=  null)  {  builder.append(object);  builder.append( ", ");  }  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(object);    builder.append(object);  if(object!=  null)  {  builder.append(object);  builder.append( ", ");  }  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append(object);        builder.append(object);    if(object!=  null)  {  builder.append(object);  builder.append( ", ");  }	  	compilable	  [FE]  StackOverflowError  	54	4	add
326	[BUG]  [BUGGY]  Object  object  =  clazz.getSimpleObject();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getSimpleObject();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getSimpleObject();	  Object    object    =    clazz.getAssignedObject();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	3	None	replace
327	[BUG]  [BUGGY]  builder.append(excludeFields[object.getClass().getName()  ],  excludeFields);  [CE]  incompatible  types  [FE]        StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(excludeFields[object.getClass().getName()  ],  excludeFields);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append(excludeFields[object.getClass().getName()  ],  excludeFields);	  builder.append(excludeFields[object.getClass().getName()    ]);    	non-compiled	[CE]  incompatible  types	73	None	replace
328	[BUG]  [BUGGY]  builder.append(excludeFields[object.getClass().getName()  ],  useTransients);  [CE]  incompatible  types  [FE]          StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(excludeFields[object.getClass().getName()  ],  useTransients);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append(excludeFields[object.getClass().getName()  ],  useTransients);	  builder.append(excludeFields[object.getClass().getName()    ]);    	non-compiled	[CE]  incompatible  types	73	None	replace
329	[BUG]  [BUGGY]  builder.append('$',  object);  [CE]  no  suitable  method  found  for  append(char,Object)  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append('$',  object);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append('$',  object);	  builder.append('$');    	non-compiled	[CE]  no  suitable  method  found  for  append(char,Object)	48	None	replace
330	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append('_');  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	add	builder.append('_');	  builder.append(fieldValue);    	compilable	  [FE]  StackOverflowError  	44	4	replace
331	[BUG]  [BUGGY]  builder.append('_');  [FE]  StackOverflowError  [FE]        StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append('_');  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append('_');	  builder.append(fieldValue);    	compilable	  [FE]  StackOverflowError  	44	4	replace
332	[BUG]  [BUGGY]  Integer  object  =  clazz.getDeclaredInitialValue(iConstant);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Integer  object  =  clazz.getDeclaredInitialValue(iConstant);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Integer  object  =  clazz.getDeclaredInitialValue(iConstant);	  Integer    object    =    clazz.getDeclaredInitialValue();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	7	None	replace
333	[BUG]  [BUGGY]  object  =  clazz.getDeclaredFields(fieldValue,  excludeFields);  [CE]  cannot  find  symbol  fieldValue  [FE]            IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  object  =  clazz.getDeclaredFields(fieldValue,  excludeFields);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	object  =  clazz.getDeclaredFields(fieldValue,  excludeFields);	  object    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	39	None	replace
334	[BUG]  [BUGGY]  Object  object  =  clazz.getSimpleName();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getSimpleName();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getSimpleName();	  Object    object    =    clazz.getSuperclass();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	2	None	replace
335	[BUG]  [BUGGY]  String[]  fields  =  object.getDeclaredFields();  [CE]  cannot  find  symbol  [FE]        StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  String[]  fields  =  object.getDeclaredFields();  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	String[]  fields  =  object.getDeclaredFields();	  String[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
336	[BUG]  [BUGGY]  Class  <?>  clazz  =  object.getReturningClass();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]            StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Class  <?>  clazz  =  object.getReturningClass();  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Class  <?>  clazz  =  object.getReturningClass();	          Class    <?>    clazz    =    object.getDeclaringClass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	70	None	replace
337	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getSimpleName();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Class  <?>  object  =  clazz.getSimpleName();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Class  <?>  object  =  clazz.getSimpleName();	  Class    <?>    object    =    clazz.getSuperclass();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	49	None	replace
338	[BUG]  [BUGGY]  Class  <?>  clazz  =  object.getRawParameterType(0);  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Class  <?>  clazz  =  object.getRawParameterType(0);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Class  <?>  clazz  =  object.getRawParameterType(0);	  Class    <?>    clazz    =    object.getRawClass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	10	None	replace
339	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  if(!useTransients)  {  builder.append(object);  }  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	add	if(!useTransients)  {  builder.append(object);  }	  builder.append(object);    builder.append(object);    	compilable	  [FE]  StackOverflowError  	55	4	replace
340	[BUG]  [BUGGY]  if(!useTransients)  {  builder.append(object);  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  if(!useTransients)  {  builder.append(object);  }  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	if(!useTransients)  {  builder.append(object);  }	  builder.append(object);    builder.append(object);    	compilable	  [FE]  StackOverflowError  	55	4	replace
341	[BUG]  [BUGGY]  timeout  [FE]      StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  try  {  builder.append(object);  }  catch(Throwable  t)  {  }  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	add	try  {  builder.append(object);  }  catch(Throwable  t)  {  }	  builder.append(object);    builder.append(object);    	compilable	timeout	55	1	replace
342	[BUG]  [BUGGY]  try  {  builder.append(object);  }  catch(Throwable  t)  {  }  timeout  [FE]      StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  try  {  builder.append(object);  }  catch(Throwable  t)  {  }  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	try  {  builder.append(object);  }  catch(Throwable  t)  {  }	  builder.append(object);    builder.append(object);    	compilable	timeout	55	1	replace
343	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  if(!useTransients)  {  builder.append(object);  }  else  {  builder.append( ", ");  }  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	add	if(!useTransients)  {  builder.append(object);  }  else  {  builder.append( ", ");  }	  builder.append(object);    builder.append(object);    	compilable	  [FE]  StackOverflowError  	55	4	replace
344	[BUG]  [BUGGY]  if(!useTransients)  {  builder.append(object);  }  else  {  builder.append( ", ");  }  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  if(!useTransients)  {  builder.append(object);  }  else  {  builder.append( ", ");  }  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	if(!useTransients)  {  builder.append(object);  }  else  {  builder.append( ", ");  }	  builder.append(object);    builder.append(object);    	compilable	  [FE]  StackOverflowError  	55	4	replace
345	[BUG]  [BUGGY]  try  {  builder.append(object);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]          StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  try  {  builder.append(object);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	try  {  builder.append(object);  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(object);    builder.append(object);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
346	[BUG]  [BUGGY]  if(clazz!=  null)  {  object  =  clazz.getDeclaredFields();  Object  object  =  clazz.getDeclaredFields();  }  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]          IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  if(clazz!=  null)  {  object  =  clazz.getDeclaredFields();  Object  object  =  clazz.getDeclaredFields();  }  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	if(clazz!=  null)  {  object  =  clazz.getDeclaredFields();  Object  object  =  clazz.getDeclaredFields();  }	          object    =    clazz.getDeclaredFields();    Object    object    =    clazz.getDeclaredFields();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	29	None	replace
347	[BUG]  [BUGGY]  if(clazz!=  null)  {  object  =  clazz.getDeclaredFields();  Object  object  =  clazz.getDeclaredFields();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]            IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  if(clazz!=  null)  {  object  =  clazz.getDeclaredFields();  Object  object  =  clazz.getDeclaredFields();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	if(clazz!=  null)  {  object  =  clazz.getDeclaredFields();  Object  object  =  clazz.getDeclaredFields();  }  else  {  throw  new  IllegalArgumentException( " ");  }	          object    =    clazz.getDeclaredFields();    Object    object    =    clazz.getDeclaredFields();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	29	None	replace
348	[BUG]  [BUGGY]  Builder.append(object);  clazz.setAccessible(fields,  true);  [CE]  cannot  find  symbol  Builder  [FE]            StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Builder.append(object);  clazz.setAccessible(fields,  true);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Builder.append(object);  clazz.setAccessible(fields,  true);	  builder.append(object);    clazz.setAccessible(fields,    true);    	non-compiled	[CE]  cannot  find  symbol  Builder	78	None	replace
349	[BUG]  [BUGGY]  builder.append(object,  clazz.getDeclaredFields());  [CE]  no  suitable  method  found  for  append(Object,Field[])  [FE]          StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(object,  clazz.getDeclaredFields());  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append(object,  clazz.getDeclaredFields());	  builder.append(object);    if(object    instanceof    Accessible)    {    Class    <?>    clazz    =(Class    <?>)object;    builder.append(clazz.getDeclaredFields());    }    	non-compiled	[CE]  no  suitable  method  found  for  append(Object,Field[])	56	None	replace
350	[BUG]  [BUGGY]  builder.append(class.getDeclaredFields());  [CE]  illegal  start  of  expression  [FE]            StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(class.getDeclaredFields());  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append(class.getDeclaredFields());	  builder.append(object);    if(object    instanceof    Accessible)    {    Class    <?>    clazz    =(Class    <?>)object;    builder.append(clazz.getDeclaredFields());    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
351	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(fields);  [CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(fields);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Field[]  fields  =  clazz.getDeclaredFields(fields);	  Field[]    fields    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;	15	None	replace
352	[BUG]  [BUGGY]  object  =  clazz.newInstance();  [CE]  unreported  exception  InstantiationException;  must  be  caught  or  declared  to  be  thrown  [FE]          IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  object  =  clazz.newInstance();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	object  =  clazz.newInstance();	  object    =    clazz.getRawClass();    	non-compiled	[CE]  unreported  exception  InstantiationException;  must  be  caught  or  declared  to  be  thrown	38	None	replace
353	[BUG]  [BUGGY]  Field[]  fields  =  class.getDeclaredFields();  [CE]  illegal  start  of  expression  [FE]        StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Field[]  fields  =  class.getDeclaredFields();  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Field[]  fields  =  class.getDeclaredFields();	  Field[]    fields    =    object.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
354	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getDeclaredFields(field);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Class  <?>  object  =  clazz.getDeclaredFields(field);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Class  <?>  object  =  clazz.getDeclaredFields(field);	  Class    <?>    object    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	51	None	replace
355	[BUG]  [BUGGY]  register(object,  clazz,  exceptions);  [CE]  cannot  find  symbol  exceptions  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  register(object,  clazz,  exceptions);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	register(object,  clazz,  exceptions);	  register(object,    clazz,    iConstant);    	non-compiled	[CE]  cannot  find  symbol  exceptions	80	None	replace
356	[BUG]  [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  useTransients,  false);  [CE]  no  suitable  method  found  for  setAccessible(Object[],boolean,boolean)  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  useTransients,  false);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  useTransients,  false);	  Object[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(fields,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Object[],boolean,boolean)	83	None	replace
357	[BUG]  [BUGGY]  Object  object  =  clazz.getImplicitReference();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getImplicitReference();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getImplicitReference();	  Object    object    =    clazz.getReferenceName();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	52	None	replace
358	[BUG]  [BUGGY]  Integer  object  =  clazz.getRealInitialValue();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Integer  object  =  clazz.getRealInitialValue();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Integer  object  =  clazz.getRealInitialValue();	  Integer    object    =    clazz.getSimpleInitialValue();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	9	None	replace
359	[BUG]  [BUGGY]  Field[]  fields  =  excludedFields.getSuperclassFields();  [CE]  cannot  find  symbol  excludedFields  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Field[]  fields  =  excludedFields.getSuperclassFields();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Field[]  fields  =  excludedFields.getSuperclassFields();	  Field[]    fields    =    clazz.getSuperclassFields();    	non-compiled	[CE]  cannot  find  symbol  excludedFields	14	None	replace
360	[BUG]  [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields();  Class  <?>  clazz  =  clazz.getClass();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields();  Class  <?>  clazz  =  clazz.getClass();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object[]  fields  =  clazz.getDeclaredFields();  Class  <?>  clazz  =  clazz.getClass();	  Object[]    fields    =    clazz.getDeclaredFields();    Class    <?>    clazz    =    object.getClass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	20	None	replace
361	[BUG]  [BUGGY]  Integer  object  =  clazz.getRawClass();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Integer  object  =  clazz.getRawClass();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Integer  object  =  clazz.getRawClass();	  Integer    object    =    clazz.getReturnType();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	8	None	replace
362	[BUG]  [BUGGY]  builder.append('n');  Builder.append('n');  [CE]  cannot  find  symbol  Builder  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append('n');  Builder.append('n');  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append('n');    Builder.append('n');	  	non-compiled	[CE]  cannot  find  symbol  Builder	45	None	add
363	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append('n');  clazz.getDeclaredFields();  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	add	builder.append('n');    clazz.getDeclaredFields();	  	compilable	  [FE]  AssertionFailedError  	45	4	add
364	[BUG]  [BUGGY]  builder.append('n');  clazz.getDeclaredFields();  [FE]  AssertionFailedError  [FE]      StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append('n');  clazz.getDeclaredFields();  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append('n');    clazz.getDeclaredFields();	  	compilable	  [FE]  AssertionFailedError  	45	4	add
365	[BUG]  [BUGGY]  builder.append('n');  clazz.setAccessible(useTransients);  [CE]  cannot  find  symbol  [FE]        StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append('n');  clazz.setAccessible(useTransients);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append('n');    clazz.setAccessible(useTransients);	  	non-compiled	[CE]  cannot  find  symbol	45	None	add
366	[BUG]  [BUGGY]  builder.append('n');  clazz.setAccessible(fields,  true);  [CE]  cannot  find  symbol  fields  [FE]          StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append('n');  clazz.setAccessible(fields,  true);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append('n');    clazz.setAccessible(fields,  true);	  	non-compiled	[CE]  cannot  find  symbol  fields	45	None	add
367	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]          object    =    clazz.getDeclaredFields();    object  =  clazz.getDeclaredFields();  object  =  clazz.getName();  object  =  clazz.getDeclaredFields();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	add	                object        =        clazz.getDeclaredFields();        object    =    clazz.getDeclaredFields();    object  =  clazz.getName();  object  =  clazz.getDeclaredFields();	  	compilable	  [FE]  IllegalArgumentException  	27	4	add
368	[BUG]  [BUGGY]          object    =    clazz.getDeclaredFields();    object  =  clazz.getDeclaredFields();  object  =  clazz.getName();  object  =  clazz.getDeclaredFields();  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]          object    =    clazz.getDeclaredFields();    object  =  clazz.getDeclaredFields();  object  =  clazz.getName();  object  =  clazz.getDeclaredFields();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	                object        =        clazz.getDeclaredFields();        object    =    clazz.getDeclaredFields();    object  =  clazz.getName();  object  =  clazz.getDeclaredFields();	  	compilable	  [FE]  IllegalArgumentException  	27	4	add
369	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]          object    =    clazz.getDeclaredFields();    object  =  clazz.getDeclaredFields();  if(excludeFields  ==  null)  {  object  =  clazz.getDeclaredFields();  object  =  clazz.getDeclaredFields();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	add	                object        =        clazz.getDeclaredFields();        object    =    clazz.getDeclaredFields();    if(excludeFields  ==  null)  {  object  =  clazz.getDeclaredFields();  object  =  clazz.getDeclaredFields();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	27	4	add
370	[BUG]  [BUGGY]          object    =    clazz.getDeclaredFields();    object  =  clazz.getDeclaredFields();  if(excludeFields  ==  null)  {  object  =  clazz.getDeclaredFields();  object  =  clazz.getDeclaredFields();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]          object    =    clazz.getDeclaredFields();    object  =  clazz.getDeclaredFields();  if(excludeFields  ==  null)  {  object  =  clazz.getDeclaredFields();  object  =  clazz.getDeclaredFields();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	                object        =        clazz.getDeclaredFields();        object    =    clazz.getDeclaredFields();    if(excludeFields  ==  null)  {  object  =  clazz.getDeclaredFields();  object  =  clazz.getDeclaredFields();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	27	4	add
371	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaredField(fields,  false);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getDeclaredField(fields,  false);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getDeclaredField(fields,  false);	  Object    object    =    clazz.getDeclaredField(fields);    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	42	None	replace
372	[BUG]  [BUGGY]  if(object  instanceof  Accessible)  {  Class  <?>  clazz  =(Class  <?>)object;  builder.append(clazz.getDeclaredFields());  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]              StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  if(object  instanceof  Accessible)  {  Class  <?>  clazz  =(Class  <?>)object;  builder.append(clazz.getDeclaredFields());  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	if(object  instanceof  Accessible)  {  Class  <?>  clazz  =(Class  <?>)object;  builder.append(clazz.getDeclaredFields());  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  builder.append(object);    if(object    instanceof    Accessible)    {    Class    <?>    clazz    =(Class    <?>)object;    builder.append(clazz.getDeclaredFields());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
373	[BUG]  [BUGGY]  register(object,  builder,  fields,  null);  [CE]  cannot  find  symbol  fields  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  register(object,  builder,  fields,  null);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	register(object,  builder,  fields,  null);	  register(object,    builder,    null);    	non-compiled	[CE]  cannot  find  symbol  fields	90	None	replace
374	[BUG]  [BUGGY]  register(object,  builder,  excludeFields,  field);  [CE]  cannot  find  symbol  field  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  register(object,  builder,  excludeFields,  field);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	register(object,  builder,  excludeFields,  field);	  register(object,    builder,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol  field	60	None	replace
375	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclassesArray();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Field[]  fields  =  clazz.getSuperclassesArray();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Field[]  fields  =  clazz.getSuperclassesArray();	  Field[]    fields    =    clazz.getSuperclasses();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
376	[BUG]  [BUGGY]  Field[]  fields  =  class.getSuperclasses();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Field[]  fields  =  class.getSuperclasses();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Field[]  fields  =  class.getSuperclasses();	  Field[]    fields    =    clazz.getSuperclasses();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
377	[BUG]  [BUGGY]  builder.append('$');  Builder.append('$');  [CE]  cannot  find  symbol  Builder  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append('$');  Builder.append('$');  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append('$');    Builder.append('$');	  	non-compiled	[CE]  cannot  find  symbol  Builder	47	None	add
378	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append('$');  clazz.getDeclaredFields();  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	add	builder.append('$');    clazz.getDeclaredFields();	  	compilable	  [FE]  AssertionFailedError  	47	4	add
379	[BUG]  [BUGGY]  builder.append('$');  clazz.getDeclaredFields();  [FE]  AssertionFailedError  [FE]      StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append('$');  clazz.getDeclaredFields();  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append('$');    clazz.getDeclaredFields();	  	compilable	  [FE]  AssertionFailedError  	47	4	add
380	[BUG]  [BUGGY]  builder.append('$');  clazz.setAccessible(useTransients);  [CE]  cannot  find  symbol  [FE]        StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append('$');  clazz.setAccessible(useTransients);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append('$');    clazz.setAccessible(useTransients);	  	non-compiled	[CE]  cannot  find  symbol	47	None	add
381	[BUG]  [BUGGY]  builder.append('$');  Object  fieldValue  =  object.getClass();  [CE]  variable  fieldValue  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]          StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append('$');  Object  fieldValue  =  object.getClass();  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append('$');    Object  fieldValue  =  object.getClass();	  	non-compiled	[CE]  variable  fieldValue  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	47	None	add
382	[BUG]  [BUGGY]  if(object!=  null)  {  builder.append(object);  object  =  clazz.getDeclaredObject(object);  builder.append(object);  }  [CE]  cannot  find  symbol  [FE]              StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  if(object!=  null)  {  builder.append(object);  object  =  clazz.getDeclaredObject(object);  builder.append(object);  }  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	if(object!=  null)  {  builder.append(object);  object  =  clazz.getDeclaredObject(object);  builder.append(object);  }	  builder.append(object);    Object    object    =    clazz.getDeclaredObject(object);    builder.append(object);    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
383	[BUG]  [BUGGY]  if(object!=  null)  {  builder.append(object);  object  =  clazz.getDeclaredObject(object);  builder.append( ", ");  }  [CE]  cannot  find  symbol  [FE]                StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  if(object!=  null)  {  builder.append(object);  object  =  clazz.getDeclaredObject(object);  builder.append( ", ");  }  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	if(object!=  null)  {  builder.append(object);  object  =  clazz.getDeclaredObject(object);  builder.append( ", ");  }	  builder.append(object);    Object    object    =    clazz.getDeclaredObject(object);    builder.append(object);    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
384	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                  StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  if(object!=  null)  {  builder.append(object);  }  else  {  builder.append( ", ");  }  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	add	if(object!=  null)  {  builder.append(object);  }  else  {  builder.append( ", ");  }	  builder.append(object);    Object    object    =    clazz.getDeclaredObject(object);    builder.append(object);    	compilable	  [FE]  StackOverflowError  	99	4	replace
385	[BUG]  [BUGGY]  if(object!=  null)  {  builder.append(object);  }  else  {  builder.append( ", ");  }  [FE]  StackOverflowError  [FE]                  StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  if(object!=  null)  {  builder.append(object);  }  else  {  builder.append( ", ");  }  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	if(object!=  null)  {  builder.append(object);  }  else  {  builder.append( ", ");  }	  builder.append(object);    Object    object    =    clazz.getDeclaredObject(object);    builder.append(object);    	compilable	  [FE]  StackOverflowError  	99	4	replace
386	[BUG]  [BUGGY]  register(object,  clazz,  fieldValue,  excludeFields);  [CE]  cannot  find  symbol  fieldValue  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  register(object,  clazz,  fieldValue,  excludeFields);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	register(object,  clazz,  fieldValue,  excludeFields);	  register(object,    clazz,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	79	None	replace
387	[BUG]  [BUGGY]  Integer  object  =  clazz.getDeclaredInObject(iConstant);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Integer  object  =  clazz.getDeclaredInObject(iConstant);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Integer  object  =  clazz.getDeclaredInObject(iConstant);	  Integer    object    =    clazz.getDeclaredInObject();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	95	None	replace
388	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getClass();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Class  <?>  object  =  clazz.getClass();  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Class  <?>  object  =  clazz.getClass();	  builder.append(object);    if(object!=    null)    {    builder.append(object);    }    else    {    Class    <?>    clazz    =    object.getClass();    builder.append(clazz.getDeclaredFields());    }    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	59	None	replace
389	[BUG]  [BUGGY]  Object  object  =  builder.getDeclaredField(excludeFields,  field);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  builder.getDeclaredField(excludeFields,  field);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  builder.getDeclaredField(excludeFields,  field);	  Object    object    =    clazz.getDeclaredField(excludeFields,    field);    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	43	None	replace
390	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaredField(field,  excludedFields);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getDeclaredField(field,  excludedFields);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getDeclaredField(field,  excludedFields);	  Object    object    =    clazz.getDeclaredField(excludeFields,    field);    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	43	None	replace
391	[BUG]  [BUGGY]  ReflectionAppend.reflectionAppend(object,  builder,  null);  [CE]  cannot  find  symbol  ReflectionAppend  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  ReflectionAppend.reflectionAppend(object,  builder,  null);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	ReflectionAppend.reflectionAppend(object,  builder,  null);	  ReflectionAppend.reflectionAppend(object,    builder);    	non-compiled	[CE]  cannot  find  symbol  ReflectionAppend	18	None	replace
392	[BUG]  [BUGGY]  object  =  clazz.getSuperclass();  objects  =  clazz.getSuperclass();  [CE]  cannot  find  symbol  objects  [FE]    IllegalArgumentException    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  object  =  clazz.getSuperclass();  objects  =  clazz.getSuperclass();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	object    =    clazz.getSuperclass();    objects  =  clazz.getSuperclass();	  	non-compiled	[CE]  cannot  find  symbol  objects	36	None	add
393	[BUG]  [BUGGY]  register(object,  builder,  field);  [CE]  cannot  find  symbol  field  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  register(object,  builder,  field);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	register(object,  builder,  field);	  register(object,    builder,    iTotal);    	non-compiled	[CE]  cannot  find  symbol  field	63	None	replace
394	[BUG]  [BUGGY]  Class  <?>  clazz  =  object!=  null?  object.getSuperclass()  :  excludeFields;  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Class  <?>  clazz  =  object!=  null?  object.getSuperclass()  :  excludeFields;  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Class  <?>  clazz  =  object!=  null?  object.getSuperclass()  :  excludeFields;	  Class    <?>    clazz    =    object.getSuperclass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	11	None	replace
395	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(   ",   ");  builder.append(',');  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	add	builder.append(   ",   ");    builder.append(',');	  	compilable	  [FE]  AssertionFailedError  	84	4	add
396	[BUG]  [BUGGY]  builder.append(   ",   ");  builder.append(',');  [FE]  AssertionFailedError  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  builder.append(   ",   ");  builder.append(',');  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append(   ",   ");    builder.append(',');	  	compilable	  [FE]  AssertionFailedError  	84	4	add
397	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaredFields()  [0].getName();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getDeclaredFields()  [0].getName();  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getDeclaredFields()  [0].getName();	  Object    object    =    clazz.getDeclaredFields()    [0];    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	100	None	replace
398	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaredFields(field);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  Object  object  =  clazz.getDeclaredFields(field);  [BUGGY]      register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	Object  object  =  clazz.getDeclaredFields(field);	  Object    object    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	1	None	replace
399	[BUG]  [BUGGY]  rehashCode(field,  constructor);  [CE]  cannot  find  symbol  field  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {      [BUGGY]  rehashCode(field,  constructor);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	rehashCode(field,  constructor);	  rehashCode(object,    constructor);    	non-compiled	[CE]  cannot  find  symbol  field	33	None	replace
