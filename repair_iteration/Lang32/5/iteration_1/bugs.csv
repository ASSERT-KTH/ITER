bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  [BUGGY]  builder.append(object);  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	add	builder.append(object);	register(object);  	compilable	  [FE]  StackOverflowError  	9	4	replace
2	[BUG]  [BUGGY]  builder.append(object);  [FE]  StackOverflowError  [FE]    AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  [BUGGY]  builder.append(object);  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	builder.append(object);	register(object);  	compilable	  [FE]  StackOverflowError  	9	4	replace
3	[BUG]  [BUGGY]  register(object,  builder);  [CE]  method  register  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  [BUGGY]  register(object,  builder);  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	register(object,  builder);	register(object);  	non-compiled	[CE]  method  register  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	9	None	replace
4	[BUG]  [BUGGY]  register(object,  clazz);  [CE]  method  register  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  [BUGGY]  register(object,  clazz);  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	register(object,  clazz);	register(object);  	non-compiled	[CE]  method  register  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	9	None	replace
5	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  [BUGGY]    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	add	  	register(object);  	compilable	  [FE]  StackOverflowError  	9	1	replace
6	[BUG]  [BUGGY]    [FE]  StackOverflowError  [FE]          AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  [BUGGY]    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	  	register(object);  	compilable	  [FE]  StackOverflowError  	9	1	replace
7	[BUG]  [BUGGY]    Field[]  fields  =  clazz.getDeclaredFields();  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]    AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  [BUGGY]    Field[]  fields  =  clazz.getDeclaredFields();  [BUGGY]  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	    Field[]  fields  =  clazz.getDeclaredFields();		non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	10	None	add
8	[BUG]  [BUGGY]    Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]      AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  [BUGGY]    Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  [BUGGY]  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	    Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);		non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	10	None	add
9	[BUG]  [BUGGY]    Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  false);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]        AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  [BUGGY]    Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  false);  [BUGGY]  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	    Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  false);		non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	10	None	add
10	[BUG]  [BUGGY]    Field[]  fields  =  clazz.getDeclaredFields();  Class  <?>  clazz  =  object.getClass();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]          AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  [BUGGY]    Field[]  fields  =  clazz.getDeclaredFields();  Class  <?>  clazz  =  object.getClass();  [BUGGY]  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	    Field[]  fields  =  clazz.getDeclaredFields();  Class  <?>  clazz  =  object.getClass();		non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	10	None	add
11	[BUG]  [BUGGY]    Integer  object  =  clazz.getInitialValue();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]            AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  [BUGGY]    Integer  object  =  clazz.getInitialValue();  [BUGGY]  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	    Integer  object  =  clazz.getInitialValue();		non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	10	None	add
12	[BUG]  [BUGGY]    Object  object  =  clazz.getDeclaredFields();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]    AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  [BUGGY]    Object  object  =  clazz.getDeclaredFields();  [BUGGY]  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	    Object  object  =  clazz.getDeclaredFields();		non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	10	None	add
13	[BUG]  [BUGGY]    Class  <?>  object  =  clazz.getDeclaredFields();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]      AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  [BUGGY]    Class  <?>  object  =  clazz.getDeclaredFields();  [BUGGY]  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	    Class  <?>  object  =  clazz.getDeclaredFields();		non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	10	None	add
14	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  [BUGGY]    object  =  clazz.getDeclaredFields();  [BUGGY]  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	add	    object  =  clazz.getDeclaredFields();		compilable	  [FE]  IllegalArgumentException  	10	4	add
15	[BUG]  [BUGGY]    object  =  clazz.getDeclaredFields();  [FE]  IllegalArgumentException  [FE]        AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  [BUGGY]    object  =  clazz.getDeclaredFields();  [BUGGY]  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	    object  =  clazz.getDeclaredFields();		compilable	  [FE]  IllegalArgumentException  	10	4	add
16	[BUG]  [BUGGY]    Object  object  =  clazz.getDeclaredObject();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]          AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  [BUGGY]    Object  object  =  clazz.getDeclaredObject();  [BUGGY]  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	    Object  object  =  clazz.getDeclaredObject();		non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	10	None	add
17	[BUG]  [BUGGY]  rehashCodeBuilder(object);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  [BUGGY]  rehashCodeBuilder(object);  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	rehashCodeBuilder(object);	register(object);  	non-compiled	[CE]  cannot  find  symbol	9	None	replace
18	[BUG]  [BUGGY]    Class  <?>  clazz  =  object.getClass();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]    AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  [BUGGY]    Class  <?>  clazz  =  object.getClass();  [BUGGY]  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	    Class  <?>  clazz  =  object.getClass();		non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	10	None	add
19	[BUG]  [BUGGY]    Object  object  =  clazz.getDeclaredField(excludeFields);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]      AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  [BUGGY]    Object  object  =  clazz.getDeclaredField(excludeFields);  [BUGGY]  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	    Object  object  =  clazz.getDeclaredField(excludeFields);		non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	10	None	add
20	[BUG]  [BUGGY]  rehashCode(object);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  [BUGGY]  rehashCode(object);  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	rehashCode(object);	register(object);  	non-compiled	[CE]  cannot  find  symbol	9	None	replace
