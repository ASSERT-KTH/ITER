bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  builder  ==  null?  null  :  builder.hashCode();  builder  ==  null?  null  :  builder.hashCode();  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder  ==  null?  null  :  builder.hashCode();  builder  ==  null?  null  :  builder.hashCode();  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return    builder    ==    null?    null    :    builder.hashCode();    builder  ==  null?  null  :  builder.hashCode();	  	non-compiled	[CE]  not  a  statement	50	None	add
2	[BUG]  [BUGGY]  return  builder  ==  null?  null  :  builder.hashCode();  if(builder  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder  ==  null?  null  :  builder.hashCode();  if(builder  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return    builder    ==    null?    null    :    builder.hashCode();    if(builder  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	50	None	add
3	[BUG]  [BUGGY]  return  builder  ==  null?  null  :  builder.hashCode();  if(builder  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null. ");  }  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder  ==  null?  null  :  builder.hashCode();  if(builder  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null. ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return    builder    ==    null?    null    :    builder.hashCode();    if(builder  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null. ");  }	  	non-compiled	[CE]  unreachable  statement	50	None	add
4	[BUG]  [BUGGY]  return  builder  ==  null?  null  :  builder.hashCode();  if(builder  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  should  not  be  null. ");  }  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder  ==  null?  null  :  builder.hashCode();  if(builder  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  should  not  be  null. ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return    builder    ==    null?    null    :    builder.hashCode();    if(builder  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  should  not  be  null. ");  }	  	non-compiled	[CE]  unreachable  statement	50	None	add
5	[BUG]  [BUGGY]  while(clazz!=  null  &&  testTransients!=  null)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  incomparable  types:  boolean  and  <null>  [FE]          AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  while(clazz!=  null  &&  testTransients!=  null)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz!=  null  &&  testTransients!=  null)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  if(testTransients!=    null)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	80	None	replace
6	[BUG]  [BUGGY]  while(clazz!=  null)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  missing  return  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  while(clazz!=  null)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz!=  null)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  if(testTransients!=    null)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  missing  return  statement	80	None	replace
7	[BUG]  [BUGGY]  while(clazz!=  null)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  while(clazz!=  null)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz!=  null)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  if(testTransients!=    null)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
8	[BUG]  [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  initialNonZeroOddNumber);  [CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  initialNonZeroOddNumber);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(initialNonZeroOddNumber,  initialNonZeroOddNumber);	  return    builder.toHashCode(multipleNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	61	None	replace
9	[BUG]  [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multipleNonZeroOddNumber);  [CE]  cannot  find  symbol  multipleNonZeroOddNumber  [FE]                AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multipleNonZeroOddNumber);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(initialNonZeroOddNumber,  multipleNonZeroOddNumber);	  return    builder.toHashCode(multipleNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol  multipleNonZeroOddNumber	61	None	replace
10	[BUG]  [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  iTotal);  [CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context  [FE]                  AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  iTotal);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(initialNonZeroOddNumber,  iTotal);	  return    builder.toHashCode(multipleNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context	61	None	replace
11	[BUG]  [BUGGY]  return  builder.next()?  this  :  builder.hashCode();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.next()?  this  :  builder.hashCode();  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.next()?  this  :  builder.hashCode();	  return    builder.hasNext()?    this    :    builder.hashCode();    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
12	[BUG]  [BUGGY]  return  builder.hashCode()?  this  :  builder.hasNext();  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.hashCode()?  this  :  builder.hasNext();  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.hashCode()?  this  :  builder.hasNext();	  return    builder.hasNext()?    this    :    builder.hashCode();    	non-compiled	[CE]  incompatible  types	86	None	replace
13	[BUG]  [BUGGY]  null  =  builder.hashCode();  if(testTransients)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  build  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  null  =  builder.hashCode();  if(testTransients)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  build  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	null  =  builder.hashCode();  if(testTransients)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  build	  return    builder.hashCode();    if(builder!=    null)    {    for(int    iConstant    =    0;    iTotal    >=    multiplierNonZeroOddNumber;    iTotal++)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields    	non-compiled	[CE]  ')'  expected	28	None	replace
14	[BUG]  [BUGGY]  null  =  builder.hashCode();  if(testTransients)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  cla  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  null  =  builder.hashCode();  if(testTransients)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  cla  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	null  =  builder.hashCode();  if(testTransients)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  cla	  return    builder.hashCode();    if(builder!=    null)    {    for(int    iConstant    =    0;    iTotal    >=    multiplierNonZeroOddNumber;    iTotal++)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields    	non-compiled	[CE]  ')'  expected	28	None	replace
15	[BUG]  [BUGGY]  null  =  builder.hashCode();  if(testTransients)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  null  =  builder.hashCode();  if(testTransients)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	null  =  builder.hashCode();  if(testTransients)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz	  return    builder.hashCode();    if(builder!=    null)    {    for(int    iConstant    =    0;    iTotal    >=    multiplierNonZeroOddNumber;    iTotal++)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields    	non-compiled	[CE]  ')'  expected	28	None	replace
16	[BUG]  [BUGGY]  null  =  builder.hashCode();  if(testTransients)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  null  =  builder.hashCode();  if(testTransients)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	null  =  builder.hashCode();  if(testTransients)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,	  return    builder.hashCode();    if(builder!=    null)    {    for(int    iConstant    =    0;    iTotal    >=    multiplierNonZeroOddNumber;    iTotal++)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
17	[BUG]  [BUGGY]  reflectionAppend(object,  builder,  testTransients,  excludeFields);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  reflectionAppend(object,  builder,  testTransients,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	reflectionAppend(object,  builder,  testTransients,  excludeFields);	  reflectionAppend(object,    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	1	None	replace
18	[BUG]  [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]                AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  iConstant);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  iConstant);	  return    builder.toHashCode(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    reflectUpToClass);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	30	None	replace
19	[BUG]  [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  testTransients);  [CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  testTransients);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  testTransients);	  return    builder.toHashCode(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    reflectUpToClass);    	non-compiled	[CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	30	None	replace
20	[BUG]  [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  object);  [CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  object);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  object);	  return    builder.toHashCode(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    reflectUpToClass);    	non-compiled	[CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	30	None	replace
21	[BUG]  [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass);  [CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass);	  return    builder.toHashCode(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    reflectUpToClass);    	non-compiled	[CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	30	None	replace
22	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(multiplyNonZeroOddNumber,    multiplierNonZeroOddNumber);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
23	[BUG]  [BUGGY]  return  builder.hashCode()?  null  :  builder.hasNext()?  null  :  builder.hashCode();  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.hashCode()?  null  :  builder.hasNext()?  null  :  builder.hashCode();  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.hashCode()?  null  :  builder.hasNext()?  null  :  builder.hashCode();	  return    builder.hasNext()?    null    :    builder.hashCode();    	non-compiled	[CE]  incompatible  types	85	None	replace
24	[BUG]  [BUGGY]  return  builder.next()?  null  :  builder.hashCode();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.next()?  null  :  builder.hashCode();  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.next()?  null  :  builder.hashCode();	  return    builder.hasNext()?    null    :    builder.hashCode();    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
25	[BUG]  [BUGGY]  return  builder.hashCode()?  null  :  builder.hashCode();  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.hashCode()?  null  :  builder.hashCode();  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.hashCode()?  null  :  builder.hashCode();	  return    builder.hasNext()?    null    :    builder.hashCode();    	non-compiled	[CE]  incompatible  types	85	None	replace
26	[BUG]  [BUGGY]  if(testTransients)  {  clazz  =  clazz.getSuperclass();  }  else  {  reflectionAppend(object,  builder,  testTransients,  excludeFields);  }  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]          NullPointerException      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  if(testTransients)  {  clazz  =  clazz.getSuperclass();  }  else  {  reflectionAppend(object,  builder,  testTransients,  excludeFields);  }  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	if(testTransients)  {  clazz  =  clazz.getSuperclass();  }  else  {  reflectionAppend(object,  builder,  testTransients,  excludeFields);  }	          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	19	None	replace
27	[BUG]  [BUGGY]  return  builder.hashCode()  +  1;  builder.hashCode()  +  1;  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.hashCode()  +  1;  builder.hashCode()  +  1;  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return    builder.hashCode()    +    1;    builder.hashCode()  +  1;	  	non-compiled	[CE]  not  a  statement	39	None	add
28	[BUG]  [BUGGY]  return  builder.hashCode()  +  1;  clazz  =  builder.hashCode()  +  1;  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.hashCode()  +  1;  clazz  =  builder.hashCode()  +  1;  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return    builder.hashCode()    +    1;    clazz  =  builder.hashCode()  +  1;	  	non-compiled	[CE]  incompatible  types	39	None	add
29	[BUG]  [BUGGY]  return  builder.hashCode()  +  1;  if(testTransients)  {  if(object  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null. ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.hashCode()  +  1;  if(testTransients)  {  if(object  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null. ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return    builder.hashCode()    +    1;    if(testTransients)  {  if(object  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null. ");  }	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
30	[BUG]  [BUGGY]  return  builder.hashCode()  +  1;  if(testTransients)  {  if(object  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.hashCode()  +  1;  if(testTransients)  {  if(object  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return    builder.hashCode()    +    1;    if(testTransients)  {  if(object  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
31	[BUG]  [BUGGY]  return  builder.hashCode()  +  1;  if(testTransients)  {  if(object  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  test  code  for  must  not  be  null. ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.hashCode()  +  1;  if(testTransients)  {  if(object  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  test  code  for  must  not  be  null. ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return    builder.hashCode()    +    1;    if(testTransients)  {  if(object  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  test  code  for  must  not  be  null. ");  }	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
32	[BUG]  [BUGGY]  null  =  builder.hashCode();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  unexpected  type  [FE]            AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  null  =  builder.hashCode();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	null  =  builder.hashCode();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  return    builder.hashCode();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  unexpected  type	75	None	replace
33	[BUG]  [BUGGY]  null  =  clazz.getNativeType(UNKNOWN_TYPE);  [CE]  unexpected  type  [FE]              AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  null  =  clazz.getNativeType(UNKNOWN_TYPE);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	null  =  clazz.getNativeType(UNKNOWN_TYPE);	  return    builder.hashCode();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  unexpected  type	75	None	replace
34	[BUG]  [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  total);  [CE]  cannot  find  symbol  total  [FE]                    AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  total);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  total);	  return    builder.toHashCode(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    iConstant);    	non-compiled	[CE]  cannot  find  symbol  total	32	None	replace
35	[BUG]  [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  missing  return  statement  [FE]    AssertionFailedError    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  missing  return  statement	12	None	replace
36	[BUG]  [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  missing  return  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  throw  new  IllegalStateException( " ");  }	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  missing  return  statement	15	None	replace
37	[BUG]  [BUGGY]  int  iConstant  =  clazz.getInitialNonZeroOddNumber();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  int  iConstant  =  clazz.getInitialNonZeroOddNumber();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	int  iConstant  =  clazz.getInitialNonZeroOddNumber();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  return    builder.hashCode();    int    iConstant    =    clazz.getInitialNonZeroOddNumber();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
38	[BUG]  [BUGGY]  réflexionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  illegal  character:  [FE]        AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  réflexionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	réflexionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  reflectionAppend(object,    clazz,    builder,    testTransients,    negationFields);    	non-compiled	[CE]  illegal  character:  	54	None	replace
39	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludedFields);  [CE]  cannot  find  symbol  excludedFields  [FE]          AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludedFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  excludedFields);	  reflectionAppend(object,    clazz,    builder,    testTransients,    negationFields);    	non-compiled	[CE]  cannot  find  symbol  excludedFields	54	None	replace
40	[BUG]  [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber)&&  builder.toHashCode();  [CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber)&&  builder.toHashCode();  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber)&&  builder.toHashCode();	  return    builder.toHashCode(initialNonZeroOddNumber,    multiplierNonZeroOddNumber),    builder.toHashCode();    	non-compiled	[CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	10	None	replace
41	[BUG]  [BUGGY]  return  builder.toHashCode(iTotal,  multiplierNonZeroOddNumber),  builder.toHashCode();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.toHashCode(iTotal,  multiplierNonZeroOddNumber),  builder.toHashCode();  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(iTotal,  multiplierNonZeroOddNumber),  builder.toHashCode();	  return    builder.toHashCode(initialNonZeroOddNumber,    multiplierNonZeroOddNumber),    builder.toHashCode();    	non-compiled	[CE]  ';'  expected	10	None	replace
42	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	add	                clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();	  	compilable	  [FE]  NullPointerException  	17	4	add
43	[BUG]  [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	                clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();	  	compilable	  [FE]  NullPointerException  	17	4	add
44	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	add	                clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	compilable	  [FE]  NullPointerException  	17	4	add
45	[BUG]  [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	                clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	compilable	  [FE]  NullPointerException  	17	4	add
46	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	add	                clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	compilable	  [FE]  NullPointerException  	17	4	add
47	[BUG]  [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	                clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	compilable	  [FE]  NullPointerException  	17	4	add
48	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	add	                clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	compilable	  [FE]  NullPointerException  	17	4	add
49	[BUG]  [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	                clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	compilable	  [FE]  NullPointerException  	17	4	add
50	[BUG]  [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  réflexionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  illegal  character:  [FE]            NullPointerException    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  réflexionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	                clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  réflexionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	non-compiled	[CE]  illegal  character:  	17	None	add
51	[BUG]  [BUGGY]  reflectUpToClass(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  reflectUpToClass(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	reflectUpToClass(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber);	  reflectUpToClass(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
52	[BUG]  [BUGGY]  reflectUpToClass(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber,  excludeFields);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  reflectUpToClass(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	reflectUpToClass(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber,  excludeFields);	  reflectUpToClass(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
53	[BUG]  [BUGGY]  reflectUpToClass(object,  clazz,  builder,  testTransients,  excludeFields,  multiplierNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  reflectUpToClass(object,  clazz,  builder,  testTransients,  excludeFields,  multiplierNonZeroOddNumber);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	reflectUpToClass(object,  clazz,  builder,  testTransients,  excludeFields,  multiplierNonZeroOddNumber);	  reflectUpToClass(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
54	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass()  [CE]  ';'  expected  [FE]        NullPointerException      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass()  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass()	          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass()    	non-compiled	[CE]  ';'  expected	71	None	replace
55	[BUG]  [BUGGY]  reflectionAppend(object,  clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  reflectionAppend(object,  clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	reflectionAppend(object,  clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();	  return    builder.hashCode();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    	non-compiled	[CE]  ';'  expected	74	None	replace
56	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  incomparable  types:  Class<CAP#1>  and  boolean  [FE]            NullPointerException      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  if(testTransients)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    else    {    return    builder.toHashCode();    }    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  boolean	23	None	replace
57	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  return  builder.toHashCode()  [CE]  'else'  without  'if'  [FE]              NullPointerException      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  return  builder.toHashCode()  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  return  builder.toHashCode()	  if(testTransients)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    else    {    return    builder.toHashCode();    }    	non-compiled	[CE]  'else'  without  'if'	23	None	replace
58	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  return  builder.toHashCode  [CE]  'else'  without  'if'  [FE]                NullPointerException      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  return  builder.toHashCode  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  return  builder.toHashCode	  if(testTransients)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    else    {    return    builder.toHashCode();    }    	non-compiled	[CE]  'else'  without  'if'	23	None	replace
59	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  multiplierNonZeroOddNumber);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  multiplierNonZeroOddNumber);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  multiplierNonZeroOddNumber);	  reflectionAppend(object,    clazz,    builder,    testTransients,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	45	None	replace
60	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  null);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  null);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  null);	  reflectionAppend(object,    clazz,    builder,    testTransients,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	45	None	replace
61	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  false);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  false);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  false);	  reflectionAppend(object,    clazz,    builder,    testTransients,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	45	None	replace
62	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
63	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  builder)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  builder)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  builder)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
64	[BUG]  [BUGGY]  reflect(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  reflect(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	reflect(object,  clazz,  builder,  testTransients,  excludeFields);	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflect(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
65	[BUG]  [BUGGY]  clazz  =  clazz.getSuperclass()!=  ';'  expected  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  clazz  =  clazz.getSuperclass()!=  ';'  expected  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	clazz  =  clazz.getSuperclass()!=  ';'  expected	  while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass()!=    ';'    expected    	non-compiled	[CE]  ';'  expected	34	None	replace
66	[BUG]  [BUGGY]  clazz  =  clazz.getSuperclass()  >>  ';'  expected  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  clazz  =  clazz.getSuperclass()  >>  ';'  expected  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	clazz  =  clazz.getSuperclass()  >>  ';'  expected	  while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass()!=    ';'    expected    	non-compiled	[CE]  ';'  expected	34	None	replace
67	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	add	                clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	compilable	  [FE]  NullPointerException  	55	4	add
68	[BUG]  [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	                clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	compilable	  [FE]  NullPointerException  	55	4	add
69	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	add	                clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	compilable	  [FE]  NullPointerException  	55	4	add
70	[BUG]  [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	                clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	compilable	  [FE]  NullPointerException  	55	4	add
71	[BUG]  [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	                clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
72	[BUG]  [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	                clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
73	[BUG]  [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.get  [CE]  ';'  expected  [FE]            NullPointerException    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.get  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	                clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.get	  	non-compiled	[CE]  ';'  expected	55	None	add
74	[BUG]  [BUGGY]  int  iConstant  =  clazz.getInitialNonZeroOddNumber();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  int  iConstant  =  clazz.getInitialNonZeroOddNumber();  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	int  iConstant  =  clazz.getInitialNonZeroOddNumber();	  return    builder.hashCode();    int    iConstant    =    clazz.getInitialNonZeroOddNumber();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
75	[BUG]  [BUGGY]  Integer  iConstant  =  clazz.getInitialNonZeroOddNumber();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  Integer  iConstant  =  clazz.getInitialNonZeroOddNumber();  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	Integer  iConstant  =  clazz.getInitialNonZeroOddNumber();	  return    builder.hashCode();    int    iConstant    =    clazz.getInitialNonZeroOddNumber();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
76	[BUG]  [BUGGY]  Int  iConstant  =  clazz.getInitialNonZeroOddNumber();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  Int  iConstant  =  clazz.getInitialNonZeroOddNumber();  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	Int  iConstant  =  clazz.getInitialNonZeroOddNumber();	  return    builder.hashCode();    int    iConstant    =    clazz.getInitialNonZeroOddNumber();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
77	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass);	  ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(multiplyNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
78	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);	  ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(multiplyNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
79	[BUG]  [BUGGY]  null  =  builder.hashCode();  if(testTransients!=  null)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  null  =  builder.hashCode();  if(testTransients!=  null)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	null  =  builder.hashCode();  if(testTransients!=  null)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,	  return    builder.hashCode();    if(builder!=    null)    {    for(int    iConstant    =    0;    iTotal    >=    multiplierNonZeroOddNumber;    iTotal++)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
80	[BUG]  [BUGGY]  null  =  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  build  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  null  =  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  build  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	null  =  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  build	  return    builder.hashCode();    if(builder!=    null)    {    for(int    iConstant    =    0;    iTotal    >=    multiplierNonZeroOddNumber;    iTotal++)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  ')'  expected	25	None	replace
81	[BUG]  [BUGGY]  return  builder.toString();  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.toString();  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toString();	  return    builder.hashCode()    +    1;    	non-compiled	[CE]  incompatible  types	40	None	replace
82	[BUG]  [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber)+  constructor.toHashCode();  [CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber)+  constructor.toHashCode();  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber)+  constructor.toHashCode();	  return    builder.toHashCode(initialNonZeroOddNumber,    multiplierNonZeroOddNumber)+    constructer.toHashCode();    	non-compiled	[CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	8	None	replace
83	[BUG]  [BUGGY]  return  constructer.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber)+  builder.toHashCode();  [CE]  cannot  find  symbol  constructer  [FE]                  AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  constructer.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber)+  builder.toHashCode();  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  constructer.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber)+  builder.toHashCode();	  return    builder.toHashCode(initialNonZeroOddNumber,    multiplierNonZeroOddNumber)+    constructer.toHashCode();    	non-compiled	[CE]  cannot  find  symbol  constructer	8	None	replace
84	[BUG]  [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber)/  constructer.toHashCode();  [CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber)/  constructer.toHashCode();  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber)/  constructer.toHashCode();	  return    builder.toHashCode(initialNonZeroOddNumber,    multiplierNonZeroOddNumber)+    constructer.toHashCode();    	non-compiled	[CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	8	None	replace
85	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(multipleNonZeroOddNumber,    multiplierNonZeroOddNumber);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
86	[BUG]  [BUGGY]  reflectAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  reflectAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	reflectAppend(object,  clazz,  builder,  testTransients,  excludeFields);	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
87	[BUG]  [BUGGY]  mockUp(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  mockUp(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	mockUp(object,  clazz,  builder,  testTransients,  excludeFields);	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
88	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	add	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	compilable	  [FE]  AssertionFailedError  	11	1	add
89	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	compilable	  [FE]  AssertionFailedError  	11	1	add
90	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
91	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getInitialNonZeroOddNumber()!=  multiplierNonZeroOddNumber)  {  clazz  =  clazz.getInitialNonZero  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getInitialNonZeroOddNumber()!=  multiplierNonZeroOddNumber)  {  clazz  =  clazz.getInitialNonZero  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getInitialNonZeroOddNumber()!=  multiplierNonZeroOddNumber)  {  clazz  =  clazz.getInitialNonZero	  	non-compiled	[CE]  ';'  expected	11	None	add
92	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getInitialNonZeroOddNumber()!=  multiplierNonZeroOddNumber)  {  clazz  =  clazz.getInitialN  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getInitialNonZeroOddNumber()!=  multiplierNonZeroOddNumber)  {  clazz  =  clazz.getInitialN  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getInitialNonZeroOddNumber()!=  multiplierNonZeroOddNumber)  {  clazz  =  clazz.getInitialN	  	non-compiled	[CE]  ';'  expected	11	None	add
93	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  missing  return  statement  [FE]    NullPointerException    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  missing  return  statement	56	None	replace
94	[BUG]  [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multierNonZeroOddNumber);  [CE]  cannot  find  symbol  multierNonZeroOddNumber  [FE]              AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multierNonZeroOddNumber);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(initialNonZeroOddNumber,  multierNonZeroOddNumber);	  return    builder.toHashCode(multiplyingNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol  multierNonZeroOddNumber	6	None	replace
95	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  builder.getSuperclass())  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  builder.getSuperclass())  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  builder.getSuperclass())  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  while(clazz.getSuperclass()!=    null    &&    clazz!=    builder.getSuperclass())    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
96	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  builder.getSuperclass())  {  clazz  =  clazz.getSuperclass();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  builder.getSuperclass())  {  clazz  =  clazz.getSuperclass();  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  builder.getSuperclass())  {  clazz  =  clazz.getSuperclass();	  while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
97	[BUG]  [BUGGY]  clazz  =  clazz.getRawClass();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  clazz  =  clazz.getRawClass();  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	clazz  =  clazz.getRawClass();	  clazz    =    clazz.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
98	[BUG]  [BUGGY]  clazz  =  clazz.getSimpleName();  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  clazz  =  clazz.getSimpleName();  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	clazz  =  clazz.getSimpleName();	  clazz    =    clazz.getSuperclass();    	non-compiled	[CE]  incompatible  types	16	None	replace
99	[BUG]  [BUGGY]  if(testTransients)  {  return  builder.hashCode();  }  [CE]  missing  return  statement  [FE]          AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  if(testTransients)  {  return  builder.hashCode();  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	if(testTransients)  {  return  builder.hashCode();  }	  return    builder.hashCode();    if(builder!=    null)    {    if(testTransients)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  missing  return  statement	67	None	replace
100	[BUG]  [BUGGY]  null  =  builder.hashCode();  if(testTransients)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unexpected  type  [FE]            AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  null  =  builder.hashCode();  if(testTransients)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	null  =  builder.hashCode();  if(testTransients)  {  throw  new  IllegalArgumentException( " ");  }	  return    builder.hashCode();    if(builder!=    null)    {    if(testTransients)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unexpected  type	67	None	replace
101	[BUG]  [BUGGY]  null  =  builder.hashCode();  [CE]  unexpected  type  [FE]              AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  null  =  builder.hashCode();  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	null  =  builder.hashCode();	  return    builder.hashCode();    if(builder!=    null)    {    if(testTransients)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unexpected  type	67	None	replace
102	[BUG]  [BUGGY]  honneurAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  honneurAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	honneurAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  if(testTransients)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
103	[BUG]  [BUGGY]  ReflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  ReflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	ReflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  if(testTransients)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
104	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  includeFields);  [CE]  cannot  find  symbol  includeFields  [FE]            AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  includeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  includeFields);	  reflectionAppend(object,    clazz,    builder,    testTransients,    multiplyerNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol  includeFields	47	None	replace
105	[BUG]  [BUGGY]  null  =  builder.hashCode();  if(testTransients)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  build  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  null  =  builder.hashCode();  if(testTransients)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  build  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	null  =  builder.hashCode();  if(testTransients)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  build	  return    builder.hashCode();    if(builder!=    null)    {    for(int    iConstant    =    0;    iTotal    <    multiplierNonZeroOddNumber;    iTotal++)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields    	non-compiled	[CE]  ')'  expected	26	None	replace
106	[BUG]  [BUGGY]  null  =  builder.hashCode();  if(testTransients)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  cla  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  null  =  builder.hashCode();  if(testTransients)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  cla  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	null  =  builder.hashCode();  if(testTransients)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  cla	  return    builder.hashCode();    if(builder!=    null)    {    for(int    iConstant    =    0;    iTotal    <    multiplierNonZeroOddNumber;    iTotal++)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields    	non-compiled	[CE]  ')'  expected	26	None	replace
107	[BUG]  [BUGGY]  null  =  builder.hashCode();  if(testTransients)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  null  =  builder.hashCode();  if(testTransients)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	null  =  builder.hashCode();  if(testTransients)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz	  return    builder.hashCode();    if(builder!=    null)    {    for(int    iConstant    =    0;    iTotal    <    multiplierNonZeroOddNumber;    iTotal++)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields    	non-compiled	[CE]  ')'  expected	26	None	replace
108	[BUG]  [BUGGY]  null  =  builder.hashCode();  if(testTransients)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  null  =  builder.hashCode();  if(testTransients)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	null  =  builder.hashCode();  if(testTransients)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,	  return    builder.hashCode();    if(builder!=    null)    {    for(int    iConstant    =    0;    iTotal    <    multiplierNonZeroOddNumber;    iTotal++)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
109	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [CE]  missing  return  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }	  if(testTransients)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    	non-compiled	[CE]  missing  return  statement	89	None	replace
110	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber);	  ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(multiplierNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
111	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  iTotal);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  iTotal);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  iTotal);	  ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(multiplierNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
112	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  object);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  object);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  object);	  ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(multiplierNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
113	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  testTransients)  {  builder.append(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  testTransients)  {  builder.append(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  testTransients)  {  builder.append(object,  clazz,  builder,  testTransients,  excludeFields);	  while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    builder.append(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
114	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  builder.getSuperclass())  {  builder.append(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  builder.getSuperclass())  {  builder.append(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  builder.getSuperclass())  {  builder.append(object,  clazz,  builder,  testTransients,  excludeFields);	  while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    builder.append(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
115	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  multierNonZeroOddNumber);  [CE]  cannot  find  symbol  multierNonZeroOddNumber  [FE]          AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  multierNonZeroOddNumber);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  multierNonZeroOddNumber);	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludedFields);    	non-compiled	[CE]  cannot  find  symbol  multierNonZeroOddNumber	13	None	replace
116	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  ReflectionBuilder  builder  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	ReflectionBuilder  builder  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  if(testTransients!=    null)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
117	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(initialNonZeroOddNumber,  multiplyNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(initialNonZeroOddNumber,  multiplyNonZeroOddNumber);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(initialNonZeroOddNumber,  multiplyNonZeroOddNumber);	  ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(multiplyNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
118	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(numberNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(numberNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(numberNonZeroOddNumber,  multiplierNonZeroOddNumber);	  ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(multiplyNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
119	[BUG]  [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [CE]  missing  return  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }	  if(testTransients)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    	non-compiled	[CE]  missing  return  statement	90	None	replace
120	[BUG]  [BUGGY]  clazz  =  clazz.getSuperclass()  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  clazz  =  clazz.getSuperclass()  }  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	clazz  =  clazz.getSuperclass()  }	  while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass()    }    	non-compiled	[CE]  ';'  expected	35	None	replace
121	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  builder.getSuperclass())  {  clazz  =  clazz.getSuperclass()  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  builder.getSuperclass())  {  clazz  =  clazz.getSuperclass()  }  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  builder.getSuperclass())  {  clazz  =  clazz.getSuperclass()  }	  while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass()    }    	non-compiled	[CE]  ';'  expected	35	None	replace
122	[BUG]  [BUGGY]  null  =  builder.hashCode();  if(testTransients!=  null)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  null  =  builder.hashCode();  if(testTransients!=  null)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	null  =  builder.hashCode();  if(testTransients!=  null)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,	  return    builder.hashCode();    if(builder!=    null)    {    for(int    iConstant    =    0;    iTotal    <    multiplierNonZeroOddNumber;    iTotal++)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    exclude    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
123	[BUG]  [BUGGY]  null  =  builder.hashCode();  if(testTransients  ==  null)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  null  =  builder.hashCode();  if(testTransients  ==  null)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	null  =  builder.hashCode();  if(testTransients  ==  null)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,	  return    builder.hashCode();    if(builder!=    null)    {    for(int    iConstant    =    0;    iTotal    <    multiplierNonZeroOddNumber;    iTotal++)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    exclude    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
124	[BUG]  [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz,  reflectUpToClass);  [CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz,  reflectUpToClass);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz,  reflectUpToClass);	  return    builder.toHashCode(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    clazz);    	non-compiled	[CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	65	None	replace
125	[BUG]  [BUGGY]  return  builder.toHashCode(iConstant,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]                AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.toHashCode(iConstant,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(iConstant,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz);	  return    builder.toHashCode(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    clazz);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	65	None	replace
126	[BUG]  [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz,  testTransients);  [CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz,  testTransients);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz,  testTransients);	  return    builder.toHashCode(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    clazz);    	non-compiled	[CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	65	None	replace
127	[BUG]  [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz,  refTransients);  [CE]  cannot  find  symbol  refTransients  [FE]                    AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz,  refTransients);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz,  refTransients);	  return    builder.toHashCode(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    clazz);    	non-compiled	[CE]  cannot  find  symbol  refTransients	65	None	replace
128	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber);	  ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(multiplyerNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
129	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(initialNonZeroOddNumber,  multiplyerNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(initialNonZeroOddNumber,  multiplyerNonZeroOddNumber);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(initialNonZeroOddNumber,  multiplyerNonZeroOddNumber);	  ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(multiplyerNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
130	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  iTotal);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  iTotal);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  iTotal);	  ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(multiplyerNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
131	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber);	  ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(multipleNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
132	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(initialNonZeroOddNumber,  multipleNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(initialNonZeroOddNumber,  multipleNonZeroOddNumber);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(initialNonZeroOddNumber,  multipleNonZeroOddNumber);	  ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(multipleNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
133	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  iTotal);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  iTotal);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  iTotal);	  ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(multipleNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
134	[BUG]  [BUGGY]  null  =  builder.hashCode();  if(testTransients)  {  if(testTransients)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null.   ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  null  =  builder.hashCode();  if(testTransients)  {  if(testTransients)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null.   ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	null  =  builder.hashCode();  if(testTransients)  {  if(testTransients)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null.   ");  }	  return    builder.hashCode();    if(builder!=    null)    {    if(testTransients)    {    throw    new    IllegalArgumentException(   "The    object    to    build    a    hash    code    for    must    not    be    null.   ");    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
135	[BUG]  [BUGGY]  null  =  builder.hashCode();  if(testTransients)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null.   ");  }  [CE]  unexpected  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  null  =  builder.hashCode();  if(testTransients)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null.   ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	null  =  builder.hashCode();  if(testTransients)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null.   ");  }	  return    builder.hashCode();    if(builder!=    null)    {    if(testTransients)    {    throw    new    IllegalArgumentException(   "The    object    to    build    a    hash    code    for    must    not    be    null.   ");    }    	non-compiled	[CE]  unexpected  type	70	None	replace
136	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiprNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiprNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiprNonZeroOddNumber,  multiplierNonZeroOddNumber);	  ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(multiprNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
137	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(initialNonZeroOddNumber,  multiprNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(initialNonZeroOddNumber,  multiprNonZeroOddNumber);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(initialNonZeroOddNumber,  multiprNonZeroOddNumber);	  ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(multiprNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
138	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiprNonZeroOddNumber,  multiplierNonZeroOddNumber,  iTotal);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiprNonZeroOddNumber,  multiplierNonZeroOddNumber,  iTotal);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiprNonZeroOddNumber,  multiplierNonZeroOddNumber,  iTotal);	  ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(multiprNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
139	[BUG]  [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);	  return    builder.toHashCode(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	31	None	replace
140	[BUG]  [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]                    AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  iConstant);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  iConstant);	  return    builder.toHashCode(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	31	None	replace
141	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  testTransients,  excludeFields);  [CE]  ')'  expected  [FE]          NullPointerException      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  testTransients,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  testTransients,  excludeFields);	          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  ')'  expected	57	None	replace
142	[BUG]  [BUGGY]  return  builder!=  null?  null  :  builder.hashCode();  builder!=  null?  null  :  builder.hashCode();  [CE]  not  a  statement  [FE]    NullPointerException    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder!=  null?  null  :  builder.hashCode();  builder!=  null?  null  :  builder.hashCode();  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return    builder!=    null?    null    :    builder.hashCode();    builder!=  null?  null  :  builder.hashCode();	  	non-compiled	[CE]  not  a  statement	48	None	add
143	[BUG]  [BUGGY]  return  builder!=  null?  null  :  builder.hashCode();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  unreachable  statement  [FE]      NullPointerException    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder!=  null?  null  :  builder.hashCode();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return    builder!=    null?    null    :    builder.hashCode();    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	non-compiled	[CE]  unreachable  statement	48	None	add
144	[BUG]  [BUGGY]  return  builder!=  null?  null  :  builder.hashCode();  if(builder!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]        NullPointerException    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder!=  null?  null  :  builder.hashCode();  if(builder!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return    builder!=    null?    null    :    builder.hashCode();    if(builder!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	48	None	add
145	[BUG]  [BUGGY]  return  builder!=  null?  null  :  builder.hashCode();  clazz  =  builder.hashCode();  [CE]  incompatible  types  [FE]          NullPointerException    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder!=  null?  null  :  builder.hashCode();  clazz  =  builder.hashCode();  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return    builder!=    null?    null    :    builder.hashCode();    clazz  =  builder.hashCode();	  	non-compiled	[CE]  incompatible  types	48	None	add
146	[BUG]  [BUGGY]  if(builder!=  null)  {  return  builder.hashCode();  }  [CE]  missing  return  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  if(builder!=  null)  {  return  builder.hashCode();  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	if(builder!=  null)  {  return  builder.hashCode();  }	  return    builder.hashCode();    if(builder!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  missing  return  statement	69	None	replace
147	[BUG]  [BUGGY]  if(builder!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  missing  return  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  if(builder!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	if(builder!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  return    builder.hashCode();    if(builder!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  missing  return  statement	69	None	replace
148	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          NullPointerException      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(testTransients)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	22	None	replace
149	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  build  >=  ')'  expected  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  build  >=  ')'  expected  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  build  >=  ')'  expected	  return    builder.hashCode();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    build    	non-compiled	[CE]  ')'  expected	73	None	replace
150	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  build  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  build  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  build	  return    builder.hashCode();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    build    	non-compiled	[CE]  ')'  expected	73	None	replace
151	[BUG]  [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplyerNonZeroOddNumber);  [CE]  cannot  find  symbol  multiplyerNonZeroOddNumber  [FE]            AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplyerNonZeroOddNumber);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(initialNonZeroOddNumber,  multiplyerNonZeroOddNumber);	  return    builder.toHashCode(multiplyerNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol  multiplyerNonZeroOddNumber	5	None	replace
152	[BUG]  [BUGGY]  return  builder.toHashCode(iConstant,  initialNonZeroOddNumber);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]              AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.toHashCode(iConstant,  initialNonZeroOddNumber);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(iConstant,  initialNonZeroOddNumber);	  return    builder.toHashCode(multiplyerNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	5	None	replace
153	[BUG]  [BUGGY]  return  builder.toHashCode(object,  initialNonZeroOddNumber)+  multiplierNonZeroOddNumber.toHashCode();  [CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.toHashCode(object,  initialNonZeroOddNumber)+  multiplierNonZeroOddNumber.toHashCode();  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(object,  initialNonZeroOddNumber)+  multiplierNonZeroOddNumber.toHashCode();	  return    builder.toHashCode(initialNonZeroOddNumber,    multiplierNonZeroOddNumber)+    object.toHashCode();    	non-compiled	[CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	64	None	replace
154	[BUG]  [BUGGY]  return  builder.toHashCode(object,  multiplierNonZeroOddNumber)+  initialNonZeroOddNumber.toHashCode();  [CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.toHashCode(object,  multiplierNonZeroOddNumber)+  initialNonZeroOddNumber.toHashCode();  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(object,  multiplierNonZeroOddNumber)+  initialNonZeroOddNumber.toHashCode();	  return    builder.toHashCode(initialNonZeroOddNumber,    multiplierNonZeroOddNumber)+    object.toHashCode();    	non-compiled	[CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	64	None	replace
155	[BUG]  [BUGGY]  return  builder.toHashCode(iConstant,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber)+  object.toHashCode();  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]                    AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.toHashCode(iConstant,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber)+  object.toHashCode();  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(iConstant,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber)+  object.toHashCode();	  return    builder.toHashCode(initialNonZeroOddNumber,    multiplierNonZeroOddNumber)+    object.toHashCode();    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	64	None	replace
156	[BUG]  [BUGGY]  clazz  =  clazz.getSuperclass()  >>  ';'  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  clazz  =  clazz.getSuperclass()  >>  ';'  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	clazz  =  clazz.getSuperclass()  >>  ';'	  while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass()!=    ';'    	non-compiled	[CE]  ';'  expected	33	None	replace
157	[BUG]  [BUGGY]  clazz  =  clazz.getSuperclass()!=  ';'  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  clazz  =  clazz.getSuperclass()!=  ';'  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	clazz  =  clazz.getSuperclass()!=  ';'	  while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass()!=    ';'    	non-compiled	[CE]  ';'  expected	33	None	replace
158	[BUG]  [BUGGY]  clazz  =  clazz.getSuperclass()  >=  ';'  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  clazz  =  clazz.getSuperclass()  >=  ';'  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	clazz  =  clazz.getSuperclass()  >=  ';'	  while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass()    >=    ';'    	non-compiled	[CE]  ';'  expected	88	None	replace
159	[BUG]  [BUGGY]  return  builder.hashCode()  +  iTotal;  [CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context  [FE]        AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.hashCode()  +  iTotal;  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.hashCode()  +  iTotal;	  return    builder.hashCode()    +    iConstant;    	non-compiled	[CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context	38	None	replace
160	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.hashCode()  +  initialNonZeroOddNumber;  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	add	return  builder.hashCode()  +  initialNonZeroOddNumber;	  return    builder.hashCode()    +    iConstant;    	compilable	  [FE]  AssertionFailedError  	38	4	replace
161	[BUG]  [BUGGY]  return  builder.hashCode()  +  initialNonZeroOddNumber;  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.hashCode()  +  initialNonZeroOddNumber;  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.hashCode()  +  initialNonZeroOddNumber;	  return    builder.hashCode()    +    iConstant;    	compilable	  [FE]  AssertionFailedError  	38	4	replace
162	[BUG]  [BUGGY]  return  builder.hashCode()  +  clazz;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.hashCode()  +  clazz;  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.hashCode()  +  clazz;	  return    builder.hashCode()    +    iConstant;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	38	None	replace
163	[BUG]  [BUGGY]  return  builder.hashCode()  +  reflectionHashCode;  [CE]  cannot  find  symbol  reflectionHashCode  [FE]              AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.hashCode()  +  reflectionHashCode;  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.hashCode()  +  reflectionHashCode;	  return    builder.hashCode()    +    iConstant;    	non-compiled	[CE]  cannot  find  symbol  reflectionHashCode	38	None	replace
164	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClass(clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]                  AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  aughtExceptionHandler.handleMissingClass(clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	aughtExceptionHandler.handleMissingClass(clazz,  builder,  testTransients,  excludeFields);	  if(testTransients)    {    clazz    =    clazz.getSuperclass();    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	59	None	replace
165	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClass(null,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]                    AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  aughtExceptionHandler.handleMissingClass(null,  builder,  testTransients,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	aughtExceptionHandler.handleMissingClass(null,  builder,  testTransients,  excludeFields);	  if(testTransients)    {    clazz    =    clazz.getSuperclass();    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	59	None	replace
166	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  reflectUpToClass);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  reflectUpToClass);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  reflectUpToClass);	  reflectionAppend(object,    clazz,    builder,    testTransients,    multiplierNonZeroOddNumber,    excludeFields);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	46	None	replace
167	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(multiplyerNonZeroOddNumber,    multiplierNonZeroOddNumber);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
168	[BUG]  [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber)/  object.toHashCode();  [CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber)/  object.toHashCode();  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber)/  object.toHashCode();	  return    builder.toHashCode(initialNonZeroOddNumber,    multiplierNonZeroOddNumber)/    builder.toHashCode();    	non-compiled	[CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	9	None	replace
169	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  constructer,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  constructer  [FE]            AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  reflectionAppend(object,  clazz,  constructer,  testTransients,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	reflectionAppend(object,  clazz,  constructer,  testTransients,  excludeFields);	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,    clazz,    constructer,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol  constructer	14	None	replace
170	[BUG]  [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  reflectionAppend(object,  clazz,  constructer,  testTransients,  excludeFields);  }  [CE]  cannot  find  symbol  constructer  [FE]              AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  reflectionAppend(object,  clazz,  constructer,  testTransients,  excludeFields);  }  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  reflectionAppend(object,  clazz,  constructer,  testTransients,  excludeFields);  }	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,    clazz,    constructer,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol  constructer	14	None	replace
171	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	add	                clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	compilable	  [FE]  NullPointerException  	55	4	add
172	[BUG]  [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	                clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	compilable	  [FE]  NullPointerException  	55	4	add
173	[BUG]  [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber)&  builder.toHashCode();  [CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber)&  builder.toHashCode();  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber)&  builder.toHashCode();	  return    builder.toHashCode(initialNonZeroOddNumber,    multiplierNonZeroOddNumber),    builder.toHashCode();    	non-compiled	[CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	10	None	replace
174	[BUG]  [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber)-  builder.toHashCode();  [CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber)-  builder.toHashCode();  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber)-  builder.toHashCode();	  return    builder.toHashCode(initialNonZeroOddNumber,    multiplierNonZeroOddNumber),    builder.toHashCode();    	non-compiled	[CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	10	None	replace
175	[BUG]  [BUGGY]  return  builder  ==  null?  null  :  builder.hashCode();  if(builder  ==  null?  null  :  builder.hashCode())  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder  ==  null?  null  :  builder.hashCode();  if(builder  ==  null?  null  :  builder.hashCode())  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return    builder    ==    null?    null    :    builder.hashCode();    if(builder  ==  null?  null  :  builder.hashCode())  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	non-compiled	[CE]  incompatible  types	50	None	add
176	[BUG]  [BUGGY]  return  builder  ==  null?  null  :  builder.hashCode();  if(builder  ==  null?  null  :  builder.hashCode())  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  return  builder  ==  null?  null  :  builder.hashCode();  }  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder  ==  null?  null  :  builder.hashCode();  if(builder  ==  null?  null  :  builder.hashCode())  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  return  builder  ==  null?  null  :  builder.hashCode();  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return    builder    ==    null?    null    :    builder.hashCode();    if(builder  ==  null?  null  :  builder.hashCode())  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  return  builder  ==  null?  null  :  builder.hashCode();  }	  	non-compiled	[CE]  incompatible  types	50	None	add
177	[BUG]  [BUGGY]  return  builder  ==  null?  null  :  builder.hashCode();  if(builder  ==  null?  null  :  builder.hashCode())  {  return  builder  ==  null?  null  :  builder.hashCode();  }  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder  ==  null?  null  :  builder.hashCode();  if(builder  ==  null?  null  :  builder.hashCode())  {  return  builder  ==  null?  null  :  builder.hashCode();  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return    builder    ==    null?    null    :    builder.hashCode();    if(builder  ==  null?  null  :  builder.hashCode())  {  return  builder  ==  null?  null  :  builder.hashCode();  }	  	non-compiled	[CE]  incompatible  types	50	None	add
178	[BUG]  [BUGGY]  return  builder  ==  null?  null  :  builder.hashCode();  if(builder  ==  null?  null  :  builder.hashCode())  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder  ==  null?  null  :  builder.hashCode();  if(builder  ==  null?  null  :  builder.hashCode())  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return    builder    ==    null?    null    :    builder.hashCode();    if(builder  ==  null?  null  :  builder.hashCode())  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend	  	non-compiled	[CE]  not  a  statement	50	None	add
179	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  build  }  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  build  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  build  }	  return    builder.hashCode();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    build    	non-compiled	[CE]  ')'  expected	73	None	replace
180	[BUG]  [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields);  [CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields);	  return    builder.toHashCode(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	31	None	replace
181	[BUG]  [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  return    builder.toHashCode(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  ')'  expected	31	None	replace
182	[BUG]  [BUGGY]  if(builder  ==  null)  {  return  builder.hashCode();  }  [CE]  missing  return  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  if(builder  ==  null)  {  return  builder.hashCode();  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	if(builder  ==  null)  {  return  builder.hashCode();  }	  return    builder.hashCode();    if(builder!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  missing  return  statement	69	None	replace
183	[BUG]  [BUGGY]  return  builder.hashCode()  +  1;  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.hashCode()  +  1;  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return    builder.hashCode()    +    1;    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	non-compiled	[CE]  unreachable  statement	39	None	add
184	[BUG]  [BUGGY]  return  builder.hashCode()  +  1;  int  iConstant  =  clazz.getInitialNonZeroOddNumber();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.hashCode()  +  1;  int  iConstant  =  clazz.getInitialNonZeroOddNumber();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return    builder.hashCode()    +    1;    int  iConstant  =  clazz.getInitialNonZeroOddNumber();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	non-compiled	[CE]  cannot  find  symbol	39	None	add
185	[BUG]  [BUGGY]  return  builder.hashCode()  +  1;  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.hashCode()  +  1;  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return    builder.hashCode()    +    1;    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
186	[BUG]  [BUGGY]  return  builder.hashCode()  +  1;  int  iConstant  =  clazz.getInitialNonZeroOddNumber();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.hashCode()  +  1;  int  iConstant  =  clazz.getInitialNonZeroOddNumber();  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return    builder.hashCode()    +    1;    int  iConstant  =  clazz.getInitialNonZeroOddNumber();	  	non-compiled	[CE]  cannot  find  symbol	39	None	add
187	[BUG]  [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  clazz);  [CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  clazz);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  clazz);	  return    builder.toHashCode(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    reflectUpToClass);    	non-compiled	[CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	30	None	replace
188	[BUG]  [BUGGY]  return  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  build  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  build  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  build	  return    builder.hashCode();    if(builder!=    null)    {    for(int    iConstant    =    0;    iTotal    >=    multiplierNonZeroOddNumber;    iTotal++)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields    	non-compiled	[CE]  ')'  expected	28	None	replace
189	[BUG]  [BUGGY]  null  =  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  null  =  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	null  =  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz	  return    builder.hashCode();    if(builder!=    null)    {    for(int    iConstant    =    0;    iTotal    >=    multiplierNonZeroOddNumber;    iTotal++)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields    	non-compiled	[CE]  ')'  expected	28	None	replace
190	[BUG]  [BUGGY]  null  =  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  cla  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  null  =  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  cla  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	null  =  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  cla	  return    builder.hashCode();    if(builder!=    null)    {    for(int    iConstant    =    0;    iTotal    >=    multiplierNonZeroOddNumber;    iTotal++)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields    	non-compiled	[CE]  ')'  expected	28	None	replace
191	[BUG]  [BUGGY]  return  builder.hashCode();  if(builder  ==  null)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  build  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.hashCode();  if(builder  ==  null)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  build  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.hashCode();  if(builder  ==  null)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  build	  return    builder.hashCode();    if(builder!=    null)    {    for(int    iConstant    =    0;    iTotal    >=    multiplierNonZeroOddNumber;    iTotal++)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields    	non-compiled	[CE]  ')'  expected	28	None	replace
192	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	add	                clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	compilable	  [FE]  NullPointerException  	17	4	add
193	[BUG]  [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	                clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	compilable	  [FE]  NullPointerException  	17	4	add
194	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyNonZeroOddNumber,  multierNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyNonZeroOddNumber,  multierNonZeroOddNumber);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyNonZeroOddNumber,  multierNonZeroOddNumber);	  ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(multiplyNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
195	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  instanceAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  instanceAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  instanceAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
196	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectUpToClass(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectUpToClass(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectUpToClass(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
197	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	add	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }	  	compilable	  [FE]  AssertionFailedError  	11	1	add
198	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }	  	compilable	  [FE]  AssertionFailedError  	11	1	add
199	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.hashCode()  +  multiplierNonZeroOddNumber;  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	add	return  builder.hashCode()  +  multiplierNonZeroOddNumber;	  return    builder.hashCode()    +    iConstant;    	compilable	  [FE]  AssertionFailedError  	38	4	replace
200	[BUG]  [BUGGY]  return  builder.hashCode()  +  multiplierNonZeroOddNumber;  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.hashCode()  +  multiplierNonZeroOddNumber;  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.hashCode()  +  multiplierNonZeroOddNumber;	  return    builder.hashCode()    +    iConstant;    	compilable	  [FE]  AssertionFailedError  	38	4	replace
201	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);	  ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(multiplierNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
202	[BUG]  [BUGGY]  if(testTransients)  {  clazz  =  clazz.getSuperclass();  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  missing  return  statement  [FE]          NullPointerException      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  if(testTransients)  {  clazz  =  clazz.getSuperclass();  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	if(testTransients)  {  clazz  =  clazz.getSuperclass();  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  missing  return  statement	19	None	replace
203	[BUG]  [BUGGY]  null  =  clazz.hashCode();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  unexpected  type  [FE]            AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  null  =  clazz.hashCode();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	null  =  clazz.hashCode();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  return    builder.hashCode();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  unexpected  type	75	None	replace
204	[BUG]  [BUGGY]  atterns.addAll(expandUpToClass,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  expandUpToClass  [FE]                    AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  atterns.addAll(expandUpToClass,  builder,  testTransients,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	atterns.addAll(expandUpToClass,  builder,  testTransients,  excludeFields);	  if(testTransients)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  cannot  find  symbol  expandUpToClass	4	None	replace
205	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields).reset();  [CE]  void  cannot  be  dereferenced  [FE]                      AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields).reset();  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields).reset();	  if(testTransients)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  void  cannot  be  dereferenced	4	None	replace
206	[BUG]  [BUGGY]  while(clazz!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  while(clazz!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();	  while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
207	[BUG]  [BUGGY]  initialNonZeroOddNumber  =  builder.hashCode();  if(testTransients)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  initialNonZeroOddNumber  =  builder.hashCode();  if(testTransients)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	initialNonZeroOddNumber  =  builder.hashCode();  if(testTransients)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend	  return    builder.hashCode();    if(builder!=    null)    {    for(int    iConstant    =    0;    iTotal    <    multiplierNonZeroOddNumber;    iTotal++)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  not  a  statement	24	None	replace
208	[BUG]  [BUGGY]  initialNonZeroOddNumber  =  builder.hashCode();  if(testTransients)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionApp  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  initialNonZeroOddNumber  =  builder.hashCode();  if(testTransients)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionApp  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	initialNonZeroOddNumber  =  builder.hashCode();  if(testTransients)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionApp	  return    builder.hashCode();    if(builder!=    null)    {    for(int    iConstant    =    0;    iTotal    <    multiplierNonZeroOddNumber;    iTotal++)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  not  a  statement	24	None	replace
209	[BUG]  [BUGGY]  initialNonZeroOddNumber  =  builder.hashCode();  if(testTransients)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  initialNonZeroOddNumber  =  builder.hashCode();  if(testTransients)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	initialNonZeroOddNumber  =  builder.hashCode();  if(testTransients)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,	  return    builder.hashCode();    if(builder!=    null)    {    for(int    iConstant    =    0;    iTotal    <    multiplierNonZeroOddNumber;    iTotal++)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
210	[BUG]  [BUGGY]  initialNonZeroOddNumber  =  builder.hashCode();  if(testTransients)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  initialNonZeroOddNumber  =  builder.hashCode();  if(testTransients)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	initialNonZeroOddNumber  =  builder.hashCode();  if(testTransients)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz	  return    builder.hashCode();    if(builder!=    null)    {    for(int    iConstant    =    0;    iTotal    <    multiplierNonZeroOddNumber;    iTotal++)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  ')'  expected	24	None	replace
211	[BUG]  [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass()  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass()  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass()	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    	non-compiled	[CE]  ';'  expected	78	None	replace
212	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiprNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiprNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiprNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);	  ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(multiprNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
213	[BUG]  [BUGGY]  return  clazz.hashCode();  int  iConstant  =  builder.getInitialNonZeroOddNumber();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  clazz.hashCode();  int  iConstant  =  builder.getInitialNonZeroOddNumber();  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  clazz.hashCode();  int  iConstant  =  builder.getInitialNonZeroOddNumber();	  return    builder.hashCode();    int    iConstant    =    clazz.getInitialNonZeroOddNumber();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
214	[BUG]  [BUGGY]  null  =  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  null  =  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	null  =  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz	  return    builder.hashCode();    if(builder!=    null)    {    for(int    iConstant    =    0;    iTotal    <    multiplierNonZeroOddNumber;    iTotal++)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    exclude    	non-compiled	[CE]  ')'  expected	27	None	replace
215	[BUG]  [BUGGY]  null  =  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  build  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  null  =  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  build  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	null  =  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  build	  return    builder.hashCode();    if(builder!=    null)    {    for(int    iConstant    =    0;    iTotal    <    multiplierNonZeroOddNumber;    iTotal++)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    exclude    	non-compiled	[CE]  ')'  expected	27	None	replace
216	[BUG]  [BUGGY]  null  =  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  cla  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  null  =  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  cla  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	null  =  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  cla	  return    builder.hashCode();    if(builder!=    null)    {    for(int    iConstant    =    0;    iTotal    <    multiplierNonZeroOddNumber;    iTotal++)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    exclude    	non-compiled	[CE]  ')'  expected	27	None	replace
217	[BUG]  [BUGGY]  clazz  =  clazz.getSuperclass()  +  ';'  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  clazz  =  clazz.getSuperclass()  +  ';'  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	clazz  =  clazz.getSuperclass()  +  ';'	  while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass()    >=    ';'    	non-compiled	[CE]  ';'  expected	88	None	replace
218	[BUG]  [BUGGY]  testTransients  =  clazz.getSuperclass();  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  testTransients  =  clazz.getSuperclass();  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	testTransients  =  clazz.getSuperclass();	  reflectionAppend(object,    	non-compiled	[CE]  incompatible  types	1	None	replace
219	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);	  ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(multiplyerNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
220	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass()  >>  ';'  expected  [CE]  ';'  expected  [FE]        NullPointerException      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass()  >>  ';'  expected  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass()  >>  ';'  expected	          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass()    	non-compiled	[CE]  ';'  expected	71	None	replace
221	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass()  [Delete]  ';'  expected  [CE]  ';'  expected  [FE]          NullPointerException      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass()  [Delete]  ';'  expected  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass()  [Delete]  ';'  expected	          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass()    	non-compiled	[CE]  ';'  expected	71	None	replace
222	[BUG]  [BUGGY]  if(reflectUpToClass!=  null)  {  clazz  =  clazz.getSuperclass();  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  missing  return  statement  [FE]    NullPointerException    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  if(reflectUpToClass!=  null)  {  clazz  =  clazz.getSuperclass();  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	if(reflectUpToClass!=  null)  {  clazz  =  clazz.getSuperclass();  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  missing  return  statement	18	None	replace
223	[BUG]  [BUGGY]  if(reflectUpToClass  ==  null)  {  clazz  =  clazz.getSuperclass();  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  missing  return  statement  [FE]      NullPointerException    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  if(reflectUpToClass  ==  null)  {  clazz  =  clazz.getSuperclass();  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	if(reflectUpToClass  ==  null)  {  clazz  =  clazz.getSuperclass();  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  missing  return  statement	18	None	replace
224	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);	  ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(multipleNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
225	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multipleNonZeroOddNumber,  multierNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multipleNonZeroOddNumber,  multierNonZeroOddNumber);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multipleNonZeroOddNumber,  multierNonZeroOddNumber);	  ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(multipleNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
226	[BUG]  [BUGGY]  return  builder.toHashCode(iTotal,  multiplierNonZeroOddNumber)+  object.toHashCode();  [CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context  [FE]                AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.toHashCode(iTotal,  multiplierNonZeroOddNumber)+  object.toHashCode();  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(iTotal,  multiplierNonZeroOddNumber)+  object.toHashCode();	  return    builder.toHashCode(initialNonZeroOddNumber,    multiplierNonZeroOddNumber)+    object.toHashCode();    	non-compiled	[CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context	64	None	replace
227	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields).toHashCode();  [CE]  void  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields).toHashCode();  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields).toHashCode();	  reflectionAppend(object,    clazz,    builder,    testTransients,    multiplyerNonZeroOddNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	47	None	replace
228	[BUG]  [BUGGY]  if(object  ==  null)  {  return  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  if(object  ==  null)  {  return  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	if(object  ==  null)  {  return  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz	  return    builder.hashCode();    if(builder!=    null)    {    for(int    iConstant    =    0;    iTotal    <    multiplierNonZeroOddNumber;    iTotal++)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields    	non-compiled	[CE]  ')'  expected	26	None	replace
229	[BUG]  [BUGGY]  if(object  ==  null)  {  return  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  if(object  ==  null)  {  return  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	if(object  ==  null)  {  return  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,	  return    builder.hashCode();    if(builder!=    null)    {    for(int    iConstant    =    0;    iTotal    <    multiplierNonZeroOddNumber;    iTotal++)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
230	[BUG]  [BUGGY]  if(object  ==  null)  {  return  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  cla  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  if(object  ==  null)  {  return  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  cla  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	if(object  ==  null)  {  return  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  cla	  return    builder.hashCode();    if(builder!=    null)    {    for(int    iConstant    =    0;    iTotal    <    multiplierNonZeroOddNumber;    iTotal++)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields    	non-compiled	[CE]  ')'  expected	26	None	replace
231	[BUG]  [BUGGY]  initialNonZeroOddNumber  =  builder.hashCode();  if(testTransients)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  initialNonZeroOddNumber  =  builder.hashCode();  if(testTransients)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	initialNonZeroOddNumber  =  builder.hashCode();  if(testTransients)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend	  return    builder.hashCode();    if(builder!=    null)    {    for(int    iConstant    =    0;    iTotal    >=    multiplierNonZeroOddNumber;    iTotal++)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  not  a  statement	25	None	replace
232	[BUG]  [BUGGY]  initialNonZeroOddNumber  =  builder.hashCode();  if(testTransients)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionApp  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  initialNonZeroOddNumber  =  builder.hashCode();  if(testTransients)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionApp  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	initialNonZeroOddNumber  =  builder.hashCode();  if(testTransients)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionApp	  return    builder.hashCode();    if(builder!=    null)    {    for(int    iConstant    =    0;    iTotal    >=    multiplierNonZeroOddNumber;    iTotal++)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  not  a  statement	25	None	replace
233	[BUG]  [BUGGY]  initialNonZeroOddNumber  =  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  initialNonZeroOddNumber  =  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	initialNonZeroOddNumber  =  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend	  return    builder.hashCode();    if(builder!=    null)    {    for(int    iConstant    =    0;    iTotal    >=    multiplierNonZeroOddNumber;    iTotal++)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  not  a  statement	25	None	replace
234	[BUG]  [BUGGY]  initialNonZeroOddNumber  =  builder.getInitialNonZeroOddNumber();  if(testTransients)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  initialNonZeroOddNumber  =  builder.getInitialNonZeroOddNumber();  if(testTransients)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	initialNonZeroOddNumber  =  builder.getInitialNonZeroOddNumber();  if(testTransients)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend	  return    builder.hashCode();    if(builder!=    null)    {    for(int    iConstant    =    0;    iTotal    >=    multiplierNonZeroOddNumber;    iTotal++)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  not  a  statement	25	None	replace
235	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,	  return    builder.hashCode();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
236	[BUG]  [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  constructorNonZeroOddNumber);  [CE]  cannot  find  symbol  constructorNonZeroOddNumber  [FE]              AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  constructorNonZeroOddNumber);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(initialNonZeroOddNumber,  constructorNonZeroOddNumber);	  return    builder.toHashCode(multiplyingNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol  constructorNonZeroOddNumber	6	None	replace
237	[BUG]  [BUGGY]  while(clazz!=  null  &&  clazz!=  reflectUpToClass)  {  builder.append(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  while(clazz!=  null  &&  clazz!=  reflectUpToClass)  {  builder.append(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz!=  null  &&  clazz!=  reflectUpToClass)  {  builder.append(object,  clazz,  builder,  testTransients,  excludeFields);	  while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    builder.append(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
238	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  builder.append(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  no  suitable  method  found  for  append(T,Class<CAP#1>,HashCodeBuilder,boolean,String[])  [FE]          AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  builder.append(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  builder.append(object,  clazz,  builder,  testTransients,  excludeFields);  }	  while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    builder.append(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  no  suitable  method  found  for  append(T,Class<CAP#1>,HashCodeBuilder,boolean,String[])	79	None	replace
239	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectNonZeroOddNumber)  {  builder.append(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectNonZeroOddNumber)  {  builder.append(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectNonZeroOddNumber)  {  builder.append(object,  clazz,  builder,  testTransients,  excludeFields);	  while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    builder.append(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
240	[BUG]  [BUGGY]  null  =  builder.hashCode();  if(builder!=  null)  {  if(testTransients)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  null  =  builder.hashCode();  if(builder!=  null)  {  if(testTransients)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	null  =  builder.hashCode();  if(builder!=  null)  {  if(testTransients)  {  throw  new  IllegalArgumentException( " ");  }	  return    builder.hashCode();    if(builder!=    null)    {    if(testTransients)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
241	[BUG]  [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  return  builder.toHashCode();  }  [CE]  missing  return  statement  [FE]    AssertionFailedError    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  return  builder.toHashCode();  }  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  return  builder.toHashCode();  }	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  missing  return  statement	12	None	replace
242	[BUG]  [BUGGY]  safeTest(clazz.getSuperclass());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  safeTest(clazz.getSuperclass());  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	safeTest(clazz.getSuperclass());	  if(testTransients)    {    clazz    =    clazz.getSuperclass();    }    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
243	[BUG]  [BUGGY]  parent  =  clazz.getSuperclass();  [CE]  cannot  find  symbol  parent  [FE]                    AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  parent  =  clazz.getSuperclass();  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	parent  =  clazz.getSuperclass();	  if(testTransients)    {    clazz    =    clazz.getSuperclass();    }    	non-compiled	[CE]  cannot  find  symbol  parent	59	None	replace
244	[BUG]  [BUGGY]  return  builder.hashCode()?  this  :  builder.hashCode();  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.hashCode()?  this  :  builder.hashCode();  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.hashCode()?  this  :  builder.hashCode();	  return    builder.hasNext()?    this    :    builder.hashCode();    	non-compiled	[CE]  incompatible  types	86	None	replace
245	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  negationNonZeroOddNumber);  [CE]  cannot  find  symbol  negationNonZeroOddNumber  [FE]          AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  negationNonZeroOddNumber);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  negationNonZeroOddNumber);	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludedFields);    	non-compiled	[CE]  cannot  find  symbol  negationNonZeroOddNumber	13	None	replace
246	[BUG]  [BUGGY]  reflection(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  reflection(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	reflection(object,  clazz,  builder,  testTransients,  excludeFields);	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflect(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
247	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);	  ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(multiplyNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
248	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  initialNonZeroOddNumber);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  initialNonZeroOddNumber);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  initialNonZeroOddNumber);	  reflectionAppend(object,    clazz,    builder,    testTransients,    multiplierNonZeroOddNumber,    excludeFields);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	46	None	replace
249	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]        AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  iConstant);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  iConstant);	  reflectionAppend(object,    clazz,    builder,    testTransients,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	45	None	replace
250	[BUG]  [BUGGY]  return  builder.toHashCode(clazz,  multiplierNonZeroOddNumber,  initialNonZeroOddNumber);  [CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.toHashCode(clazz,  multiplierNonZeroOddNumber,  initialNonZeroOddNumber);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(clazz,  multiplierNonZeroOddNumber,  initialNonZeroOddNumber);	  return    builder.toHashCode(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    clazz);    	non-compiled	[CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	65	None	replace
251	[BUG]  [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz,  reflection);  [CE]  cannot  find  symbol  reflection  [FE]                AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz,  reflection);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz,  reflection);	  return    builder.toHashCode(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    clazz);    	non-compiled	[CE]  cannot  find  symbol  reflection	65	None	replace
252	[BUG]  [BUGGY]  return  builder!=  null?  null  :  builder.hashCode();  if(builder!=  null)  {  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  unreachable  statement  [FE]    NullPointerException    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder!=  null?  null  :  builder.hashCode();  if(builder!=  null)  {  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return    builder!=    null?    null    :    builder.hashCode();    if(builder!=  null)  {  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	non-compiled	[CE]  unreachable  statement	48	None	add
253	[BUG]  [BUGGY]  return  builder!=  null?  null  :  builder.hashCode();  if(builder!=  null)  {  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  nu  [CE]  ')'  expected  [FE]      NullPointerException    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder!=  null?  null  :  builder.hashCode();  if(builder!=  null)  {  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  nu  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return    builder!=    null?    null    :    builder.hashCode();    if(builder!=  null)  {  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  nu	  	non-compiled	[CE]  ')'  expected	48	None	add
254	[BUG]  [BUGGY]  return  builder!=  null?  null  :  builder.hashCode();  if(builder!=  null)  {  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getInitialNonZeroOddN  [CE]  ')'  expected  [FE]        NullPointerException    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder!=  null?  null  :  builder.hashCode();  if(builder!=  null)  {  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getInitialNonZeroOddN  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return    builder!=    null?    null    :    builder.hashCode();    if(builder!=  null)  {  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getInitialNonZeroOddN	  	non-compiled	[CE]  ')'  expected	48	None	add
255	[BUG]  [BUGGY]  if(testTransients)  {  if(builder!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  if(testTransients)  {  if(builder!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	if(testTransients)  {  if(builder!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  return    builder.hashCode();    if(builder!=    null)    {    if(testTransients)    {    throw    new    IllegalArgumentException(   "The    object    to    build    a    hash    code    for    must    not    be    null.   ");    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
256	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          NullPointerException      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(testTransients)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	22	None	replace
257	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass);	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludedFields);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	13	None	replace
258	[BUG]  [BUGGY]  if(object!=  null)  {  return  builder.hashCode();  }  [CE]  missing  return  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  if(object!=  null)  {  return  builder.hashCode();  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	if(object!=  null)  {  return  builder.hashCode();  }	  return    builder.hashCode();    if(builder!=    null)    {    for(int    iConstant    =    0;    iTotal    <    multiplierNonZeroOddNumber;    iTotal++)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    exclude    	non-compiled	[CE]  missing  return  statement	27	None	replace
259	[BUG]  [BUGGY]  if(testTransients!=  null)  {  return  builder.hashCode();  }  [CE]  incomparable  types:  boolean  and  <null>  [FE]                AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  if(testTransients!=  null)  {  return  builder.hashCode();  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	if(testTransients!=  null)  {  return  builder.hashCode();  }	  return    builder.hashCode();    if(builder!=    null)    {    for(int    iConstant    =    0;    iTotal    <    multiplierNonZeroOddNumber;    iTotal++)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    exclude    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	27	None	replace
260	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  return  builder.hashCode();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  return  builder.hashCode();  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  return  builder.hashCode();	  return    builder.hashCode();    if(builder!=    null)    {    for(int    iConstant    =    0;    iTotal    <    multiplierNonZeroOddNumber;    iTotal++)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    exclude    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
261	[BUG]  [BUGGY]  if(testTransients  ==  null)  {  return  builder.hashCode();  }  [CE]  incomparable  types:  boolean  and  <null>  [FE]                    AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  if(testTransients  ==  null)  {  return  builder.hashCode();  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	if(testTransients  ==  null)  {  return  builder.hashCode();  }	  return    builder.hashCode();    if(builder!=    null)    {    for(int    iConstant    =    0;    iTotal    <    multiplierNonZeroOddNumber;    iTotal++)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    exclude    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	27	None	replace
262	[BUG]  [BUGGY]  if(testTransients  ==  null)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  incomparable  types:  boolean  and  <null>  [FE]    AssertionFailedError    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  if(testTransients  ==  null)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	if(testTransients  ==  null)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	12	None	replace
263	[BUG]  [BUGGY]  if(testTransients!=  null)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incomparable  types:  boolean  and  <null>  [FE]      AssertionFailedError    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  if(testTransients!=  null)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	if(testTransients!=  null)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	12	None	replace
264	[BUG]  [BUGGY]  if(testTransients  ==  null)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incomparable  types:  boolean  and  <null>  [FE]        AssertionFailedError    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  if(testTransients  ==  null)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	if(testTransients  ==  null)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	12	None	replace
265	[BUG]  [BUGGY]  if(testTransients!=  null)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  reflectionAppend(object,  clazz,  constructer,  testTransients,  excludeFields);  }  [CE]  incomparable  types:  boolean  and  <null>  [FE]            AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  if(testTransients!=  null)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  reflectionAppend(object,  clazz,  constructer,  testTransients,  excludeFields);  }  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	if(testTransients!=  null)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  reflectionAppend(object,  clazz,  constructer,  testTransients,  excludeFields);  }	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,    clazz,    constructer,    testTransients,    excludeFields);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	14	None	replace
266	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  build  }  ')'  expected  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  build  }  ')'  expected  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  build  }  ')'  expected	  return    builder.hashCode();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    build    	non-compiled	[CE]  ')'  expected	73	None	replace
267	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  build!=  ')'  expected  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  build!=  ')'  expected  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  build!=  ')'  expected	  return    builder.hashCode();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    build    	non-compiled	[CE]  ')'  expected	73	None	replace
268	[BUG]  [BUGGY]  if(testTransients!=  null)  {  clazz  =  clazz.getSuperclass();  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  incomparable  types:  boolean  and  <null>  [FE]    NullPointerException    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  if(testTransients!=  null)  {  clazz  =  clazz.getSuperclass();  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	if(testTransients!=  null)  {  clazz  =  clazz.getSuperclass();  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	18	None	replace
269	[BUG]  [BUGGY]  if(testTransients)  {  if(builder!=  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null.   ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  if(testTransients)  {  if(builder!=  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null.   ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	if(testTransients)  {  if(builder!=  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null.   ");  }	  return    builder.hashCode();    if(builder!=    null)    {    if(testTransients)    {    throw    new    IllegalArgumentException(   "The    object    to    build    a    hash    code    for    must    not    be    null.   ");    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
270	[BUG]  [BUGGY]  if(testTransients)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null. ");  }  [CE]  missing  return  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  if(testTransients)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null. ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	if(testTransients)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null. ");  }	  return    builder.hashCode();    if(builder!=    null)    {    if(testTransients)    {    throw    new    IllegalArgumentException(   "The    object    to    build    a    hash    code    for    must    not    be    null.   ");    }    	non-compiled	[CE]  missing  return  statement	70	None	replace
271	[BUG]  [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber)/  2,  builder.toHashCode();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber)/  2,  builder.toHashCode();  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber)/  2,  builder.toHashCode();	  return    builder.toHashCode(initialNonZeroOddNumber,    multiplierNonZeroOddNumber),    builder.toHashCode();    	non-compiled	[CE]  ';'  expected	10	None	replace
272	[BUG]  [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber)?  builder  :  null;  [CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber)?  builder  :  null;  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber)?  builder  :  null;	  return    builder.toHashCode(initialNonZeroOddNumber,    multiplierNonZeroOddNumber),    builder.toHashCode();    	non-compiled	[CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	10	None	replace
273	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  }	  return    builder.hashCode();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
274	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields.length);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields.length);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields.length);	  reflectionAppend(object,    clazz,    builder,    testTransients,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	45	None	replace
275	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyerNonZeroOddNumber,  multierNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyerNonZeroOddNumber,  multierNonZeroOddNumber);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyerNonZeroOddNumber,  multierNonZeroOddNumber);	  ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(multiplyerNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
276	[BUG]  [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  iniTotal);  [CE]  cannot  find  symbol  iniTotal  [FE]                AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  iniTotal);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(initialNonZeroOddNumber,  iniTotal);	  return    builder.toHashCode(multiplyNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol  iniTotal	7	None	replace
277	[BUG]  [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object);  [CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object);	  return    builder.toHashCode(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    iConstant);    	non-compiled	[CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	32	None	replace
278	[BUG]  [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  iniTotal);  [CE]  cannot  find  symbol  iniTotal  [FE]                      AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  iniTotal);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  iniTotal);	  return    builder.toHashCode(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    iConstant);    	non-compiled	[CE]  cannot  find  symbol  iniTotal	32	None	replace
279	[BUG]  [BUGGY]  return  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  builder,  testTransients  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  builder,  testTransients  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  builder,  testTransients	  return    builder.hashCode();    if(builder!=    null)    {    for(int    iConstant    =    0;    iTotal    >=    multiplierNonZeroOddNumber;    iTotal++)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields    	non-compiled	[CE]  ')'  expected	28	None	replace
280	[BUG]  [BUGGY]  return  builder.hashCode();  if(testTransients!=  null)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  build  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.hashCode();  if(testTransients!=  null)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  build  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.hashCode();  if(testTransients!=  null)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  build	  return    builder.hashCode();    if(builder!=    null)    {    for(int    iConstant    =    0;    iTotal    >=    multiplierNonZeroOddNumber;    iTotal++)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields    	non-compiled	[CE]  ')'  expected	28	None	replace
281	[BUG]  [BUGGY]  return  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  builder,  test  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  builder,  test  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  builder,  test	  return    builder.hashCode();    if(builder!=    null)    {    for(int    iConstant    =    0;    iTotal    >=    multiplierNonZeroOddNumber;    iTotal++)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields    	non-compiled	[CE]  ')'  expected	28	None	replace
282	[BUG]  [BUGGY]  return  builder  ==  null?  null  :  builder.hashCode();  if(builder  ==  null?  null  :  builder.hashCode())  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder  ==  null?  null  :  builder.hashCode();  if(builder  ==  null?  null  :  builder.hashCode())  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return    builder    ==    null?    null    :    builder.hashCode();    if(builder  ==  null?  null  :  builder.hashCode())  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
283	[BUG]  [BUGGY]  return  builder  ==  null?  null  :  builder.hashCode();  if(builder  ==  null?  null  :  builder.hashCode())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder  ==  null?  null  :  builder.hashCode();  if(builder  ==  null?  null  :  builder.hashCode())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return    builder    ==    null?    null    :    builder.hashCode();    if(builder  ==  null?  null  :  builder.hashCode())  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  incompatible  types	50	None	add
284	[BUG]  [BUGGY]  return  builder  ==  null?  null  :  builder.toString();  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder  ==  null?  null  :  builder.toString();  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder  ==  null?  null  :  builder.toString();	  return    builder    ==    null?    null    :    builder.hashCode();    	non-compiled	[CE]  incompatible  types	51	None	replace
285	[BUG]  [BUGGY]  return  builder.hashCode()  +  reflectionAppend(object,  clazz);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.hashCode()  +  reflectionAppend(object,  clazz);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.hashCode()  +  reflectionAppend(object,  clazz);	  return    builder.hashCode()    +    iConstant;    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	38	None	replace
286	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  missing  return  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  if(testTransients)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  missing  return  statement	4	None	replace
287	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  if(testTransients)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
288	[BUG]  [BUGGY]  while(clazz!=  reflectUpToClass)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  missing  return  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  while(clazz!=  reflectUpToClass)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz!=  reflectUpToClass)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  if(testTransients)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  missing  return  statement	4	None	replace
289	[BUG]  [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass()  [CE]  ';'  expected  [FE]    NullPointerException    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass()  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	                clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass()	  	non-compiled	[CE]  ';'  expected	17	None	add
290	[BUG]  [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	                clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
291	[BUG]  [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	                clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
292	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClass(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]                AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  aughtExceptionHandler.handleMissingClass(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	aughtExceptionHandler.handleMissingClass(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);	  if(testTransients)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	90	None	replace
293	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  builder!=  reflectUpToClass)  {  return  builder.hashCode();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  builder!=  reflectUpToClass)  {  return  builder.hashCode();  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz.getSuperclass()!=  null  &&  builder!=  reflectUpToClass)  {  return  builder.hashCode();	  return    builder.hashCode();    if(builder!=    null)    {    for(int    iConstant    =    0;    iTotal    >=    multiplierNonZeroOddNumber;    iTotal++)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
294	[BUG]  [BUGGY]  While(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  ';'  expected  [FE]        NullPointerException      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  While(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	While(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  if(testTransients)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  ';'  expected	21	None	replace
295	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  return  builder.toHashCode()  [CE]  'else'  without  'if'  [FE]            NullPointerException      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  return  builder.toHashCode()  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  return  builder.toHashCode()	  if(testTransients)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    else    {    return    builder.toHashCode();    }    	non-compiled	[CE]  'else'  without  'if'	23	None	replace
296	[BUG]  [BUGGY]  ReflectionInterceptor  object  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  ReflectionInterceptor  object  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	ReflectionInterceptor  object  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  if(testTransients!=    null)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
297	[BUG]  [BUGGY]  if(testTransients)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  missing  return  statement  [FE]          AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  if(testTransients)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	if(testTransients)  {  throw  new  IllegalArgumentException( " ");  }	  return    builder.hashCode();    if(builder!=    null)    {    if(testTransients)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  missing  return  statement	67	None	replace
298	[BUG]  [BUGGY]  return  builder.toHashCode(object,  multiplierNonZeroOddNumber)+  object.toHashCode();  [CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.toHashCode(object,  multiplierNonZeroOddNumber)+  object.toHashCode();  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(object,  multiplierNonZeroOddNumber)+  object.toHashCode();	  return    builder.toHashCode(initialNonZeroOddNumber,    multiplierNonZeroOddNumber)+    object.toHashCode();    	non-compiled	[CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	64	None	replace
299	[BUG]  [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  clazz);  [CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  clazz);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  clazz);	  return    builder.toHashCode(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    clazz);    	non-compiled	[CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	65	None	replace
300	[BUG]  [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz,  object);  [CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz,  object);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz,  object);	  return    builder.toHashCode(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    clazz);    	non-compiled	[CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	65	None	replace
301	[BUG]  [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz,  reflectionAppend(object,  clazz));  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz,  reflectionAppend(object,  clazz));  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz,  reflectionAppend(object,  clazz));	  return    builder.toHashCode(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    clazz);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	65	None	replace
302	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	add	throw  new  IllegalArgumentException( " ");	  return    builder.hashCode();    if(builder!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	69	4	replace
303	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  [FE]  IllegalArgumentException  [FE]              AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	throw  new  IllegalArgumentException( " ");	  return    builder.hashCode();    if(builder!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	69	4	replace
304	[BUG]  [BUGGY]  aughtExceptionHandler(clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  aughtExceptionHandler(clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	aughtExceptionHandler(clazz,  builder,  testTransients,  excludeFields);	  if(testTransients)    {    clazz    =    clazz.getSuperclass();    }    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
305	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  return  builder.hashCode();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  return  builder.hashCode();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  return  builder.hashCode();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  return    builder.hashCode();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
306	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  if(testTransients!=    null)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	80	None	replace
307	[BUG]  [BUGGY]  return  builder!=  null?  null  :  builder.hashCode();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients  [CE]  ')'  expected  [FE]    NullPointerException    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder!=  null?  null  :  builder.hashCode();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return    builder!=    null?    null    :    builder.hashCode();    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients	  	non-compiled	[CE]  ')'  expected	48	None	add
308	[BUG]  [BUGGY]  return  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  build  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  build  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  build	  return    builder.hashCode();    if(builder!=    null)    {    for(int    iConstant    =    0;    iTotal    <    multiplierNonZeroOddNumber;    iTotal++)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields    	non-compiled	[CE]  ')'  expected	26	None	replace
309	[BUG]  [BUGGY]  return  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  builder,  testTransients  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  builder,  testTransients  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  builder,  testTransients	  return    builder.hashCode();    if(builder!=    null)    {    for(int    iConstant    =    0;    iTotal    <    multiplierNonZeroOddNumber;    iTotal++)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields    	non-compiled	[CE]  ')'  expected	26	None	replace
310	[BUG]  [BUGGY]  return  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  builder,  test  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  builder,  test  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  builder,  test	  return    builder.hashCode();    if(builder!=    null)    {    for(int    iConstant    =    0;    iTotal    <    multiplierNonZeroOddNumber;    iTotal++)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields    	non-compiled	[CE]  ')'  expected	26	None	replace
311	[BUG]  [BUGGY]  return  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  builder,  testTrans  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  builder,  testTrans  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  builder,  testTrans	  return    builder.hashCode();    if(builder!=    null)    {    for(int    iConstant    =    0;    iTotal    <    multiplierNonZeroOddNumber;    iTotal++)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields    	non-compiled	[CE]  ')'  expected	26	None	replace
312	[BUG]  [BUGGY]  return  builder.hashCode()  +  1;  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass()  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.hashCode()  +  1;  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass()  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return    builder.hashCode()    +    1;    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass()	  	non-compiled	[CE]  ';'  expected	39	None	add
313	[BUG]  [BUGGY]  return  builder.hashCode()  +  1;  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.get  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.hashCode()  +  1;  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.get  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return    builder.hashCode()    +    1;    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.get	  	non-compiled	[CE]  ';'  expected	39	None	add
314	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
315	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  if(testTransients)  {  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  if(testTransients)  {  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    if(testTransients)  {  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
316	[BUG]  [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  innerNonZeroOddNumber);  [CE]  cannot  find  symbol  innerNonZeroOddNumber  [FE]            AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  innerNonZeroOddNumber);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(initialNonZeroOddNumber,  innerNonZeroOddNumber);	  return    builder.toHashCode(multiplyerNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol  innerNonZeroOddNumber	60	None	replace
317	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  builder)  {  clazz  =  clazz.getSuperclass();  }  [CE]  incomparable  types:  Class<CAP#1>  and  HashCodeBuilder  [FE]                  AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  builder)  {  clazz  =  clazz.getSuperclass();  }  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  builder)  {  clazz  =  clazz.getSuperclass();  }	  while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  HashCodeBuilder	76	None	replace
318	[BUG]  [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients);  [CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients);	  return    builder.toHashCode(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	31	None	replace
319	[BUG]  [BUGGY]  if(testTransients!=  null)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  if(testTransients!=  null)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	if(testTransients!=  null)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
320	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass()  }  ';'  expected  [CE]  ';'  expected  [FE]        NullPointerException      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass()  }  ';'  expected  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass()  }  ';'  expected	          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass()    	non-compiled	[CE]  ';'  expected	71	None	replace
321	[BUG]  [BUGGY]  return  builder.hasNext()?  this  :  constructer.hashCode();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.hasNext()?  this  :  constructer.hashCode();  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.hasNext()?  this  :  constructer.hashCode();	  return    builder.hasNext()?    this    :    builder.hashCode();    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
322	[BUG]  [BUGGY]  reflectUpToClass(object,  clazz,  builder,  testTransients,  excludeFields,  null);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  reflectUpToClass(object,  clazz,  builder,  testTransients,  excludeFields,  null);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	reflectUpToClass(object,  clazz,  builder,  testTransients,  excludeFields,  null);	  reflectUpToClass(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
323	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplierNonZeroOddNumber,  multierNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplierNonZeroOddNumber,  multierNonZeroOddNumber);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplierNonZeroOddNumber,  multierNonZeroOddNumber);	  ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(multiplierNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
324	[BUG]  [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber)/  result.toHashCode();  [CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber)/  result.toHashCode();  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber)/  result.toHashCode();	  return    builder.toHashCode(initialNonZeroOddNumber,    multiplierNonZeroOddNumber)/    builder.toHashCode();    	non-compiled	[CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	9	None	replace
325	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiprNonZeroOddNumber,  multierNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiprNonZeroOddNumber,  multierNonZeroOddNumber);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiprNonZeroOddNumber,  multierNonZeroOddNumber);	  ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(multiprNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
326	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(initialNonZeroOddNumber,  multierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }      [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(initialNonZeroOddNumber,  multierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(initialNonZeroOddNumber,  multierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(multiplyNonZeroOddNumber,    multiplierNonZeroOddNumber);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
