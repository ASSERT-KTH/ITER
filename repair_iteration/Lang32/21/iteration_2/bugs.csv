bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  reflectionAppend(object,  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  reflectionAppend(object,  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	reflectionAppend(object,	      reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
2	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();	      reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
3	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  testTransients)  {  clazz  =  clazz.getSuperclass();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  testTransients)  {  clazz  =  clazz.getSuperclass();  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  testTransients)  {  clazz  =  clazz.getSuperclass();	      reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
4	[BUG]  [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  missing  return  statement  [FE]                AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	      reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    	non-compiled	[CE]  missing  return  statement	15	None	replace
5	[BUG]  [BUGGY]  return  builder.toHashCode(multiplyerNonZeroOddNumber,  initialNonZeroOddNumber);  [CE]  cannot  find  symbol  multiplyerNonZeroOddNumber  [FE]        AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  return  builder.toHashCode(multiplyerNonZeroOddNumber,  initialNonZeroOddNumber);  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(multiplyerNonZeroOddNumber,  initialNonZeroOddNumber);	  return    builder.toHashCode(initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol  multiplyerNonZeroOddNumber	7	None	replace
6	[BUG]  [BUGGY]  return  builder.toHashCode(multiplyingNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  cannot  find  symbol  multiplyingNonZeroOddNumber  [FE]          AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  return  builder.toHashCode(multiplyingNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(multiplyingNonZeroOddNumber,  multiplierNonZeroOddNumber);	  return    builder.toHashCode(initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol  multiplyingNonZeroOddNumber	7	None	replace
7	[BUG]  [BUGGY]  return  builder.toHashCode(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  cannot  find  symbol  multiplyNonZeroOddNumber  [FE]            AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  return  builder.toHashCode(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber);	  return    builder.toHashCode(initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol  multiplyNonZeroOddNumber	7	None	replace
8	[BUG]  [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber)+  constructer.toHashCode();  [CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber)+  constructer.toHashCode();  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber)+  constructer.toHashCode();	  return    builder.toHashCode(initialNonZeroOddNumber,    multiplierNonZeroOddNumber)+    builder.toHashCode();    	non-compiled	[CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	9	None	replace
9	[BUG]  [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber)/  builder.toHashCode();  [CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber)/  builder.toHashCode();  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber)/  builder.toHashCode();	  return    builder.toHashCode(initialNonZeroOddNumber,    multiplierNonZeroOddNumber)+    builder.toHashCode();    	non-compiled	[CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	9	None	replace
10	[BUG]  [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber),  builder.toHashCode();  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber),  builder.toHashCode();  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber),  builder.toHashCode();	  return    builder.toHashCode(initialNonZeroOddNumber,    multiplierNonZeroOddNumber)+    builder.toHashCode();    	non-compiled	[CE]  ';'  expected	9	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	add	        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	compilable	  [FE]  AssertionFailedError  	1	1	add
12	[BUG]  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	compilable	  [FE]  AssertionFailedError  	1	1	add
13	[BUG]  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludedFields);  [CE]  cannot  find  symbol  excludedFields  [FE]      AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludedFields);  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludedFields);	  	non-compiled	[CE]  cannot  find  symbol  excludedFields	1	None	add
14	[BUG]  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  constructer,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  constructer  [FE]        AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  constructer,  testTransients,  excludeFields);  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  constructer,  testTransients,  excludeFields);	  	non-compiled	[CE]  cannot  find  symbol  constructer	1	None	add
15	[BUG]  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
16	[BUG]  [BUGGY]  clazz  =  clazz.getSuperclass();  [CE]  missing  return  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  clazz  =  clazz.getSuperclass();  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	clazz  =  clazz.getSuperclass();	      clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    	non-compiled	[CE]  missing  return  statement	6	None	replace
17	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]      clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	add	        clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	compilable	  [FE]  NullPointerException  	3	4	add
18	[BUG]  [BUGGY]      clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]      clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	        clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	compilable	  [FE]  NullPointerException  	3	4	add
19	[BUG]  [BUGGY]      clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  illegal  start  of  type  [FE]      NullPointerException    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]      clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	        clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	non-compiled	[CE]  illegal  start  of  type	3	None	add
20	[BUG]  [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }	      reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
21	[BUG]  [BUGGY]  if(testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  missing  return  statement  [FE]    NullPointerException    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  if(testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	if(testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	      clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  missing  return  statement	4	None	replace
22	[BUG]  [BUGGY]  if(testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  missing  return  statement  [FE]      NullPointerException    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  if(testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	if(testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  throw  new  IllegalArgumentException( " ");  }	      clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  missing  return  statement	4	None	replace
23	[BUG]  [BUGGY]  if(testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  return  builder.toHashCode();  }  [CE]  missing  return  statement  [FE]        NullPointerException    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  if(testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  return  builder.toHashCode();  }  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	if(testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  return  builder.toHashCode();  }	      clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  missing  return  statement	4	None	replace
24	[BUG]  [BUGGY]  return  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  return  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return    builder.hashCode();    if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
25	[BUG]  [BUGGY]  return  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  return  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return    builder.hashCode();    if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
26	[BUG]  [BUGGY]  return  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  return  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return    builder.hashCode();    if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields	  	non-compiled	[CE]  ')'  expected	12	None	add
27	[BUG]  [BUGGY]  return  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  exclude  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  return  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  exclude  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return    builder.hashCode();    if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  <  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  exclude	  	non-compiled	[CE]  ')'  expected	12	None	add
28	[BUG]  [BUGGY]  return  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  return  builder.hashCode();  if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return    builder.hashCode();    if(builder!=  null)  {  for(int  iConstant  =  0;  iTotal  >=  multiplierNonZeroOddNumber;  iTotal++)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields	  	non-compiled	[CE]  ')'  expected	12	None	add
29	[BUG]  [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  iTotal);  [CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context  [FE]          AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  iTotal);  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  iTotal);	  return    builder.toHashCode(initialNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context	8	None	replace
30	[BUG]  [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass);  [CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass);  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass);	  return    builder.toHashCode(initialNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	8	None	replace
31	[BUG]  [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);  [CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);	  return    builder.toHashCode(initialNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	8	None	replace
32	[BUG]  [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]                AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  iConstant);  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  iConstant);	  return    builder.toHashCode(initialNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	8	None	replace
33	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass()!=  ';'  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass()!=  ';'  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass()!=  ';'	      clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass()    	non-compiled	[CE]  ';'  expected	14	None	replace
34	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass()!=  ';'  expected  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass()!=  ';'  expected  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass()!=  ';'  expected	      clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass()    	non-compiled	[CE]  ';'  expected	14	None	replace
35	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass()  }  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass()  }  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass()  }	      clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass()    	non-compiled	[CE]  ';'  expected	14	None	replace
36	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	      ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
37	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	      ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
38	[BUG]  [BUGGY]  return  builder.hashCode()  +  iConstant;  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]    AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  return  builder.hashCode()  +  iConstant;  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.hashCode()  +  iConstant;	  return    builder.hashCode();    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	13	None	replace
39	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  return  builder.hashCode()  +  1;  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	add	return  builder.hashCode()  +  1;	  return    builder.hashCode();    	compilable	  [FE]  AssertionFailedError  	13	4	replace
40	[BUG]  [BUGGY]  return  builder.hashCode()  +  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  return  builder.hashCode()  +  1;  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.hashCode()  +  1;	  return    builder.hashCode();    	compilable	  [FE]  AssertionFailedError  	13	4	replace
41	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyerNonZeroOddNumber,  initialNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyerNonZeroOddNumber,  initialNonZeroOddNumber);  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyerNonZeroOddNumber,  initialNonZeroOddNumber);	      ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
42	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyNonZeroOddNumber,  initialNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyNonZeroOddNumber,  initialNonZeroOddNumber);  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyNonZeroOddNumber,  initialNonZeroOddNumber);	      ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
43	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multipleNonZeroOddNumber,  initialNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multipleNonZeroOddNumber,  initialNonZeroOddNumber);  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multipleNonZeroOddNumber,  initialNonZeroOddNumber);	      ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
44	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplierNonZeroOddNumber,  initialNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplierNonZeroOddNumber,  initialNonZeroOddNumber);  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplierNonZeroOddNumber,  initialNonZeroOddNumber);	      ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
45	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber);  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber);	      reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	2	None	replace
46	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber,  excludeFields);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber,  excludeFields);  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber,  excludeFields);	      reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	2	None	replace
47	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  multiplyerNonZeroOddNumber);  [CE]  cannot  find  symbol  multiplyerNonZeroOddNumber  [FE]        AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  multiplyerNonZeroOddNumber);  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  multiplyerNonZeroOddNumber);	      reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol  multiplyerNonZeroOddNumber	2	None	replace
48	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  return  builder!=  null?  null  :  builder.hashCode();  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	add	return  builder!=  null?  null  :  builder.hashCode();	  return    builder.hashCode();    	compilable	  [FE]  NullPointerException  	13	4	replace
49	[BUG]  [BUGGY]  return  builder!=  null?  null  :  builder.hashCode();  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  return  builder!=  null?  null  :  builder.hashCode();  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder!=  null?  null  :  builder.hashCode();	  return    builder.hashCode();    	compilable	  [FE]  NullPointerException  	13	4	replace
50	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  return  builder  ==  null?  null  :  builder.hashCode();  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	add	return  builder  ==  null?  null  :  builder.hashCode();	  return    builder.hashCode();    	compilable	  [FE]  AssertionFailedError  	13	1	replace
51	[BUG]  [BUGGY]  return  builder  ==  null?  null  :  builder.hashCode();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  return  builder  ==  null?  null  :  builder.hashCode();  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder  ==  null?  null  :  builder.hashCode();	  return    builder.hashCode();    	compilable	  [FE]  AssertionFailedError  	13	1	replace
52	[BUG]  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
53	[BUG]  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflect(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflect(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflect(object,  clazz,  builder,  testTransients,  excludeFields);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
54	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  negationFields);  [CE]  cannot  find  symbol  negationFields  [FE]    AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  negationFields);  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  negationFields);	      reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol  negationFields	2	None	replace
55	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]      clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	add	        clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	compilable	  [FE]  NullPointerException  	3	4	add
56	[BUG]  [BUGGY]      clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]      clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	        clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	compilable	  [FE]  NullPointerException  	3	4	add
57	[BUG]  [BUGGY]      clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]      clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	        clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
58	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass()  >>  ';'  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass()  >>  ';'  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass()  >>  ';'	      clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass()    	non-compiled	[CE]  ';'  expected	14	None	replace
59	[BUG]  [BUGGY]  if(testTransients)  {  clazz  =  clazz.getSuperclass();  }  [CE]  missing  return  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  if(testTransients)  {  clazz  =  clazz.getSuperclass();  }  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	if(testTransients)  {  clazz  =  clazz.getSuperclass();  }	      clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    	non-compiled	[CE]  missing  return  statement	6	None	replace
60	[BUG]  [BUGGY]  return  builder.toHashCode(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  cannot  find  symbol  multiplyerNonZeroOddNumber  [FE]        AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  return  builder.toHashCode(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber);	  return    builder.toHashCode(initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol  multiplyerNonZeroOddNumber	7	None	replace
61	[BUG]  [BUGGY]  return  builder.toHashCode(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  cannot  find  symbol  multipleNonZeroOddNumber  [FE]          AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  return  builder.toHashCode(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber);	  return    builder.toHashCode(initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol  multipleNonZeroOddNumber	7	None	replace
62	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiprNonZeroOddNumber,  initialNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiprNonZeroOddNumber,  initialNonZeroOddNumber);  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiprNonZeroOddNumber,  initialNonZeroOddNumber);	      ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
63	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	      ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
64	[BUG]  [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber)+  object.toHashCode();  [CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber)+  object.toHashCode();  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber)+  object.toHashCode();	  return    builder.toHashCode(initialNonZeroOddNumber,    multiplierNonZeroOddNumber)+    builder.toHashCode();    	non-compiled	[CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	9	None	replace
65	[BUG]  [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz);  [CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz);  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.toHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz);	  return    builder.toHashCode(initialNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  method  toHashCode  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	8	None	replace
66	[BUG]  [BUGGY]  return  builder.hashCode();  int  iConstant  =  clazz.getInitialNonZeroOddNumber();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  return  builder.hashCode();  int  iConstant  =  clazz.getInitialNonZeroOddNumber();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return    builder.hashCode();    int  iConstant  =  clazz.getInitialNonZeroOddNumber();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	non-compiled	[CE]  cannot  find  symbol	12	None	add
67	[BUG]  [BUGGY]  return  builder.hashCode();  if(builder!=  null)  {  if(testTransients)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  return  builder.hashCode();  if(builder!=  null)  {  if(testTransients)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return    builder.hashCode();    if(builder!=  null)  {  if(testTransients)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
68	[BUG]  [BUGGY]  return  builder.hashCode();  int  iConstant  =  clazz.getInitialNonZeroOddNumber();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  return  builder.hashCode();  int  iConstant  =  clazz.getInitialNonZeroOddNumber();  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return    builder.hashCode();    int  iConstant  =  clazz.getInitialNonZeroOddNumber();	  	non-compiled	[CE]  cannot  find  symbol	12	None	add
69	[BUG]  [BUGGY]  return  builder.hashCode();  if(builder!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  return  builder.hashCode();  if(builder!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return    builder.hashCode();    if(builder!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	12	None	add
70	[BUG]  [BUGGY]  return  builder.hashCode();  if(builder!=  null)  {  if(testTransients)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null. ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  return  builder.hashCode();  if(builder!=  null)  {  if(testTransients)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null. ");  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return    builder.hashCode();    if(builder!=  null)  {  if(testTransients)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null. ");  }	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
71	[BUG]  [BUGGY]      clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass()  [CE]  ';'  expected  [FE]    NullPointerException    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]      clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass()  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	        clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass()	  	non-compiled	[CE]  ';'  expected	3	None	add
72	[BUG]  [BUGGY]      clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]      clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	        clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
73	[BUG]  [BUGGY]  return  builder.hashCode();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  build  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  return  builder.hashCode();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  build  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return    builder.hashCode();    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  build	  	non-compiled	[CE]  ')'  expected	12	None	add
74	[BUG]  [BUGGY]  return  builder.hashCode();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  return  builder.hashCode();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return    builder.hashCode();    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
75	[BUG]  [BUGGY]  return  builder.hashCode();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  return  builder.hashCode();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return    builder.hashCode();    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	non-compiled	[CE]  unreachable  statement	12	None	add
76	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [CE]  missing  return  statement  [FE]              AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }	      clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    	non-compiled	[CE]  missing  return  statement	6	None	replace
77	[BUG]  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
78	[BUG]  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
79	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  builder.append(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  builder.append(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  builder.append(object,  clazz,  builder,  testTransients,  excludeFields);	      reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
80	[BUG]  [BUGGY]  if(testTransients!=  null)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  incomparable  types:  boolean  and  <null>  [FE]      AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  if(testTransients!=  null)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	if(testTransients!=  null)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	      reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	2	None	replace
81	[BUG]  [BUGGY]  reflectUpToClass(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  reflectUpToClass(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	reflectUpToClass(object,  clazz,  builder,  testTransients,  excludeFields);	      reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
82	[BUG]  [BUGGY]  if(testTransients!=  null)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  incomparable  types:  boolean  and  <null>  [FE]    NullPointerException    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  if(testTransients!=  null)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	if(testTransients!=  null)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	      clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	4	None	replace
83	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  builder.getSuperclass())  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  builder.getSuperclass())  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  builder.getSuperclass())  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	      clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
84	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	      clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
85	[BUG]  [BUGGY]  return  builder.hasNext()?  null  :  builder.hashCode();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  return  builder.hasNext()?  null  :  builder.hashCode();  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.hasNext()?  null  :  builder.hashCode();	  return    builder.hashCode();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
86	[BUG]  [BUGGY]  return  builder.hasNext()?  this  :  builder.hashCode();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  return  builder.hasNext()?  this  :  builder.hashCode();  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	return  builder.hasNext()?  this  :  builder.hashCode();	  return    builder.hashCode();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
87	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber);	      ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
88	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass()  >=  ';'  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass()  >=  ';'  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass()  >=  ';'	      clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass()    	non-compiled	[CE]  ';'  expected	14	None	replace
89	[BUG]  [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();	      reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
90	[BUG]  [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }    [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  [BUGGY]    return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();	      reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
