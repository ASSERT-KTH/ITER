bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getDeclaredFields(excludeFields);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  Class  <?>  object  =  clazz.getDeclaredFields(excludeFields);  [BUGGY]    if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Class  <?>  object  =  clazz.getDeclaredFields(excludeFields);	      Class    <?>    object    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
2	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getRawClass();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  Class  <?>  object  =  clazz.getRawClass();  [BUGGY]    if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Class  <?>  object  =  clazz.getRawClass();	      Class    <?>    object    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
3	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getSuperclassValue();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  Class  <?>  object  =  clazz.getSuperclassValue();  [BUGGY]    if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Class  <?>  object  =  clazz.getSuperclassValue();	      Class    <?>    object    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
4	[BUG]  [BUGGY]  Object  object  =  clazz.getAssignedObject();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  Object  object  =  clazz.getAssignedObject();  [BUGGY]    if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Object  object  =  clazz.getAssignedObject();	      Object    object    =    clazz.getDeclaredObject();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
5	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaringObject();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  Object  object  =  clazz.getDeclaringObject();  [BUGGY]    if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Object  object  =  clazz.getDeclaringObject();	      Object    object    =    clazz.getDeclaredObject();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
6	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields.length  ==  0)  {  if(isRegistered(object)||  excludeFields.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(isRegistered(object)||  excludeFields.length  ==  0)  {  if(isRegistered(object)||  excludeFields.length  ==  0)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||    excludeFields.length    ==    0)    {    if(isRegistered(object)||  excludeFields.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
7	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields.length  ==  0)  {  if(isRegistered(object)||  excludeFields.length  ==  0  ||  object.getName().indexOf('$')  ==  -1)  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(isRegistered(object)||  excludeFields.length  ==  0)  {  if(isRegistered(object)||  excludeFields.length  ==  0  ||  object.getName().indexOf('$')  ==  -1)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||    excludeFields.length    ==    0)    {    if(isRegistered(object)||  excludeFields.length  ==  0  ||  object.getName().indexOf('$')  ==  -1)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
8	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields.length  ==  0)  {  if(isRegistered(object)||  excludeFields.length  ==  0  ||  isRegistered(object)||  excludeFields.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(isRegistered(object)||  excludeFields.length  ==  0)  {  if(isRegistered(object)||  excludeFields.length  ==  0  ||  isRegistered(object)||  excludeFields.length  ==  0)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||    excludeFields.length    ==    0)    {    if(isRegistered(object)||  excludeFields.length  ==  0  ||  isRegistered(object)||  excludeFields.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
9	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields.length  ==  0)  {  if(isRegistered(object)||  excludeFields.length!=  0)  {  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(isRegistered(object)||  excludeFields.length  ==  0)  {  if(isRegistered(object)||  excludeFields.length!=  0)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||    excludeFields.length    ==    0)    {    if(isRegistered(object)||  excludeFields.length!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
10	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(object))  {  if(object  ==  null  ||  isRegistered(object))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  isRegistered(object))  {  if(object  ==  null  ||  isRegistered(object))  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||    isRegistered(object))    {    if(object  ==  null  ||  isRegistered(object))  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
11	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(object))  {  if(object!=  null  ||  isRegistered(object))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  isRegistered(object))  {  if(object!=  null  ||  isRegistered(object))  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||    isRegistered(object))    {    if(object!=  null  ||  isRegistered(object))  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
12	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(object))  {  If(object  ==  null  ||  isRegistered(object))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  isRegistered(object))  {  If(object  ==  null  ||  isRegistered(object))  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||    isRegistered(object))    {    If(object  ==  null  ||  isRegistered(object))  {	  	non-compiled	[CE]  ';'  expected	3	None	add
13	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(object))  {  if(object  ==  null  ||  hasRegistered(object))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  isRegistered(object))  {  if(object  ==  null  ||  hasRegistered(object))  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||    isRegistered(object))    {    if(object  ==  null  ||  hasRegistered(object))  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
14	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(object))  {  if(object  ==  null  ||  isRegistered(Object.class))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  isRegistered(object))  {  if(object  ==  null  ||  isRegistered(Object.class))  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||    isRegistered(object))    {    if(object  ==  null  ||  isRegistered(Object.class))  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
15	[BUG]  [BUGGY]  String[]  excludeFields  =  clazz.getIncludeFields();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  String[]  excludeFields  =  clazz.getIncludeFields();  [BUGGY]    if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	String[]  excludeFields  =  clazz.getIncludeFields();	      String[]    excludeFields    =    clazz.getReferenceFields();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
16	[BUG]  [BUGGY]  String[]  excludeFields  =  clazz.getAssignedFields();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  String[]  excludeFields  =  clazz.getAssignedFields();  [BUGGY]    if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	String[]  excludeFields  =  clazz.getAssignedFields();	      String[]    excludeFields    =    clazz.getReferenceFields();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length!=  0)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length!=  0)  {	  if(isRegistered(object)||    excludeFields!=    null    ||    excludeFields.length    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	8	4	replace
18	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length!=  0)  {  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length!=  0)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length!=  0)  {	  if(isRegistered(object)||    excludeFields!=    null    ||    excludeFields.length    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	8	4	replace
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      NullPointerException    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(!isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(!isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {	  if(isRegistered(object)||    excludeFields!=    null    ||    excludeFields.length    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	8	4	replace
20	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {  [FE]  AssertionFailedError  [FE]      NullPointerException    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(!isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {	  if(isRegistered(object)||    excludeFields!=    null    ||    excludeFields.length    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	8	4	replace
21	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
22	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length!=  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length!=  0)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
23	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  If(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  If(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    If(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {	  	non-compiled	[CE]  ';'  expected	23	None	add
24	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  if(isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  if(isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    if(isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
25	[BUG]  [BUGGY]  if(!isRegistered(object))  {  if(!isRegistered(object))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(!isRegistered(object))  {  if(!isRegistered(object))  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object))    {    if(!isRegistered(object))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
26	[BUG]  [BUGGY]  if(!isRegistered(object))  {  ||!isRegistered(object))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(!isRegistered(object))  {  ||!isRegistered(object))  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object))    {    ||!isRegistered(object))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
27	[BUG]  [BUGGY]  if(!isRegistered(object))  {  If(!isRegistered(object))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(!isRegistered(object))  {  If(!isRegistered(object))  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object))    {    If(!isRegistered(object))  {	  	non-compiled	[CE]  ';'  expected	1	None	add
28	[BUG]  [BUGGY]  if(!isRegistered(object))  {  if(!isRegistered(object)  ||!useTransients)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(!isRegistered(object))  {  if(!isRegistered(object)  ||!useTransients)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object))    {    if(!isRegistered(object)  ||!useTransients)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
29	[BUG]  [BUGGY]  if(!isRegistered(object))  {  if(!isRegistered(object)  ||  object  ==  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(!isRegistered(object))  {  if(!isRegistered(object)  ||  object  ==  null)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object))    {    if(!isRegistered(object)  ||  object  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||!useTransients)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(isRegistered(object)||  excludeFields  ==  null  ||!useTransients)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	21	4	replace
31	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||!useTransients)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||!useTransients)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||  excludeFields  ==  null  ||!useTransients)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	21	4	replace
32	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(!isRegistered(object)||  excludeFields  ==  null)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(!isRegistered(object)||  excludeFields  ==  null)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	21	4	replace
33	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields  ==  null)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(!isRegistered(object)||  excludeFields  ==  null)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||  excludeFields  ==  null)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	21	4	replace
34	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(isRegistered(object)&&  excludeFields  ==  null)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(isRegistered(object)&&  excludeFields  ==  null)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	21	1	replace
35	[BUG]  [BUGGY]  if(isRegistered(object)&&  excludeFields  ==  null)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(isRegistered(object)&&  excludeFields  ==  null)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)&&  excludeFields  ==  null)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	21	1	replace
36	[BUG]  [BUGGY]  FieldValue  object  =  excludeFields.getDeclaredFields();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  FieldValue  object  =  excludeFields.getDeclaredFields();  [BUGGY]    if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	FieldValue  object  =  excludeFields.getDeclaredFields();	      FieldValue    object    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
37	[BUG]  [BUGGY]  FieldValue  object  =  this.clazz.getDeclaredFields();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  FieldValue  object  =  this.clazz.getDeclaredFields();  [BUGGY]    if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	FieldValue  object  =  this.clazz.getDeclaredFields();	      FieldValue    object    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
38	[BUG]  [BUGGY]  FieldValue  object  =  clazz.getDeclaredFields(excludeFields);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  FieldValue  object  =  clazz.getDeclaredFields(excludeFields);  [BUGGY]    if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	FieldValue  object  =  clazz.getDeclaredFields(excludeFields);	      FieldValue    object    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
39	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null)  {  if(isRegistered(object)||  excludeFields  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null)  {  if(isRegistered(object)||  excludeFields  ==  null)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||  excludeFields  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
40	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null)  {  if(isRegistered(object)||  excludeFields  ==  null  ||  useTransients)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null)  {  if(isRegistered(object)||  excludeFields  ==  null  ||  useTransients)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||  excludeFields  ==  null  ||  useTransients)  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
41	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null)  {  If(isRegistered(object)||  excludeFields  ==  null)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null)  {  If(isRegistered(object)||  excludeFields  ==  null)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||    excludeFields    ==    null)    {    If(isRegistered(object)||  excludeFields  ==  null)  {	  	non-compiled	[CE]  ';'  expected	20	None	add
42	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null)  {  if(isRegistered(object)||  excludeFields!=  null)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null)  {  if(isRegistered(object)||  excludeFields!=  null)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||  excludeFields!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
43	[BUG]  [BUGGY]  if(object  ==  null  ||  isRestricted(object))  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  isRestricted(object))  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  isRestricted(object))  {	  if(object    ==    null    ||    isRegistered(object))    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
44	[BUG]  [BUGGY]  if(object  ==  null  ||  isConstructor(object))  {  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  isConstructor(object))  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  isConstructor(object))  {	  if(object    ==    null    ||    isRegistered(object))    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
45	[BUG]  [BUGGY]  if(object  ==  null  ||  isUnknown(object))  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  isUnknown(object))  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  isUnknown(object))  {	  if(object    ==    null    ||    isRegistered(object))    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
46	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(!isRegistered(object)||  excludeFields.length  ==  0)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(!isRegistered(object)||  excludeFields.length  ==  0)  {	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	6	4	replace
47	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields.length  ==  0)  {  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(!isRegistered(object)||  excludeFields.length  ==  0)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||  excludeFields.length  ==  0)  {	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	6	4	replace
48	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(isRegistered(object)||  excludeFields.length  ==  1)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(isRegistered(object)||  excludeFields.length  ==  1)  {	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    	compilable	  [FE]  NullPointerException  	6	4	replace
49	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields.length  ==  1)  {  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(isRegistered(object)||  excludeFields.length  ==  1)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||  excludeFields.length  ==  1)  {	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    	compilable	  [FE]  NullPointerException  	6	4	replace
50	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(isRegistered(object)&&  excludeFields.length  ==  0)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(isRegistered(object)&&  excludeFields.length  ==  0)  {	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    	compilable	  [FE]  NullPointerException  	6	1	replace
51	[BUG]  [BUGGY]  if(isRegistered(object)&&  excludeFields.length  ==  0)  {  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(isRegistered(object)&&  excludeFields.length  ==  0)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)&&  excludeFields.length  ==  0)  {	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    	compilable	  [FE]  NullPointerException  	6	1	replace
52	[BUG]  [BUGGY]  Integer[]  fields  =  clazz.getDeclaredFields();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  Integer[]  fields  =  clazz.getDeclaredFields();  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Integer[]  fields  =  clazz.getDeclaredFields();	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
53	[BUG]  [BUGGY]  Integer[]  fields  =  clazz.getReferences();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  Integer[]  fields  =  clazz.getReferences();  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Integer[]  fields  =  clazz.getReferences();	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
54	[BUG]  [BUGGY]  Field[]  object  =  clazz.getAssignedFields();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  Field[]  object  =  clazz.getAssignedFields();  [BUGGY]    if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Field[]  object  =  clazz.getAssignedFields();	      Field[]    object    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
55	[BUG]  [BUGGY]  Field[]  object  =  clazz.getDeclaredFields(excludeFields);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  Field[]  object  =  clazz.getDeclaredFields(excludeFields);  [BUGGY]    if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Field[]  object  =  clazz.getDeclaredFields(excludeFields);	      Field[]    object    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
56	[BUG]  [BUGGY]  Field[]  object  =  clazz.getSuperclassValue();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  Field[]  object  =  clazz.getSuperclassValue();  [BUGGY]    if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Field[]  object  =  clazz.getSuperclassValue();	      Field[]    object    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
57	[BUG]  [BUGGY]  String[]  excludeFields  =  clazz.getConstructors();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  String[]  excludeFields  =  clazz.getConstructors();  [BUGGY]    if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	String[]  excludeFields  =  clazz.getConstructors();	      String[]    excludeFields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
58	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclassFields();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  Field[]  fields  =  clazz.getSuperclassFields();  [BUGGY]    if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Field[]  fields  =  clazz.getSuperclassFields();	      Field[]    fields    =    clazz.getFields();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
59	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getReferenceFields();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  Field[]  fields  =  clazz.getReferenceFields();  [BUGGY]    if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Field[]  fields  =  clazz.getReferenceFields();	      Field[]    fields    =    clazz.getFields();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
60	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {  if(isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {  if(isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||    excludeFields!=    null    ||    excludeFields.length    ==    0)    {    if(isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
61	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {  if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {  if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||    excludeFields!=    null    ||    excludeFields.length    ==    0)    {    if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
62	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {  If(isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {  If(isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||    excludeFields!=    null    ||    excludeFields.length    ==    0)    {    If(isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
63	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {  if(isRegistered(object)||  excludedFields!=  null  ||  excludeFields.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {  if(isRegistered(object)||  excludedFields!=  null  ||  excludeFields.length  ==  0)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||    excludeFields!=    null    ||    excludeFields.length    ==    0)    {    if(isRegistered(object)||  excludedFields!=  null  ||  excludeFields.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
64	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||!isRegistered(object))  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(object  ==  null  ||!isRegistered(object))  {	  if(!isRegistered(object))    {    	compilable	  [FE]  AssertionFailedError  	2	4	replace
65	[BUG]  [BUGGY]  if(object  ==  null  ||!isRegistered(object))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||!isRegistered(object))  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||!isRegistered(object))  {	  if(!isRegistered(object))    {    	compilable	  [FE]  AssertionFailedError  	2	4	replace
66	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(object!=  null  ||!isRegistered(object))  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(object!=  null  ||!isRegistered(object))  {	  if(!isRegistered(object))    {    	compilable	  [FE]  AssertionFailedError  	2	4	replace
67	[BUG]  [BUGGY]  if(object!=  null  ||!isRegistered(object))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(object!=  null  ||!isRegistered(object))  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object!=  null  ||!isRegistered(object))  {	  if(!isRegistered(object))    {    	compilable	  [FE]  AssertionFailedError  	2	4	replace
68	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(!isRegistered(object)||  excludeFields.length!=  0)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(!isRegistered(object)||  excludeFields.length!=  0)  {	  if(!isRegistered(object))    {    	compilable	  [FE]  AssertionFailedError  	2	4	replace
69	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields.length!=  0)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(!isRegistered(object)||  excludeFields.length!=  0)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||  excludeFields.length!=  0)  {	  if(!isRegistered(object))    {    	compilable	  [FE]  AssertionFailedError  	2	4	replace
70	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getSuperclass();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  Class  <?>  object  =  clazz.getSuperclass();  [BUGGY]    if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Class  <?>  object  =  clazz.getSuperclass();	      Class    <?>    object    =    clazz.getDeclaredObject();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
71	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getName();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  Class  <?>  object  =  clazz.getName();  [BUGGY]    if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Class  <?>  object  =  clazz.getName();	      Class    <?>    object    =    clazz.getDeclaredObject();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
72	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields);  [BUGGY]    if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Field[]  fields  =  clazz.getDeclaredFields(excludeFields);	      Field[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
73	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclasses();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  Field[]  fields  =  clazz.getSuperclasses();  [BUGGY]    if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Field[]  fields  =  clazz.getSuperclasses();	      Field[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
74	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(!isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(!isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {	  if(isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	24	4	replace
75	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(!isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {	  if(isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	24	4	replace
76	[BUG]  [BUGGY]  int  objectValue  =  clazz.getKey();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  int  objectValue  =  clazz.getKey();  [BUGGY]    if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	int  objectValue  =  clazz.getKey();	      int    objectValue    =    clazz.getValue();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
77	[BUG]  [BUGGY]  int  objectValue  =  excludeFields.getValue();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  int  objectValue  =  excludeFields.getValue();  [BUGGY]    if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	int  objectValue  =  excludeFields.getValue();	      int    objectValue    =    clazz.getValue();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
78	[BUG]  [BUGGY]  int  objectValue  =  clazz.getValue(excludeFields);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  int  objectValue  =  clazz.getValue(excludeFields);  [BUGGY]    if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	int  objectValue  =  clazz.getValue(excludeFields);	      int    objectValue    =    clazz.getValue();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
79	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getAssignedClass();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  Class  <?>  object  =  clazz.getAssignedClass();  [BUGGY]    if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Class  <?>  object  =  clazz.getAssignedClass();	      Class    <?>    object    =    clazz.getDeclaredClass();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
80	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getDeclaredClass(excludeFields);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  Class  <?>  object  =  clazz.getDeclaredClass(excludeFields);  [BUGGY]    if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Class  <?>  object  =  clazz.getDeclaredClass(excludeFields);	      Class    <?>    object    =    clazz.getDeclaredClass();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
81	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(!isRegistered(object)&&  excludeFields.length  ==  0)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(!isRegistered(object)&&  excludeFields.length  ==  0)  {	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    	compilable	  [FE]  NullPointerException  	6	4	replace
82	[BUG]  [BUGGY]  if(!isRegistered(object)&&  excludeFields.length  ==  0)  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(!isRegistered(object)&&  excludeFields.length  ==  0)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)&&  excludeFields.length  ==  0)  {	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    	compilable	  [FE]  NullPointerException  	6	4	replace
83	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  excludeFields.length  ==  0)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(object  ==  null  ||  excludeFields.length  ==  0)  {	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    	compilable	  [FE]  NullPointerException  	6	4	replace
84	[BUG]  [BUGGY]  if(object  ==  null  ||  excludeFields.length  ==  0)  {  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  excludeFields.length  ==  0)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  excludeFields.length  ==  0)  {	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    	compilable	  [FE]  NullPointerException  	6	4	replace
85	[BUG]  [BUGGY]  FieldValue  object  =  clazz.findField(excludeFields);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  FieldValue  object  =  clazz.findField(excludeFields);  [BUGGY]    if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	FieldValue  object  =  clazz.findField(excludeFields);	      FieldValue    object    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
86	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {	  if(isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	24	4	replace
87	[BUG]  [BUGGY]  if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {	  if(isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	24	4	replace
88	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(excludeFields  ==  null  ||  excludeFields.length  ==  0)  {	  if(isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	24	4	replace
89	[BUG]  [BUGGY]  if(excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(excludeFields  ==  null  ||  excludeFields.length  ==  0)  {	  if(isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	24	4	replace
90	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  isRegistered(excludeFields))  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(object  ==  null  ||  isRegistered(excludeFields))  {	  if(object    ==    null    ||    isRegistered(object))    {    	compilable	  [FE]  StackOverflowError  	4	1	replace
91	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(excludeFields))  {  [FE]  StackOverflowError  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  isRegistered(excludeFields))  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  isRegistered(excludeFields))  {	  if(object    ==    null    ||    isRegistered(object))    {    	compilable	  [FE]  StackOverflowError  	4	1	replace
92	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields!=  null)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(object  ==  null  ||  isRegistered(object)||  excludeFields!=  null)  {	  if(object    ==    null    ||    isRegistered(object))    {    	compilable	  [FE]  AssertionFailedError  	4	2	replace
93	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields!=  null)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields!=  null)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  isRegistered(object)||  excludeFields!=  null)  {	  if(object    ==    null    ||    isRegistered(object))    {    	compilable	  [FE]  AssertionFailedError  	4	2	replace
94	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null)  {  if(isRegistered(object)||  excludeFields  ==  null  ||  object  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null)  {  if(isRegistered(object)||  excludeFields  ==  null  ||  object  ==  null)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||  excludeFields  ==  null  ||  object  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
95	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaredObject(excludeFields);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  Object  object  =  clazz.getDeclaredObject(excludeFields);  [BUGGY]    if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Object  object  =  clazz.getDeclaredObject(excludeFields);	      Object    object    =    clazz.getDeclaredObject();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
96	[BUG]  [BUGGY]  Object  object  =  clazz.getSuperclass();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  Object  object  =  clazz.getSuperclass();  [BUGGY]    if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Object  object  =  clazz.getSuperclass();	      Object    object    =    clazz.getDeclaredObject();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
97	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaredObject(0);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  Object  object  =  clazz.getDeclaredObject(0);  [BUGGY]    if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Object  object  =  clazz.getDeclaredObject(0);	      Object    object    =    clazz.getDeclaredObject();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
98	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(!isRegistered(object)||  excludeFields!=  null)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(!isRegistered(object)||  excludeFields!=  null)  {	  if(!isRegistered(object))    {    	compilable	  [FE]  AssertionFailedError  	2	4	replace
99	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields!=  null)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(!isRegistered(object)||  excludeFields!=  null)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||  excludeFields!=  null)  {	  if(!isRegistered(object))    {    	compilable	  [FE]  AssertionFailedError  	2	4	replace
100	[BUG]  [BUGGY]  Field[]  object  =  clazz.getSuperclasses();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  Field[]  object  =  clazz.getSuperclasses();  [BUGGY]    if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Field[]  object  =  clazz.getSuperclasses();	      Field[]    object    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
101	[BUG]  [BUGGY]  Field[]  object  =  clazz.getSuperclass();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  Field[]  object  =  clazz.getSuperclass();  [BUGGY]    if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Field[]  object  =  clazz.getSuperclass();	      Field[]    object    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
102	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  if(!isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  if(!isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    if(!isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
103	[BUG]  [BUGGY]  int  objectValue  =  clazz.getObjectValue();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  int  objectValue  =  clazz.getObjectValue();  [BUGGY]    if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	int  objectValue  =  clazz.getObjectValue();	      int    objectValue    =    clazz.getValue();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
104	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	21	4	replace
105	[BUG]  [BUGGY]  if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	21	4	replace
106	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(!isRegistered(object)&&  excludeFields  ==  null)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(!isRegistered(object)&&  excludeFields  ==  null)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	21	4	replace
107	[BUG]  [BUGGY]  if(!isRegistered(object)&&  excludeFields  ==  null)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(!isRegistered(object)&&  excludeFields  ==  null)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)&&  excludeFields  ==  null)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	21	4	replace
108	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields.length  ==  0)  {  If(isRegistered(object)||  excludeFields.length  ==  0)  {  [CE]  ';'  expected  [FE]    NullPointerException    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(isRegistered(object)||  excludeFields.length  ==  0)  {  If(isRegistered(object)||  excludeFields.length  ==  0)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||    excludeFields.length    ==    0)    {    If(isRegistered(object)||  excludeFields.length  ==  0)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
109	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields.length  ==  0)  {  if(isRegistered(object)||  excludeFields.length  ==  0  ||  object  ==  null)  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(isRegistered(object)||  excludeFields.length  ==  0)  {  if(isRegistered(object)||  excludeFields.length  ==  0  ||  object  ==  null)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||    excludeFields.length    ==    0)    {    if(isRegistered(object)||  excludeFields.length  ==  0  ||  object  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
110	[BUG]  [BUGGY]  FieldValue[]  fields  =  clazz.getDeclaredFields();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  FieldValue[]  fields  =  clazz.getDeclaredFields();  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	FieldValue[]  fields  =  clazz.getDeclaredFields();	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
111	[BUG]  [BUGGY]  int  iConstant  =  excludeFields.length;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  int  iConstant  =  excludeFields.length;  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	int  iConstant  =  excludeFields.length;	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
112	[BUG]  [BUGGY]  FieldValue[]  fields  =  clazz.getFieldValues();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  FieldValue[]  fields  =  clazz.getFieldValues();  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	FieldValue[]  fields  =  clazz.getFieldValues();	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
113	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(object))  {  Object  object  ==  null  ||  isRegistered(object))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  isRegistered(object))  {  Object  object  ==  null  ||  isRegistered(object))  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||    isRegistered(object))    {    Object  object  ==  null  ||  isRegistered(object))  {	  	non-compiled	[CE]  ';'  expected	3	None	add
114	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(object))  {  AssertionFailedError  <  AssertionFailedError  >>  String[]  excludeFields)  {  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  isRegistered(object))  {  AssertionFailedError  <  AssertionFailedError  >>  String[]  excludeFields)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||    isRegistered(object))    {    AssertionFailedError  <  AssertionFailedError  >>  String[]  excludeFields)  {	  	non-compiled	[CE]  not  a  statement	3	None	add
115	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(object))  {  AssertionFailedError  <  AssertionFailedError  >=  String[]  excludeFields)  {  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  isRegistered(object))  {  AssertionFailedError  <  AssertionFailedError  >=  String[]  excludeFields)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||    isRegistered(object))    {    AssertionFailedError  <  AssertionFailedError  >=  String[]  excludeFields)  {	  	non-compiled	[CE]  not  a  statement	3	None	add
116	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclassFieldValues();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  Field[]  fields  =  clazz.getSuperclassFieldValues();  [BUGGY]    if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Field[]  fields  =  clazz.getSuperclassFieldValues();	      Field[]    fields    =    clazz.getFields();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
117	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getReferenceName();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  Class  <?>  object  =  clazz.getReferenceName();  [BUGGY]    if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Class  <?>  object  =  clazz.getReferenceName();	      Class    <?>    object    =    clazz.getDeclaredClass();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
118	[BUG]  [BUGGY]  if(excludeFields  ==  null)  {  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  String[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue);  }  [CE]  incompatible  types  [FE]                AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(excludeFields  ==  null)  {  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  String[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue);  }  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(excludeFields  ==  null)  {  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  String[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue);  }	      	non-compiled	[CE]  incompatible  types	9	None	replace
119	[BUG]  [BUGGY]  if(excludeFields  ==  null)  {  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  String[]  fields  =  clazz.getDeclaredFields();  builder.addChangeListener(this);  }  [CE]  incompatible  types  [FE]                  AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(excludeFields  ==  null)  {  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  String[]  fields  =  clazz.getDeclaredFields();  builder.addChangeListener(this);  }  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(excludeFields  ==  null)  {  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  String[]  fields  =  clazz.getDeclaredFields();  builder.addChangeListener(this);  }	      	non-compiled	[CE]  incompatible  types	9	None	replace
120	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields.length  ==  0)  {  if(isRegistered(object)||  excludeFields.length  ==  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(isRegistered(object)||  excludeFields.length  ==  0)  {  if(isRegistered(object)||  excludeFields.length  ==  0)  {  return;  }  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||    excludeFields.length    ==    0)    {    if(isRegistered(object)||  excludeFields.length  ==  0)  {  return;  }	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
121	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null)  {  if(isRegistered(object)||  excludeFields  ==  null  ||  this.useTransients)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null)  {  if(isRegistered(object)||  excludeFields  ==  null  ||  this.useTransients)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||  excludeFields  ==  null  ||  this.useTransients)  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
122	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null)  {  if(isRegistered(object)||  excludeFields  ==  null  ||!useTransients)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null)  {  if(isRegistered(object)||  excludeFields  ==  null  ||!useTransients)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||  excludeFields  ==  null  ||!useTransients)  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
123	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null)  {  if(isRegistered(object)||  excludedFields  ==  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null)  {  if(isRegistered(object)||  excludedFields  ==  null)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||  excludedFields  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
124	[BUG]  [BUGGY]  FieldValue  object  =  excludedFields.getDeclaredFields();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  FieldValue  object  =  excludedFields.getDeclaredFields();  [BUGGY]    if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	FieldValue  object  =  excludedFields.getDeclaredFields();	      FieldValue    object    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
125	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields  ==  null)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(object  ==  null  ||  isRegistered(object)||  excludeFields  ==  null)  {	  if(object    ==    null    ||    isRegistered(object))    {    	compilable	  [FE]  AssertionFailedError  	4	4	replace
126	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields  ==  null)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields  ==  null)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  isRegistered(object)||  excludeFields  ==  null)  {	  if(object    ==    null    ||    isRegistered(object))    {    	compilable	  [FE]  AssertionFailedError  	4	4	replace
127	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields.length  ==  0)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(object  ==  null  ||  isRegistered(object)||  excludeFields.length  ==  0)  {	  if(object    ==    null    ||    isRegistered(object))    {    	compilable	  [FE]  NullPointerException  	4	4	replace
128	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields.length  ==  0)  {  [FE]  NullPointerException  [FE]      AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields.length  ==  0)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  isRegistered(object)||  excludeFields.length  ==  0)  {	  if(object    ==    null    ||    isRegistered(object))    {    	compilable	  [FE]  NullPointerException  	4	4	replace
129	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(!useTransients  ||!isRegistered(object))  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(!useTransients  ||!isRegistered(object))  {	  if(!isRegistered(object))    {    	compilable	  [FE]  AssertionFailedError  	2	4	replace
130	[BUG]  [BUGGY]  if(!useTransients  ||!isRegistered(object))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(!useTransients  ||!isRegistered(object))  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!useTransients  ||!isRegistered(object))  {	  if(!isRegistered(object))    {    	compilable	  [FE]  AssertionFailedError  	2	4	replace
131	[BUG]  [BUGGY]  if(!isRegistered(object))  {  if(!isRegistered(object)  ||  useTransients)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(!isRegistered(object))  {  if(!isRegistered(object)  ||  useTransients)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object))    {    if(!isRegistered(object)  ||  useTransients)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
132	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(object))  {  AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.toString();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  isRegistered(object))  {  AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.toString();  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||    isRegistered(object))    {    AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.toString();	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
133	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(object))  {  AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.get(object);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  isRegistered(object))  {  AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.get(object);  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||    isRegistered(object))    {    AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.get(object);	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
134	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(object))  {  AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.get(0);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  isRegistered(object))  {  AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.get(0);  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||    isRegistered(object))    {    AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.get(0);	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
135	[BUG]  [BUGGY]  int  objectValue  =  clazz.getImplicitReturnValue();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  int  objectValue  =  clazz.getImplicitReturnValue();  [BUGGY]    if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	int  objectValue  =  clazz.getImplicitReturnValue();	      int    objectValue    =    clazz.getValue();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
136	[BUG]  [BUGGY]  String[]  excludeFields  =  clazz.getInterfaces();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  String[]  excludeFields  =  clazz.getInterfaces();  [BUGGY]    if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	String[]  excludeFields  =  clazz.getInterfaces();	      String[]    excludeFields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
137	[BUG]  [BUGGY]  Object  object  =  clazz.getReferenceName();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  Object  object  =  clazz.getReferenceName();  [BUGGY]    if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Object  object  =  clazz.getReferenceName();	      Object    object    =    clazz.getDeclaredObject();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
138	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaringClass();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  Object  object  =  clazz.getDeclaringClass();  [BUGGY]    if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Object  object  =  clazz.getDeclaringClass();	      Object    object    =    clazz.getDeclaredObject();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
139	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  if(isRegistered(object)||  excludedFields  ==  null  ||  excludeFields.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  if(isRegistered(object)||  excludedFields  ==  null  ||  excludeFields.length  ==  0)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    if(isRegistered(object)||  excludedFields  ==  null  ||  excludeFields.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
140	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(isRegistered(object)||  excludeFields!=  null)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(isRegistered(object)||  excludeFields!=  null)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	21	2	replace
141	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields!=  null)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {    [BUGGY]  if(isRegistered(object)||  excludeFields!=  null)  {  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||  excludeFields!=  null)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	21	2	replace
