bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  [BUGGY]  if(!isRegistered(object))  {  [BUGGY]  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(!isRegistered(object))  {	if  (isRegistered(object))  {  	compilable	  [FE]  AssertionFailedError  	7	4	replace
2	[BUG]  [BUGGY]  if(!isRegistered(object))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  [BUGGY]  if(!isRegistered(object))  {  [BUGGY]  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object))  {	if  (isRegistered(object))  {  	compilable	  [FE]  AssertionFailedError  	7	4	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  [BUGGY]  if(object  ==  null  ||  isRegistered(object))  {  [BUGGY]  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(object  ==  null  ||  isRegistered(object))  {	if  (isRegistered(object))  {  	compilable	  [FE]  AssertionFailedError  	7	1	replace
4	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(object))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  [BUGGY]  if(object  ==  null  ||  isRegistered(object))  {  [BUGGY]  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  isRegistered(object))  {	if  (isRegistered(object))  {  	compilable	  [FE]  AssertionFailedError  	7	1	replace
5	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  [BUGGY]  if(isRegistered(object)||  excludeFields.length  ==  0)  {  [BUGGY]  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(isRegistered(object)||  excludeFields.length  ==  0)  {	if  (isRegistered(object))  {  	compilable	  [FE]  NullPointerException  	7	4	replace
6	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields.length  ==  0)  {  [FE]  NullPointerException  [FE]        AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  [BUGGY]  if(isRegistered(object)||  excludeFields.length  ==  0)  {  [BUGGY]  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||  excludeFields.length  ==  0)  {	if  (isRegistered(object))  {  	compilable	  [FE]  NullPointerException  	7	4	replace
7	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  [BUGGY]  if(isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {  [BUGGY]  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {	if  (isRegistered(object))  {  	compilable	  [FE]  NullPointerException  	7	4	replace
8	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {  [FE]  NullPointerException  [FE]          AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  [BUGGY]  if(isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {  [BUGGY]  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {	if  (isRegistered(object))  {  	compilable	  [FE]  NullPointerException  	7	4	replace
9	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]            AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  [BUGGY]    [BUGGY]  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	  	if  (isRegistered(object))  {  	non-compiled	[CE]  illegal  start  of  type	7	None	replace
10	[BUG]  [BUGGY]    Field[]  fields  =  clazz.getDeclaredFields();  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]    AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  [BUGGY]    Field[]  fields  =  clazz.getDeclaredFields();  [BUGGY]  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	    Field[]  fields  =  clazz.getDeclaredFields();		non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	8	None	add
11	[BUG]  [BUGGY]    String[]  excludeFields  =  clazz.getDeclaredFields();  [CE]  variable  excludeFields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]      AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  [BUGGY]    String[]  excludeFields  =  clazz.getDeclaredFields();  [BUGGY]  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	    String[]  excludeFields  =  clazz.getDeclaredFields();		non-compiled	[CE]  variable  excludeFields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	8	None	add
12	[BUG]  [BUGGY]    String[]  excludeFields  =  clazz.getReferenceFields();  [CE]  variable  excludeFields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]        AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  [BUGGY]    String[]  excludeFields  =  clazz.getReferenceFields();  [BUGGY]  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	    String[]  excludeFields  =  clazz.getReferenceFields();		non-compiled	[CE]  variable  excludeFields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	8	None	add
13	[BUG]  [BUGGY]    Field[]  fields  =  clazz.getFields();  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]          AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  [BUGGY]    Field[]  fields  =  clazz.getFields();  [BUGGY]  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	    Field[]  fields  =  clazz.getFields();		non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	8	None	add
14	[BUG]  [BUGGY]    int  objectValue  =  clazz.getValue();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  [BUGGY]    int  objectValue  =  clazz.getValue();  [BUGGY]  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	    int  objectValue  =  clazz.getValue();		non-compiled	[CE]  cannot  find  symbol	8	None	add
15	[BUG]  [BUGGY]    FieldValue  object  =  clazz.getDeclaredFields();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  [BUGGY]    FieldValue  object  =  clazz.getDeclaredFields();  [BUGGY]  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	    FieldValue  object  =  clazz.getDeclaredFields();		non-compiled	[CE]  cannot  find  symbol	8	None	add
16	[BUG]  [BUGGY]    Field[]  object  =  clazz.getDeclaredFields();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]      AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  [BUGGY]    Field[]  object  =  clazz.getDeclaredFields();  [BUGGY]  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	    Field[]  object  =  clazz.getDeclaredFields();		non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	8	None	add
17	[BUG]  [BUGGY]    Class  <?>  object  =  clazz.getDeclaredFields();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]        AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  [BUGGY]    Class  <?>  object  =  clazz.getDeclaredFields();  [BUGGY]  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	    Class  <?>  object  =  clazz.getDeclaredFields();		non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	8	None	add
18	[BUG]  [BUGGY]    Class  <?>  object  =  clazz.getDeclaredObject();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]          AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  [BUGGY]    Class  <?>  object  =  clazz.getDeclaredObject();  [BUGGY]  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	    Class  <?>  object  =  clazz.getDeclaredObject();		non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	8	None	add
19	[BUG]  [BUGGY]    Object  object  =  clazz.getDeclaredObject();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]            AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  [BUGGY]    Object  object  =  clazz.getDeclaredObject();  [BUGGY]  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	    Object  object  =  clazz.getDeclaredObject();		non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	8	None	add
20	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null)  {  [BUGGY]  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(isRegistered(object)||  excludeFields  ==  null)  {	if  (isRegistered(object))  {  	compilable	  [FE]  AssertionFailedError  	7	4	replace
21	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null)  {  [BUGGY]  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||  excludeFields  ==  null)  {	if  (isRegistered(object))  {  	compilable	  [FE]  AssertionFailedError  	7	4	replace
22	[BUG]  [BUGGY]    Class  <?>  object  =  clazz.getDeclaredClass();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]    AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  [BUGGY]    Class  <?>  object  =  clazz.getDeclaredClass();  [BUGGY]  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	    Class  <?>  object  =  clazz.getDeclaredClass();		non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	8	None	add
23	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [BUGGY]  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {	if  (isRegistered(object))  {  	compilable	  [FE]  AssertionFailedError  	7	4	replace
24	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [BUGGY]  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {	if  (isRegistered(object))  {  	compilable	  [FE]  AssertionFailedError  	7	4	replace
