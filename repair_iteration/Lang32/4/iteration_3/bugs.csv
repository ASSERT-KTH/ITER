bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length!=  0)  {  if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length!=  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length!=  0)  {  if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length!=  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length!=    0)    {    if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
2	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length!=  0)  {  if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length!=  0)  {  if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length!=    0)    {    if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
3	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length!=  0)  {  if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  >=  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length!=  0)  {  if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  >=  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length!=    0)    {    if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
4	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length!=  0)  {  If(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length!=  0)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length!=  0)  {  If(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length!=  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length!=    0)    {    If(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length!=  0)  {	  	non-compiled	[CE]  ';'  expected	17	None	add
5	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields  ==  null)  {  if(object  ==  null  ||  isRegistered(object)||  excludeFields  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields  ==  null)  {  if(object  ==  null  ||  isRegistered(object)||  excludeFields  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||    isRegistered(object)||    excludeFields    ==    null)    {    if(object  ==  null  ||  isRegistered(object)||  excludeFields  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	125	None	add
6	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields  ==  null)  {  if(object!=  null  ||  isRegistered(object)||  excludeFields  ==  null)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields  ==  null)  {  if(object!=  null  ||  isRegistered(object)||  excludeFields  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||    isRegistered(object)||    excludeFields    ==    null)    {    if(object!=  null  ||  isRegistered(object)||  excludeFields  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	125	None	add
7	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields  ==  null)  {  if(object  ==  null  ||  isRegistered(object)||  excludeFields!=  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields  ==  null)  {  if(object  ==  null  ||  isRegistered(object)||  excludeFields!=  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||    isRegistered(object)||    excludeFields    ==    null)    {    if(object  ==  null  ||  isRegistered(object)||  excludeFields!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	125	None	add
8	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields  ==  null)  {  if(object  ==  null  ||  isRegistered(object)||  excludedFields  ==  null)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields  ==  null)  {  if(object  ==  null  ||  isRegistered(object)||  excludedFields  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||    isRegistered(object)||    excludeFields    ==    null)    {    if(object  ==  null  ||  isRegistered(object)||  excludedFields  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	125	None	add
9	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields  ==  null)  {  If(object  ==  null  ||  isRegistered(object)||  excludeFields  ==  null)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields  ==  null)  {  If(object  ==  null  ||  isRegistered(object)||  excludeFields  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||    isRegistered(object)||    excludeFields    ==    null)    {    If(object  ==  null  ||  isRegistered(object)||  excludeFields  ==  null)  {	  	non-compiled	[CE]  ';'  expected	125	None	add
10	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  excludeFields.length!=  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(object  ==  null  ||  excludeFields.length!=  0)  {	  if(object    ==    null    ||    excludeFields.length    ==    0)    {    	compilable	  [FE]  NullPointerException  	84	4	replace
11	[BUG]  [BUGGY]  if(object  ==  null  ||  excludeFields.length!=  0)  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  excludeFields.length!=  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  excludeFields.length!=  0)  {	  if(object    ==    null    ||    excludeFields.length    ==    0)    {    	compilable	  [FE]  NullPointerException  	84	4	replace
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields  ==  null  ||  excludeFields.length!=  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(excludeFields  ==  null  ||  excludeFields.length!=  0)  {	  if(object    ==    null    ||    excludeFields.length    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	84	4	replace
13	[BUG]  [BUGGY]  if(excludeFields  ==  null  ||  excludeFields.length!=  0)  {  [FE]  AssertionFailedError  [FE]      NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields  ==  null  ||  excludeFields.length!=  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(excludeFields  ==  null  ||  excludeFields.length!=  0)  {	  if(object    ==    null    ||    excludeFields.length    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	84	4	replace
14	[BUG]  [BUGGY]  if(object  ==  null  ||!isRestricted(object))  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||!isRestricted(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||!isRestricted(object))  {	  if(object!=    null    ||!isRegistered(object))    {    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
15	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRegistered(object)&&  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(object  ==  null  ||  isRegistered(object)&&  excludeFields.length  ==  0)  {	  if(isRegistered(object)&&    excludeFields.length    ==    0)    {    	compilable	  [FE]  NullPointerException  	51	1	replace
16	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(object)&&  excludeFields.length  ==  0)  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRegistered(object)&&  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  isRegistered(object)&&  excludeFields.length  ==  0)  {	  if(isRegistered(object)&&    excludeFields.length    ==    0)    {    	compilable	  [FE]  NullPointerException  	51	1	replace
17	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)&&  excludeFields.length  >  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(isRegistered(object)&&  excludeFields.length  >  0)  {	  if(isRegistered(object)&&    excludeFields.length    ==    0)    {    	compilable	  [FE]  NullPointerException  	51	1	replace
18	[BUG]  [BUGGY]  if(isRegistered(object)&&  excludeFields.length  >  0)  {  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)&&  excludeFields.length  >  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)&&  excludeFields.length  >  0)  {	  if(isRegistered(object)&&    excludeFields.length    ==    0)    {    	compilable	  [FE]  NullPointerException  	51	1	replace
19	[BUG]  [BUGGY]  if(!isRegistered(object)||!Modifier.isTransient(object.getModifiers()))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||!Modifier.isTransient(object.getModifiers()))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||!Modifier.isTransient(object.getModifiers()))  {	  if(!isRegistered(object))    {    if(!isRegistered(object)    ||!useTransients)    {    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
20	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||!useTransients)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(!isRegistered(object)||!useTransients)  {	  if(!isRegistered(object))    {    if(!isRegistered(object)    ||!useTransients)    {    	compilable	  [FE]  AssertionFailedError  	28	4	replace
21	[BUG]  [BUGGY]  if(!isRegistered(object)||!useTransients)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||!useTransients)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||!useTransients)  {	  if(!isRegistered(object))    {    if(!isRegistered(object)    ||!useTransients)    {    	compilable	  [FE]  AssertionFailedError  	28	4	replace
22	[BUG]  [BUGGY]  if(object  instanceof  AccessibleObject)  {  if(!isRegistered(object)||!useTransients)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  instanceof  AccessibleObject)  {  if(!isRegistered(object)||!useTransients)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  instanceof  AccessibleObject)  {  if(!isRegistered(object)||!useTransients)  {	  if(!isRegistered(object))    {    if(!isRegistered(object)    ||!useTransients)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
23	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)&&!useTransients)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(!isRegistered(object)&&!useTransients)  {	  if(!isRegistered(object))    {    if(!isRegistered(object)    ||!useTransients)    {    	compilable	  [FE]  AssertionFailedError  	28	4	replace
24	[BUG]  [BUGGY]  if(!isRegistered(object)&&!useTransients)  {  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)&&!useTransients)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)&&!useTransients)  {	  if(!isRegistered(object))    {    if(!isRegistered(object)    ||!useTransients)    {    	compilable	  [FE]  AssertionFailedError  	28	4	replace
25	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields.length!=  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(object  ==  null  ||  isRegistered(object)||  excludeFields.length!=  0)  {	  if(object    ==    null    ||    isRegistered(object)||    excludeFields.length    ==    0)    {    	compilable	  [FE]  NullPointerException  	128	4	replace
26	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields.length!=  0)  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields.length!=  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  isRegistered(object)||  excludeFields.length!=  0)  {	  if(object    ==    null    ||    isRegistered(object)||    excludeFields.length    ==    0)    {    	compilable	  [FE]  NullPointerException  	128	4	replace
27	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields.length  >=  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(object  ==  null  ||  isRegistered(object)||  excludeFields.length  >=  0)  {	  if(object    ==    null    ||    isRegistered(object)||    excludeFields.length    ==    0)    {    	compilable	  [FE]  NullPointerException  	128	4	replace
28	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields.length  >=  0)  {  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields.length  >=  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  isRegistered(object)||  excludeFields.length  >=  0)  {	  if(object    ==    null    ||    isRegistered(object)||    excludeFields.length    ==    0)    {    	compilable	  [FE]  NullPointerException  	128	4	replace
29	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields!=  null)  {  if(!isRegistered(object)||  excludeFields!=  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields!=  null)  {  if(!isRegistered(object)||  excludeFields!=  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||    excludeFields!=    null)    {    if(!isRegistered(object)||  excludeFields!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	98	None	add
30	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields!=  null)  {  if(!isRegistered(object)||  excludeFields  ==  null)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields!=  null)  {  if(!isRegistered(object)||  excludeFields  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||    excludeFields!=    null)    {    if(!isRegistered(object)||  excludeFields  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	98	None	add
31	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields!=  null)  {  if(!isRegistered(object)&&  excludeFields!=  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields!=  null)  {  if(!isRegistered(object)&&  excludeFields!=  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||    excludeFields!=    null)    {    if(!isRegistered(object)&&  excludeFields!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	98	None	add
32	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields!=  null)  {  if(!isRegistered(object)||  excludeFields!=  null  ||  useTransients)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields!=  null)  {  if(!isRegistered(object)||  excludeFields!=  null  ||  useTransients)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||    excludeFields!=    null)    {    if(!isRegistered(object)||  excludeFields!=  null  ||  useTransients)  {	  	non-compiled	[CE]  illegal  start  of  expression	98	None	add
33	[BUG]  [BUGGY]  Object  object  =  clazz.getInterface();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Object  object  =  clazz.getInterface();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Object  object  =  clazz.getInterface();	  Object    object    =    clazz.getSuperclass();    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
34	[BUG]  [BUGGY]  Object  object  =  clazz.getSimpleName();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Object  object  =  clazz.getSimpleName();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Object  object  =  clazz.getSimpleName();	  Object    object    =    clazz.getSuperclass();    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
35	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields  ==  null  ||  isRegistered(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(excludeFields  ==  null  ||  isRegistered(object))  {	  if(object    ==    null    ||    isRegistered(excludeFields))    {    	compilable	  [FE]  AssertionFailedError  	91	4	replace
36	[BUG]  [BUGGY]  if(excludeFields  ==  null  ||  isRegistered(object))  {  [FE]  AssertionFailedError  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields  ==  null  ||  isRegistered(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(excludeFields  ==  null  ||  isRegistered(object))  {	  if(object    ==    null    ||    isRegistered(excludeFields))    {    	compilable	  [FE]  AssertionFailedError  	91	4	replace
37	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  isRegistered(excludeFields))  {  [CE]  cannot  find  symbol  fieldValue  [FE]      StackOverflowError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(fieldValue  ==  null  ||  isRegistered(excludeFields))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(fieldValue  ==  null  ||  isRegistered(excludeFields))  {	  if(object    ==    null    ||    isRegistered(excludeFields))    {    	non-compiled	[CE]  cannot  find  symbol  fieldValue	91	None	replace
38	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(fieldValue))  {  [CE]  cannot  find  symbol  fieldValue  [FE]        StackOverflowError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRegistered(fieldValue))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  isRegistered(fieldValue))  {	  if(object    ==    null    ||    isRegistered(excludeFields))    {    	non-compiled	[CE]  cannot  find  symbol  fieldValue	91	None	replace
39	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||!isRegistered(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(!isRegistered(object)||!isRegistered(object))  {	  if(!isRegistered(object))    {    ||!isRegistered(object))    {    	compilable	  [FE]  AssertionFailedError  	26	4	replace
40	[BUG]  [BUGGY]  if(!isRegistered(object)||!isRegistered(object))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||!isRegistered(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||!isRegistered(object))  {	  if(!isRegistered(object))    {    ||!isRegistered(object))    {    	compilable	  [FE]  AssertionFailedError  	26	4	replace
41	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)&&!isRegistered(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(!isRegistered(object)&&!isRegistered(object))  {	  if(!isRegistered(object))    {    ||!isRegistered(object))    {    	compilable	  [FE]  AssertionFailedError  	26	4	replace
42	[BUG]  [BUGGY]  if(!isRegistered(object)&&!isRegistered(object))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)&&!isRegistered(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)&&!isRegistered(object))  {	  if(!isRegistered(object))    {    ||!isRegistered(object))    {    	compilable	  [FE]  AssertionFailedError  	26	4	replace
43	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)&&  excludeFields!=  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(!isRegistered(object)&&  excludeFields!=  null)  {	  if(!isRegistered(object)||    excludeFields!=    null)    {    	compilable	  [FE]  StackOverflowError  	99	2	replace
44	[BUG]  [BUGGY]  if(!isRegistered(object)&&  excludeFields!=  null)  {  [FE]  StackOverflowError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)&&  excludeFields!=  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)&&  excludeFields!=  null)  {	  if(!isRegistered(object)||    excludeFields!=    null)    {    	compilable	  [FE]  StackOverflowError  	99	2	replace
45	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields  ==  null  ||!useTransients)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(!isRegistered(object)||  excludeFields  ==  null  ||!useTransients)  {	  if(!isRegistered(object)||    excludeFields!=    null)    {    	compilable	  [FE]  AssertionFailedError  	99	4	replace
46	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields  ==  null  ||!useTransients)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields  ==  null  ||!useTransients)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||  excludeFields  ==  null  ||!useTransients)  {	  if(!isRegistered(object)||    excludeFields!=    null)    {    	compilable	  [FE]  AssertionFailedError  	99	4	replace
47	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients  &&  isRegistered(object)||  excludeFields!=  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(!useTransients  &&  isRegistered(object)||  excludeFields!=  null)  {	  if(!useTransients    &&    isRegistered(object)||    excludeFields    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	105	2	replace
48	[BUG]  [BUGGY]  if(!useTransients  &&  isRegistered(object)||  excludeFields!=  null)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients  &&  isRegistered(object)||  excludeFields!=  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!useTransients  &&  isRegistered(object)||  excludeFields!=  null)  {	  if(!useTransients    &&    isRegistered(object)||    excludeFields    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	105	2	replace
49	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients  ||  isRegistered(object)||  excludeFields  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(!useTransients  ||  isRegistered(object)||  excludeFields  ==  null)  {	  if(!useTransients    &&    isRegistered(object)||    excludeFields    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	105	4	replace
50	[BUG]  [BUGGY]  if(!useTransients  ||  isRegistered(object)||  excludeFields  ==  null)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients  ||  isRegistered(object)||  excludeFields  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!useTransients  ||  isRegistered(object)||  excludeFields  ==  null)  {	  if(!useTransients    &&    isRegistered(object)||    excludeFields    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	105	4	replace
51	[BUG]  [BUGGY]  if(!useTransients  &&  isRegistered(object,  fieldValue)||  excludeFields  ==  null)  {  [CE]  cannot  find  symbol  fieldValue  [FE]        AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients  &&  isRegistered(object,  fieldValue)||  excludeFields  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!useTransients  &&  isRegistered(object,  fieldValue)||  excludeFields  ==  null)  {	  if(!useTransients    &&    isRegistered(object)||    excludeFields    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol  fieldValue	105	None	replace
52	[BUG]  [BUGGY]  int  objectValue  =  clazz.getSimpleName();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  int  objectValue  =  clazz.getSimpleName();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	int  objectValue  =  clazz.getSimpleName();	  int    objectValue    =    clazz.getKey();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
53	[BUG]  [BUGGY]  int  objectValue  =  clazz.getImmediateParentNode();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  int  objectValue  =  clazz.getImmediateParentNode();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	int  objectValue  =  clazz.getImmediateParentNode();	  int    objectValue    =    clazz.getKey();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
54	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object!=  null  ||  isRegistered(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(object!=  null  ||  isRegistered(object))  {	  if(object    ==    null    ||    isRegistered(object))    {    if(object!=    null    ||    isRegistered(object))    {    	compilable	  [FE]  AssertionFailedError  	11	4	replace
55	[BUG]  [BUGGY]  if(object!=  null  ||  isRegistered(object))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object!=  null  ||  isRegistered(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object!=  null  ||  isRegistered(object))  {	  if(object    ==    null    ||    isRegistered(object))    {    if(object!=    null    ||    isRegistered(object))    {    	compilable	  [FE]  AssertionFailedError  	11	4	replace
56	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  isRegistered(object))  {  [CE]  cannot  find  symbol  fieldValue  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(fieldValue  ==  null  ||  isRegistered(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(fieldValue  ==  null  ||  isRegistered(object))  {	  if(object    ==    null    ||    isRegistered(object))    {    if(object!=    null    ||    isRegistered(object))    {    	non-compiled	[CE]  cannot  find  symbol  fieldValue	11	None	replace
57	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludeFields.length  ==  0  ||  object  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(isRegistered(object)||  excludeFields.length  ==  0  ||  object  ==  null)  {	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    if(isRegistered(object)||    excludeFields.length    ==    0    ||    object    ==    null)    {    	compilable	  [FE]  NullPointerException  	109	4	replace
58	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields.length  ==  0  ||  object  ==  null)  {  [FE]  NullPointerException  [FE]          NullPointerException      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludeFields.length  ==  0  ||  object  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||  excludeFields.length  ==  0  ||  object  ==  null)  {	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    if(isRegistered(object)||    excludeFields.length    ==    0    ||    object    ==    null)    {    	compilable	  [FE]  NullPointerException  	109	4	replace
59	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludeFields.length  ==  0  ||  object!=  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(isRegistered(object)||  excludeFields.length  ==  0  ||  object!=  null)  {	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    if(isRegistered(object)||    excludeFields.length    ==    0    ||    object    ==    null)    {    	compilable	  [FE]  NullPointerException  	109	4	replace
60	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields.length  ==  0  ||  object!=  null)  {  [FE]  NullPointerException  [FE]            NullPointerException      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludeFields.length  ==  0  ||  object!=  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||  excludeFields.length  ==  0  ||  object!=  null)  {	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    if(isRegistered(object)||    excludeFields.length    ==    0    ||    object    ==    null)    {    	compilable	  [FE]  NullPointerException  	109	4	replace
61	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              NullPointerException      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields.length  ==  0  ||  object  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(!isRegistered(object)||  excludeFields.length  ==  0  ||  object  ==  null)  {	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    if(isRegistered(object)||    excludeFields.length    ==    0    ||    object    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	109	4	replace
62	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields.length  ==  0  ||  object  ==  null)  {  [FE]  AssertionFailedError  [FE]              NullPointerException      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields.length  ==  0  ||  object  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||  excludeFields.length  ==  0  ||  object  ==  null)  {	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    if(isRegistered(object)||    excludeFields.length    ==    0    ||    object    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	109	4	replace
63	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                NullPointerException      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludeFields.length!=  0  ||  object  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(isRegistered(object)||  excludeFields.length!=  0  ||  object  ==  null)  {	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    if(isRegistered(object)||    excludeFields.length    ==    0    ||    object    ==    null)    {    	compilable	  [FE]  NullPointerException  	109	4	replace
64	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields.length!=  0  ||  object  ==  null)  {  [FE]  NullPointerException  [FE]                NullPointerException      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludeFields.length!=  0  ||  object  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||  excludeFields.length!=  0  ||  object  ==  null)  {	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    if(isRegistered(object)||    excludeFields.length    ==    0    ||    object    ==    null)    {    	compilable	  [FE]  NullPointerException  	109	4	replace
65	[BUG]  [BUGGY]  FieldValue[]  fields  =  clazz.getFieldValues(excludeFields);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  FieldValue[]  fields  =  clazz.getFieldValues(excludeFields);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	FieldValue[]  fields  =  clazz.getFieldValues(excludeFields);	  FieldValue[]    fields    =    clazz.getFieldValues();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
66	[BUG]  [BUGGY]  FieldValue[]  fields  =  clazz.getSuperclassFieldValues();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  FieldValue[]  fields  =  clazz.getSuperclassFieldValues();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	FieldValue[]  fields  =  clazz.getSuperclassFieldValues();	  FieldValue[]    fields    =    clazz.getFieldValues();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
67	[BUG]  [BUGGY]  if(object  ==  null  ||!isRegistered(object))  {  if(object  ==  null  ||!isRegistered(object))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||!isRegistered(object))  {  if(object  ==  null  ||!isRegistered(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||!isRegistered(object))    {    if(object  ==  null  ||!isRegistered(object))  {	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
68	[BUG]  [BUGGY]  if(object  ==  null  ||!isRegistered(object))  {  if(object!=  null  ||!isRegistered(object))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||!isRegistered(object))  {  if(object!=  null  ||!isRegistered(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||!isRegistered(object))    {    if(object!=  null  ||!isRegistered(object))  {	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
69	[BUG]  [BUGGY]  if(object  ==  null  ||!isRegistered(object))  {  If(object  ==  null  ||!isRegistered(object))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||!isRegistered(object))  {  If(object  ==  null  ||!isRegistered(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||!isRegistered(object))    {    If(object  ==  null  ||!isRegistered(object))  {	  	non-compiled	[CE]  ';'  expected	64	None	add
70	[BUG]  [BUGGY]  if(object  ==  null  ||!isRegistered(object))  {  if(object  ==  null  ||  isRegistered(object))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||!isRegistered(object))  {  if(object  ==  null  ||  isRegistered(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||!isRegistered(object))    {    if(object  ==  null  ||  isRegistered(object))  {	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
71	[BUG]  [BUGGY]  if(object  ==  null  ||  isRestricted(objectValue))  {  [CE]  cannot  find  symbol  objectValue  [FE]        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRestricted(objectValue))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  isRestricted(objectValue))  {	  if(object    ==    null    ||    isRestricted(object))    {    	non-compiled	[CE]  cannot  find  symbol  objectValue	43	None	replace
72	[BUG]  [BUGGY]  if(object  ==  null  ||  isRestricted(excludeFields))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRestricted(excludeFields))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  isRestricted(excludeFields))  {	  if(object    ==    null    ||    isRestricted(object))    {    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
73	[BUG]  [BUGGY]  if(object  ==  null  ||  isRestricted(object,  true))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRestricted(object,  true))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  isRestricted(object,  true))  {	  if(object    ==    null    ||    isRestricted(object))    {    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
74	[BUG]  [BUGGY]  FieldValue  object  =  clazz.findField(excludeFields,  builder);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  FieldValue  object  =  clazz.findField(excludeFields,  builder);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	FieldValue  object  =  clazz.findField(excludeFields,  builder);	  FieldValue    object    =    clazz.findField(excludeFields);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
75	[BUG]  [BUGGY]  FieldValue  object  =  clazz.findField(excludeFields,  field);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  FieldValue  object  =  clazz.findField(excludeFields,  field);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	FieldValue  object  =  clazz.findField(excludeFields,  field);	  FieldValue    object    =    clazz.findField(excludeFields);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
76	[BUG]  [BUGGY]  FieldValue  object  =  clazz.findField(fields);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  FieldValue  object  =  clazz.findField(fields);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	FieldValue  object  =  clazz.findField(fields);	  FieldValue    object    =    clazz.findField(excludeFields);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
77	[BUG]  [BUGGY]  FieldValue  object  =  clazz.findField(excludeFields,  true);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  FieldValue  object  =  clazz.findField(excludeFields,  true);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	FieldValue  object  =  clazz.findField(excludeFields,  true);	  FieldValue    object    =    clazz.findField(excludeFields);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
78	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields!=  null  ||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(excludeFields!=  null  ||  excludeFields.length  ==  0)  {	  if(isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    if(isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length!=    0)    {    	compilable	  [FE]  NullPointerException  	22	4	replace
79	[BUG]  [BUGGY]  if(excludeFields!=  null  ||  excludeFields.length  ==  0)  {  [FE]  NullPointerException  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields!=  null  ||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(excludeFields!=  null  ||  excludeFields.length  ==  0)  {	  if(isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    if(isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length!=    0)    {    	compilable	  [FE]  NullPointerException  	22	4	replace
80	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclassFields(excludeFields);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Field[]  fields  =  clazz.getSuperclassFields(excludeFields);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Field[]  fields  =  clazz.getSuperclassFields(excludeFields);	  Field[]    fields    =    clazz.getSuperclassFields();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
81	[BUG]  [BUGGY]  Field[]  object  =  clazz.getInterfaces();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Field[]  object  =  clazz.getInterfaces();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Field[]  object  =  clazz.getInterfaces();	  Field[]    object    =    clazz.getSuperclasses();    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
82	[BUG]  [BUGGY]  Field[]  object  =  clazz.getSuperclasses(excludeFields);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Field[]  object  =  clazz.getSuperclasses(excludeFields);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Field[]  object  =  clazz.getSuperclasses(excludeFields);	  Field[]    object    =    clazz.getSuperclasses();    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
83	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getImmediateParentClass();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Class  <?>  object  =  clazz.getImmediateParentClass();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Class  <?>  object  =  clazz.getImmediateParentClass();	  Class    <?>    object    =    clazz.getName();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
84	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getReferenceName()  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Class  <?>  object  =  clazz.getReferenceName()  +  1;  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Class  <?>  object  =  clazz.getReferenceName()  +  1;	  Class    <?>    object    =    clazz.getReferenceName();    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
85	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludeFields.length!=  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(isRegistered(object)||  excludeFields.length!=  0)  {	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    if(isRegistered(object)||    excludeFields.length    ==    0)    {    	compilable	  [FE]  NullPointerException  	6	4	replace
86	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields.length!=  0)  {  [FE]  NullPointerException  [FE]        NullPointerException      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludeFields.length!=  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||  excludeFields.length!=  0)  {	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    if(isRegistered(object)||    excludeFields.length    ==    0)    {    	compilable	  [FE]  NullPointerException  	6	4	replace
87	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  if(!isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  if(!isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    if(!isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	74	None	add
88	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  if(!isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length!=  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  if(!isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length!=  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    if(!isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	74	None	add
89	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	74	None	add
90	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  if(!isRegistered(object)&&  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  if(!isRegistered(object)&&  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    if(!isRegistered(object)&&  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	74	None	add
91	[BUG]  [BUGGY]  FieldValue[]  fields  =  clazz.getFields();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  FieldValue[]  fields  =  clazz.getFields();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	FieldValue[]  fields  =  clazz.getFields();	  FieldValue[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
92	[BUG]  [BUGGY]  FieldValue[]  fields  =  clazz.getSuperclassFields();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  FieldValue[]  fields  =  clazz.getSuperclassFields();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	FieldValue[]  fields  =  clazz.getSuperclassFields();	  FieldValue[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
93	[BUG]  [BUGGY]  FieldValue[]  fields  =  clazz.getDeclaredFields(excludeFields);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  FieldValue[]  fields  =  clazz.getDeclaredFields(excludeFields);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	FieldValue[]  fields  =  clazz.getDeclaredFields(excludeFields);	  FieldValue[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
94	[BUG]  [BUGGY]  int  objectValue  =  clazz.getClassValue();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  int  objectValue  =  clazz.getClassValue();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	int  objectValue  =  clazz.getClassValue();	  int    objectValue    =    clazz.getObjectValue();    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
95	[BUG]  [BUGGY]  int  objectValue  =  clazz.getImmediateParentValue();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  int  objectValue  =  clazz.getImmediateParentValue();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	int  objectValue  =  clazz.getImmediateParentValue();	  int    objectValue    =    clazz.getObjectValue();    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
96	[BUG]  [BUGGY]  Object  object  =  clazz.getReturnObject();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Object  object  =  clazz.getReturnObject();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Object  object  =  clazz.getReturnObject();	  Object    object    =    clazz.getDeclaringObject();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
97	[BUG]  [BUGGY]  if(object  ==  null  ||!isConstructor(object))  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||!isConstructor(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||!isConstructor(object))  {	  if(object    ==    null    ||!isRegistered(object))    {    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
98	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object!=  null  ||  isRegistered(object)||  excludeFields  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(object!=  null  ||  isRegistered(object)||  excludeFields  ==  null)  {	  if(object    ==    null    ||    isRegistered(object)||    excludeFields    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	126	4	replace
99	[BUG]  [BUGGY]  if(object!=  null  ||  isRegistered(object)||  excludeFields  ==  null)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object!=  null  ||  isRegistered(object)||  excludeFields  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object!=  null  ||  isRegistered(object)||  excludeFields  ==  null)  {	  if(object    ==    null    ||    isRegistered(object)||    excludeFields    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	126	4	replace
100	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields  ==  null  ||  isRegistered(object)||  object  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(excludeFields  ==  null  ||  isRegistered(object)||  object  ==  null)  {	  if(object    ==    null    ||    isRegistered(object)||    excludeFields    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	126	4	replace
101	[BUG]  [BUGGY]  if(excludeFields  ==  null  ||  isRegistered(object)||  object  ==  null)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields  ==  null  ||  isRegistered(object)||  object  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(excludeFields  ==  null  ||  isRegistered(object)||  object  ==  null)  {	  if(object    ==    null    ||    isRegistered(object)||    excludeFields    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	126	4	replace
102	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields.length  ==  0)  {  if(isRegistered(object)||  excludeFields.length  ==  0)  {  return;  }  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(excludeFields.length  ==  0)  {  if(isRegistered(object)||  excludeFields.length  ==  0)  {  return;  }	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    if(isRegistered(object)||    excludeFields.length    ==    0)    {    return;    }    	compilable	  [FE]  NullPointerException  	120	4	replace
103	[BUG]  [BUGGY]  if(excludeFields.length  ==  0)  {  if(isRegistered(object)||  excludeFields.length  ==  0)  {  return;  }  [FE]  NullPointerException  [FE]        NullPointerException      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields.length  ==  0)  {  if(isRegistered(object)||  excludeFields.length  ==  0)  {  return;  }  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(excludeFields.length  ==  0)  {  if(isRegistered(object)||  excludeFields.length  ==  0)  {  return;  }	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    if(isRegistered(object)||    excludeFields.length    ==    0)    {    return;    }    	compilable	  [FE]  NullPointerException  	120	4	replace
104	[BUG]  [BUGGY]  ||  excludeFields.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]          NullPointerException      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  ||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	||  excludeFields.length  ==  0)  {	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    if(isRegistered(object)||    excludeFields.length    ==    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
105	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields  ==  null)  {  if(isRegistered(object)||  excludeFields.length  ==  0)  {  return;  }  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(excludeFields  ==  null)  {  if(isRegistered(object)||  excludeFields.length  ==  0)  {  return;  }	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    if(isRegistered(object)||    excludeFields.length    ==    0)    {    return;    }    	compilable	  [FE]  NullPointerException  	120	4	replace
106	[BUG]  [BUGGY]  if(excludeFields  ==  null)  {  if(isRegistered(object)||  excludeFields.length  ==  0)  {  return;  }  [FE]  NullPointerException  [FE]            NullPointerException      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields  ==  null)  {  if(isRegistered(object)||  excludeFields.length  ==  0)  {  return;  }  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(excludeFields  ==  null)  {  if(isRegistered(object)||  excludeFields.length  ==  0)  {  return;  }	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    if(isRegistered(object)||    excludeFields.length    ==    0)    {    return;    }    	compilable	  [FE]  NullPointerException  	120	4	replace
107	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(excludeFields))  {  if(object  ==  null  ||  isRegistered(excludeFields))  {  [CE]  illegal  start  of  expression  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRegistered(excludeFields))  {  if(object  ==  null  ||  isRegistered(excludeFields))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||    isRegistered(excludeFields))    {    if(object  ==  null  ||  isRegistered(excludeFields))  {	  	non-compiled	[CE]  illegal  start  of  expression	90	None	add
108	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(excludeFields))  {  if(object!=  null  ||  isRegistered(excludeFields))  {  [CE]  illegal  start  of  expression  [FE]      StackOverflowError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRegistered(excludeFields))  {  if(object!=  null  ||  isRegistered(excludeFields))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||    isRegistered(excludeFields))    {    if(object!=  null  ||  isRegistered(excludeFields))  {	  	non-compiled	[CE]  illegal  start  of  expression	90	None	add
109	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(excludeFields))  {  If(object  ==  null  ||  isRegistered(excludeFields))  {  [CE]  ';'  expected  [FE]        StackOverflowError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRegistered(excludeFields))  {  If(object  ==  null  ||  isRegistered(excludeFields))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||    isRegistered(excludeFields))    {    If(object  ==  null  ||  isRegistered(excludeFields))  {	  	non-compiled	[CE]  ';'  expected	90	None	add
110	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(excludeFields))  {  if(object  ==  null  ||  hasRegistered(excludeFields))  {  [CE]  illegal  start  of  expression  [FE]          StackOverflowError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRegistered(excludeFields))  {  if(object  ==  null  ||  hasRegistered(excludeFields))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||    isRegistered(excludeFields))    {    if(object  ==  null  ||  hasRegistered(excludeFields))  {	  	non-compiled	[CE]  illegal  start  of  expression	90	None	add
111	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(excludeFields))  {  if(object  ==  null  ||  isRegistered(excludeFields)&&  useTransients)  {  [CE]  illegal  start  of  expression  [FE]            StackOverflowError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRegistered(excludeFields))  {  if(object  ==  null  ||  isRegistered(excludeFields)&&  useTransients)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||    isRegistered(excludeFields))    {    if(object  ==  null  ||  isRegistered(excludeFields)&&  useTransients)  {	  	non-compiled	[CE]  illegal  start  of  expression	90	None	add
112	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields.length  ==  1)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(!isRegistered(object)||  excludeFields.length  ==  1)  {	  if(isRegistered(object)||    excludeFields.length    ==    1)    {    	compilable	  [FE]  AssertionFailedError  	49	4	replace
113	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields.length  ==  1)  {  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields.length  ==  1)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||  excludeFields.length  ==  1)  {	  if(isRegistered(object)||    excludeFields.length    ==    1)    {    	compilable	  [FE]  AssertionFailedError  	49	4	replace
114	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)&&  excludeFields.length  ==  1)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(isRegistered(object)&&  excludeFields.length  ==  1)  {	  if(isRegistered(object)||    excludeFields.length    ==    1)    {    	compilable	  [FE]  NullPointerException  	49	1	replace
115	[BUG]  [BUGGY]  if(isRegistered(object)&&  excludeFields.length  ==  1)  {  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)&&  excludeFields.length  ==  1)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)&&  excludeFields.length  ==  1)  {	  if(isRegistered(object)||    excludeFields.length    ==    1)    {    	compilable	  [FE]  NullPointerException  	49	1	replace
116	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length!=  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(!isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length!=  0)  {	  if(isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length!=    0)    {    	compilable	  [FE]  AssertionFailedError  	18	4	replace
117	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length!=  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length!=  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length!=  0)  {	  if(isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length!=    0)    {    	compilable	  [FE]  AssertionFailedError  	18	4	replace
118	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getReferenceFields(excludeFields);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Field[]  fields  =  clazz.getReferenceFields(excludeFields);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Field[]  fields  =  clazz.getReferenceFields(excludeFields);	  Field[]    fields    =    clazz.getReferenceFields();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
119	[BUG]  [BUGGY]  Field[]  object  =  clazz.getDeclaredFields(fieldValue);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Field[]  object  =  clazz.getDeclaredFields(fieldValue);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Field[]  object  =  clazz.getDeclaredFields(fieldValue);	  Field[]    object    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
120	[BUG]  [BUGGY]  Field[]  object  =  clazz.getDeclaredFields(excludeFields,  fieldValue);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Field[]  object  =  clazz.getDeclaredFields(excludeFields,  fieldValue);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Field[]  object  =  clazz.getDeclaredFields(excludeFields,  fieldValue);	  Field[]    object    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
121	[BUG]  [BUGGY]  Field[]  object  =  clazz.getDeclaredFields(fieldValue,  excludeFields);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Field[]  object  =  clazz.getDeclaredFields(fieldValue,  excludeFields);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Field[]  object  =  clazz.getDeclaredFields(fieldValue,  excludeFields);	  Field[]    object    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
122	[BUG]  [BUGGY]  Field[]  object  =  clazz.getDeclaredFields(excludeFields,  builder);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Field[]  object  =  clazz.getDeclaredFields(excludeFields,  builder);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Field[]  object  =  clazz.getDeclaredFields(excludeFields,  builder);	  Field[]    object    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
123	[BUG]  [BUGGY]  String[]  excludeFields  =  clazz.getInterfaces(excludeFields);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  String[]  excludeFields  =  clazz.getInterfaces(excludeFields);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	String[]  excludeFields  =  clazz.getInterfaces(excludeFields);	  String[]    excludeFields    =    clazz.getInterfaces();    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
124	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getSuperclassValue(excludeFields);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Class  <?>  object  =  clazz.getSuperclassValue(excludeFields);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Class  <?>  object  =  clazz.getSuperclassValue(excludeFields);	  Class    <?>    object    =    clazz.getSuperclassValue();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
125	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getRawClassValue();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Class  <?>  object  =  clazz.getRawClassValue();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Class  <?>  object  =  clazz.getRawClassValue();	  Class    <?>    object    =    clazz.getSuperclassValue();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
126	[BUG]  [BUGGY]  If(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  If(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	If(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {	  if(isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    If(isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    	non-compiled	[CE]  ';'  expected	23	None	replace
127	[BUG]  [BUGGY]  int  objectValue  =  excludeFields.size();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  int  objectValue  =  excludeFields.size();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	int  objectValue  =  excludeFields.size();	  int    objectValue    =    excludeFields.getValue();    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
128	[BUG]  [BUGGY]  int  objectValue  =  excludeFields.getValue()  -  1;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  int  objectValue  =  excludeFields.getValue()  -  1;  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	int  objectValue  =  excludeFields.getValue()  -  1;	  int    objectValue    =    excludeFields.getValue();    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
129	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)&&  excludeFields.length  >  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(!isRegistered(object)&&  excludeFields.length  >  0)  {	  if(!isRegistered(object)&&    excludeFields.length    ==    0)    {    	compilable	  [FE]  NullPointerException  	82	4	replace
130	[BUG]  [BUGGY]  if(!isRegistered(object)&&  excludeFields.length  >  0)  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)&&  excludeFields.length  >  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)&&  excludeFields.length  >  0)  {	  if(!isRegistered(object)&&    excludeFields.length    ==    0)    {    	compilable	  [FE]  NullPointerException  	82	4	replace
131	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||!isRegistered(object)&&  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(object  ==  null  ||!isRegistered(object)&&  excludeFields.length  ==  0)  {	  if(!isRegistered(object)&&    excludeFields.length    ==    0)    {    	compilable	  [FE]  NullPointerException  	82	4	replace
132	[BUG]  [BUGGY]  if(object  ==  null  ||!isRegistered(object)&&  excludeFields.length  ==  0)  {  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||!isRegistered(object)&&  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||!isRegistered(object)&&  excludeFields.length  ==  0)  {	  if(!isRegistered(object)&&    excludeFields.length    ==    0)    {    	compilable	  [FE]  NullPointerException  	82	4	replace
133	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue);	  if(excludeFields    ==    null)    {    for(int    i    =    0;    i    <    excludeFields.length;    i++)    {    String[]    fields    =    clazz.getDeclaredFields();    builder.append(fieldValue);    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
134	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  excludeFields.length;  i++)  {  String[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue);  }  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  For(int  i  =  0;  i  <  excludeFields.length;  i++)  {  String[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue);  }  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	For(int  i  =  0;  i  <  excludeFields.length;  i++)  {  String[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue);  }	  if(excludeFields    ==    null)    {    for(int    i    =    0;    i    <    excludeFields.length;    i++)    {    String[]    fields    =    clazz.getDeclaredFields();    builder.append(fieldValue);    }    	non-compiled	[CE]  '.class'  expected	118	None	replace
135	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  String[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  String[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue);  }  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  String[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue);  }	  if(excludeFields    ==    null)    {    for(int    i    =    0;    i    <    excludeFields.length;    i++)    {    String[]    fields    =    clazz.getDeclaredFields();    builder.append(fieldValue);    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
136	[BUG]  [BUGGY]  Integer[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Integer[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Integer[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue);	  if(excludeFields    ==    null)    {    for(int    i    =    0;    i    <    excludeFields.length;    i++)    {    String[]    fields    =    clazz.getDeclaredFields();    builder.append(fieldValue);    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
137	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields.length  ==  0  ||  object.getName().indexOf('$')  ==  -1)  {  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludeFields.length  ==  0  ||  object.getName().indexOf('$')  ==  -1)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||  excludeFields.length  ==  0  ||  object.getName().indexOf('$')  ==  -1)  {	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    if(isRegistered(object)||    excludeFields.length    ==    0    ||    object.getName().indexOf('$')    ==    -1)    {    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
138	[BUG]  [BUGGY]  if(isRegistered(object)&&  excludeFields.length  ==  0  ||  object.getName().indexOf('$')  ==  -1)  {  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)&&  excludeFields.length  ==  0  ||  object.getName().indexOf('$')  ==  -1)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)&&  excludeFields.length  ==  0  ||  object.getName().indexOf('$')  ==  -1)  {	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    if(isRegistered(object)||    excludeFields.length    ==    0    ||    object.getName().indexOf('$')    ==    -1)    {    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
139	[BUG]  [BUGGY]  if(excludeFields.length  ==  0  ||  excludeFields.length  ==  0  ||  object.getName().indexOf('$')  ==  -1)  {  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields.length  ==  0  ||  excludeFields.length  ==  0  ||  object.getName().indexOf('$')  ==  -1)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(excludeFields.length  ==  0  ||  excludeFields.length  ==  0  ||  object.getName().indexOf('$')  ==  -1)  {	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    if(isRegistered(object)||    excludeFields.length    ==    0    ||    object.getName().indexOf('$')    ==    -1)    {    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
140	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields.length  ==  0  ||  object.getName().indexOf('$')  ==  -1)  {  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields.length  ==  0  ||  object.getName().indexOf('$')  ==  -1)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||  excludeFields.length  ==  0  ||  object.getName().indexOf('$')  ==  -1)  {	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    if(isRegistered(object)||    excludeFields.length    ==    0    ||    object.getName().indexOf('$')    ==    -1)    {    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
141	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields.length  ==  0)  {  if(object  ==  null  ||  isRegistered(object)||  excludeFields.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields.length  ==  0)  {  if(object  ==  null  ||  isRegistered(object)||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||    isRegistered(object)||    excludeFields.length    ==    0)    {    if(object  ==  null  ||  isRegistered(object)||  excludeFields.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	127	None	add
142	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields.length  ==  0)  {  if(object  ==  null  ||  isRegistered(object)||  excludeFields.length!=  0)  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields.length  ==  0)  {  if(object  ==  null  ||  isRegistered(object)||  excludeFields.length!=  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||    isRegistered(object)||    excludeFields.length    ==    0)    {    if(object  ==  null  ||  isRegistered(object)||  excludeFields.length!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	127	None	add
143	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields.length  ==  0)  {  if(object!=  null  ||  isRegistered(object)||  excludeFields.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields.length  ==  0)  {  if(object!=  null  ||  isRegistered(object)||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||    isRegistered(object)||    excludeFields.length    ==    0)    {    if(object!=  null  ||  isRegistered(object)||  excludeFields.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	127	None	add
144	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields.length  ==  0)  {  If(object  ==  null  ||  isRegistered(object)||  excludeFields.length  ==  0)  {  [CE]  ';'  expected  [FE]          NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields.length  ==  0)  {  If(object  ==  null  ||  isRegistered(object)||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||    isRegistered(object)||    excludeFields.length    ==    0)    {    If(object  ==  null  ||  isRegistered(object)||  excludeFields.length  ==  0)  {	  	non-compiled	[CE]  ';'  expected	127	None	add
145	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields.length  ==  0)  {  if(object  ==  null  ||  isRegistered(object)||  excludeFields.length  ==  1)  {  [CE]  illegal  start  of  expression  [FE]            NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields.length  ==  0)  {  if(object  ==  null  ||  isRegistered(object)||  excludeFields.length  ==  1)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||    isRegistered(object)||    excludeFields.length    ==    0)    {    if(object  ==  null  ||  isRegistered(object)||  excludeFields.length  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	127	None	add
146	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)&&  excludeFields!=  null  ||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(!isRegistered(object)&&  excludeFields!=  null  ||  excludeFields.length  ==  0)  {	  if(!isRegistered(object)||    excludeFields!=    null    ||    excludeFields.length    ==    0)    {    	compilable	  [FE]  NullPointerException  	20	4	replace
147	[BUG]  [BUGGY]  if(!isRegistered(object)&&  excludeFields!=  null  ||  excludeFields.length  ==  0)  {  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)&&  excludeFields!=  null  ||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)&&  excludeFields!=  null  ||  excludeFields.length  ==  0)  {	  if(!isRegistered(object)||    excludeFields!=    null    ||    excludeFields.length    ==    0)    {    	compilable	  [FE]  NullPointerException  	20	4	replace
148	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields.length!=  0)  {  if(!isRegistered(object)||  excludeFields.length!=  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields.length!=  0)  {  if(!isRegistered(object)||  excludeFields.length!=  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||    excludeFields.length!=    0)    {    if(!isRegistered(object)||  excludeFields.length!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
149	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields.length!=  0)  {  if(!isRegistered(object)||  excludeFields.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields.length!=  0)  {  if(!isRegistered(object)||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||    excludeFields.length!=    0)    {    if(!isRegistered(object)||  excludeFields.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
150	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields.length!=  0)  {  if(!isRegistered(object)&&  excludeFields.length!=  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields.length!=  0)  {  if(!isRegistered(object)&&  excludeFields.length!=  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||    excludeFields.length!=    0)    {    if(!isRegistered(object)&&  excludeFields.length!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
151	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getSimpleName();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Class  <?>  object  =  clazz.getSimpleName();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Class  <?>  object  =  clazz.getSimpleName();	  Class    <?>    object    =    clazz.getRawClass();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
152	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getReturnType();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Class  <?>  object  =  clazz.getReturnType();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Class  <?>  object  =  clazz.getReturnType();	  Class    <?>    object    =    clazz.getRawClass();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
153	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields.length  ==  1)  {  if(isRegistered(object)||  excludeFields.length  ==  1)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludeFields.length  ==  1)  {  if(isRegistered(object)||  excludeFields.length  ==  1)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||    excludeFields.length    ==    1)    {    if(isRegistered(object)||  excludeFields.length  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
154	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields.length  ==  1)  {  if(isRegistered(object)||  excludeFields.length  ==  2)  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludeFields.length  ==  1)  {  if(isRegistered(object)||  excludeFields.length  ==  2)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||    excludeFields.length    ==    1)    {    if(isRegistered(object)||  excludeFields.length  ==  2)  {	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
155	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields.length  ==  1)  {  if(isRegistered(object)||  excludeFields.length!=  1)  {  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludeFields.length  ==  1)  {  if(isRegistered(object)||  excludeFields.length!=  1)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||    excludeFields.length    ==    1)    {    if(isRegistered(object)||  excludeFields.length!=  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
156	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields.length  ==  1)  {  If(isRegistered(object)||  excludeFields.length  ==  1)  {  [CE]  ';'  expected  [FE]          NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludeFields.length  ==  1)  {  If(isRegistered(object)||  excludeFields.length  ==  1)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||    excludeFields.length    ==    1)    {    If(isRegistered(object)||  excludeFields.length  ==  1)  {	  	non-compiled	[CE]  ';'  expected	48	None	add
157	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludeFields.length  ==  0  ||  isRegistered(object)||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(isRegistered(object)||  excludeFields.length  ==  0  ||  isRegistered(object)||  excludeFields.length  ==  0)  {	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    if(isRegistered(object)||    excludeFields.length    ==    0    ||    isRegistered(object)||    excludeFields.length    ==    0)    {    	compilable	  [FE]  NullPointerException  	8	4	replace
158	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields.length  ==  0  ||  isRegistered(object)||  excludeFields.length  ==  0)  {  [FE]  NullPointerException  [FE]            NullPointerException      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludeFields.length  ==  0  ||  isRegistered(object)||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||  excludeFields.length  ==  0  ||  isRegistered(object)||  excludeFields.length  ==  0)  {	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    if(isRegistered(object)||    excludeFields.length    ==    0    ||    isRegistered(object)||    excludeFields.length    ==    0)    {    	compilable	  [FE]  NullPointerException  	8	4	replace
159	[BUG]  [BUGGY]  if(isConstant(object)||  excludeFields.length  ==  0  ||  isRegistered(object)||  excludeFields.length  ==  0)  {  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isConstant(object)||  excludeFields.length  ==  0  ||  isRegistered(object)||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isConstant(object)||  excludeFields.length  ==  0  ||  isRegistered(object)||  excludeFields.length  ==  0)  {	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    if(isRegistered(object)||    excludeFields.length    ==    0    ||    isRegistered(object)||    excludeFields.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
160	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                NullPointerException      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludeFields.length!=  0  ||  isRegistered(object)||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(isRegistered(object)||  excludeFields.length!=  0  ||  isRegistered(object)||  excludeFields.length  ==  0)  {	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    if(isRegistered(object)||    excludeFields.length    ==    0    ||    isRegistered(object)||    excludeFields.length    ==    0)    {    	compilable	  [FE]  NullPointerException  	8	4	replace
161	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields.length!=  0  ||  isRegistered(object)||  excludeFields.length  ==  0)  {  [FE]  NullPointerException  [FE]                NullPointerException      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludeFields.length!=  0  ||  isRegistered(object)||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||  excludeFields.length!=  0  ||  isRegistered(object)||  excludeFields.length  ==  0)  {	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    if(isRegistered(object)||    excludeFields.length    ==    0    ||    isRegistered(object)||    excludeFields.length    ==    0)    {    	compilable	  [FE]  NullPointerException  	8	4	replace
162	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                  NullPointerException      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludeFields.length  ==  0  ||  isRegistered(object)||  excludeFields.length!=  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(isRegistered(object)||  excludeFields.length  ==  0  ||  isRegistered(object)||  excludeFields.length!=  0)  {	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    if(isRegistered(object)||    excludeFields.length    ==    0    ||    isRegistered(object)||    excludeFields.length    ==    0)    {    	compilable	  [FE]  NullPointerException  	8	4	replace
163	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields.length  ==  0  ||  isRegistered(object)||  excludeFields.length!=  0)  {  [FE]  NullPointerException  [FE]                  NullPointerException      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludeFields.length  ==  0  ||  isRegistered(object)||  excludeFields.length!=  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||  excludeFields.length  ==  0  ||  isRegistered(object)||  excludeFields.length!=  0)  {	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    if(isRegistered(object)||    excludeFields.length    ==    0    ||    isRegistered(object)||    excludeFields.length    ==    0)    {    	compilable	  [FE]  NullPointerException  	8	4	replace
164	[BUG]  [BUGGY]  Integer  objectValue  =  clazz.getImplicitReturnValue();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Integer  objectValue  =  clazz.getImplicitReturnValue();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Integer  objectValue  =  clazz.getImplicitReturnValue();	  int    objectValue    =    clazz.getImplicitReturnValue();    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
165	[BUG]  [BUGGY]  char  objectValue  =  clazz.getImplicitReturnValue();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  char  objectValue  =  clazz.getImplicitReturnValue();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	char  objectValue  =  clazz.getImplicitReturnValue();	  int    objectValue    =    clazz.getImplicitReturnValue();    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
166	[BUG]  [BUGGY]  Field[]  object  =  clazz.getSuperclassValue(excludeFields);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Field[]  object  =  clazz.getSuperclassValue(excludeFields);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Field[]  object  =  clazz.getSuperclassValue(excludeFields);	  Field[]    object    =    clazz.getSuperclassValue();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
167	[BUG]  [BUGGY]  Field[]  object  =  clazz.getRawClassValue();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Field[]  object  =  clazz.getRawClassValue();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Field[]  object  =  clazz.getRawClassValue();	  Field[]    object    =    clazz.getSuperclassValue();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
168	[BUG]  [BUGGY]  if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null)  {  if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null)  {  if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!useTransients    &&    isRegistered(object)||    excludeFields    ==    null)    {    if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	104	None	add
169	[BUG]  [BUGGY]  if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null)  {  if(!useTransients  &&  isRegistered(object)||  excludeFields!=  null)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null)  {  if(!useTransients  &&  isRegistered(object)||  excludeFields!=  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!useTransients    &&    isRegistered(object)||    excludeFields    ==    null)    {    if(!useTransients  &&  isRegistered(object)||  excludeFields!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	104	None	add
170	[BUG]  [BUGGY]  if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null)  {  if(!useTransients  &&  isRegistered(object)||  excludedFields  ==  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null)  {  if(!useTransients  &&  isRegistered(object)||  excludedFields  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!useTransients    &&    isRegistered(object)||    excludeFields    ==    null)    {    if(!useTransients  &&  isRegistered(object)||  excludedFields  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	104	None	add
171	[BUG]  [BUGGY]  if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null)  {  if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null  ||  fieldValue  ==  null)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null)  {  if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null  ||  fieldValue  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!useTransients    &&    isRegistered(object)||    excludeFields    ==    null)    {    if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null  ||  fieldValue  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	104	None	add
172	[BUG]  [BUGGY]  int  objectValue  =  clazz.getValue(excludeFields,  field);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  int  objectValue  =  clazz.getValue(excludeFields,  field);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	int  objectValue  =  clazz.getValue(excludeFields,  field);	  int    objectValue    =    clazz.getValue(excludeFields);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
173	[BUG]  [BUGGY]  int  objectValue  =  clazz.getValue(excludeFields,  useTransients);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  int  objectValue  =  clazz.getValue(excludeFields,  useTransients);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	int  objectValue  =  clazz.getValue(excludeFields,  useTransients);	  int    objectValue    =    clazz.getValue(excludeFields);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
174	[BUG]  [BUGGY]  int  objectValue  =  clazz.getValue(excludeFields,  iTotal);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  int  objectValue  =  clazz.getValue(excludeFields,  iTotal);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	int  objectValue  =  clazz.getValue(excludeFields,  iTotal);	  int    objectValue    =    clazz.getValue(excludeFields);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
175	[BUG]  [BUGGY]  int  objectValue  =  clazz.getValue(excludeFields,  builder);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  int  objectValue  =  clazz.getValue(excludeFields,  builder);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	int  objectValue  =  clazz.getValue(excludeFields,  builder);	  int    objectValue    =    clazz.getValue(excludeFields);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
176	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  instanceof  AccessibleObject)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(object  instanceof  AccessibleObject)  {	  if(!isRegistered(object))    {    if(!isRegistered(object))    {    	compilable	  [FE]  StackOverflowError  	25	1	replace
177	[BUG]  [BUGGY]  if(object  instanceof  AccessibleObject)  {  [FE]  StackOverflowError  [FE]        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  instanceof  AccessibleObject)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  instanceof  AccessibleObject)  {	  if(!isRegistered(object))    {    if(!isRegistered(object))    {    	compilable	  [FE]  StackOverflowError  	25	1	replace
178	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(object  ==  null)  {	  if(!isRegistered(object))    {    if(!isRegistered(object))    {    	compilable	  [FE]  StackOverflowError  	25	1	replace
179	[BUG]  [BUGGY]  if(object  ==  null)  {  [FE]  StackOverflowError  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null)  {	  if(!isRegistered(object))    {    if(!isRegistered(object))    {    	compilable	  [FE]  StackOverflowError  	25	1	replace
180	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients  &&!isRegistered(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(!useTransients  &&!isRegistered(object))  {	  if(!useTransients    ||!isRegistered(object))    {    	compilable	  [FE]  AssertionFailedError  	130	4	replace
181	[BUG]  [BUGGY]  if(!useTransients  &&!isRegistered(object))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients  &&!isRegistered(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!useTransients  &&!isRegistered(object))  {	  if(!useTransients    ||!isRegistered(object))    {    	compilable	  [FE]  AssertionFailedError  	130	4	replace
182	[BUG]  [BUGGY]  if(!useTransients  ||!Modifier.isTransient(object.getModifiers()))  {  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients  ||!Modifier.isTransient(object.getModifiers()))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!useTransients  ||!Modifier.isTransient(object.getModifiers()))  {	  if(!useTransients    ||!isRegistered(object))    {    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
183	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||!useTransients  ||!isRegistered(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(object  ==  null  ||!useTransients  ||!isRegistered(object))  {	  if(!useTransients    ||!isRegistered(object))    {    	compilable	  [FE]  AssertionFailedError  	130	4	replace
184	[BUG]  [BUGGY]  if(object  ==  null  ||!useTransients  ||!isRegistered(object))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||!useTransients  ||!isRegistered(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||!useTransients  ||!isRegistered(object))  {	  if(!useTransients    ||!isRegistered(object))    {    	compilable	  [FE]  AssertionFailedError  	130	4	replace
185	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||!useTransients)  {  if(isRegistered(object)||  excludeFields  ==  null  ||!useTransients)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||!useTransients)  {  if(isRegistered(object)||  excludeFields  ==  null  ||!useTransients)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||    excludeFields    ==    null    ||!useTransients)    {    if(isRegistered(object)||  excludeFields  ==  null  ||!useTransients)  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
186	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||!useTransients)  {  If(isRegistered(object)||  excludeFields  ==  null  ||!useTransients)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||!useTransients)  {  If(isRegistered(object)||  excludeFields  ==  null  ||!useTransients)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||    excludeFields    ==    null    ||!useTransients)    {    If(isRegistered(object)||  excludeFields  ==  null  ||!useTransients)  {	  	non-compiled	[CE]  ';'  expected	30	None	add
187	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclassFieldValues(excludeFields);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Field[]  fields  =  clazz.getSuperclassFieldValues(excludeFields);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Field[]  fields  =  clazz.getSuperclassFieldValues(excludeFields);	  Field[]    fields    =    clazz.getSuperclassFieldValues();    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
188	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFieldValues();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Field[]  fields  =  clazz.getFieldValues();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Field[]  fields  =  clazz.getFieldValues();	  Field[]    fields    =    clazz.getSuperclassFieldValues();    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
189	[BUG]  [BUGGY]  AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.get(object);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.get(object);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.get(object);	  if(object    ==    null    ||    isRegistered(object))    {    AssertionFailedError    <    String>    object    =    excludeFields    ==    null?    null    :    excludeFields.get(object);    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
190	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(object))  {  AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.get(object);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRegistered(object))  {  AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.get(object);  }  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  isRegistered(object))  {  AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.get(object);  }	  if(object    ==    null    ||    isRegistered(object))    {    AssertionFailedError    <    String>    object    =    excludeFields    ==    null?    null    :    excludeFields.get(object);    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
191	[BUG]  [BUGGY]  ||  isRegistered(object))  {  AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.get(object);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  ||  isRegistered(object))  {  AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.get(object);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	||  isRegistered(object))  {  AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.get(object);	  if(object    ==    null    ||    isRegistered(object))    {    AssertionFailedError    <    String>    object    =    excludeFields    ==    null?    null    :    excludeFields.get(object);    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
192	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields  ==  null)  {  if(!isRegistered(object)||  excludeFields  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields  ==  null)  {  if(!isRegistered(object)||  excludeFields  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||    excludeFields    ==    null)    {    if(!isRegistered(object)||  excludeFields  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
193	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields  ==  null)  {  if(!isRegistered(object)||  excludeFields!=  null)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields  ==  null)  {  if(!isRegistered(object)||  excludeFields!=  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||    excludeFields    ==    null)    {    if(!isRegistered(object)||  excludeFields!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
194	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields  ==  null)  {  if(!isRegistered(object)&&  excludeFields  ==  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields  ==  null)  {  if(!isRegistered(object)&&  excludeFields  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||    excludeFields    ==    null)    {    if(!isRegistered(object)&&  excludeFields  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
195	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields  ==  null)  {  if(!isRegistered(object)||  excludeFields  ==  null  ||  useTransients)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields  ==  null)  {  if(!isRegistered(object)||  excludeFields  ==  null  ||  useTransients)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||    excludeFields    ==    null)    {    if(!isRegistered(object)||  excludeFields  ==  null  ||  useTransients)  {	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
196	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients  &&  isRegistered(object)&&  excludeFields  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(!useTransients  &&  isRegistered(object)&&  excludeFields  ==  null)  {	  if(isRegistered(object)&&    excludeFields    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	35	1	replace
197	[BUG]  [BUGGY]  if(!useTransients  &&  isRegistered(object)&&  excludeFields  ==  null)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients  &&  isRegistered(object)&&  excludeFields  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!useTransients  &&  isRegistered(object)&&  excludeFields  ==  null)  {	  if(isRegistered(object)&&    excludeFields    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	35	1	replace
198	[BUG]  [BUGGY]  if(object!=  null  ||!isRegistered(object))  {  if(object!=  null  ||!isRegistered(object))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object!=  null  ||!isRegistered(object))  {  if(object!=  null  ||!isRegistered(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object!=    null    ||!isRegistered(object))    {    if(object!=  null  ||!isRegistered(object))  {	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
199	[BUG]  [BUGGY]  if(object!=  null  ||!isRegistered(object))  {  if(object  ==  null  ||!isRegistered(object))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object!=  null  ||!isRegistered(object))  {  if(object  ==  null  ||!isRegistered(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object!=    null    ||!isRegistered(object))    {    if(object  ==  null  ||!isRegistered(object))  {	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
200	[BUG]  [BUGGY]  if(object!=  null  ||!isRegistered(object))  {  if(object!=  null  ||  isRegistered(object))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object!=  null  ||!isRegistered(object))  {  if(object!=  null  ||  isRegistered(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object!=    null    ||!isRegistered(object))    {    if(object!=  null  ||  isRegistered(object))  {	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
201	[BUG]  [BUGGY]  if(!useTransients)  {  if(isRegistered(object)||  excludeFields  ==  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients)  {  if(isRegistered(object)||  excludeFields  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!useTransients)  {  if(isRegistered(object)||  excludeFields  ==  null)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||    excludeFields    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
202	[BUG]  [BUGGY]  if(isConstant(object)||  excludeFields  ==  null)  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isConstant(object)||  excludeFields  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isConstant(object)||  excludeFields  ==  null)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||    excludeFields    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
203	[BUG]  [BUGGY]  if(object  ==  null  ||!isRegistered(object))  {  If(!isRegistered(object))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||!isRegistered(object))  {  If(!isRegistered(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||!isRegistered(object))  {  If(!isRegistered(object))  {	  if(!isRegistered(object))    {    If(!isRegistered(object))    {    	non-compiled	[CE]  ';'  expected	27	None	replace
204	[BUG]  [BUGGY]  if(object!=  null  ||!isRegistered(object))  {  If(!isRegistered(object))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object!=  null  ||!isRegistered(object))  {  If(!isRegistered(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object!=  null  ||!isRegistered(object))  {  If(!isRegistered(object))  {	  if(!isRegistered(object))    {    If(!isRegistered(object))    {    	non-compiled	[CE]  ';'  expected	27	None	replace
205	[BUG]  [BUGGY]  if(object  ==  null)  {  if(!isRegistered(object))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null)  {  if(!isRegistered(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null)  {  if(!isRegistered(object))  {	  if(!isRegistered(object))    {    If(!isRegistered(object))    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
206	[BUG]  [BUGGY]  if(object  ==  null  ||!isRegistered(object))  {  if(!isRegistered(object))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||!isRegistered(object))  {  if(!isRegistered(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||!isRegistered(object))  {  if(!isRegistered(object))  {	  if(!isRegistered(object))    {    If(!isRegistered(object))    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
207	[BUG]  [BUGGY]  Object  object  =  clazz.getReturnType();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Object  object  =  clazz.getReturnType();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Object  object  =  clazz.getReturnType();	  Object    object    =    clazz.getDeclaringClass();    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
208	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(object))  {  AssertionFailedError  <  AssertionFailedError!=  String[]  excludeFields)  {  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRegistered(object))  {  AssertionFailedError  <  AssertionFailedError!=  String[]  excludeFields)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  isRegistered(object))  {  AssertionFailedError  <  AssertionFailedError!=  String[]  excludeFields)  {	  if(object    ==    null    ||    isRegistered(object))    {    AssertionFailedError    <    AssertionFailedError    >=    String[]    excludeFields)    {    	non-compiled	[CE]  >  expected	115	None	replace
209	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getDeclaredFields(fieldValue);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Class  <?>  object  =  clazz.getDeclaredFields(fieldValue);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Class  <?>  object  =  clazz.getDeclaredFields(fieldValue);	  Class    <?>    object    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
210	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getDeclaredFields(excludeFields,  fieldValue);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Class  <?>  object  =  clazz.getDeclaredFields(excludeFields,  fieldValue);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Class  <?>  object  =  clazz.getDeclaredFields(excludeFields,  fieldValue);	  Class    <?>    object    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
211	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getDeclaredFields(excludeFields,  useTransients);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Class  <?>  object  =  clazz.getDeclaredFields(excludeFields,  useTransients);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Class  <?>  object  =  clazz.getDeclaredFields(excludeFields,  useTransients);	  Class    <?>    object    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
212	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getDeclaredFields(excludeFields,  builder);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Class  <?>  object  =  clazz.getDeclaredFields(excludeFields,  builder);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Class  <?>  object  =  clazz.getDeclaredFields(excludeFields,  builder);	  Class    <?>    object    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
213	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  excludeFields.length;  i++)  {  String[]  fields  =  clazz.getDeclaredFields();  builder.addChangeListener(this);  }  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  For(int  i  =  0;  i  <  excludeFields.length;  i++)  {  String[]  fields  =  clazz.getDeclaredFields();  builder.addChangeListener(this);  }  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	For(int  i  =  0;  i  <  excludeFields.length;  i++)  {  String[]  fields  =  clazz.getDeclaredFields();  builder.addChangeListener(this);  }	  if(excludeFields    ==    null)    {    for(int    i    =    0;    i    <    excludeFields.length;    i++)    {    String[]    fields    =    clazz.getDeclaredFields();    builder.addChangeListener(this);    }    	non-compiled	[CE]  '.class'  expected	119	None	replace
214	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  String[]  fields  =  clazz.getDeclaredFields();  builder.addChangeListener(this);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  String[]  fields  =  clazz.getDeclaredFields();  builder.addChangeListener(this);  }  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  String[]  fields  =  clazz.getDeclaredFields();  builder.addChangeListener(this);  }	  if(excludeFields    ==    null)    {    for(int    i    =    0;    i    <    excludeFields.length;    i++)    {    String[]    fields    =    clazz.getDeclaredFields();    builder.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
215	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.addChangeListener(this);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.addChangeListener(this);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.addChangeListener(this);	  if(excludeFields    ==    null)    {    for(int    i    =    0;    i    <    excludeFields.length;    i++)    {    String[]    fields    =    clazz.getDeclaredFields();    builder.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
216	[BUG]  [BUGGY]  Integer[]  fields  =  clazz.getDeclaredFields();  builder.addChangeListener(this);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Integer[]  fields  =  clazz.getDeclaredFields();  builder.addChangeListener(this);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Integer[]  fields  =  clazz.getDeclaredFields();  builder.addChangeListener(this);	  if(excludeFields    ==    null)    {    for(int    i    =    0;    i    <    excludeFields.length;    i++)    {    String[]    fields    =    clazz.getDeclaredFields();    builder.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
217	[BUG]  [BUGGY]  If(object  ==  null  ||  isRegistered(object))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  If(object  ==  null  ||  isRegistered(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	If(object  ==  null  ||  isRegistered(object))  {	  if(object    ==    null    ||    isRegistered(object))    {    If(object    ==    null    ||    isRegistered(object))    {    	non-compiled	[CE]  ';'  expected	12	None	replace
218	[BUG]  [BUGGY]  if(excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  if(excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  if(excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    if(excludeFields  ==  null  ||  excludeFields.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	88	None	add
219	[BUG]  [BUGGY]  if(excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  if(excludeFields  ==  null  ||  excludeFields.length!=  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  if(excludeFields  ==  null  ||  excludeFields.length!=  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    if(excludeFields  ==  null  ||  excludeFields.length!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	88	None	add
220	[BUG]  [BUGGY]  if(excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  if(excludeFields!=  null  ||  excludeFields.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  if(excludeFields!=  null  ||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    if(excludeFields!=  null  ||  excludeFields.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	88	None	add
221	[BUG]  [BUGGY]  if(excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  If(excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  If(excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    If(excludeFields  ==  null  ||  excludeFields.length  ==  0)  {	  	non-compiled	[CE]  ';'  expected	88	None	add
222	[BUG]  [BUGGY]  if(excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  if(excludeFields  ==  null  ||  excludeFields.length  >=  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  if(excludeFields  ==  null  ||  excludeFields.length  >=  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    if(excludeFields  ==  null  ||  excludeFields.length  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	88	None	add
223	[BUG]  [BUGGY]  Object  object  =  clazz.getImplicitReturn();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Object  object  =  clazz.getImplicitReturn();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Object  object  =  clazz.getImplicitReturn();	  Object    object    =    clazz.getAssignedObject();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
224	[BUG]  [BUGGY]  int  iConstant  =  excludeFields.length  -  1;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  int  iConstant  =  excludeFields.length  -  1;  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	int  iConstant  =  excludeFields.length  -  1;	  int    iConstant    =    excludeFields.length;    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
225	[BUG]  [BUGGY]  int  iConstant  =  excludeFields.length  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  int  iConstant  =  excludeFields.length  +  1;  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	int  iConstant  =  excludeFields.length  +  1;	  int    iConstant    =    excludeFields.length;    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
226	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)&&  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(!isRegistered(object)&&  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {	  if(!isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	75	4	replace
227	[BUG]  [BUGGY]  if(!isRegistered(object)&&  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)&&  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)&&  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {	  if(!isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	75	4	replace
228	[BUG]  [BUGGY]  FieldValue  object  =  this.clazz.getDeclaredFields(),  excludeFields);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  FieldValue  object  =  this.clazz.getDeclaredFields(),  excludeFields);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	FieldValue  object  =  this.clazz.getDeclaredFields(),  excludeFields);	  FieldValue    object    =    this.clazz.getDeclaredFields();    	non-compiled	[CE]  ';'  expected	37	None	replace
229	[BUG]  [BUGGY]  FieldValue  object  =  this.clazz.getDeclaredFields(excludeFields);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  FieldValue  object  =  this.clazz.getDeclaredFields(excludeFields);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	FieldValue  object  =  this.clazz.getDeclaredFields(excludeFields);	  FieldValue    object    =    this.clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
230	[BUG]  [BUGGY]  If(isRegistered(object)||  excludeFields.length  ==  0)  {  [CE]  ';'  expected  [FE]        NullPointerException      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  If(isRegistered(object)||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	If(isRegistered(object)||  excludeFields.length  ==  0)  {	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    If(isRegistered(object)||    excludeFields.length    ==    0)    {    	non-compiled	[CE]  ';'  expected	108	None	replace
231	[BUG]  [BUGGY]  If(isRegistered(object)||  excludeFields.length!=  0)  {  [CE]  ';'  expected  [FE]          NullPointerException      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  If(isRegistered(object)||  excludeFields.length!=  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	If(isRegistered(object)||  excludeFields.length!=  0)  {	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    If(isRegistered(object)||    excludeFields.length    ==    0)    {    	non-compiled	[CE]  ';'  expected	108	None	replace
232	[BUG]  [BUGGY]  if(object  ==  null  ||  isConstructor(objectValue))  {  [CE]  cannot  find  symbol  objectValue  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isConstructor(objectValue))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  isConstructor(objectValue))  {	  if(object    ==    null    ||    isConstructor(object))    {    	non-compiled	[CE]  cannot  find  symbol  objectValue	44	None	replace
233	[BUG]  [BUGGY]  if(object  ==  null  ||  isConstructor(excludeFields))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isConstructor(excludeFields))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  isConstructor(excludeFields))  {	  if(object    ==    null    ||    isConstructor(object))    {    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
234	[BUG]  [BUGGY]  if(object  ==  null  ||  isConstructor(fieldValue))  {  [CE]  cannot  find  symbol  fieldValue  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isConstructor(fieldValue))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  isConstructor(fieldValue))  {	  if(object    ==    null    ||    isConstructor(object))    {    	non-compiled	[CE]  cannot  find  symbol  fieldValue	44	None	replace
235	[BUG]  [BUGGY]  if(!isRegistered(object)&&  excludeFields.length  ==  0)  {  if(!isRegistered(object)&&  excludeFields.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)&&  excludeFields.length  ==  0)  {  if(!isRegistered(object)&&  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)&&    excludeFields.length    ==    0)    {    if(!isRegistered(object)&&  excludeFields.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
236	[BUG]  [BUGGY]  if(!isRegistered(object)&&  excludeFields.length  ==  0)  {  if(!isRegistered(object)&&  excludeFields.length!=  0)  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)&&  excludeFields.length  ==  0)  {  if(!isRegistered(object)&&  excludeFields.length!=  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)&&    excludeFields.length    ==    0)    {    if(!isRegistered(object)&&  excludeFields.length!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
237	[BUG]  [BUGGY]  if(!isRegistered(object)&&  excludeFields.length  ==  0)  {  if(!isRegistered(object)&&  excludeFields.length  ==  1)  {  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)&&  excludeFields.length  ==  0)  {  if(!isRegistered(object)&&  excludeFields.length  ==  1)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)&&    excludeFields.length    ==    0)    {    if(!isRegistered(object)&&  excludeFields.length  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
238	[BUG]  [BUGGY]  if(!isRegistered(object)&&  excludeFields.length  ==  0)  {  if(!isRegistered(object)&&  excludeFields.length  >=  0)  {  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)&&  excludeFields.length  ==  0)  {  if(!isRegistered(object)&&  excludeFields.length  >=  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)&&    excludeFields.length    ==    0)    {    if(!isRegistered(object)&&  excludeFields.length  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
239	[BUG]  [BUGGY]  if(!isRegistered(object)&&  excludeFields.length  ==  0)  {  If(!isRegistered(object)&&  excludeFields.length  ==  0)  {  [CE]  ';'  expected  [FE]            NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)&&  excludeFields.length  ==  0)  {  If(!isRegistered(object)&&  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)&&    excludeFields.length    ==    0)    {    If(!isRegistered(object)&&  excludeFields.length  ==  0)  {	  	non-compiled	[CE]  ';'  expected	81	None	add
240	[BUG]  [BUGGY]  AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.toString();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.toString();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.toString();	  if(object    ==    null    ||    isRegistered(object))    {    AssertionFailedError    <    String>    object    =    excludeFields    ==    null?    null    :    excludeFields.toString();    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
241	[BUG]  [BUGGY]  if(excludeFields  ==  null  ||  isRegistered(object))  {  AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.toString();  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields  ==  null  ||  isRegistered(object))  {  AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.toString();  }  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(excludeFields  ==  null  ||  isRegistered(object))  {  AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.toString();  }	  if(object    ==    null    ||    isRegistered(object))    {    AssertionFailedError    <    String>    object    =    excludeFields    ==    null?    null    :    excludeFields.toString();    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
242	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(object))  {  AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.toString();  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRegistered(object))  {  AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.toString();  }  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  isRegistered(object))  {  AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.toString();  }	  if(object    ==    null    ||    isRegistered(object))    {    AssertionFailedError    <    String>    object    =    excludeFields    ==    null?    null    :    excludeFields.toString();    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
243	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaredObject(excludeFields,  fieldValue);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Object  object  =  clazz.getDeclaredObject(excludeFields,  fieldValue);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Object  object  =  clazz.getDeclaredObject(excludeFields,  fieldValue);	  Object    object    =    clazz.getDeclaredObject(excludeFields);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
244	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaredObject(fieldValue);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Object  object  =  clazz.getDeclaredObject(fieldValue);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Object  object  =  clazz.getDeclaredObject(fieldValue);	  Object    object    =    clazz.getDeclaredObject(excludeFields);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
245	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaredObject(excludeFields,  builder);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Object  object  =  clazz.getDeclaredObject(excludeFields,  builder);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Object  object  =  clazz.getDeclaredObject(excludeFields,  builder);	  Object    object    =    clazz.getDeclaredObject(excludeFields);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
246	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaredObject(excludeFields,  useTransients);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Object  object  =  clazz.getDeclaredObject(excludeFields,  useTransients);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Object  object  =  clazz.getDeclaredObject(excludeFields,  useTransients);	  Object    object    =    clazz.getDeclaredObject(excludeFields);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
247	[BUG]  [BUGGY]  FieldValue  object  =  excludeFields!=  null?  null  :  excludedFields.getDeclaredFields();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  FieldValue  object  =  excludeFields!=  null?  null  :  excludedFields.getDeclaredFields();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	FieldValue  object  =  excludeFields!=  null?  null  :  excludedFields.getDeclaredFields();	  FieldValue    object    =    excludedFields.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
248	[BUG]  [BUGGY]  FieldValue  object  =  excludeFields  ==  null?  null  :  excludedFields.getDeclaredFields();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  FieldValue  object  =  excludeFields  ==  null?  null  :  excludedFields.getDeclaredFields();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	FieldValue  object  =  excludeFields  ==  null?  null  :  excludedFields.getDeclaredFields();	  FieldValue    object    =    excludedFields.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
249	[BUG]  [BUGGY]  Object  object  =  clazz.getReferenceName()  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Object  object  =  clazz.getReferenceName()  +  1;  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Object  object  =  clazz.getReferenceName()  +  1;	  Object    object    =    clazz.getReferenceName();    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
250	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaredFields();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Object  object  =  clazz.getDeclaredFields();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Object  object  =  clazz.getDeclaredFields();	  Object    object    =    clazz.getReferenceName();    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
251	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRegistered(object)&&  excludeFields!=  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(object  ==  null  ||  isRegistered(object)&&  excludeFields!=  null)  {	  if(object    ==    null    ||    isRegistered(object)||    excludeFields!=    null)    {    	compilable	  [FE]  StackOverflowError  	93	1	replace
252	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(object)&&  excludeFields!=  null)  {  [FE]  StackOverflowError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRegistered(object)&&  excludeFields!=  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  isRegistered(object)&&  excludeFields!=  null)  {	  if(object    ==    null    ||    isRegistered(object)||    excludeFields!=    null)    {    	compilable	  [FE]  StackOverflowError  	93	1	replace
253	[BUG]  [BUGGY]  if(object  ==  null  ||  isUnknown(objectValue))  {  [CE]  cannot  find  symbol  objectValue  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isUnknown(objectValue))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  isUnknown(objectValue))  {	  if(object    ==    null    ||    isUnknown(object))    {    	non-compiled	[CE]  cannot  find  symbol  objectValue	45	None	replace
254	[BUG]  [BUGGY]  if(object  ==  null  ||  isUnknown(excludeFields))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isUnknown(excludeFields))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  isUnknown(excludeFields))  {	  if(object    ==    null    ||    isUnknown(object))    {    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
255	[BUG]  [BUGGY]  if(object  ==  null  ||  isUnknown(fieldValue))  {  [CE]  cannot  find  symbol  fieldValue  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isUnknown(fieldValue))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  isUnknown(fieldValue))  {	  if(object    ==    null    ||    isUnknown(object))    {    	non-compiled	[CE]  cannot  find  symbol  fieldValue	45	None	replace
256	[BUG]  [BUGGY]  If(isRegistered(object)||  excludeFields  ==  null)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  If(isRegistered(object)||  excludeFields  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	If(isRegistered(object)||  excludeFields  ==  null)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    If(isRegistered(object)||    excludeFields    ==    null)    {    	non-compiled	[CE]  ';'  expected	41	None	replace
257	[BUG]  [BUGGY]  if(object  ==  null)  {  if(isRegistered(object)||  excludeFields  ==  null  ||!useTransients)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null)  {  if(isRegistered(object)||  excludeFields  ==  null  ||!useTransients)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null)  {  if(isRegistered(object)||  excludeFields  ==  null  ||!useTransients)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||    excludeFields    ==    null    ||!useTransients)    {    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
258	[BUG]  [BUGGY]  FieldValue  object  =  clazz.getDeclaredFields(fields);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  FieldValue  object  =  clazz.getDeclaredFields(fields);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	FieldValue  object  =  clazz.getDeclaredFields(fields);	  FieldValue    object    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
259	[BUG]  [BUGGY]  FieldValue  object  =  clazz.getDeclaredFields(excludeFields,  field);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  FieldValue  object  =  clazz.getDeclaredFields(excludeFields,  field);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	FieldValue  object  =  clazz.getDeclaredFields(excludeFields,  field);	  FieldValue    object    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
260	[BUG]  [BUGGY]  FieldValue  object  =  clazz.getDeclaredFields(excludeFields,  builder);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  FieldValue  object  =  clazz.getDeclaredFields(excludeFields,  builder);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	FieldValue  object  =  clazz.getDeclaredFields(excludeFields,  builder);	  FieldValue    object    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
261	[BUG]  [BUGGY]  FieldValue  object  =  clazz.getDeclaredFields(excludeFields,  useTransients);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  FieldValue  object  =  clazz.getDeclaredFields(excludeFields,  useTransients);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	FieldValue  object  =  clazz.getDeclaredFields(excludeFields,  useTransients);	  FieldValue    object    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
262	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              NullPointerException      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(excludeFields.length  ==  0)  {	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    if(isRegistered(object)||    excludeFields.length!=    0)    {    	compilable	  [FE]  NullPointerException  	9	4	replace
263	[BUG]  [BUGGY]  if(excludeFields.length  ==  0)  {  [FE]  NullPointerException  [FE]              NullPointerException      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(excludeFields.length  ==  0)  {	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    if(isRegistered(object)||    excludeFields.length!=    0)    {    	compilable	  [FE]  NullPointerException  	9	4	replace
264	[BUG]  [BUGGY]  if(isRegistered(object)&&  excludeFields  ==  null)  {  if(isRegistered(object)&&  excludeFields  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)&&  excludeFields  ==  null)  {  if(isRegistered(object)&&  excludeFields  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)&&    excludeFields    ==    null)    {    if(isRegistered(object)&&  excludeFields  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
265	[BUG]  [BUGGY]  if(isRegistered(object)&&  excludeFields  ==  null)  {  If(isRegistered(object)&&  excludeFields  ==  null)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)&&  excludeFields  ==  null)  {  If(isRegistered(object)&&  excludeFields  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)&&    excludeFields    ==    null)    {    If(isRegistered(object)&&  excludeFields  ==  null)  {	  	non-compiled	[CE]  ';'  expected	34	None	add
266	[BUG]  [BUGGY]  if(isRegistered(object)&&  excludeFields  ==  null)  {  if(isRegistered(object)&&  excludeFields  ==  null  ||  isRegistered(object))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)&&  excludeFields  ==  null)  {  if(isRegistered(object)&&  excludeFields  ==  null  ||  isRegistered(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)&&    excludeFields    ==    null)    {    if(isRegistered(object)&&  excludeFields  ==  null  ||  isRegistered(object))  {	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
267	[BUG]  [BUGGY]  if(isRegistered(object)&&  excludeFields  ==  null)  {  if(isRegistered(object)&&  excludeFields!=  null)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)&&  excludeFields  ==  null)  {  if(isRegistered(object)&&  excludeFields!=  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)&&    excludeFields    ==    null)    {    if(isRegistered(object)&&  excludeFields!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
268	[BUG]  [BUGGY]  if(isRegistered(object)&&  excludeFields  ==  null)  {  if(isRegistered(object)&&  excludeFields  ==  null  ||  useTransients)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)&&  excludeFields  ==  null)  {  if(isRegistered(object)&&  excludeFields  ==  null  ||  useTransients)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)&&    excludeFields    ==    null)    {    if(isRegistered(object)&&  excludeFields  ==  null  ||  useTransients)  {	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
269	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclasses(excludeFields);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Field[]  fields  =  clazz.getSuperclasses(excludeFields);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Field[]  fields  =  clazz.getSuperclasses(excludeFields);	  Field[]    fields    =    clazz.getSuperclasses();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
270	[BUG]  [BUGGY]  if(isRegistered(object)&&  excludeFields.length  ==  0)  {  if(isRegistered(object)&&  excludeFields.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)&&  excludeFields.length  ==  0)  {  if(isRegistered(object)&&  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)&&    excludeFields.length    ==    0)    {    if(isRegistered(object)&&  excludeFields.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
271	[BUG]  [BUGGY]  if(isRegistered(object)&&  excludeFields.length  ==  0)  {  if(isRegistered(object)&&  excludeFields.length!=  0)  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)&&  excludeFields.length  ==  0)  {  if(isRegistered(object)&&  excludeFields.length!=  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)&&    excludeFields.length    ==    0)    {    if(isRegistered(object)&&  excludeFields.length!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
272	[BUG]  [BUGGY]  if(isRegistered(object)&&  excludeFields.length  ==  0)  {  If(isRegistered(object)&&  excludeFields.length  ==  0)  {  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)&&  excludeFields.length  ==  0)  {  If(isRegistered(object)&&  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)&&    excludeFields.length    ==    0)    {    If(isRegistered(object)&&  excludeFields.length  ==  0)  {	  	non-compiled	[CE]  ';'  expected	50	None	add
273	[BUG]  [BUGGY]  if(isRegistered(object)&&  excludeFields.length  ==  0)  {  if(isRegistered(object)&&  excludeFields.length  ==  1)  {  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)&&  excludeFields.length  ==  0)  {  if(isRegistered(object)&&  excludeFields.length  ==  1)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)&&    excludeFields.length    ==    0)    {    if(isRegistered(object)&&  excludeFields.length  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
274	[BUG]  [BUGGY]  if(isRegistered(object)&&  excludeFields.length  ==  0)  {  if(isRegistered(object)&&  excludeFields.length  ==  0  ||  isRegistered(object))  {  [CE]  illegal  start  of  expression  [FE]            NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)&&  excludeFields.length  ==  0)  {  if(isRegistered(object)&&  excludeFields.length  ==  0  ||  isRegistered(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)&&    excludeFields.length    ==    0)    {    if(isRegistered(object)&&  excludeFields.length  ==  0  ||  isRegistered(object))  {	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
275	[BUG]  [BUGGY]  Field[]  object  =  clazz.getReferencedFields();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Field[]  object  =  clazz.getReferencedFields();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Field[]  object  =  clazz.getReferencedFields();	  Field[]    object    =    clazz.getAssignedFields();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
276	[BUG]  [BUGGY]  Field[]  object  =  clazz.getImmediateParentFields();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Field[]  object  =  clazz.getImmediateParentFields();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Field[]  object  =  clazz.getImmediateParentFields();	  Field[]    object    =    clazz.getAssignedFields();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
277	[BUG]  [BUGGY]  if(object  instanceof  AccessibleObject)  {  if(!isRegistered(object)||  object  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  instanceof  AccessibleObject)  {  if(!isRegistered(object)||  object  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  instanceof  AccessibleObject)  {  if(!isRegistered(object)||  object  ==  null)  {	  if(!isRegistered(object))    {    if(!isRegistered(object)    ||    object    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
278	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  object  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(!isRegistered(object)||  object  ==  null)  {	  if(!isRegistered(object))    {    if(!isRegistered(object)    ||    object    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	29	4	replace
279	[BUG]  [BUGGY]  if(!isRegistered(object)||  object  ==  null)  {  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  object  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||  object  ==  null)  {	  if(!isRegistered(object))    {    if(!isRegistered(object)    ||    object    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	29	4	replace
280	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  object!=  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(!isRegistered(object)||  object!=  null)  {	  if(!isRegistered(object))    {    if(!isRegistered(object)    ||    object    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	29	4	replace
281	[BUG]  [BUGGY]  if(!isRegistered(object)||  object!=  null)  {  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  object!=  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||  object!=  null)  {	  if(!isRegistered(object))    {    if(!isRegistered(object)    ||    object    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	29	4	replace
282	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {  if(!isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {  if(!isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||    excludeFields!=    null    ||    excludeFields.length    ==    0)    {    if(!isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
283	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {  if(!isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {  if(!isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||    excludeFields!=    null    ||    excludeFields.length    ==    0)    {    if(!isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
284	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {  if(!isRegistered(object)||  excludedFields!=  null  ||  excludeFields.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {  if(!isRegistered(object)||  excludedFields!=  null  ||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||    excludeFields!=    null    ||    excludeFields.length    ==    0)    {    if(!isRegistered(object)||  excludedFields!=  null  ||  excludeFields.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
285	[BUG]  [BUGGY]  FieldValue  object  =  excludeFields!=  null?  null  :  excludeFields.getDeclaredFields();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  FieldValue  object  =  excludeFields!=  null?  null  :  excludeFields.getDeclaredFields();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	FieldValue  object  =  excludeFields!=  null?  null  :  excludeFields.getDeclaredFields();	  FieldValue    object    =    excludeFields.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
286	[BUG]  [BUGGY]  FieldValue  object  =  excludeFields  ==  null?  null  :  excludeFields.getDeclaredFields();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  FieldValue  object  =  excludeFields  ==  null?  null  :  excludeFields.getDeclaredFields();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	FieldValue  object  =  excludeFields  ==  null?  null  :  excludeFields.getDeclaredFields();	  FieldValue    object    =    excludeFields.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
287	[BUG]  [BUGGY]  Integer[]  fields  =  clazz.getSuperclassFields();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Integer[]  fields  =  clazz.getSuperclassFields();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Integer[]  fields  =  clazz.getSuperclassFields();	  Integer[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
288	[BUG]  [BUGGY]  Integer[]  fields  =  clazz.getDeclaredFields(excludeFields);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Integer[]  fields  =  clazz.getDeclaredFields(excludeFields);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Integer[]  fields  =  clazz.getDeclaredFields(excludeFields);	  Integer[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
289	[BUG]  [BUGGY]  Integer[]  fields  =  clazz.getFields();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Integer[]  fields  =  clazz.getFields();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Integer[]  fields  =  clazz.getFields();	  Integer[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
290	[BUG]  [BUGGY]  String[]  excludeFields  =  clazz.getAssignedFields(excludeFields);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  String[]  excludeFields  =  clazz.getAssignedFields(excludeFields);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	String[]  excludeFields  =  clazz.getAssignedFields(excludeFields);	  String[]    excludeFields    =    clazz.getAssignedFields();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
291	[BUG]  [BUGGY]  String[]  excludeFields  =  clazz.getAssignmentFields();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  String[]  excludeFields  =  clazz.getAssignmentFields();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	String[]  excludeFields  =  clazz.getAssignmentFields();	  String[]    excludeFields    =    clazz.getAssignedFields();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
292	[BUG]  [BUGGY]  If(isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  If(isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	If(isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {	  if(isRegistered(object)||    excludeFields!=    null    ||    excludeFields.length    ==    0)    {    If(isRegistered(object)||    excludeFields!=    null    ||    excludeFields.length    ==    0)    {    	non-compiled	[CE]  ';'  expected	62	None	replace
293	[BUG]  [BUGGY]  if(object  ==  null  ||  excludeFields.length  ==  0)  {  If(isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  excludeFields.length  ==  0)  {  If(isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  excludeFields.length  ==  0)  {  If(isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {	  if(isRegistered(object)||    excludeFields!=    null    ||    excludeFields.length    ==    0)    {    If(isRegistered(object)||    excludeFields!=    null    ||    excludeFields.length    ==    0)    {    	non-compiled	[CE]  ';'  expected	62	None	replace
294	[BUG]  [BUGGY]  if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!useTransients    &&    isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	86	None	add
295	[BUG]  [BUGGY]  if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length!=  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length!=  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!useTransients    &&    isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	86	None	add
296	[BUG]  [BUGGY]  if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  if(!useTransients  &&  isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  if(!useTransients  &&  isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!useTransients    &&    isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    if(!useTransients  &&  isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	86	None	add
297	[BUG]  [BUGGY]  if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  if(!useTransients  ||  isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  if(!useTransients  ||  isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!useTransients    &&    isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    if(!useTransients  ||  isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	86	None	add
298	[BUG]  [BUGGY]  if(!useTransients  ||!isRegistered(object))  {  if(!useTransients  ||!isRegistered(object))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients  ||!isRegistered(object))  {  if(!useTransients  ||!isRegistered(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!useTransients    ||!isRegistered(object))    {    if(!useTransients  ||!isRegistered(object))  {	  	non-compiled	[CE]  illegal  start  of  expression	129	None	add
299	[BUG]  [BUGGY]  if(!useTransients  ||!isRegistered(object))  {  if(!useTransients  ||  isRegistered(object))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients  ||!isRegistered(object))  {  if(!useTransients  ||  isRegistered(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!useTransients    ||!isRegistered(object))    {    if(!useTransients  ||  isRegistered(object))  {	  	non-compiled	[CE]  illegal  start  of  expression	129	None	add
300	[BUG]  [BUGGY]  if(!useTransients  ||!isRegistered(object))  {  if(!isRegistered(object))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients  ||!isRegistered(object))  {  if(!isRegistered(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!useTransients    ||!isRegistered(object))    {    if(!isRegistered(object))  {	  	non-compiled	[CE]  illegal  start  of  expression	129	None	add
301	[BUG]  [BUGGY]  if(!useTransients  ||!isRegistered(object))  {  if(!usedTransients  ||!isRegistered(object))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients  ||!isRegistered(object))  {  if(!usedTransients  ||!isRegistered(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!useTransients    ||!isRegistered(object))    {    if(!usedTransients  ||!isRegistered(object))  {	  	non-compiled	[CE]  illegal  start  of  expression	129	None	add
302	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields  ==  null  ||  excludeFields.length  >=  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(excludeFields  ==  null  ||  excludeFields.length  >=  0)  {	  if(excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	89	4	replace
303	[BUG]  [BUGGY]  if(excludeFields  ==  null  ||  excludeFields.length  >=  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields  ==  null  ||  excludeFields.length  >=  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(excludeFields  ==  null  ||  excludeFields.length  >=  0)  {	  if(excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	89	4	replace
304	[BUG]  [BUGGY]  if(isRegistered(object)||  excludedFields  ==  null)  {  [CE]  cannot  find  symbol  excludedFields  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludedFields  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||  excludedFields  ==  null)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||    excludedFields    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol  excludedFields	123	None	replace
305	[BUG]  [BUGGY]  if(isRegistered(object)||  excludedFields!=  null)  {  [CE]  cannot  find  symbol  excludedFields  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludedFields!=  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||  excludedFields!=  null)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||    excludedFields    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol  excludedFields	123	None	replace
306	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(excludeFields  ==  null)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||    excludedFields    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	123	4	replace
307	[BUG]  [BUGGY]  if(excludeFields  ==  null)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(excludeFields  ==  null)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||    excludedFields    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	123	4	replace
308	[BUG]  [BUGGY]  if(object  instanceof  AccessibleObject)  {  if(!isRegistered(object)||  useTransients)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  instanceof  AccessibleObject)  {  if(!isRegistered(object)||  useTransients)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  instanceof  AccessibleObject)  {  if(!isRegistered(object)||  useTransients)  {	  if(!isRegistered(object))    {    if(!isRegistered(object)    ||    useTransients)    {    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
309	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  useTransients)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(!isRegistered(object)||  useTransients)  {	  if(!isRegistered(object))    {    if(!isRegistered(object)    ||    useTransients)    {    	compilable	  [FE]  AssertionFailedError  	131	4	replace
310	[BUG]  [BUGGY]  if(!isRegistered(object)||  useTransients)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  useTransients)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||  useTransients)  {	  if(!isRegistered(object))    {    if(!isRegistered(object)    ||    useTransients)    {    	compilable	  [FE]  AssertionFailedError  	131	4	replace
311	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields)  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||  excludeFields)  {	  if(!isRegistered(object))    {    if(!isRegistered(object)    ||    useTransients)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	131	None	replace
312	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)&&  useTransients)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(!isRegistered(object)&&  useTransients)  {	  if(!isRegistered(object))    {    if(!isRegistered(object)    ||    useTransients)    {    	compilable	  [FE]  StackOverflowError  	131	2	replace
313	[BUG]  [BUGGY]  if(!isRegistered(object)&&  useTransients)  {  [FE]  StackOverflowError  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)&&  useTransients)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)&&  useTransients)  {	  if(!isRegistered(object))    {    if(!isRegistered(object)    ||    useTransients)    {    	compilable	  [FE]  StackOverflowError  	131	2	replace
314	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields!=  null)  {  if(object  ==  null  ||  isRegistered(object)||  excludeFields!=  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields!=  null)  {  if(object  ==  null  ||  isRegistered(object)||  excludeFields!=  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||    isRegistered(object)||    excludeFields!=    null)    {    if(object  ==  null  ||  isRegistered(object)||  excludeFields!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	92	None	add
315	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields!=  null)  {  if(object!=  null  ||  isRegistered(object)||  excludeFields!=  null)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields!=  null)  {  if(object!=  null  ||  isRegistered(object)||  excludeFields!=  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||    isRegistered(object)||    excludeFields!=    null)    {    if(object!=  null  ||  isRegistered(object)||  excludeFields!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	92	None	add
316	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields!=  null)  {  if(object  ==  null  ||  isRegistered(object)||  excludedFields!=  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields!=  null)  {  if(object  ==  null  ||  isRegistered(object)||  excludedFields!=  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||    isRegistered(object)||    excludeFields!=    null)    {    if(object  ==  null  ||  isRegistered(object)||  excludedFields!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	92	None	add
317	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields!=  null)  {  If(object  ==  null  ||  isRegistered(object)||  excludeFields!=  null)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields!=  null)  {  If(object  ==  null  ||  isRegistered(object)||  excludeFields!=  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||    isRegistered(object)||    excludeFields!=    null)    {    If(object  ==  null  ||  isRegistered(object)||  excludeFields!=  null)  {	  	non-compiled	[CE]  ';'  expected	92	None	add
318	[BUG]  [BUGGY]  AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.get(0);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.get(0);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.get(0);	  if(object    ==    null    ||    isRegistered(object))    {    AssertionFailedError    <    String>    object    =    excludeFields    ==    null?    null    :    excludeFields.get(0);    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
319	[BUG]  [BUGGY]  AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.get(1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.get(1);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.get(1);	  if(object    ==    null    ||    isRegistered(object))    {    AssertionFailedError    <    String>    object    =    excludeFields    ==    null?    null    :    excludeFields.get(0);    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
320	[BUG]  [BUGGY]  if(excludeFields  ==  null  ||  isRegistered(object))  {  AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.get(0);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields  ==  null  ||  isRegistered(object))  {  AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.get(0);  }  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(excludeFields  ==  null  ||  isRegistered(object))  {  AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.get(0);  }	  if(object    ==    null    ||    isRegistered(object))    {    AssertionFailedError    <    String>    object    =    excludeFields    ==    null?    null    :    excludeFields.get(0);    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
321	[BUG]  [BUGGY]  Field[]  object  =  clazz.getReferenceNames();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Field[]  object  =  clazz.getReferenceNames();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Field[]  object  =  clazz.getReferenceNames();	  Field[]    object    =    clazz.getSuperclass();    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
322	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||  useTransients)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(isRegistered(object)||  excludeFields  ==  null  ||  useTransients)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||    excludeFields    ==    null    ||    useTransients)    {    	compilable	  [FE]  AssertionFailedError  	40	4	replace
323	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||  useTransients)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||  useTransients)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||  excludeFields  ==  null  ||  useTransients)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||    excludeFields    ==    null    ||    useTransients)    {    	compilable	  [FE]  AssertionFailedError  	40	4	replace
324	[BUG]  [BUGGY]  if(object  ==  null)  {  if(isRegistered(object)||  excludeFields  ==  null  ||  useTransients)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null)  {  if(isRegistered(object)||  excludeFields  ==  null  ||  useTransients)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null)  {  if(isRegistered(object)||  excludeFields  ==  null  ||  useTransients)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||    excludeFields    ==    null    ||    useTransients)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
325	[BUG]  [BUGGY]  if(!useTransients)  {  if(isRegistered(object)||  excludeFields  ==  null  ||  useTransients)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients)  {  if(isRegistered(object)||  excludeFields  ==  null  ||  useTransients)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!useTransients)  {  if(isRegistered(object)||  excludeFields  ==  null  ||  useTransients)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||    excludeFields    ==    null    ||    useTransients)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
326	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields  ==  null  ||  useTransients)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(!isRegistered(object)||  excludeFields  ==  null  ||  useTransients)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||    excludeFields    ==    null    ||    useTransients)    {    	compilable	  [FE]  AssertionFailedError  	40	4	replace
327	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields  ==  null  ||  useTransients)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields  ==  null  ||  useTransients)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||  excludeFields  ==  null  ||  useTransients)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||    excludeFields    ==    null    ||    useTransients)    {    	compilable	  [FE]  AssertionFailedError  	40	4	replace
328	[BUG]  [BUGGY]  String[]  excludeFields  =  clazz.getIncludeFields(excludeFields);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  String[]  excludeFields  =  clazz.getIncludeFields(excludeFields);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	String[]  excludeFields  =  clazz.getIncludeFields(excludeFields);	  String[]    excludeFields    =    clazz.getIncludeFields();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
329	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getInterface();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Class  <?>  object  =  clazz.getInterface();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Class  <?>  object  =  clazz.getInterface();	  Class    <?>    object    =    clazz.getSuperclass();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
330	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getSuperClass();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Class  <?>  object  =  clazz.getSuperClass();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Class  <?>  object  =  clazz.getSuperClass();	  Class    <?>    object    =    clazz.getSuperclass();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
331	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)&&  excludeFields.length!=  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(!isRegistered(object)&&  excludeFields.length!=  0)  {	  if(!isRegistered(object)||    excludeFields.length!=    0)    {    	compilable	  [FE]  NullPointerException  	69	4	replace
332	[BUG]  [BUGGY]  if(!isRegistered(object)&&  excludeFields.length!=  0)  {  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)&&  excludeFields.length!=  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)&&  excludeFields.length!=  0)  {	  if(!isRegistered(object)||    excludeFields.length!=    0)    {    	compilable	  [FE]  NullPointerException  	69	4	replace
333	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||  this.useTransients)  {  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||  this.useTransients)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||  excludeFields  ==  null  ||  this.useTransients)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||    excludeFields    ==    null    ||    this.useTransients)    {    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	121	None	replace
334	[BUG]  [BUGGY]  if(object  ==  null)  {  if(isRegistered(object)||  excludeFields  ==  null  ||  this.useTransients)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null)  {  if(isRegistered(object)||  excludeFields  ==  null  ||  this.useTransients)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null)  {  if(isRegistered(object)||  excludeFields  ==  null  ||  this.useTransients)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||    excludeFields    ==    null    ||    this.useTransients)    {    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
335	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields  ==  null  ||  this.useTransients)  {  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields  ==  null  ||  this.useTransients)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||  excludeFields  ==  null  ||  this.useTransients)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||    excludeFields    ==    null    ||    this.useTransients)    {    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	121	None	replace
336	[BUG]  [BUGGY]  if(object  ==  null  ||  excludeFields  ==  null  ||  this.useTransients)  {  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  excludeFields  ==  null  ||  this.useTransients)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  excludeFields  ==  null  ||  this.useTransients)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||    excludeFields    ==    null    ||    this.useTransients)    {    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	121	None	replace
337	[BUG]  [BUGGY]  if(!isRegistered(object)&&  excludeFields  ==  null)  {  if(!isRegistered(object)&&  excludeFields  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)&&  excludeFields  ==  null)  {  if(!isRegistered(object)&&  excludeFields  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)&&    excludeFields    ==    null)    {    if(!isRegistered(object)&&  excludeFields  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	106	None	add
338	[BUG]  [BUGGY]  if(!isRegistered(object)&&  excludeFields  ==  null)  {  if(!isRegistered(object)&&  excludeFields!=  null)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)&&  excludeFields  ==  null)  {  if(!isRegistered(object)&&  excludeFields!=  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)&&    excludeFields    ==    null)    {    if(!isRegistered(object)&&  excludeFields!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	106	None	add
339	[BUG]  [BUGGY]  if(!isRegistered(object)&&  excludeFields  ==  null)  {  if(!isRegistered(object)&&  excludeFields  ==  null  ||!useTransients)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)&&  excludeFields  ==  null)  {  if(!isRegistered(object)&&  excludeFields  ==  null  ||!useTransients)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)&&    excludeFields    ==    null)    {    if(!isRegistered(object)&&  excludeFields  ==  null  ||!useTransients)  {	  	non-compiled	[CE]  illegal  start  of  expression	106	None	add
340	[BUG]  [BUGGY]  if(!isRegistered(object)&&  excludeFields  ==  null)  {  If(!isRegistered(object)&&  excludeFields  ==  null)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)&&  excludeFields  ==  null)  {  If(!isRegistered(object)&&  excludeFields  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)&&    excludeFields    ==    null)    {    If(!isRegistered(object)&&  excludeFields  ==  null)  {	  	non-compiled	[CE]  ';'  expected	106	None	add
341	[BUG]  [BUGGY]  if(!isRegistered(object)&&  excludeFields  ==  null)  {  if(!isRegistered(object)&&  excludeFields  ==  null  ||  useTransients)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)&&  excludeFields  ==  null)  {  if(!isRegistered(object)&&  excludeFields  ==  null  ||  useTransients)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)&&    excludeFields    ==    null)    {    if(!isRegistered(object)&&  excludeFields  ==  null  ||  useTransients)  {	  	non-compiled	[CE]  illegal  start  of  expression	106	None	add
342	[BUG]  [BUGGY]  if(isRegistered(object)||  excludedFields  ==  null  ||  excludeFields.length  ==  0)  {  [CE]  cannot  find  symbol  excludedFields  [FE]        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludedFields  ==  null  ||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||  excludedFields  ==  null  ||  excludeFields.length  ==  0)  {	  if(isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    if(isRegistered(object)||    excludedFields    ==    null    ||    excludeFields.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  excludedFields	139	None	replace
343	[BUG]  [BUGGY]  Object  object  ==  null  ||  isRegistered(object))  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Object  object  ==  null  ||  isRegistered(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Object  object  ==  null  ||  isRegistered(object))  {	  if(object    ==    null    ||    isRegistered(object))    {    Object    object    ==    null    ||    isRegistered(object))    {    	non-compiled	[CE]  ';'  expected	113	None	replace
344	[BUG]  [BUGGY]  if(object  ==  null  ||  isUnknownObject())  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isUnknownObject())  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  isUnknownObject())  {	  if(object    ==    null    ||    isRegistered(object))    {    Object    object    ==    null    ||    isRegistered(object))    {    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
345	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields!=  null)  {  if(isRegistered(object)||  excludeFields!=  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludeFields!=  null)  {  if(isRegistered(object)||  excludeFields!=  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||    excludeFields!=    null)    {    if(isRegistered(object)||  excludeFields!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	140	None	add
346	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields!=  null)  {  if(isRegistered(object)||  excludeFields  ==  null)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludeFields!=  null)  {  if(isRegistered(object)||  excludeFields  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||    excludeFields!=    null)    {    if(isRegistered(object)||  excludeFields  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	140	None	add
347	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields!=  null)  {  If(isRegistered(object)||  excludeFields!=  null)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludeFields!=  null)  {  If(isRegistered(object)||  excludeFields!=  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||    excludeFields!=    null)    {    If(isRegistered(object)||  excludeFields!=  null)  {	  	non-compiled	[CE]  ';'  expected	140	None	add
348	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields!=  null)  {  if(isRegistered(object)||  excludeFields!=  null  ||  useTransients)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludeFields!=  null)  {  if(isRegistered(object)||  excludeFields!=  null  ||  useTransients)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||    excludeFields!=    null)    {    if(isRegistered(object)||  excludeFields!=  null  ||  useTransients)  {	  	non-compiled	[CE]  illegal  start  of  expression	140	None	add
349	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRegistered(Object.class))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(object  ==  null  ||  isRegistered(Object.class))  {	  if(object    ==    null    ||    isRegistered(object))    {    if(object    ==    null    ||    isRegistered(Object.class))    {    	compilable	  [FE]  StackOverflowError  	14	1	replace
350	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(Object.class))  {  [FE]  StackOverflowError  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRegistered(Object.class))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  isRegistered(Object.class))  {	  if(object    ==    null    ||    isRegistered(object))    {    if(object    ==    null    ||    isRegistered(Object.class))    {    	compilable	  [FE]  StackOverflowError  	14	1	replace
351	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object!=  null  ||  isRegistered(Object.class))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(object!=  null  ||  isRegistered(Object.class))  {	  if(object    ==    null    ||    isRegistered(object))    {    if(object    ==    null    ||    isRegistered(Object.class))    {    	compilable	  [FE]  AssertionFailedError  	14	4	replace
352	[BUG]  [BUGGY]  if(object!=  null  ||  isRegistered(Object.class))  {  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object!=  null  ||  isRegistered(Object.class))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object!=  null  ||  isRegistered(Object.class))  {	  if(object    ==    null    ||    isRegistered(object))    {    if(object    ==    null    ||    isRegistered(Object.class))    {    	compilable	  [FE]  AssertionFailedError  	14	4	replace
353	[BUG]  [BUGGY]  if(object  ==  null  ||  excludeFields.length  ==  0)  {  if(object  ==  null  ||  excludeFields.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  excludeFields.length  ==  0)  {  if(object  ==  null  ||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||    excludeFields.length    ==    0)    {    if(object  ==  null  ||  excludeFields.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
354	[BUG]  [BUGGY]  if(object  ==  null  ||  excludeFields.length  ==  0)  {  if(object  ==  null  ||  excludeFields.length!=  0)  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  excludeFields.length  ==  0)  {  if(object  ==  null  ||  excludeFields.length!=  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||    excludeFields.length    ==    0)    {    if(object  ==  null  ||  excludeFields.length!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
355	[BUG]  [BUGGY]  if(object  ==  null  ||  excludeFields.length  ==  0)  {  if(object!=  null  ||  excludeFields.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  excludeFields.length  ==  0)  {  if(object!=  null  ||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||    excludeFields.length    ==    0)    {    if(object!=  null  ||  excludeFields.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
356	[BUG]  [BUGGY]  if(object  ==  null  ||  excludeFields.length  ==  0)  {  if(object  ==  null  ||  excludeFields.length  >=  0)  {  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  excludeFields.length  ==  0)  {  if(object  ==  null  ||  excludeFields.length  >=  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||    excludeFields.length    ==    0)    {    if(object  ==  null  ||  excludeFields.length  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
357	[BUG]  [BUGGY]  if(object  ==  null  ||  excludeFields.length  ==  0)  {  If(object  ==  null  ||  excludeFields.length  ==  0)  {  [CE]  ';'  expected  [FE]            NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  excludeFields.length  ==  0)  {  If(object  ==  null  ||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||    excludeFields.length    ==    0)    {    If(object  ==  null  ||  excludeFields.length  ==  0)  {	  	non-compiled	[CE]  ';'  expected	83	None	add
358	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getDeclaredClass(excludeFields,  fieldValue);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Class  <?>  object  =  clazz.getDeclaredClass(excludeFields,  fieldValue);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Class  <?>  object  =  clazz.getDeclaredClass(excludeFields,  fieldValue);	  Class    <?>    object    =    clazz.getDeclaredClass(excludeFields);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
359	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getDeclaredClass(fieldValue);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Class  <?>  object  =  clazz.getDeclaredClass(fieldValue);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Class  <?>  object  =  clazz.getDeclaredClass(fieldValue);	  Class    <?>    object    =    clazz.getDeclaredClass(excludeFields);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
360	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getDeclaredClass(excludeFields,  builder);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Class  <?>  object  =  clazz.getDeclaredClass(excludeFields,  builder);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Class  <?>  object  =  clazz.getDeclaredClass(excludeFields,  builder);	  Class    <?>    object    =    clazz.getDeclaredClass(excludeFields);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
361	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getDeclaredClass(excludeFields,  field);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Class  <?>  object  =  clazz.getDeclaredClass(excludeFields,  field);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Class  <?>  object  =  clazz.getDeclaredClass(excludeFields,  field);	  Class    <?>    object    =    clazz.getDeclaredClass(excludeFields);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
362	[BUG]  [BUGGY]  if(isConstructor()  ||  excludeFields  ==  null)  {  if(isRegistered(object)||  excludeFields!=  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isConstructor()  ||  excludeFields  ==  null)  {  if(isRegistered(object)||  excludeFields!=  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isConstructor()  ||  excludeFields  ==  null)  {  if(isRegistered(object)||  excludeFields!=  null)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||    excludeFields!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
363	[BUG]  [BUGGY]  if(!useTransients)  {  if(isRegistered(object)||  excludeFields!=  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients)  {  if(isRegistered(object)||  excludeFields!=  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!useTransients)  {  if(isRegistered(object)||  excludeFields!=  null)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||    excludeFields!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
364	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)&&  excludeFields  ==  null  ||!useTransients)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(!isRegistered(object)&&  excludeFields  ==  null  ||!useTransients)  {	  if(!isRegistered(object)&&    excludeFields    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	107	4	replace
365	[BUG]  [BUGGY]  if(!isRegistered(object)&&  excludeFields  ==  null  ||!useTransients)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)&&  excludeFields  ==  null  ||!useTransients)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)&&  excludeFields  ==  null  ||!useTransients)  {	  if(!isRegistered(object)&&    excludeFields    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	107	4	replace
366	[BUG]  [BUGGY]  Integer[]  fields  =  clazz.getFieldValues();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Integer[]  fields  =  clazz.getFieldValues();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Integer[]  fields  =  clazz.getFieldValues();	  Integer[]    fields    =    clazz.getReferences();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
367	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||  object  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(isRegistered(object)||  excludeFields  ==  null  ||  object  ==  null)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||    excludeFields    ==    null    ||    object    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	94	4	replace
368	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||  object  ==  null)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||  object  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||  excludeFields  ==  null  ||  object  ==  null)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||    excludeFields    ==    null    ||    object    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	94	4	replace
369	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||  object!=  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(isRegistered(object)||  excludeFields  ==  null  ||  object!=  null)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||    excludeFields    ==    null    ||    object    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	94	4	replace
370	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||  object!=  null)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||  object!=  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||  excludeFields  ==  null  ||  object!=  null)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||    excludeFields    ==    null    ||    object    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	94	4	replace
371	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields  ==  null  ||  object  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(!isRegistered(object)||  excludeFields  ==  null  ||  object  ==  null)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||    excludeFields    ==    null    ||    object    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	94	4	replace
372	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields  ==  null  ||  object  ==  null)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields  ==  null  ||  object  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||  excludeFields  ==  null  ||  object  ==  null)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||    excludeFields    ==    null    ||    object    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	94	4	replace
373	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludeFields!=  null  ||  object  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(isRegistered(object)||  excludeFields!=  null  ||  object  ==  null)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||    excludeFields    ==    null    ||    object    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	94	2	replace
374	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields!=  null  ||  object  ==  null)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludeFields!=  null  ||  object  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||  excludeFields!=  null  ||  object  ==  null)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||    excludeFields    ==    null    ||    object    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	94	2	replace
375	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields.length  ==  0)  {  if(!isRegistered(object)||  excludeFields.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields.length  ==  0)  {  if(!isRegistered(object)||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||    excludeFields.length    ==    0)    {    if(!isRegistered(object)||  excludeFields.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
376	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields.length  ==  0)  {  if(!isRegistered(object)||  excludeFields.length  ==  0  ||  object.getName().indexOf('$')  ==  -1)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields.length  ==  0)  {  if(!isRegistered(object)||  excludeFields.length  ==  0  ||  object.getName().indexOf('$')  ==  -1)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||    excludeFields.length    ==    0)    {    if(!isRegistered(object)||  excludeFields.length  ==  0  ||  object.getName().indexOf('$')  ==  -1)  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
377	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields.length  ==  0)  {  if(!isRegistered(object)||  excludeFields.length!=  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields.length  ==  0)  {  if(!isRegistered(object)||  excludeFields.length!=  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||    excludeFields.length    ==    0)    {    if(!isRegistered(object)||  excludeFields.length!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
378	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields.length  ==  0)  {  if(!isRegistered(object)||  excludedFields.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields.length  ==  0)  {  if(!isRegistered(object)||  excludedFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||    excludeFields.length    ==    0)    {    if(!isRegistered(object)||  excludedFields.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
379	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients  ||  isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(!useTransients  ||  isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {	  if(!useTransients    &&    isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	87	4	replace
380	[BUG]  [BUGGY]  if(!useTransients  ||  isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients  ||  isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!useTransients  ||  isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {	  if(!useTransients    &&    isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	87	4	replace
381	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length!=  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length!=  0)  {	  if(!useTransients    &&    isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	87	4	replace
382	[BUG]  [BUGGY]  if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length!=  0)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length!=  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length!=  0)  {	  if(!useTransients    &&    isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	87	4	replace
383	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients  &&  isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(!useTransients  &&  isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {	  if(!useTransients    &&    isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    	compilable	  [FE]  NullPointerException  	87	4	replace
384	[BUG]  [BUGGY]  if(!useTransients  &&  isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {  [FE]  NullPointerException  [FE]        AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients  &&  isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!useTransients  &&  isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {	  if(!useTransients    &&    isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    	compilable	  [FE]  NullPointerException  	87	4	replace
385	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  builder);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  builder);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  builder);	  Field[]    fields    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
386	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  useTransients);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  useTransients);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  useTransients);	  Field[]    fields    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
387	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(fieldValue);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(fieldValue);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Field[]  fields  =  clazz.getDeclaredFields(fieldValue);	  Field[]    fields    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
388	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  true);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  true);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  true);	  Field[]    fields    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
389	[BUG]  [BUGGY]  if(isRegistered(object)||  excludedFields!=  null  ||  excludeFields.length  ==  0)  {  [CE]  cannot  find  symbol  excludedFields  [FE]              NullPointerException      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludedFields!=  null  ||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||  excludedFields!=  null  ||  excludeFields.length  ==  0)  {	  if(isRegistered(object)||    excludeFields!=    null    ||    excludeFields.length    ==    0)    {    if(isRegistered(object)||    excludedFields!=    null    ||    excludeFields.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  excludedFields	63	None	replace
390	[BUG]  [BUGGY]  Field[]  object  =  clazz.getImplicitReturn();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Field[]  object  =  clazz.getImplicitReturn();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Field[]  object  =  clazz.getImplicitReturn();	  Field[]    object    =    clazz.getAssignedFields();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
391	[BUG]  [BUGGY]  if(!isRegistered(object)&&  excludeFields.length  ==  0)  {  if(!isRegistered(object)&&  excludeFields.length  ==  0  ||!useTransients)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)&&  excludeFields.length  ==  0)  {  if(!isRegistered(object)&&  excludeFields.length  ==  0  ||!useTransients)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)&&    excludeFields.length    ==    0)    {    if(!isRegistered(object)&&  excludeFields.length  ==  0  ||!useTransients)  {	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
392	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields.length  ==  0)  {  if(object  ==  null  ||  isRegistered(object)||  excludedFields.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields.length  ==  0)  {  if(object  ==  null  ||  isRegistered(object)||  excludedFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||    isRegistered(object)||    excludeFields.length    ==    0)    {    if(object  ==  null  ||  isRegistered(object)||  excludedFields.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	127	None	add
393	[BUG]  [BUGGY]  if(excludeFields  ==  null  ||  isRegistered(object))  {  AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.get(0);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields  ==  null  ||  isRegistered(object))  {  AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.get(0);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(excludeFields  ==  null  ||  isRegistered(object))  {  AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.get(0);	  if(object    ==    null    ||    isRegistered(object))    {    AssertionFailedError    <    String>    object    =    excludeFields    ==    null?    null    :    excludeFields.get(0);    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
394	[BUG]  [BUGGY]  Object  objectValue  =  excludeFields.getValue();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Object  objectValue  =  excludeFields.getValue();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Object  objectValue  =  excludeFields.getValue();	  int    objectValue    =    excludeFields.getValue();    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
395	[BUG]  [BUGGY]  int  objectValue  =  excludeFields.getValue(iTotal);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  int  objectValue  =  excludeFields.getValue(iTotal);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	int  objectValue  =  excludeFields.getValue(iTotal);	  int    objectValue    =    excludeFields.getValue();    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
396	[BUG]  [BUGGY]  if(excludeFields  ==  null)  {  If(isRegistered(object)||  excludeFields  ==  null)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields  ==  null)  {  If(isRegistered(object)||  excludeFields  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(excludeFields  ==  null)  {  If(isRegistered(object)||  excludeFields  ==  null)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    If(isRegistered(object)||    excludeFields    ==    null)    {    	non-compiled	[CE]  ';'  expected	41	None	replace
397	[BUG]  [BUGGY]  if(object  ==  null)  {  If(isRegistered(object)||  excludeFields  ==  null)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null)  {  If(isRegistered(object)||  excludeFields  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null)  {  If(isRegistered(object)||  excludeFields  ==  null)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    If(isRegistered(object)||    excludeFields    ==    null)    {    	non-compiled	[CE]  ';'  expected	41	None	replace
398	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields.length  ==  0  ||  fieldValue  ==  null)  {  [CE]  cannot  find  symbol  fieldValue  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields.length  ==  0  ||  fieldValue  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||  excludeFields.length  ==  0  ||  fieldValue  ==  null)  {	  if(!isRegistered(object)||    excludeFields.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  fieldValue	47	None	replace
399	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  excludeFields!=  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(object  ==  null  ||  excludeFields!=  null)  {	  if(object    ==    null    ||    isRegistered(object)||    excludeFields!=    null)    {    	compilable	  [FE]  StackOverflowError  	93	2	replace
400	[BUG]  [BUGGY]  if(object  ==  null  ||  excludeFields!=  null)  {  [FE]  StackOverflowError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  excludeFields!=  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  excludeFields!=  null)  {	  if(object    ==    null    ||    isRegistered(object)||    excludeFields!=    null)    {    	compilable	  [FE]  StackOverflowError  	93	2	replace
401	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  isUnknown(object))  {  [CE]  cannot  find  symbol  fieldValue  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(fieldValue  ==  null  ||  isUnknown(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(fieldValue  ==  null  ||  isUnknown(object))  {	  if(object    ==    null    ||    isUnknown(object))    {    	non-compiled	[CE]  cannot  find  symbol  fieldValue	45	None	replace
402	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)&&  excludeFields.length  ==  1)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(!isRegistered(object)&&  excludeFields.length  ==  1)  {	  if(!isRegistered(object)&&    excludeFields.length    ==    0)    {    	compilable	  [FE]  NullPointerException  	82	4	replace
403	[BUG]  [BUGGY]  if(!isRegistered(object)&&  excludeFields.length  ==  1)  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)&&  excludeFields.length  ==  1)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)&&  excludeFields.length  ==  1)  {	  if(!isRegistered(object)&&    excludeFields.length    ==    0)    {    	compilable	  [FE]  NullPointerException  	82	4	replace
404	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(excludeFields)||  fieldValue  ==  null)  {  [CE]  cannot  find  symbol  fieldValue  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRegistered(excludeFields)||  fieldValue  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  isRegistered(excludeFields)||  fieldValue  ==  null)  {	  if(object    ==    null    ||    isRegistered(excludeFields))    {    	non-compiled	[CE]  cannot  find  symbol  fieldValue	91	None	replace
405	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getAssignedClass(excludeFields);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Class  <?>  object  =  clazz.getAssignedClass(excludeFields);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Class  <?>  object  =  clazz.getAssignedClass(excludeFields);	  Class    <?>    object    =    clazz.getAssignedClass();    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
406	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getObject();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Class  <?>  object  =  clazz.getObject();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Class  <?>  object  =  clazz.getObject();	  Class    <?>    object    =    clazz.getSuperclass();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
407	[BUG]  [BUGGY]  Field[]  object  =  clazz.getSuperclassValues();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Field[]  object  =  clazz.getSuperclassValues();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Field[]  object  =  clazz.getSuperclassValues();	  Field[]    object    =    clazz.getSuperclassValue();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
408	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaredObject(excludeFields,  field);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Object  object  =  clazz.getDeclaredObject(excludeFields,  field);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Object  object  =  clazz.getDeclaredObject(excludeFields,  field);	  Object    object    =    clazz.getDeclaredObject(excludeFields);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
409	[BUG]  [BUGGY]  if(excludeFields!=  null)  {  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  String[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue);  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields!=  null)  {  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  String[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue);  }  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(excludeFields!=  null)  {  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  String[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue);  }	  if(excludeFields    ==    null)    {    for(int    i    =    0;    i    <    excludeFields.length;    i++)    {    String[]    fields    =    clazz.getDeclaredFields();    builder.append(fieldValue);    }    	non-compiled	[CE]  incompatible  types	118	None	replace
410	[BUG]  [BUGGY]  if(excludeFields!=  null)  {  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  String[]  fieldValue  =  clazz.getDeclaredFields();  builder.append(fieldValue);  }  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields!=  null)  {  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  String[]  fieldValue  =  clazz.getDeclaredFields();  builder.append(fieldValue);  }  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(excludeFields!=  null)  {  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  String[]  fieldValue  =  clazz.getDeclaredFields();  builder.append(fieldValue);  }	  if(excludeFields    ==    null)    {    for(int    i    =    0;    i    <    excludeFields.length;    i++)    {    String[]    fields    =    clazz.getDeclaredFields();    builder.append(fieldValue);    }    	non-compiled	[CE]  incompatible  types	118	None	replace
411	[BUG]  [BUGGY]  Object  objectValue  =  clazz.getObjectValue();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Object  objectValue  =  clazz.getObjectValue();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Object  objectValue  =  clazz.getObjectValue();	  int    objectValue    =    clazz.getObjectValue();    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
412	[BUG]  [BUGGY]  int  objectValue  =  clazz.getObjectValue(excludeFields);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  int  objectValue  =  clazz.getObjectValue(excludeFields);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	int  objectValue  =  clazz.getObjectValue(excludeFields);	  int    objectValue    =    clazz.getObjectValue();    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
413	[BUG]  [BUGGY]  if(!useTransients  ||!isRegistered(object))  {  if(!userTransients  ||!isRegistered(object))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients  ||!isRegistered(object))  {  if(!userTransients  ||!isRegistered(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!useTransients    ||!isRegistered(object))    {    if(!userTransients  ||!isRegistered(object))  {	  	non-compiled	[CE]  illegal  start  of  expression	129	None	add
414	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients  &&  isRegistered(excludeFields)||  excludeFields  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(!useTransients  &&  isRegistered(excludeFields)||  excludeFields  ==  null)  {	  if(!useTransients    &&    isRegistered(object)||    excludeFields    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	105	4	replace
415	[BUG]  [BUGGY]  if(!useTransients  &&  isRegistered(excludeFields)||  excludeFields  ==  null)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients  &&  isRegistered(excludeFields)||  excludeFields  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!useTransients  &&  isRegistered(excludeFields)||  excludeFields  ==  null)  {	  if(!useTransients    &&    isRegistered(object)||    excludeFields    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	105	4	replace
416	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||!isRegistered(excludeFields))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(object  ==  null  ||!isRegistered(excludeFields))  {	  if(object!=    null    ||!isRegistered(object))    {    	compilable	  [FE]  AssertionFailedError  	67	4	replace
417	[BUG]  [BUGGY]  if(object  ==  null  ||!isRegistered(excludeFields))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||!isRegistered(excludeFields))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||!isRegistered(excludeFields))  {	  if(object!=    null    ||!isRegistered(object))    {    	compilable	  [FE]  AssertionFailedError  	67	4	replace
418	[BUG]  [BUGGY]  if(object  ==  null  ||  excludeFields.contains(object))  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  excludeFields.contains(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  excludeFields.contains(object))  {	  if(object    ==    null    ||    isRestricted(object))    {    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
419	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields  ==  null  ||  isRegistered(object)&&  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(excludeFields  ==  null  ||  isRegistered(object)&&  excludeFields.length  ==  0)  {	  if(isRegistered(object)&&    excludeFields.length    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	51	4	replace
420	[BUG]  [BUGGY]  if(excludeFields  ==  null  ||  isRegistered(object)&&  excludeFields.length  ==  0)  {  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields  ==  null  ||  isRegistered(object)&&  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(excludeFields  ==  null  ||  isRegistered(object)&&  excludeFields.length  ==  0)  {	  if(isRegistered(object)&&    excludeFields.length    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	51	4	replace
421	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaringObject(excludeFields);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Object  object  =  clazz.getDeclaringObject(excludeFields);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Object  object  =  clazz.getDeclaringObject(excludeFields);	  Object    object    =    clazz.getDeclaringObject();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
422	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||!Modifier.isTransient(object.getModifiers()))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||!Modifier.isTransient(object.getModifiers()))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||  excludeFields  ==  null  ||!Modifier.isTransient(object.getModifiers()))  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||    excludeFields    ==    null    ||!useTransients)    {    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
423	[BUG]  [BUGGY]  Field[]  object  =  clazz.getObject();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Field[]  object  =  clazz.getObject();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Field[]  object  =  clazz.getObject();	  Field[]    object    =    clazz.getSuperclass();    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
424	[BUG]  [BUGGY]  Integer[]  fields  =  clazz.getSuperclasses();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Integer[]  fields  =  clazz.getSuperclasses();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Integer[]  fields  =  clazz.getSuperclasses();	  Integer[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
425	[BUG]  [BUGGY]  if(excludeFields!=  null)  {  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  String[]  fields  =  clazz.getDeclaredFields();  builder.addChangeListener(this);  }  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields!=  null)  {  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  String[]  fields  =  clazz.getDeclaredFields();  builder.addChangeListener(this);  }  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(excludeFields!=  null)  {  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  String[]  fields  =  clazz.getDeclaredFields();  builder.addChangeListener(this);  }	  if(excludeFields    ==    null)    {    for(int    i    =    0;    i    <    excludeFields.length;    i++)    {    String[]    fields    =    clazz.getDeclaredFields();    builder.addChangeListener(this);    }    	non-compiled	[CE]  incompatible  types	119	None	replace
426	[BUG]  [BUGGY]  if(excludeFields!=  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  String[]  fields  =  clazz.getDeclaredFields();  builder.addChangeListener(this);  }  [CE]  cannot  find  symbol  fields  [FE]                        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields!=  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  String[]  fields  =  clazz.getDeclaredFields();  builder.addChangeListener(this);  }  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(excludeFields!=  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  String[]  fields  =  clazz.getDeclaredFields();  builder.addChangeListener(this);  }	  if(excludeFields    ==    null)    {    for(int    i    =    0;    i    <    excludeFields.length;    i++)    {    String[]    fields    =    clazz.getDeclaredFields();    builder.addChangeListener(this);    }    	non-compiled	[CE]  cannot  find  symbol  fields	119	None	replace
427	[BUG]  [BUGGY]  if(object  ==  null)  {  if(isRegistered(object)||  excludeFields!=  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null)  {  if(isRegistered(object)||  excludeFields!=  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null)  {  if(isRegistered(object)||  excludeFields!=  null)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||    excludeFields!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
428	[BUG]  [BUGGY]  FieldValue  object  =  clazz.getDeclaredFields(field);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  FieldValue  object  =  clazz.getDeclaredFields(field);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	FieldValue  object  =  clazz.getDeclaredFields(field);	  FieldValue    object    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
429	[BUG]  [BUGGY]  int  objectValue  =  clazz.getValue(excludeFields,  iConstant);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  int  objectValue  =  clazz.getValue(excludeFields,  iConstant);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	int  objectValue  =  clazz.getValue(excludeFields,  iConstant);	  int    objectValue    =    clazz.getValue(excludeFields);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
430	[BUG]  [BUGGY]  Object  objectValue  =  clazz.getValue(excludeFields);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Object  objectValue  =  clazz.getValue(excludeFields);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Object  objectValue  =  clazz.getValue(excludeFields);	  int    objectValue    =    clazz.getValue(excludeFields);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
431	[BUG]  [BUGGY]  if(!excludeFields  ||!isRegistered(object))  {  [CE]  bad  operand  type  String[]  for  unary  operator  '!'  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!excludeFields  ||!isRegistered(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!excludeFields  ||!isRegistered(object))  {	  if(!useTransients    ||!isRegistered(object))    {    	non-compiled	[CE]  bad  operand  type  String[]  for  unary  operator  '!'	130	None	replace
432	[BUG]  [BUGGY]  if(object  ==  null  ||!isRegistered(object))  {  Object  object  ==  null  ||!isRegistered(object))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||!isRegistered(object))  {  Object  object  ==  null  ||!isRegistered(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||!isRegistered(object))    {    Object  object  ==  null  ||!isRegistered(object))  {	  	non-compiled	[CE]  ';'  expected	64	None	add
433	[BUG]  [BUGGY]  if(object  ==  null  ||!isRegistered(object))  {  AssertionFailedError  <  AssertionFailedError  >>  String[]  excludeFields)  {  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||!isRegistered(object))  {  AssertionFailedError  <  AssertionFailedError  >>  String[]  excludeFields)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||!isRegistered(object))    {    AssertionFailedError  <  AssertionFailedError  >>  String[]  excludeFields)  {	  	non-compiled	[CE]  not  a  statement	64	None	add
434	[BUG]  [BUGGY]  if(object  ==  null  ||!isRegistered(object))  {  AssertionFailedError  <  AssertionFailedError  >=  String[]  excludeFields)  {  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||!isRegistered(object))  {  AssertionFailedError  <  AssertionFailedError  >=  String[]  excludeFields)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||!isRegistered(object))    {    AssertionFailedError  <  AssertionFailedError  >=  String[]  excludeFields)  {	  	non-compiled	[CE]  not  a  statement	64	None	add
435	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||!excludeFields.length)  {  [CE]  bad  operand  type  int  for  unary  operator  '!'  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||!excludeFields.length)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||  excludeFields  ==  null  ||!excludeFields.length)  {	  if(isRegistered(object)||    excludeFields    ==    null    ||!useTransients)    {    	non-compiled	[CE]  bad  operand  type  int  for  unary  operator  '!'	31	None	replace
436	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  excludeFields  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(object  ==  null  ||  excludeFields  ==  null)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||    excludeFields    ==    null    ||    this.useTransients)    {    	compilable	  [FE]  AssertionFailedError  	121	4	replace
437	[BUG]  [BUGGY]  if(object  ==  null  ||  excludeFields  ==  null)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  excludeFields  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  excludeFields  ==  null)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||    excludeFields    ==    null    ||    this.useTransients)    {    	compilable	  [FE]  AssertionFailedError  	121	4	replace
438	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRegistered(object)&&  excludeFields  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(object  ==  null  ||  isRegistered(object)&&  excludeFields  ==  null)  {	  if(isRegistered(object)&&    excludeFields    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	35	1	replace
439	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(object)&&  excludeFields  ==  null)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRegistered(object)&&  excludeFields  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  isRegistered(object)&&  excludeFields  ==  null)  {	  if(isRegistered(object)&&    excludeFields    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	35	1	replace
440	[BUG]  [BUGGY]  String[]  excludeFields  =  clazz.getEmptyFields();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  String[]  excludeFields  =  clazz.getEmptyFields();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	String[]  excludeFields  =  clazz.getEmptyFields();	  String[]    excludeFields    =    clazz.getIncludeFields();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
441	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaredObject(1);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Object  object  =  clazz.getDeclaredObject(1);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Object  object  =  clazz.getDeclaredObject(1);	  Object    object    =    clazz.getDeclaredObject(0);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
442	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields.length  ==  0)  {  If(!isRegistered(object)||  excludeFields.length  ==  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields.length  ==  0)  {  If(!isRegistered(object)||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||    excludeFields.length    ==    0)    {    If(!isRegistered(object)||  excludeFields.length  ==  0)  {	  	non-compiled	[CE]  ';'  expected	46	None	add
443	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields.length  ==  0)  {  if(!isRegistered(object)||  excludeFields.length  ==  0  ||  object  ==  null)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields.length  ==  0)  {  if(!isRegistered(object)||  excludeFields.length  ==  0  ||  object  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||    excludeFields.length    ==    0)    {    if(!isRegistered(object)||  excludeFields.length  ==  0  ||  object  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
444	[BUG]  [BUGGY]  if(object  ==  null  ||  excludeFields.length  ==  0)  {  If(isRegistered(object)||  excludeFields.length  ==  0)  {  [CE]  ';'  expected  [FE]        NullPointerException      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  excludeFields.length  ==  0)  {  If(isRegistered(object)||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  excludeFields.length  ==  0)  {  If(isRegistered(object)||  excludeFields.length  ==  0)  {	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    If(isRegistered(object)||    excludeFields.length    ==    0)    {    	non-compiled	[CE]  ';'  expected	108	None	replace
445	[BUG]  [BUGGY]  if(object  ==  null  ||  excludeFields.length  ==  0)  {  If(!isRegistered(object)||  excludeFields.length  ==  0)  {  [CE]  ';'  expected  [FE]          NullPointerException      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  excludeFields.length  ==  0)  {  If(!isRegistered(object)||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  excludeFields.length  ==  0)  {  If(!isRegistered(object)||  excludeFields.length  ==  0)  {	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    If(isRegistered(object)||    excludeFields.length    ==    0)    {    	non-compiled	[CE]  ';'  expected	108	None	replace
446	[BUG]  [BUGGY]  if(object  ==  null  ||  hasRegistered(object))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  hasRegistered(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  hasRegistered(object))  {	  if(object    ==    null    ||    isRegistered(object))    {    if(object    ==    null    ||    hasRegistered(object))    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
447	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getDeclaringClass();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Class  <?>  object  =  clazz.getDeclaringClass();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Class  <?>  object  =  clazz.getDeclaringClass();	  Class    <?>    object    =    clazz.getName();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
448	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        NullPointerException      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields!=  null)  {  if(isRegistered(object)||  excludeFields.length  ==  0)  {  return;  }  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(excludeFields!=  null)  {  if(isRegistered(object)||  excludeFields.length  ==  0)  {  return;  }	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    if(isRegistered(object)||    excludeFields.length    ==    0)    {    return;    }    	compilable	  [FE]  StackOverflowError  	120	2	replace
449	[BUG]  [BUGGY]  if(excludeFields!=  null)  {  if(isRegistered(object)||  excludeFields.length  ==  0)  {  return;  }  [FE]  StackOverflowError  [FE]        NullPointerException      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields!=  null)  {  if(isRegistered(object)||  excludeFields.length  ==  0)  {  return;  }  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(excludeFields!=  null)  {  if(isRegistered(object)||  excludeFields.length  ==  0)  {  return;  }	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    if(isRegistered(object)||    excludeFields.length    ==    0)    {    return;    }    	compilable	  [FE]  StackOverflowError  	120	2	replace
450	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients)  {  if(isRegistered(object)||  excludeFields.length  ==  0)  {  return;  }  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(!useTransients)  {  if(isRegistered(object)||  excludeFields.length  ==  0)  {  return;  }	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    if(isRegistered(object)||    excludeFields.length    ==    0)    {    return;    }    	compilable	  [FE]  NullPointerException  	120	4	replace
451	[BUG]  [BUGGY]  if(!useTransients)  {  if(isRegistered(object)||  excludeFields.length  ==  0)  {  return;  }  [FE]  NullPointerException  [FE]          NullPointerException      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients)  {  if(isRegistered(object)||  excludeFields.length  ==  0)  {  return;  }  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!useTransients)  {  if(isRegistered(object)||  excludeFields.length  ==  0)  {  return;  }	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    if(isRegistered(object)||    excludeFields.length    ==    0)    {    return;    }    	compilable	  [FE]  NullPointerException  	120	4	replace
452	[BUG]  [BUGGY]  if(!isRegistered(object)||!Modifier.isTransient(field.getModifiers()))  {  [CE]  cannot  find  symbol  field  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||!Modifier.isTransient(field.getModifiers()))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||!Modifier.isTransient(field.getModifiers()))  {	  if(!isRegistered(object))    {    if(!isRegistered(object)    ||!useTransients)    {    	non-compiled	[CE]  cannot  find  symbol  field	28	None	replace
453	[BUG]  [BUGGY]  if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  if(!useTransients  &&  isRegistered(object)||  excludedFields  ==  null  ||  excludeFields.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  if(!useTransients  &&  isRegistered(object)||  excludedFields  ==  null  ||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!useTransients    &&    isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    if(!useTransients  &&  isRegistered(object)||  excludedFields  ==  null  ||  excludeFields.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	86	None	add
454	[BUG]  [BUGGY]  Object  objectValue  =  clazz.getImplicitReturnValue();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Object  objectValue  =  clazz.getImplicitReturnValue();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Object  objectValue  =  clazz.getImplicitReturnValue();	  int    objectValue    =    clazz.getImplicitReturnValue();    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
455	[BUG]  [BUGGY]  int  objectValue  =  clazz.getImplicitReturnValue()  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  int  objectValue  =  clazz.getImplicitReturnValue()  +  1;  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	int  objectValue  =  clazz.getImplicitReturnValue()  +  1;	  int    objectValue    =    clazz.getImplicitReturnValue();    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
456	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(excludeFields)||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(!isRegistered(excludeFields)||  excludeFields.length  ==  0)  {	  if(!isRegistered(object)||    excludeFields.length!=    0)    {    	compilable	  [FE]  AssertionFailedError  	69	4	replace
457	[BUG]  [BUGGY]  if(!isRegistered(excludeFields)||  excludeFields.length  ==  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(excludeFields)||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(excludeFields)||  excludeFields.length  ==  0)  {	  if(!isRegistered(object)||    excludeFields.length!=    0)    {    	compilable	  [FE]  AssertionFailedError  	69	4	replace
458	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(excludeFields))  {  AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.toString();  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRegistered(excludeFields))  {  AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.toString();  }  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  isRegistered(excludeFields))  {  AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.toString();  }	  if(object    ==    null    ||    isRegistered(object))    {    AssertionFailedError    <    String>    object    =    excludeFields    ==    null?    null    :    excludeFields.toString();    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
459	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields.length  <  2)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(object  ==  null  ||  isRegistered(object)||  excludeFields.length  <  2)  {	  if(object    ==    null    ||    isRegistered(object))    {    AssertionFailedError    <    AssertionFailedError    >=    String[]    excludeFields)    {    	compilable	  [FE]  NullPointerException  	115	4	replace
460	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields.length  <  2)  {  [FE]  NullPointerException  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields.length  <  2)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  isRegistered(object)||  excludeFields.length  <  2)  {	  if(object    ==    null    ||    isRegistered(object))    {    AssertionFailedError    <    AssertionFailedError    >=    String[]    excludeFields)    {    	compilable	  [FE]  NullPointerException  	115	4	replace
461	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaringClass(excludeFields);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Object  object  =  clazz.getDeclaringClass(excludeFields);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Object  object  =  clazz.getDeclaringClass(excludeFields);	  Object    object    =    clazz.getDeclaringClass();    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
462	[BUG]  [BUGGY]  if(isRegistered(object)&&  excludeFields.length  ==  0)  {  if(isRegistered(object)&&  excludeFields.length  ==  0  ||  useTransients)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)&&  excludeFields.length  ==  0)  {  if(isRegistered(object)&&  excludeFields.length  ==  0  ||  useTransients)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)&&    excludeFields.length    ==    0)    {    if(isRegistered(object)&&  excludeFields.length  ==  0  ||  useTransients)  {	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
463	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  if(!isRegistered(object)||  excludedFields  ==  null  ||  excludeFields.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  if(!isRegistered(object)||  excludedFields  ==  null  ||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    if(!isRegistered(object)||  excludedFields  ==  null  ||  excludeFields.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	74	None	add
464	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(excludeFields))  {  Object  object  ==  null  ||  isRegistered(excludeFields))  {  [CE]  ';'  expected  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRegistered(excludeFields))  {  Object  object  ==  null  ||  isRegistered(excludeFields))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||    isRegistered(excludeFields))    {    Object  object  ==  null  ||  isRegistered(excludeFields))  {	  	non-compiled	[CE]  ';'  expected	90	None	add
465	[BUG]  [BUGGY]  if(object  ==  null)  {  If(!isRegistered(object))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null)  {  If(!isRegistered(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null)  {  If(!isRegistered(object))  {	  if(!isRegistered(object))    {    If(!isRegistered(object))    {    	non-compiled	[CE]  ';'  expected	27	None	replace
466	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  isRegistered(object))  {  if(object  ==  null  ||  isRegistered(Object.class))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(fieldValue  ==  null  ||  isRegistered(object))  {  if(object  ==  null  ||  isRegistered(Object.class))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(fieldValue  ==  null  ||  isRegistered(object))  {  if(object  ==  null  ||  isRegistered(Object.class))  {	  if(object    ==    null    ||    isRegistered(object))    {    if(object    ==    null    ||    isRegistered(Object.class))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
467	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields!=  null)  {  Object  object  ==  null  ||  isRegistered(object)||  excludeFields!=  null)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields!=  null)  {  Object  object  ==  null  ||  isRegistered(object)||  excludeFields!=  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||    isRegistered(object)||    excludeFields!=    null)    {    Object  object  ==  null  ||  isRegistered(object)||  excludeFields!=  null)  {	  	non-compiled	[CE]  ';'  expected	92	None	add
468	[BUG]  [BUGGY]  if(object  ==  null)  {  if(isRegistered(object)||  excludedFields  ==  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null)  {  if(isRegistered(object)||  excludedFields  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null)  {  if(isRegistered(object)||  excludedFields  ==  null)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||    excludedFields    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
469	[BUG]  [BUGGY]  if(object  ==  null)  {  if(isRegistered(object)||  excludeFields  ==  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null)  {  if(isRegistered(object)||  excludeFields  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null)  {  if(isRegistered(object)||  excludeFields  ==  null)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||    excludeFields    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
470	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields.length!=  0)  {  if(!isRegistered(object)||  excludeFields.length  >=  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields.length!=  0)  {  if(!isRegistered(object)||  excludeFields.length  >=  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||    excludeFields.length!=    0)    {    if(!isRegistered(object)||  excludeFields.length  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
471	[BUG]  [BUGGY]  if(object  ==  null  ||  excludeFields.length  ==  0)  {  If(object  ==  null  ||  isRegistered(object))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  excludeFields.length  ==  0)  {  If(object  ==  null  ||  isRegistered(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  excludeFields.length  ==  0)  {  If(object  ==  null  ||  isRegistered(object))  {	  if(object    ==    null    ||    isRegistered(object))    {    If(object    ==    null    ||    isRegistered(object))    {    	non-compiled	[CE]  ';'  expected	12	None	replace
472	[BUG]  [BUGGY]  if(object  ==  null  ||  excludeFields  ==  null)  {  If(object  ==  null  ||  isRegistered(object))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  excludeFields  ==  null)  {  If(object  ==  null  ||  isRegistered(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  excludeFields  ==  null)  {  If(object  ==  null  ||  isRegistered(object))  {	  if(object    ==    null    ||    isRegistered(object))    {    If(object    ==    null    ||    isRegistered(object))    {    	non-compiled	[CE]  ';'  expected	12	None	replace
473	[BUG]  [BUGGY]  if(excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  If(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  If(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  If(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {	  if(isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    If(isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    	non-compiled	[CE]  ';'  expected	23	None	replace
474	[BUG]  [BUGGY]  if(object  ==  null  ||  excludeFields.length  ==  0)  {  If(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  excludeFields.length  ==  0)  {  If(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  excludeFields.length  ==  0)  {  If(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {	  if(isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    If(isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    	non-compiled	[CE]  ';'  expected	23	None	replace
475	[BUG]  [BUGGY]  Object  objectValue  =  clazz.getKey();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Object  objectValue  =  clazz.getKey();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Object  objectValue  =  clazz.getKey();	  int    objectValue    =    clazz.getKey();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
476	[BUG]  [BUGGY]  if(object!=  null  ||!isRegistered(object))  {  AssertionFailedError  <  AssertionFailedError  >>  String[]  excludeFields)  {  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object!=  null  ||!isRegistered(object))  {  AssertionFailedError  <  AssertionFailedError  >>  String[]  excludeFields)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object!=    null    ||!isRegistered(object))    {    AssertionFailedError  <  AssertionFailedError  >>  String[]  excludeFields)  {	  	non-compiled	[CE]  not  a  statement	66	None	add
477	[BUG]  [BUGGY]  if(object!=  null  ||!isRegistered(object))  {  AssertionFailedError  <  AssertionFailedError  >=  String[]  excludeFields)  {  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object!=  null  ||!isRegistered(object))  {  AssertionFailedError  <  AssertionFailedError  >=  String[]  excludeFields)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object!=    null    ||!isRegistered(object))    {    AssertionFailedError  <  AssertionFailedError  >=  String[]  excludeFields)  {	  	non-compiled	[CE]  not  a  statement	66	None	add
478	[BUG]  [BUGGY]  Object  object  =  clazz.getImplicitPrototype();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Object  object  =  clazz.getImplicitPrototype();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Object  object  =  clazz.getImplicitPrototype();	  Object    object    =    clazz.getSuperclass();    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
479	[BUG]  [BUGGY]  String[]  excludeFields  =  clazz.getAssignedInterfaces();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  String[]  excludeFields  =  clazz.getAssignedInterfaces();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	String[]  excludeFields  =  clazz.getAssignedInterfaces();	  String[]    excludeFields    =    clazz.getInterfaces();    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
480	[BUG]  [BUGGY]  String[]  excludeFields  =  clazz.getReferenceNames();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  String[]  excludeFields  =  clazz.getReferenceNames();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	String[]  excludeFields  =  clazz.getReferenceNames();	  String[]    excludeFields    =    clazz.getInterfaces();    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
481	[BUG]  [BUGGY]  Object  object  =  clazz.getImplicitReference();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Object  object  =  clazz.getImplicitReference();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Object  object  =  clazz.getImplicitReference();	  Object    object    =    clazz.getReferenceName();    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
482	[BUG]  [BUGGY]  if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null)  {  if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null  ||  object  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null)  {  if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null  ||  object  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!useTransients    &&    isRegistered(object)||    excludeFields    ==    null)    {    if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null  ||  object  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	104	None	add
483	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields  ==  null)  {  if(!isRegistered(object)||  excludeFields  ==  null  ||  object  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields  ==  null)  {  if(!isRegistered(object)||  excludeFields  ==  null  ||  object  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||    excludeFields    ==    null)    {    if(!isRegistered(object)||  excludeFields  ==  null  ||  object  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
484	[BUG]  [BUGGY]  if(isRegistered(object)&&  excludeFields  ==  null)  {  if(isRegistered(object)&&  excludeFields  ==  null  ||  this.useTransients)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)&&  excludeFields  ==  null)  {  if(isRegistered(object)&&  excludeFields  ==  null  ||  this.useTransients)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)&&    excludeFields    ==    null)    {    if(isRegistered(object)&&  excludeFields  ==  null  ||  this.useTransients)  {	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
485	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {  If(!isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {  If(!isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||    excludeFields!=    null    ||    excludeFields.length    ==    0)    {    If(!isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {	  	non-compiled	[CE]  ';'  expected	19	None	add
486	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFieldValues();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFieldValues();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Field[]  fields  =  clazz.getDeclaredFieldValues();	  Field[]    fields    =    clazz.getSuperclassFieldValues();    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
487	[BUG]  [BUGGY]  if(excludeFields  ==  null  ||  isRegistered(object))  {  AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.get(object);  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields  ==  null  ||  isRegistered(object))  {  AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.get(object);  }  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(excludeFields  ==  null  ||  isRegistered(object))  {  AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.get(object);  }	  if(object    ==    null    ||    isRegistered(object))    {    AssertionFailedError    <    String>    object    =    excludeFields    ==    null?    null    :    excludeFields.get(object);    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
488	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||!useTransients)  {  if(!isRegistered(object)||  excludeFields  ==  null  ||!useTransients)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||!useTransients)  {  if(!isRegistered(object)||  excludeFields  ==  null  ||!useTransients)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||    excludeFields    ==    null    ||!useTransients)    {    if(!isRegistered(object)||  excludeFields  ==  null  ||!useTransients)  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
489	[BUG]  [BUGGY]  Object  object  =  clazz.getOwnerClass();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Object  object  =  clazz.getOwnerClass();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Object  object  =  clazz.getOwnerClass();	  Object    object    =    clazz.getSuperclass();    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
490	[BUG]  [BUGGY]  if(object  ==  null  ||!isRegistered(object)||  excludeFields)  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||!isRegistered(object)||  excludeFields)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||!isRegistered(object)||  excludeFields)  {	  if(!isRegistered(object))    {    if(!isRegistered(object)    ||    useTransients)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	131	None	replace
491	[BUG]  [BUGGY]  if(!isRegistered(object)&&  excludeFields.length  ==  0)  {  if(!isRegistered(object)&&  excludedFields.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)&&  excludeFields.length  ==  0)  {  if(!isRegistered(object)&&  excludedFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)&&    excludeFields.length    ==    0)    {    if(!isRegistered(object)&&  excludedFields.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
492	[BUG]  [BUGGY]  if(!isRegistered(object)&&  excludeFields.length  ==  0)  {  ||!isRegistered(object)&&  excludeFields.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)&&  excludeFields.length  ==  0)  {  ||!isRegistered(object)&&  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)&&    excludeFields.length    ==    0)    {    ||!isRegistered(object)&&  excludeFields.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
493	[BUG]  [BUGGY]  if(!isRegistered(object)&&  excludeFields.length  ==  0)  {  if(!isRegistered(object)&&  excludeFields.length  ==  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)&&  excludeFields.length  ==  0)  {  if(!isRegistered(object)&&  excludeFields.length  ==  0)  {  return;  }  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)&&    excludeFields.length    ==    0)    {    if(!isRegistered(object)&&  excludeFields.length  ==  0)  {  return;  }	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
494	[BUG]  [BUGGY]  if(excludeFields  ==  null  ||  isRegistered(objectValue))  {  [CE]  cannot  find  symbol  objectValue  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields  ==  null  ||  isRegistered(objectValue))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(excludeFields  ==  null  ||  isRegistered(objectValue))  {	  if(object    ==    null    ||    isRegistered(excludeFields))    {    	non-compiled	[CE]  cannot  find  symbol  objectValue	91	None	replace
495	[BUG]  [BUGGY]  if(object  ==  null  ||  isAllowed(excludeFields))  {  [CE]  cannot  find  symbol  [FE]      StackOverflowError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isAllowed(excludeFields))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  isAllowed(excludeFields))  {	  if(object    ==    null    ||    isRegistered(excludeFields))    {    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
496	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getImplicitPrototype();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Class  <?>  object  =  clazz.getImplicitPrototype();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Class  <?>  object  =  clazz.getImplicitPrototype();	  Class    <?>    object    =    clazz.getName();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
497	[BUG]  [BUGGY]  if(excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  If(isRegistered(object)||  excludeFields.length  ==  0)  {  [CE]  ';'  expected  [FE]        NullPointerException      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  If(isRegistered(object)||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  If(isRegistered(object)||  excludeFields.length  ==  0)  {	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    If(isRegistered(object)||    excludeFields.length    ==    0)    {    	non-compiled	[CE]  ';'  expected	108	None	replace
498	[BUG]  [BUGGY]  Object  object  =  clazz.getDeclaredObject(iTotal);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Object  object  =  clazz.getDeclaredObject(iTotal);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Object  object  =  clazz.getDeclaredObject(iTotal);	  Object    object    =    clazz.getDeclaredObject(0);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
499	[BUG]  [BUGGY]  if(object  ==  null  ||  excludeFields.length  ==  0)  {  if(object  ==  null  ||  excludedFields.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  excludeFields.length  ==  0)  {  if(object  ==  null  ||  excludedFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||    excludeFields.length    ==    0)    {    if(object  ==  null  ||  excludedFields.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
500	[BUG]  [BUGGY]  Object  object  =  clazz.getName();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Object  object  =  clazz.getName();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Object  object  =  clazz.getName();	  Object    object    =    clazz.getReferenceName();    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
501	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields.length  ==  0  ||  excludeFields.length  ==  0  ||  isRegistered(object)||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(excludeFields.length  ==  0  ||  excludeFields.length  ==  0  ||  isRegistered(object)||  excludeFields.length  ==  0)  {	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    if(isRegistered(object)||    excludeFields.length    ==    0    ||    isRegistered(object)||    excludeFields.length    ==    0)    {    	compilable	  [FE]  NullPointerException  	8	4	replace
502	[BUG]  [BUGGY]  if(excludeFields.length  ==  0  ||  excludeFields.length  ==  0  ||  isRegistered(object)||  excludeFields.length  ==  0)  {  [FE]  NullPointerException  [FE]            NullPointerException      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields.length  ==  0  ||  excludeFields.length  ==  0  ||  isRegistered(object)||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(excludeFields.length  ==  0  ||  excludeFields.length  ==  0  ||  isRegistered(object)||  excludeFields.length  ==  0)  {	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    if(isRegistered(object)||    excludeFields.length    ==    0    ||    isRegistered(object)||    excludeFields.length    ==    0)    {    	compilable	  [FE]  NullPointerException  	8	4	replace
503	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              NullPointerException      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields.length  ==  0  ||  isRegistered(object)||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(excludeFields.length  ==  0  ||  isRegistered(object)||  excludeFields.length  ==  0)  {	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    if(isRegistered(object)||    excludeFields.length    ==    0    ||    isRegistered(object)||    excludeFields.length    ==    0)    {    	compilable	  [FE]  NullPointerException  	8	4	replace
504	[BUG]  [BUGGY]  if(excludeFields.length  ==  0  ||  isRegistered(object)||  excludeFields.length  ==  0)  {  [FE]  NullPointerException  [FE]              NullPointerException      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields.length  ==  0  ||  isRegistered(object)||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(excludeFields.length  ==  0  ||  isRegistered(object)||  excludeFields.length  ==  0)  {	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    if(isRegistered(object)||    excludeFields.length    ==    0    ||    isRegistered(object)||    excludeFields.length    ==    0)    {    	compilable	  [FE]  NullPointerException  	8	4	replace
505	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields!=  null)  {  if(isRegistered(object)||  excludedFields!=  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludeFields!=  null)  {  if(isRegistered(object)||  excludedFields!=  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||    excludeFields!=    null)    {    if(isRegistered(object)||  excludedFields!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	140	None	add
506	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(object,  excludeFields))  {  [CE]  method  isRegistered  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRegistered(object,  excludeFields))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  isRegistered(object,  excludeFields))  {	  if(object    ==    null    ||    isRegistered(object))    {    AssertionFailedError    <    AssertionFailedError    >>    String[]    excludeFields)    {    	non-compiled	[CE]  method  isRegistered  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	114	None	replace
507	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields.length  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields.length  <  =  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  isRegistered(object)||  excludeFields.length  <  =  0)  {	  if(object    ==    null    ||    isRegistered(object))    {    AssertionFailedError    <    AssertionFailedError    >>    String[]    excludeFields)    {    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
508	[BUG]  [BUGGY]  if(isRegistered(object)&&  excludeFields.length  ==  0)  {  if(isRegistered(object)&&  excludeFields.length  ==  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)&&  excludeFields.length  ==  0)  {  if(isRegistered(object)&&  excludeFields.length  ==  0)  {  return;  }  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)&&    excludeFields.length    ==    0)    {    if(isRegistered(object)&&  excludeFields.length  ==  0)  {  return;  }	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
509	[BUG]  [BUGGY]  if(isRegistered(object)&&  excludeFields.length  ==  0)  {  ||  isRegistered(object)&&  excludeFields.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)&&  excludeFields.length  ==  0)  {  ||  isRegistered(object)&&  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)&&    excludeFields.length    ==    0)    {    ||  isRegistered(object)&&  excludeFields.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
510	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getDeclaredClass(fieldValue,  excludeFields);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Class  <?>  object  =  clazz.getDeclaredClass(fieldValue,  excludeFields);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Class  <?>  object  =  clazz.getDeclaredClass(fieldValue,  excludeFields);	  Class    <?>    object    =    clazz.getDeclaredClass(excludeFields);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
511	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields  ==  null  ||  object  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(object  ==  null  ||  isRegistered(object)||  excludeFields  ==  null  ||  object  ==  null)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||    excludeFields    ==    null    ||    object    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	94	4	replace
512	[BUG]  [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields  ==  null  ||  object  ==  null)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRegistered(object)||  excludeFields  ==  null  ||  object  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  isRegistered(object)||  excludeFields  ==  null  ||  object  ==  null)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||    excludeFields    ==    null    ||    object    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	94	4	replace
513	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields  ==  null  ||  isRegistered(object)||  excludeFields.length  ==  1)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(excludeFields  ==  null  ||  isRegistered(object)||  excludeFields.length  ==  1)  {	  if(isRegistered(object)||    excludeFields.length    ==    1)    {    	compilable	  [FE]  AssertionFailedError  	49	4	replace
514	[BUG]  [BUGGY]  if(excludeFields  ==  null  ||  isRegistered(object)||  excludeFields.length  ==  1)  {  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields  ==  null  ||  isRegistered(object)||  excludeFields.length  ==  1)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(excludeFields  ==  null  ||  isRegistered(object)||  excludeFields.length  ==  1)  {	  if(isRegistered(object)||    excludeFields.length    ==    1)    {    	compilable	  [FE]  AssertionFailedError  	49	4	replace
515	[BUG]  [BUGGY]  if(object!=  null  ||!isRegistered(object))  {  If(object!=  null  ||!isRegistered(object))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object!=  null  ||!isRegistered(object))  {  If(object!=  null  ||!isRegistered(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object!=    null    ||!isRegistered(object))    {    If(object!=  null  ||!isRegistered(object))  {	  	non-compiled	[CE]  ';'  expected	66	None	add
516	[BUG]  [BUGGY]  if(object!=  null  ||!isRegistered(object))  {  AssertionFailedError  <  String>  object  =  excludeFields!=  null  &&!isRegistered(object);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object!=  null  ||!isRegistered(object))  {  AssertionFailedError  <  String>  object  =  excludeFields!=  null  &&!isRegistered(object);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object!=    null    ||!isRegistered(object))    {    AssertionFailedError  <  String>  object  =  excludeFields!=  null  &&!isRegistered(object);	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
517	[BUG]  [BUGGY]  if(excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  if(excludeFields  ==  null  ||  excludedFields.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  if(excludeFields  ==  null  ||  excludedFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    if(excludeFields  ==  null  ||  excludedFields.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	88	None	add
518	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields  ==  null  ||  excludeFields  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(excludeFields  ==  null  ||  excludeFields  ==  null)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||    excludedFields    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	123	4	replace
519	[BUG]  [BUGGY]  if(excludeFields  ==  null  ||  excludeFields  ==  null)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields  ==  null  ||  excludeFields  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(excludeFields  ==  null  ||  excludeFields  ==  null)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||    excludedFields    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	123	4	replace
520	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length!=  0)  {  if(isRegistered(object)||  excludedFields  ==  null  ||  excludeFields.length!=  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length!=  0)  {  if(isRegistered(object)||  excludedFields  ==  null  ||  excludeFields.length!=  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length!=    0)    {    if(isRegistered(object)||  excludedFields  ==  null  ||  excludeFields.length!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
521	[BUG]  [BUGGY]  if(object  ==  null  ||  excludeFields!=  null)  {  If(object  ==  null  ||  isRegistered(object))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  excludeFields!=  null)  {  If(object  ==  null  ||  isRegistered(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  excludeFields!=  null)  {  If(object  ==  null  ||  isRegistered(object))  {	  if(object    ==    null    ||    isRegistered(object))    {    If(object    ==    null    ||    isRegistered(object))    {    	non-compiled	[CE]  ';'  expected	12	None	replace
522	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields.length!=  1)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(!isRegistered(object)||  excludeFields.length!=  1)  {	  if(!isRegistered(object)||    excludeFields.length!=    0)    {    	compilable	  [FE]  AssertionFailedError  	69	4	replace
523	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields.length!=  1)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields.length!=  1)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||  excludeFields.length!=  1)  {	  if(!isRegistered(object)||    excludeFields.length!=    0)    {    	compilable	  [FE]  AssertionFailedError  	69	4	replace
524	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields.length  ==  1)  {  if(isRegistered(object)||  excludeFields.length  ==  1)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludeFields.length  ==  1)  {  if(isRegistered(object)||  excludeFields.length  ==  1)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||    excludeFields.length    ==    1)    {    if(isRegistered(object)||  excludeFields.length  ==  1)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
525	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields.length  ==  1)  {  if(isRegistered(object)||  excludeFields.length  ==  1)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludeFields.length  ==  1)  {  if(isRegistered(object)||  excludeFields.length  ==  1)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||    excludeFields.length    ==    1)    {    if(isRegistered(object)||  excludeFields.length  ==  1)  {  throw  new  IllegalStateException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
526	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields  ==  null)  {  if(!isRegistered(object)||  excludeFields  ==  null  ||!useTransients)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields  ==  null)  {  if(!isRegistered(object)||  excludeFields  ==  null  ||!useTransients)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||    excludeFields    ==    null)    {    if(!isRegistered(object)||  excludeFields  ==  null  ||!useTransients)  {	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
527	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields  ==  null)  {  if(!isRegistered(object)||  excludedFields  ==  null)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields  ==  null)  {  if(!isRegistered(object)||  excludedFields  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||    excludeFields    ==    null)    {    if(!isRegistered(object)||  excludedFields  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
528	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients  &&  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(!useTransients  &&  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {	  if(!useTransients    &&    isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	87	4	replace
529	[BUG]  [BUGGY]  if(!useTransients  &&  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients  &&  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!useTransients  &&  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {	  if(!useTransients    &&    isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	87	4	replace
530	[BUG]  [BUGGY]  if(object  ==  null  ||  excludeFields.length  ==  0  ||  object.getName().indexOf('$')  ==  -1)  {  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  excludeFields.length  ==  0  ||  object.getName().indexOf('$')  ==  -1)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  excludeFields.length  ==  0  ||  object.getName().indexOf('$')  ==  -1)  {	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    if(isRegistered(object)||    excludeFields.length    ==    0    ||    object.getName().indexOf('$')    ==    -1)    {    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
531	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients  &&  isRegistered(object)&&  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(!useTransients  &&  isRegistered(object)&&  excludeFields.length  ==  0)  {	  if(isRegistered(object)&&    excludeFields.length    ==    0)    {    	compilable	  [FE]  NullPointerException  	51	1	replace
532	[BUG]  [BUGGY]  if(!useTransients  &&  isRegistered(object)&&  excludeFields.length  ==  0)  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients  &&  isRegistered(object)&&  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!useTransients  &&  isRegistered(object)&&  excludeFields.length  ==  0)  {	  if(isRegistered(object)&&    excludeFields.length    ==    0)    {    	compilable	  [FE]  NullPointerException  	51	1	replace
533	[BUG]  [BUGGY]  Field[]  object  =  clazz.getReturnType();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Field[]  object  =  clazz.getReturnType();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Field[]  object  =  clazz.getReturnType();	  Field[]    object    =    clazz.getSuperclass();    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
534	[BUG]  [BUGGY]  if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  if(!usedTransients  &&  isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  if(!usedTransients  &&  isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!useTransients    &&    isRegistered(object)||    excludeFields    ==    null    ||    excludeFields.length    ==    0)    {    if(!usedTransients  &&  isRegistered(object)||  excludeFields  ==  null  ||  excludeFields.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	86	None	add
535	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  if(isRegistered(object)||  excludeFields.length  ==  0)  {  return;  }  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  if(isRegistered(object)||  excludeFields.length  ==  0)  {  return;  }	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    if(isRegistered(object)||    excludeFields.length    ==    0)    {    return;    }    	compilable	  [FE]  NullPointerException  	120	4	replace
536	[BUG]  [BUGGY]  if(excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  if(isRegistered(object)||  excludeFields.length  ==  0)  {  return;  }  [FE]  NullPointerException  [FE]        NullPointerException      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  if(isRegistered(object)||  excludeFields.length  ==  0)  {  return;  }  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  if(isRegistered(object)||  excludeFields.length  ==  0)  {  return;  }	  if(isRegistered(object)||    excludeFields.length    ==    0)    {    if(isRegistered(object)||    excludeFields.length    ==    0)    {    return;    }    	compilable	  [FE]  NullPointerException  	120	4	replace
537	[BUG]  [BUGGY]  if(!useTransients  ||!isRegistered(object))  {  if(!excludeFields  ||!isRegistered(object))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients  ||!isRegistered(object))  {  if(!excludeFields  ||!isRegistered(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!useTransients    ||!isRegistered(object))    {    if(!excludeFields  ||!isRegistered(object))  {	  	non-compiled	[CE]  illegal  start  of  expression	129	None	add
538	[BUG]  [BUGGY]  if(!useTransients  ||!isRegistered(object))  {  if(!exclusionFields  ||!isRegistered(object))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients  ||!isRegistered(object))  {  if(!exclusionFields  ||!isRegistered(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!useTransients    ||!isRegistered(object))    {    if(!exclusionFields  ||!isRegistered(object))  {	  	non-compiled	[CE]  illegal  start  of  expression	129	None	add
539	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(!useTransients)  {	  if(!isRegistered(object))    {    If(!isRegistered(object))    {    	compilable	  [FE]  AssertionFailedError  	27	4	replace
540	[BUG]  [BUGGY]  if(!useTransients)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!useTransients)  {	  if(!isRegistered(object))    {    If(!isRegistered(object))    {    	compilable	  [FE]  AssertionFailedError  	27	4	replace
541	[BUG]  [BUGGY]  Field[]  object  =  clazz.getSuperclassesArray();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Field[]  object  =  clazz.getSuperclassesArray();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Field[]  object  =  clazz.getSuperclassesArray();	  Field[]    object    =    clazz.getSuperclasses();    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
542	[BUG]  [BUGGY]  if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null)  {  if(!usedTransients  &&  isRegistered(object)||  excludeFields  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients  &&  isRegistered(object)||  excludeFields  ==  null)  {  if(!usedTransients  &&  isRegistered(object)||  excludeFields  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!useTransients    &&    isRegistered(object)||    excludeFields    ==    null)    {    if(!usedTransients  &&  isRegistered(object)||  excludeFields  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	104	None	add
543	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(fieldValue,  excludeFields);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(fieldValue,  excludeFields);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Field[]  fields  =  clazz.getDeclaredFields(fieldValue,  excludeFields);	  Field[]    fields    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
544	[BUG]  [BUGGY]  if(excludeFields  ==  null  ||  excludeFields  ==  null  ||  this.useTransients)  {  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields  ==  null  ||  excludeFields  ==  null  ||  this.useTransients)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(excludeFields  ==  null  ||  excludeFields  ==  null  ||  this.useTransients)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||    excludeFields    ==    null    ||    this.useTransients)    {    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	121	None	replace
545	[BUG]  [BUGGY]  if(!isRegistered(object)&&  excludeFields  ==  null)  {  if(!isRegistered(object)&&  excludedFields  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)&&  excludeFields  ==  null)  {  if(!isRegistered(object)&&  excludedFields  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)&&    excludeFields    ==    null)    {    if(!isRegistered(object)&&  excludedFields  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	106	None	add
546	[BUG]  [BUGGY]  if(!isRegistered(object)&&  excludeFields  ==  null)  {  if(!isRegistered(object)&&  excludeFields  ==  null  ||  this.useTransients)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)&&  excludeFields  ==  null)  {  if(!isRegistered(object)&&  excludeFields  ==  null  ||  this.useTransients)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)&&    excludeFields    ==    null)    {    if(!isRegistered(object)&&  excludeFields  ==  null  ||  this.useTransients)  {	  	non-compiled	[CE]  illegal  start  of  expression	106	None	add
547	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields  ==  null  ||!isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(excludeFields  ==  null  ||!isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {	  if(!isRegistered(object)||    excludeFields!=    null    ||    excludeFields.length    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	20	4	replace
548	[BUG]  [BUGGY]  if(excludeFields  ==  null  ||!isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields  ==  null  ||!isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(excludeFields  ==  null  ||!isRegistered(object)||  excludeFields!=  null  ||  excludeFields.length  ==  0)  {	  if(!isRegistered(object)||    excludeFields!=    null    ||    excludeFields.length    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	20	4	replace
549	[BUG]  [BUGGY]  FieldValue[]  fields  =  clazz.getSuperclasses();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  FieldValue[]  fields  =  clazz.getSuperclasses();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	FieldValue[]  fields  =  clazz.getSuperclasses();	  FieldValue[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
550	[BUG]  [BUGGY]  FieldValue[]  fields  =  clazz.getSuperClassValues();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  FieldValue[]  fields  =  clazz.getSuperClassValues();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	FieldValue[]  fields  =  clazz.getSuperClassValues();	  FieldValue[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
551	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getDeclaredFields(excludeFields,  field);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Class  <?>  object  =  clazz.getDeclaredFields(excludeFields,  field);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Class  <?>  object  =  clazz.getDeclaredFields(excludeFields,  field);	  Class    <?>    object    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
552	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||!isRegistered(object)||  object  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(object  ==  null  ||!isRegistered(object)||  object  ==  null)  {	  if(!isRegistered(object))    {    if(!isRegistered(object)    ||    object    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	29	4	replace
553	[BUG]  [BUGGY]  if(object  ==  null  ||!isRegistered(object)||  object  ==  null)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||!isRegistered(object)||  object  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||!isRegistered(object)||  object  ==  null)  {	  if(!isRegistered(object))    {    if(!isRegistered(object)    ||    object    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	29	4	replace
554	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)&&  object  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(!isRegistered(object)&&  object  ==  null)  {	  if(!isRegistered(object))    {    if(!isRegistered(object)    ||    object    ==    null)    {    	compilable	  [FE]  StackOverflowError  	29	1	replace
555	[BUG]  [BUGGY]  if(!isRegistered(object)&&  object  ==  null)  {  [FE]  StackOverflowError  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)&&  object  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)&&  object  ==  null)  {	  if(!isRegistered(object))    {    if(!isRegistered(object)    ||    object    ==    null)    {    	compilable	  [FE]  StackOverflowError  	29	1	replace
556	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields.length  ==  0)  {  if(!isRegistered(object)&|  excludeFields.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields.length  ==  0)  {  if(!isRegistered(object)&|  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||    excludeFields.length    ==    0)    {    if(!isRegistered(object)&|  excludeFields.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
557	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields.length  ==  0)  {  if(!isRegistered(object)||  excludeFields.length  ==  0  ||  object!=  null)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields.length  ==  0)  {  if(!isRegistered(object)||  excludeFields.length  ==  0  ||  object!=  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||    excludeFields.length    ==    0)    {    if(!isRegistered(object)||  excludeFields.length  ==  0  ||  object!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
558	[BUG]  [BUGGY]  if(!useTransients  &&  isRegistered(object,  excludeFields)||  excludeFields  ==  null)  {  [CE]  method  isRegistered  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!useTransients  &&  isRegistered(object,  excludeFields)||  excludeFields  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!useTransients  &&  isRegistered(object,  excludeFields)||  excludeFields  ==  null)  {	  if(!useTransients    &&    isRegistered(object)||    excludeFields    ==    null)    {    	non-compiled	[CE]  method  isRegistered  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	105	None	replace
559	[BUG]  [BUGGY]  FieldValue  object  =  clazz.getDeclaredFields(fieldValues);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  FieldValue  object  =  clazz.getDeclaredFields(fieldValues);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	FieldValue  object  =  clazz.getDeclaredFields(fieldValues);	  FieldValue    object    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
560	[BUG]  [BUGGY]  if(object  ==  null  ||  isCollection())  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isCollection())  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  isCollection())  {	  if(object    ==    null    ||    isRegistered(object))    {    if(object!=    null    ||    isRegistered(object))    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
561	[BUG]  [BUGGY]  AssertionFailedError  <  String>  object  =  excludeFields!=  null?  null  :  excludeFields.toString();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  AssertionFailedError  <  String>  object  =  excludeFields!=  null?  null  :  excludeFields.toString();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	AssertionFailedError  <  String>  object  =  excludeFields!=  null?  null  :  excludeFields.toString();	  if(object    ==    null    ||    isRegistered(object))    {    AssertionFailedError    <    String>    object    =    excludeFields    ==    null?    null    :    excludeFields.toString();    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
562	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||!useTransients)  {  if(isRegistered(object)||  excludedFields  ==  null  ||!useTransients)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||!useTransients)  {  if(isRegistered(object)||  excludedFields  ==  null  ||!useTransients)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||    excludeFields    ==    null    ||!useTransients)    {    if(isRegistered(object)||  excludedFields  ==  null  ||!useTransients)  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
563	[BUG]  [BUGGY]  if(object  ==  null  ||  constructor(object))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  constructor(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  constructor(object))  {	  if(object    ==    null    ||    isConstructor(object))    {    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
564	[BUG]  [BUGGY]  FieldValue  object  =  excludeFields!=  null?  clazz.getDeclaredFields()  :  null;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  FieldValue  object  =  excludeFields!=  null?  clazz.getDeclaredFields()  :  null;  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	FieldValue  object  =  excludeFields!=  null?  clazz.getDeclaredFields()  :  null;	  FieldValue    object    =    excludeFields.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
565	[BUG]  [BUGGY]  FieldValue  object  =  excludeFields!=  null?  clazz.getDeclaredFields()  :  excludeFields;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  FieldValue  object  =  excludeFields!=  null?  clazz.getDeclaredFields()  :  excludeFields;  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	FieldValue  object  =  excludeFields!=  null?  clazz.getDeclaredFields()  :  excludeFields;	  FieldValue    object    =    excludeFields.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
566	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||!isRegistered(object)&&  excludeFields  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(object  ==  null  ||!isRegistered(object)&&  excludeFields  ==  null)  {	  if(!isRegistered(object)&&    excludeFields    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	107	4	replace
567	[BUG]  [BUGGY]  if(object  ==  null  ||!isRegistered(object)&&  excludeFields  ==  null)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||!isRegistered(object)&&  excludeFields  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||!isRegistered(object)&&  excludeFields  ==  null)  {	  if(!isRegistered(object)&&    excludeFields    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	107	4	replace
568	[BUG]  [BUGGY]  FieldValue  object  =  clazz.findField(fieldValues);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  FieldValue  object  =  clazz.findField(fieldValues);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	FieldValue  object  =  clazz.findField(fieldValues);	  FieldValue    object    =    clazz.findField(excludeFields);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
569	[BUG]  [BUGGY]  FieldValue  object  =  clazz.findField(field);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  FieldValue  object  =  clazz.findField(field);  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	FieldValue  object  =  clazz.findField(field);	  FieldValue    object    =    clazz.findField(excludeFields);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
570	[BUG]  [BUGGY]  Object  object  =  clazz.getReturningObject();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Object  object  =  clazz.getReturningObject();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Object  object  =  clazz.getReturningObject();	  Object    object    =    clazz.getDeclaringObject();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
571	[BUG]  [BUGGY]  if(!isRegistered(object)||!isRestricted(object))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||!isRestricted(object))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||!isRestricted(object))  {	  if(!isRegistered(object))    {    ||!isRegistered(object))    {    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
572	[BUG]  [BUGGY]  if(object  ==  null  ||  isVarArgs())  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isVarArgs())  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  isVarArgs())  {	  if(object    ==    null    ||    isRegistered(object))    {    Object    object    ==    null    ||    isRegistered(object))    {    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
573	[BUG]  [BUGGY]  char  objectValue  =  excludeFields.getValue();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  char  objectValue  =  excludeFields.getValue();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	char  objectValue  =  excludeFields.getValue();	  int    objectValue    =    excludeFields.getValue();    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
574	[BUG]  [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||!excludeFields)  {  [CE]  bad  operand  type  String[]  for  unary  operator  '!'  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(isRegistered(object)||  excludeFields  ==  null  ||!excludeFields)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(isRegistered(object)||  excludeFields  ==  null  ||!excludeFields)  {	  if(isRegistered(object)||    excludeFields    ==    null    ||!useTransients)    {    	non-compiled	[CE]  bad  operand  type  String[]  for  unary  operator  '!'	31	None	replace
575	[BUG]  [BUGGY]  AssertionFailedError  <  String>  object  =  excludeFields!=  null?  null  :  excludeFields.get(object);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  AssertionFailedError  <  String>  object  =  excludeFields!=  null?  null  :  excludeFields.get(object);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	AssertionFailedError  <  String>  object  =  excludeFields!=  null?  null  :  excludeFields.get(object);	  if(object    ==    null    ||    isRegistered(object))    {    AssertionFailedError    <    String>    object    =    excludeFields    ==    null?    null    :    excludeFields.get(object);    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
576	[BUG]  [BUGGY]  if(object  ==  null  ||  isRestricted(object,  excludeFields))  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRestricted(object,  excludeFields))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  isRestricted(object,  excludeFields))  {	  if(object    ==    null    ||    isRestricted(object))    {    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
577	[BUG]  [BUGGY]  if(object  ==  null  ||  isRestricted(object,  fieldValue))  {  [CE]  cannot  find  symbol  fieldValue  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  isRestricted(object,  fieldValue))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  isRestricted(object,  fieldValue))  {	  if(object    ==    null    ||    isRestricted(object))    {    	non-compiled	[CE]  cannot  find  symbol  fieldValue	43	None	replace
578	[BUG]  [BUGGY]  if(object  ==  null  ||!isRegistered(object))  {  AssertionFailedError  <  String>  object  =  excludeFields  ==  null  ||!isRegistered(object);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||!isRegistered(object))  {  AssertionFailedError  <  String>  object  =  excludeFields  ==  null  ||!isRegistered(object);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||!isRegistered(object))    {    AssertionFailedError  <  String>  object  =  excludeFields  ==  null  ||!isRegistered(object);	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
579	[BUG]  [BUGGY]  if(object  ==  null  ||!isRegistered(object))  {  AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.toString();  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||!isRegistered(object))  {  AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.toString();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||!isRegistered(object))    {    AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.toString();	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
580	[BUG]  [BUGGY]  if(object  ==  null  ||!isRegistered(object))  {  AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.get(object);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||!isRegistered(object))  {  AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.get(object);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object    ==    null    ||!isRegistered(object))    {    AssertionFailedError  <  String>  object  =  excludeFields  ==  null?  null  :  excludeFields.get(object);	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
581	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  excludeFields  ==  null  ||  useTransients)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(object  ==  null  ||  excludeFields  ==  null  ||  useTransients)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||    excludeFields    ==    null    ||    useTransients)    {    	compilable	  [FE]  AssertionFailedError  	40	4	replace
582	[BUG]  [BUGGY]  if(object  ==  null  ||  excludeFields  ==  null  ||  useTransients)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  excludeFields  ==  null  ||  useTransients)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  excludeFields  ==  null  ||  useTransients)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||    excludeFields    ==    null    ||    useTransients)    {    	compilable	  [FE]  AssertionFailedError  	40	4	replace
583	[BUG]  [BUGGY]  Object  object  =  clazz.getSimpleObject();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Object  object  =  clazz.getSimpleObject();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Object  object  =  clazz.getSimpleObject();	  Object    object    =    clazz.getAssignedObject();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
584	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields  ==  null  ||  isRegistered(object)||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(excludeFields  ==  null  ||  isRegistered(object)||  excludeFields.length  ==  0)  {	  if(object    ==    null    ||    isRegistered(object)||    excludeFields.length    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	128	4	replace
585	[BUG]  [BUGGY]  if(excludeFields  ==  null  ||  isRegistered(object)||  excludeFields.length  ==  0)  {  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(excludeFields  ==  null  ||  isRegistered(object)||  excludeFields.length  ==  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(excludeFields  ==  null  ||  isRegistered(object)||  excludeFields.length  ==  0)  {	  if(object    ==    null    ||    isRegistered(object)||    excludeFields.length    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	128	4	replace
586	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields.length!=  0)  {  if(!isRegistered(object)||  excludedFields.length!=  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields.length!=  0)  {  if(!isRegistered(object)||  excludedFields.length!=  0)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||    excludeFields.length!=    0)    {    if(!isRegistered(object)||  excludedFields.length!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
587	[BUG]  [BUGGY]  if(!isRegistered(object)||  excludeFields!=  null)  {  if(!isRegistered(object)||  excludedFields!=  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(!isRegistered(object)||  excludeFields!=  null)  {  if(!isRegistered(object)||  excludedFields!=  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(!isRegistered(object)||    excludeFields!=    null)    {    if(!isRegistered(object)||  excludedFields!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	98	None	add
588	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||!isRegistered(object.getClass()))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(object  ==  null  ||!isRegistered(object.getClass()))  {	  if(object    ==    null    ||!isRegistered(object))    {    	compilable	  [FE]  AssertionFailedError  	65	4	replace
589	[BUG]  [BUGGY]  if(object  ==  null  ||!isRegistered(object.getClass()))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||!isRegistered(object.getClass()))  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||!isRegistered(object.getClass()))  {	  if(object    ==    null    ||!isRegistered(object))    {    	compilable	  [FE]  AssertionFailedError  	65	4	replace
590	[BUG]  [BUGGY]  if(object  ==  null  ||  excludeFields  ==  null)  {  If(isRegistered(object)||  excludeFields  ==  null)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  excludeFields  ==  null)  {  If(isRegistered(object)||  excludeFields  ==  null)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  excludeFields  ==  null)  {  If(isRegistered(object)||  excludeFields  ==  null)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    If(isRegistered(object)||    excludeFields    ==    null)    {    	non-compiled	[CE]  ';'  expected	41	None	replace
591	[BUG]  [BUGGY]  String[]  excludeFields  =  clazz.getImplicitReturn();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  String[]  excludeFields  =  clazz.getImplicitReturn();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	String[]  excludeFields  =  clazz.getImplicitReturn();	  String[]    excludeFields    =    clazz.getAssignedFields();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
592	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  excludeFields  ==  null  ||!useTransients)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	if(object  ==  null  ||  excludeFields  ==  null  ||!useTransients)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||    excludeFields    ==    null    ||!useTransients)    {    	compilable	  [FE]  AssertionFailedError  	122	4	replace
593	[BUG]  [BUGGY]  if(object  ==  null  ||  excludeFields  ==  null  ||!useTransients)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  if(object  ==  null  ||  excludeFields  ==  null  ||!useTransients)  {  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	if(object  ==  null  ||  excludeFields  ==  null  ||!useTransients)  {	  if(isRegistered(object)||    excludeFields    ==    null)    {    if(isRegistered(object)||    excludeFields    ==    null    ||!useTransients)    {    	compilable	  [FE]  AssertionFailedError  	122	4	replace
594	[BUG]  [BUGGY]  String[]  excludeFields  =  clazz.getSuperclasses();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  String[]  excludeFields  =  clazz.getSuperclasses();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	String[]  excludeFields  =  clazz.getSuperclasses();	  String[]    excludeFields    =    clazz.getInterfaces();    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
595	[BUG]  [BUGGY]  String[]  excludeFields  =  clazz.getDeclaredInterfaces();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  String[]  excludeFields  =  clazz.getDeclaredInterfaces();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	String[]  excludeFields  =  clazz.getDeclaredInterfaces();	  String[]    excludeFields    =    clazz.getInterfaces();    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
596	[BUG]  [BUGGY]  Object  object  =  clazz.getReturningClass();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  Object  object  =  clazz.getReturningClass();  [BUGGY]      if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	Object  object  =  clazz.getReturningClass();	  Object    object    =    clazz.getDeclaringClass();    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
597	[BUG]  [BUGGY]  FieldValue[]  fields  =  clazz.getSuperclassValues();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {      [BUGGY]  FieldValue[]  fields  =  clazz.getSuperclassValues();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	FieldValue[]  fields  =  clazz.getSuperclassValues();	  FieldValue[]    fields    =    clazz.getFieldValues();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
