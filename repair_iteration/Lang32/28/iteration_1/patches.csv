bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(object  ==  null  ||  testTransients,  reflectUpToClass)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  testTransients,  reflectUpToClass)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	if(object  ==  null  ||  testTransients,  reflectUpToClass)  {	  if(object    ==    null    ||    testTransients)    {    	non-compiled	[CE]  ')'  expected	9	None	replace
2	[BUG]  [BUGGY]  if(object  ==  null  ||  mockUpToClass)  {  [CE]  cannot  find  symbol  mockUpToClass  [FE]      AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  mockUpToClass)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	if(object  ==  null  ||  mockUpToClass)  {	  if(object    ==    null    ||    testTransients)    {    	non-compiled	[CE]  cannot  find  symbol  mockUpToClass	9	None	replace
3	[BUG]  [BUGGY]  int  iConstant  =  initialNonZeroOddNumber  +  multiplierNonZeroOddNumber;  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  int  iConstant  =  initialNonZeroOddNumber  +  multiplierNonZeroOddNumber;  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	int  iConstant  =  initialNonZeroOddNumber  +  multiplierNonZeroOddNumber;	      int    iConstant    =    multiplierNonZeroOddNumber    +    reflectUpToClass;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
4	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  initialNonZeroOddNumber;  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  initialNonZeroOddNumber;  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  initialNonZeroOddNumber;	      int    iConstant    =    multiplierNonZeroOddNumber    +    reflectUpToClass;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
5	[BUG]  [BUGGY]  int  iConstant  =  reflectUpToClass  +  multiplierNonZeroOddNumber;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  int  iConstant  =  reflectUpToClass  +  multiplierNonZeroOddNumber;  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	int  iConstant  =  reflectUpToClass  +  multiplierNonZeroOddNumber;	      int    iConstant    =    multiplierNonZeroOddNumber    +    reflectUpToClass;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
6	[BUG]  [BUGGY]  if(object  ==  null  ||  initialNonZeroOddNumber  ==  multiplierNonZeroOddNumber)  {  if(object  ==  null  ||  initialNonZeroOddNumber  ==  multiplierNonZeroOddNumber)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  initialNonZeroOddNumber  ==  multiplierNonZeroOddNumber)  {  if(object  ==  null  ||  initialNonZeroOddNumber  ==  multiplierNonZeroOddNumber)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	if(object    ==    null    ||    initialNonZeroOddNumber    ==    multiplierNonZeroOddNumber)    {    if(object  ==  null  ||  initialNonZeroOddNumber  ==  multiplierNonZeroOddNumber)  {	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
7	[BUG]  [BUGGY]  if(object  ==  null  ||  initialNonZeroOddNumber  ==  multiplierNonZeroOddNumber)  {  if(object!=  null  ||  initialNonZeroOddNumber  ==  multiplierNonZeroOddNumber)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  initialNonZeroOddNumber  ==  multiplierNonZeroOddNumber)  {  if(object!=  null  ||  initialNonZeroOddNumber  ==  multiplierNonZeroOddNumber)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	if(object    ==    null    ||    initialNonZeroOddNumber    ==    multiplierNonZeroOddNumber)    {    if(object!=  null  ||  initialNonZeroOddNumber  ==  multiplierNonZeroOddNumber)  {	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
8	[BUG]  [BUGGY]  if(object  ==  null  ||  initialNonZeroOddNumber  ==  multiplierNonZeroOddNumber)  {  if(object  ==  null  ||  initialNonZeroOddNumber!=  multiplierNonZeroOddNumber)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  initialNonZeroOddNumber  ==  multiplierNonZeroOddNumber)  {  if(object  ==  null  ||  initialNonZeroOddNumber!=  multiplierNonZeroOddNumber)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	if(object    ==    null    ||    initialNonZeroOddNumber    ==    multiplierNonZeroOddNumber)    {    if(object  ==  null  ||  initialNonZeroOddNumber!=  multiplierNonZeroOddNumber)  {	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
9	[BUG]  [BUGGY]  if(object  ==  null  ||  initialNonZeroOddNumber  ==  multiplierNonZeroOddNumber)  {  If(object  ==  null  ||  initialNonZeroOddNumber  ==  multiplierNonZeroOddNumber)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  initialNonZeroOddNumber  ==  multiplierNonZeroOddNumber)  {  If(object  ==  null  ||  initialNonZeroOddNumber  ==  multiplierNonZeroOddNumber)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	if(object    ==    null    ||    initialNonZeroOddNumber    ==    multiplierNonZeroOddNumber)    {    If(object  ==  null  ||  initialNonZeroOddNumber  ==  multiplierNonZeroOddNumber)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
10	[BUG]  [BUGGY]  Class  <?>  clazz  =  object.getRawClass();  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  Class  <?>  clazz  =  object.getRawClass();  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	Class  <?>  clazz  =  object.getRawClass();	      Class    <?>    clazz    =    object.getClass();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
11	[BUG]  [BUGGY]  Class  <?>  clazz  =  object.getReturnType();  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  Class  <?>  clazz  =  object.getReturnType();  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	Class  <?>  clazz  =  object.getReturnType();	      Class    <?>    clazz    =    object.getClass();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
12	[BUG]  [BUGGY]  Class  <?>  clazz  =  object.getSuperclass();  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  Class  <?>  clazz  =  object.getSuperclass();  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	Class  <?>  clazz  =  object.getSuperclass();	      Class    <?>    clazz    =    object.getClass();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
13	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  ReflectionUtilities.reflectUpToClass(object,  multiplierNonZeroOddNumber);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  ReflectionUtilities.reflectUpToClass(object,  multiplierNonZeroOddNumber);  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  ReflectionUtilities.reflectUpToClass(object,  multiplierNonZeroOddNumber);	      int    iConstant    =    multiplierNonZeroOddNumber    +    ReflectionUtilities.reflectUpToClass(initialNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
14	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  ReflectionUtilities.reflectUpToClass(object,  initialNonZeroOddNumber);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  ReflectionUtilities.reflectUpToClass(object,  initialNonZeroOddNumber);  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  ReflectionUtilities.reflectUpToClass(object,  initialNonZeroOddNumber);	      int    iConstant    =    multiplierNonZeroOddNumber    +    ReflectionUtilities.reflectUpToClass(initialNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
15	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  ReflectionUtilities.reflectUpToClass(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  ReflectionUtilities.reflectUpToClass(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  ReflectionUtilities.reflectUpToClass(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber);	      int    iConstant    =    multiplierNonZeroOddNumber    +    ReflectionUtilities.reflectUpToClass(initialNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
16	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  ReflectionUtilities.reflectUpToClass(object,  initialNonZeroOddNumber,  testTransients,  excludeFields);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  ReflectionUtilities.reflectUpToClass(object,  initialNonZeroOddNumber,  testTransients,  excludeFields);  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  ReflectionUtilities.reflectUpToClass(object,  initialNonZeroOddNumber,  testTransients,  excludeFields);	      int    iConstant    =    multiplierNonZeroOddNumber    +    ReflectionUtilities.reflectUpToClass(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    object,    testTransients,    excludeFields);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
17	[BUG]  [BUGGY]  int  iConstant  =  object  +  ReflectionUtilities.reflectUpToClass(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  int  iConstant  =  object  +  ReflectionUtilities.reflectUpToClass(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	int  iConstant  =  object  +  ReflectionUtilities.reflectUpToClass(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);	      int    iConstant    =    multiplierNonZeroOddNumber    +    ReflectionUtilities.reflectUpToClass(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    object,    testTransients,    excludeFields);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
18	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  ReflectionUtilities.reflectUpToClass(object,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  ReflectionUtilities.reflectUpToClass(object,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  ReflectionUtilities.reflectUpToClass(object,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);	      int    iConstant    =    multiplierNonZeroOddNumber    +    ReflectionUtilities.reflectUpToClass(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    object,    testTransients,    excludeFields);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
19	[BUG]  [BUGGY]  Integer  iConstant  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  Integer  iConstant  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	Integer  iConstant  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);	      Integer    iConstant    =    getInitialNonZeroOddNumber(multierNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
20	[BUG]  [BUGGY]  Integer  multierNonZeroOddNumber  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  Integer  multierNonZeroOddNumber  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	Integer  multierNonZeroOddNumber  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);	      Integer    iConstant    =    getInitialNonZeroOddNumber(multierNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
21	[BUG]  [BUGGY]  Integer  multiplierNonZeroOddNumber  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  Integer  multiplierNonZeroOddNumber  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	Integer  multiplierNonZeroOddNumber  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);	      Integer    iConstant    =    getInitialNonZeroOddNumber(multierNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
22	[BUG]  [BUGGY]  Integer  iConstant  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multierNonZeroOddNumber);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  Integer  iConstant  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multierNonZeroOddNumber);  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	Integer  iConstant  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multierNonZeroOddNumber);	      Integer    iConstant    =    getInitialNonZeroOddNumber(multierNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
23	[BUG]  [BUGGY]  if(object  ==  null  ||  multiplierNonZeroOddNumber  >=  object)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  multiplierNonZeroOddNumber  >=  object)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	if(object  ==  null  ||  multiplierNonZeroOddNumber  >=  object)  {	  if(object    ==    null    ||    initialNonZeroOddNumber    >=    multiplierNonZeroOddNumber)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	22	None	replace
24	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  multiplierNonZeroOddNumber  >=  initialNonZeroOddNumber)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	add	if(object  ==  null  ||  multiplierNonZeroOddNumber  >=  initialNonZeroOddNumber)  {	  if(object    ==    null    ||    initialNonZeroOddNumber    >=    multiplierNonZeroOddNumber)    {    	compilable	  [FE]  IllegalArgumentException  	22	4	replace
25	[BUG]  [BUGGY]  if(object  ==  null  ||  multiplierNonZeroOddNumber  >=  initialNonZeroOddNumber)  {  [FE]  IllegalArgumentException  [FE]      AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  multiplierNonZeroOddNumber  >=  initialNonZeroOddNumber)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	if(object  ==  null  ||  multiplierNonZeroOddNumber  >=  initialNonZeroOddNumber)  {	  if(object    ==    null    ||    initialNonZeroOddNumber    >=    multiplierNonZeroOddNumber)    {    	compilable	  [FE]  IllegalArgumentException  	22	4	replace
26	[BUG]  [BUGGY]  if(object  ==  null  ||  multiplierNonZeroOddNumber  >=  target)  {  [CE]  cannot  find  symbol  target  [FE]        AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  multiplierNonZeroOddNumber  >=  target)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	if(object  ==  null  ||  multiplierNonZeroOddNumber  >=  target)  {	  if(object    ==    null    ||    initialNonZeroOddNumber    >=    multiplierNonZeroOddNumber)    {    	non-compiled	[CE]  cannot  find  symbol  target	22	None	replace
27	[BUG]  [BUGGY]  if(object  ==  null  ||  multiplierNonZeroOddNumber!=  object)  {  [CE]  incomparable  types:  int  and  T  [FE]          AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  multiplierNonZeroOddNumber!=  object)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	if(object  ==  null  ||  multiplierNonZeroOddNumber!=  object)  {	  if(object    ==    null    ||    initialNonZeroOddNumber    >=    multiplierNonZeroOddNumber)    {    	non-compiled	[CE]  incomparable  types:  int  and  T	22	None	replace
28	[BUG]  [BUGGY]  int  iConstant  =  initialNonZeroOddNumber  +  reflectUpToClass.getName();  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  int  iConstant  =  initialNonZeroOddNumber  +  reflectUpToClass.getName();  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	int  iConstant  =  initialNonZeroOddNumber  +  reflectUpToClass.getName();	      int    iConstant    =    multiplierNonZeroOddNumber    +    reflectUpToClass.getName();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
29	[BUG]  [BUGGY]  int  iConstant  =  initialNonZeroOddNumber  +  multiplierNonZeroOddNumber.getName();  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  int  iConstant  =  initialNonZeroOddNumber  +  multiplierNonZeroOddNumber.getName();  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	int  iConstant  =  initialNonZeroOddNumber  +  multiplierNonZeroOddNumber.getName();	      int    iConstant    =    multiplierNonZeroOddNumber    +    reflectUpToClass.getName();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
30	[BUG]  [BUGGY]  int  iConstant  =  reflectUpToClass  +  multiplierNonZeroOddNumber.getName();  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  int  iConstant  =  reflectUpToClass  +  multiplierNonZeroOddNumber.getName();  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	int  iConstant  =  reflectUpToClass  +  multiplierNonZeroOddNumber.getName();	      int    iConstant    =    multiplierNonZeroOddNumber    +    reflectUpToClass.getName();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
31	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    IllegalArgumentException    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object!=  null  &&  testTransients)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	add	if(object!=  null  &&  testTransients)  {	  if(object!=    null    ||    testTransients)    {    	compilable	  [FE]  NullPointerException  	13	3	replace
32	[BUG]  [BUGGY]  if(object!=  null  &&  testTransients)  {  [FE]  NullPointerException  [FE]    IllegalArgumentException    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object!=  null  &&  testTransients)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	if(object!=  null  &&  testTransients)  {	  if(object!=    null    ||    testTransients)    {    	compilable	  [FE]  NullPointerException  	13	3	replace
33	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      IllegalArgumentException    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  &&  testTransients)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	add	if(object  ==  null  &&  testTransients)  {	  if(object!=    null    ||    testTransients)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
34	[BUG]  [BUGGY]  if(object  ==  null  &&  testTransients)  {  [FE]  AssertionFailedError  [FE]      IllegalArgumentException    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  &&  testTransients)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	if(object  ==  null  &&  testTransients)  {	  if(object!=    null    ||    testTransients)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
35	[BUG]  [BUGGY]  if(object  ==  null  ||  testTransients)  {  if(object  ==  null  ||  testTransients)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  testTransients)  {  if(object  ==  null  ||  testTransients)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	if(object    ==    null    ||    testTransients)    {    if(object  ==  null  ||  testTransients)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
36	[BUG]  [BUGGY]  if(object  ==  null  ||  testTransients)  {  if(object!=  null  ||  testTransients)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  testTransients)  {  if(object!=  null  ||  testTransients)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	if(object    ==    null    ||    testTransients)    {    if(object!=  null  ||  testTransients)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
37	[BUG]  [BUGGY]  if(object  ==  null  ||  testTransients)  {  If(object  ==  null  ||  testTransients)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  testTransients)  {  If(object  ==  null  ||  testTransients)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	if(object    ==    null    ||    testTransients)    {    If(object  ==  null  ||  testTransients)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
38	[BUG]  [BUGGY]  if(object  ==  null  ||  testTransients)  {  if(object  >=  null  ||  testTransients)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  testTransients)  {  if(object  >=  null  ||  testTransients)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	if(object    ==    null    ||    testTransients)    {    if(object  >=  null  ||  testTransients)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
39	[BUG]  [BUGGY]      int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber;  int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber;  [CE]  variable  iConstant  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]    AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]      int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber;  int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber;  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	        int    iConstant    =    multiplierNonZeroOddNumber    -    initialNonZeroOddNumber;    int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber;	  	non-compiled	[CE]  variable  iConstant  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	2	None	add
40	[BUG]  [BUGGY]      int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber;  int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]      int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber;  int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber);  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	        int    iConstant    =    multiplierNonZeroOddNumber    -    initialNonZeroOddNumber;    int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber);	  	non-compiled	[CE]  ';'  expected	2	None	add
41	[BUG]  [BUGGY]      int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber;  Int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]      int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber;  Int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber;  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	        int    iConstant    =    multiplierNonZeroOddNumber    -    initialNonZeroOddNumber;    Int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber;	  	non-compiled	[CE]  cannot  find  symbol	2	None	add
42	[BUG]  [BUGGY]      int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber;  int  iConstant  =  multiplierNonZeroOddNumber  -  InitialNonZeroOddNumber;  [CE]  variable  iConstant  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]          AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]      int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber;  int  iConstant  =  multiplierNonZeroOddNumber  -  InitialNonZeroOddNumber;  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	        int    iConstant    =    multiplierNonZeroOddNumber    -    initialNonZeroOddNumber;    int  iConstant  =  multiplierNonZeroOddNumber  -  InitialNonZeroOddNumber;	  	non-compiled	[CE]  variable  iConstant  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	2	None	add
43	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber  +  testTransients,  excludeFields);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber  +  testTransients,  excludeFields);  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber  +  testTransients,  excludeFields);	      int    iConstant    =    multiplierNonZeroOddNumber    -    initialNonZeroOddNumber    +    testTransients;    	non-compiled	[CE]  ';'  expected	5	None	replace
44	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber  +  testTransients.length;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber  +  testTransients.length;  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber  +  testTransients.length;	      int    iConstant    =    multiplierNonZeroOddNumber    -    initialNonZeroOddNumber    +    testTransients;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
45	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber  +  testTransients,  object;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber  +  testTransients,  object;  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber  +  testTransients,  object;	      int    iConstant    =    multiplierNonZeroOddNumber    -    initialNonZeroOddNumber    +    testTransients;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
46	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber  +  testTransients,  excludeFields;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber  +  testTransients,  excludeFields;  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber  +  testTransients,  excludeFields;	      int    iConstant    =    multiplierNonZeroOddNumber    -    initialNonZeroOddNumber    +    testTransients;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
47	[BUG]  [BUGGY]  if(object!=  null)  {  if(object!=  null)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object!=  null)  {  if(object!=  null)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	if(object!=    null)    {    if(object!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
48	[BUG]  [BUGGY]  if(object!=  null)  {  if(object  ==  null)  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object!=  null)  {  if(object  ==  null)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	if(object!=    null)    {    if(object  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
49	[BUG]  [BUGGY]  if(object!=  null)  {  if(object  >=  null)  {  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object!=  null)  {  if(object  >=  null)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	if(object!=    null)    {    if(object  >=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
50	[BUG]  [BUGGY]  if(object!=  null)  {  if(object  >>  null)  {  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object!=  null)  {  if(object  >>  null)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	if(object!=    null)    {    if(object  >>  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
51	[BUG]  [BUGGY]  if(object!=  null)  {  If(object!=  null)  {  [CE]  ';'  expected  [FE]            NullPointerException    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object!=  null)  {  If(object!=  null)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	if(object!=    null)    {    If(object!=  null)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
52	[BUG]  [BUGGY]  int  iConstant  =  initialNonZeroOddNumber  +  reflectUpToClass.length;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  int  iConstant  =  initialNonZeroOddNumber  +  reflectUpToClass.length;  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	int  iConstant  =  initialNonZeroOddNumber  +  reflectUpToClass.length;	      int    iConstant    =    multiplierNonZeroOddNumber    +    reflectUpToClass.length;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
53	[BUG]  [BUGGY]  int  iConstant  =  initialNonZeroOddNumber  +  multiplierNonZeroOddNumber.length;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  int  iConstant  =  initialNonZeroOddNumber  +  multiplierNonZeroOddNumber.length;  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	int  iConstant  =  initialNonZeroOddNumber  +  multiplierNonZeroOddNumber.length;	      int    iConstant    =    multiplierNonZeroOddNumber    +    reflectUpToClass.length;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
54	[BUG]  [BUGGY]  int  iConstant  =  reflectUpToClass  +  multiplierNonZeroOddNumber.length;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  int  iConstant  =  reflectUpToClass  +  multiplierNonZeroOddNumber.length;  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	int  iConstant  =  reflectUpToClass  +  multiplierNonZeroOddNumber.length;	      int    iConstant    =    multiplierNonZeroOddNumber    +    reflectUpToClass.length;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
55	[BUG]  [BUGGY]  int  iConstant  =  initialNonZeroOddNumber;  [CE]  invalid  method  declaration;  return  type  required  [FE]    AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  int  iConstant  =  initialNonZeroOddNumber;  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	int  iConstant  =  initialNonZeroOddNumber;	      int    iConstant    =    multiplierNonZeroOddNumber;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
56	[BUG]  [BUGGY]  int  iConstant  =  tokenNonZeroOddNumber;  [CE]  invalid  method  declaration;  return  type  required  [FE]      AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  int  iConstant  =  tokenNonZeroOddNumber;  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	int  iConstant  =  tokenNonZeroOddNumber;	      int    iConstant    =    multiplierNonZeroOddNumber;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
57	[BUG]  [BUGGY]  if(object!=  null  ||  testTransients)  {  if(object!=  null  ||  testTransients)  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object!=  null  ||  testTransients)  {  if(object!=  null  ||  testTransients)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	if(object!=    null    ||    testTransients)    {    if(object!=  null  ||  testTransients)  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
58	[BUG]  [BUGGY]  if(object!=  null  ||  testTransients)  {  if(object  ==  null  ||  testTransients)  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object!=  null  ||  testTransients)  {  if(object  ==  null  ||  testTransients)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	if(object!=    null    ||    testTransients)    {    if(object  ==  null  ||  testTransients)  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
59	[BUG]  [BUGGY]  if(object!=  null  ||  testTransients)  {  if(object  >=  null  ||  testTransients)  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object!=  null  ||  testTransients)  {  if(object  >=  null  ||  testTransients)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	if(object!=    null    ||    testTransients)    {    if(object  >=  null  ||  testTransients)  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
60	[BUG]  [BUGGY]  if(object!=  null  ||  testTransients)  {  if(object  >>  null  ||  testTransients)  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object!=  null  ||  testTransients)  {  if(object  >>  null  ||  testTransients)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	if(object!=    null    ||    testTransients)    {    if(object  >>  null  ||  testTransients)  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
61	[BUG]  [BUGGY]  if(object!=  null  ||  testTransients)  {  If(object!=  null  ||  testTransients)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object!=  null  ||  testTransients)  {  If(object!=  null  ||  testTransients)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	if(object!=    null    ||    testTransients)    {    If(object!=  null  ||  testTransients)  {	  	non-compiled	[CE]  ';'  expected	12	None	add
62	[BUG]  [BUGGY]  Integer  iConstant  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  Integer  iConstant  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber);  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	Integer  iConstant  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber);	      Integer    iConstant    =    getInitialNonZeroOddNumber(multierNonZeroOddNumber);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
63	[BUG]  [BUGGY]  Integer  multierNonZeroOddNumber  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  Integer  multierNonZeroOddNumber  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber);  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	Integer  multierNonZeroOddNumber  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber);	      Integer    iConstant    =    getInitialNonZeroOddNumber(multierNonZeroOddNumber);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
64	[BUG]  [BUGGY]  Integer  iConstant  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber  +  multiplierNonZeroOddNumber);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  Integer  iConstant  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber  +  multiplierNonZeroOddNumber);  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	Integer  iConstant  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber  +  multiplierNonZeroOddNumber);	      Integer    iConstant    =    getInitialNonZeroOddNumber(multierNonZeroOddNumber);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
65	[BUG]  [BUGGY]  if(object  ==  null  ||  multiplierNonZeroOddNumber  ==  object)  {  [CE]  incomparable  types:  int  and  T  [FE]    AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  multiplierNonZeroOddNumber  ==  object)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	if(object  ==  null  ||  multiplierNonZeroOddNumber  ==  object)  {	  if(object    ==    null    ||    initialNonZeroOddNumber    ==    multiplierNonZeroOddNumber)    {    	non-compiled	[CE]  incomparable  types:  int  and  T	15	None	replace
66	[BUG]  [BUGGY]  if(object  ==  null  ||  multiplierNonZeroOddNumber  ==  target)  {  [CE]  cannot  find  symbol  target  [FE]      AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  multiplierNonZeroOddNumber  ==  target)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	if(object  ==  null  ||  multiplierNonZeroOddNumber  ==  target)  {	  if(object    ==    null    ||    initialNonZeroOddNumber    ==    multiplierNonZeroOddNumber)    {    	non-compiled	[CE]  cannot  find  symbol  target	15	None	replace
67	[BUG]  [BUGGY]      int  iConstant  =  multiplierNonZeroOddNumber;  int  iConstant  =  multiplierNonZeroOddNumber;  [CE]  variable  iConstant  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]    AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]      int  iConstant  =  multiplierNonZeroOddNumber;  int  iConstant  =  multiplierNonZeroOddNumber;  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	        int    iConstant    =    multiplierNonZeroOddNumber;    int  iConstant  =  multiplierNonZeroOddNumber;	  	non-compiled	[CE]  variable  iConstant  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	6	None	add
68	[BUG]  [BUGGY]      int  iConstant  =  multiplierNonZeroOddNumber;  Int  iConstant  =  multiplierNonZeroOddNumber;  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]      int  iConstant  =  multiplierNonZeroOddNumber;  Int  iConstant  =  multiplierNonZeroOddNumber;  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	        int    iConstant    =    multiplierNonZeroOddNumber;    Int  iConstant  =  multiplierNonZeroOddNumber;	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
69	[BUG]  [BUGGY]      int  iConstant  =  multiplierNonZeroOddNumber;  int  iConstant  =  multiplyerNonZeroOddNumber;  [CE]  variable  iConstant  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]        AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]      int  iConstant  =  multiplierNonZeroOddNumber;  int  iConstant  =  multiplyerNonZeroOddNumber;  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	        int    iConstant    =    multiplierNonZeroOddNumber;    int  iConstant  =  multiplyerNonZeroOddNumber;	  	non-compiled	[CE]  variable  iConstant  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	6	None	add
70	[BUG]  [BUGGY]      int  iConstant  =  multiplierNonZeroOddNumber;  int  iConstant  =  multiplierNonZeroOddNumber);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]      int  iConstant  =  multiplierNonZeroOddNumber;  int  iConstant  =  multiplierNonZeroOddNumber);  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	        int    iConstant    =    multiplierNonZeroOddNumber;    int  iConstant  =  multiplierNonZeroOddNumber);	  	non-compiled	[CE]  ';'  expected	6	None	add
71	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	      Class    <?>    clazz    =    object.getClass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
72	[BUG]  [BUGGY]  reflectionAppend(object,  initialNonZeroOddNumber,  builder,  testTransients,  excludeFields);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  reflectionAppend(object,  initialNonZeroOddNumber,  builder,  testTransients,  excludeFields);  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	reflectionAppend(object,  initialNonZeroOddNumber,  builder,  testTransients,  excludeFields);	      Class    <?>    clazz    =    object.getClass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
73	[BUG]  [BUGGY]  ReflectionAppend(object,  initialNonZeroOddNumber,  builder,  testTransients,  excludeFields);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  ReflectionAppend(object,  initialNonZeroOddNumber,  builder,  testTransients,  excludeFields);  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	ReflectionAppend(object,  initialNonZeroOddNumber,  builder,  testTransients,  excludeFields);	      Class    <?>    clazz    =    object.getClass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
74	[BUG]  [BUGGY]  ReflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  ReflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	ReflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	      Class    <?>    clazz    =    object.getClass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
75	[BUG]  [BUGGY]  if(object  ==  null  ||  initialNonZeroOddNumber  >=  multiplierNonZeroOddNumber)  {  if(object  ==  null  ||  initialNonZeroOddNumber  >=  multiplierNonZeroOddNumber)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  initialNonZeroOddNumber  >=  multiplierNonZeroOddNumber)  {  if(object  ==  null  ||  initialNonZeroOddNumber  >=  multiplierNonZeroOddNumber)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	if(object    ==    null    ||    initialNonZeroOddNumber    >=    multiplierNonZeroOddNumber)    {    if(object  ==  null  ||  initialNonZeroOddNumber  >=  multiplierNonZeroOddNumber)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
76	[BUG]  [BUGGY]  if(object  ==  null  ||  initialNonZeroOddNumber  >=  multiplierNonZeroOddNumber)  {  if(object  ==  null  ||  initialNonZeroOddNumber!=  multiplierNonZeroOddNumber)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  initialNonZeroOddNumber  >=  multiplierNonZeroOddNumber)  {  if(object  ==  null  ||  initialNonZeroOddNumber!=  multiplierNonZeroOddNumber)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	if(object    ==    null    ||    initialNonZeroOddNumber    >=    multiplierNonZeroOddNumber)    {    if(object  ==  null  ||  initialNonZeroOddNumber!=  multiplierNonZeroOddNumber)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
77	[BUG]  [BUGGY]  if(object  ==  null  ||  initialNonZeroOddNumber  >=  multiplierNonZeroOddNumber)  {  if(object  ==  null  ||  initialNonZeroOddNumber  >>  multiplierNonZeroOddNumber)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  initialNonZeroOddNumber  >=  multiplierNonZeroOddNumber)  {  if(object  ==  null  ||  initialNonZeroOddNumber  >>  multiplierNonZeroOddNumber)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	if(object    ==    null    ||    initialNonZeroOddNumber    >=    multiplierNonZeroOddNumber)    {    if(object  ==  null  ||  initialNonZeroOddNumber  >>  multiplierNonZeroOddNumber)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
78	[BUG]  [BUGGY]  if(object  ==  null  ||  initialNonZeroOddNumber  >=  multiplierNonZeroOddNumber)  {  if(object!=  null  ||  initialNonZeroOddNumber  >=  multiplierNonZeroOddNumber)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  initialNonZeroOddNumber  >=  multiplierNonZeroOddNumber)  {  if(object!=  null  ||  initialNonZeroOddNumber  >=  multiplierNonZeroOddNumber)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	if(object    ==    null    ||    initialNonZeroOddNumber    >=    multiplierNonZeroOddNumber)    {    if(object!=  null  ||  initialNonZeroOddNumber  >=  multiplierNonZeroOddNumber)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
79	[BUG]  [BUGGY]  if(object  ==  null  ||  initialNonZeroOddNumber  >=  multiplierNonZeroOddNumber)  {  If(object  ==  null  ||  initialNonZeroOddNumber  >=  multiplierNonZeroOddNumber)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  initialNonZeroOddNumber  >=  multiplierNonZeroOddNumber)  {  If(object  ==  null  ||  initialNonZeroOddNumber  >=  multiplierNonZeroOddNumber)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	if(object    ==    null    ||    initialNonZeroOddNumber    >=    multiplierNonZeroOddNumber)    {    If(object  ==  null  ||  initialNonZeroOddNumber  >=  multiplierNonZeroOddNumber)  {	  	non-compiled	[CE]  ';'  expected	21	None	add
80	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber  +  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]    AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber  +  1;  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber  +  1;	      int    iConstant    =    multiplierNonZeroOddNumber    -    initialNonZeroOddNumber;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
81	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  /  initialNonZeroOddNumber;  [CE]  invalid  method  declaration;  return  type  required  [FE]      AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  /  initialNonZeroOddNumber;  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  /  initialNonZeroOddNumber;	      int    iConstant    =    multiplierNonZeroOddNumber    -    initialNonZeroOddNumber;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
82	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber,  multiplierNonZeroOddNumber;  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber,  multiplierNonZeroOddNumber;  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber,  multiplierNonZeroOddNumber;	      int    iConstant    =    multiplierNonZeroOddNumber    -    initialNonZeroOddNumber;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
83	[BUG]  [BUGGY]  if(object  ==  null  ||  multiplierNonZeroOddNumber  >=  inputNonZeroOddNumber)  {  [CE]  cannot  find  symbol  inputNonZeroOddNumber  [FE]    AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  multiplierNonZeroOddNumber  >=  inputNonZeroOddNumber)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	if(object  ==  null  ||  multiplierNonZeroOddNumber  >=  inputNonZeroOddNumber)  {	  if(object    ==    null    ||    initialNonZeroOddNumber    >=    multiplierNonZeroOddNumber)    {    	non-compiled	[CE]  cannot  find  symbol  inputNonZeroOddNumber	22	None	replace
84	[BUG]  [BUGGY]  reflectionAppend(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  builder,  testTransients,  excludeFields);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  reflectionAppend(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  builder,  testTransients,  excludeFields);  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	reflectionAppend(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  builder,  testTransients,  excludeFields);	      Class    <?>    clazz    =    object.getClass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
85	[BUG]  [BUGGY]  ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);	      Class    <?>    clazz    =    object.getClass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
86	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  reflectUpToClass  +  initialNonZeroOddNumber;  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  reflectUpToClass  +  initialNonZeroOddNumber;  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  reflectUpToClass  +  initialNonZeroOddNumber;	      int    iConstant    =    multiplierNonZeroOddNumber    +    reflectUpToClass;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
87	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  reflectUpToClass  +  excludeFields;  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  reflectUpToClass  +  excludeFields;  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  reflectUpToClass  +  excludeFields;	      int    iConstant    =    multiplierNonZeroOddNumber    +    reflectUpToClass;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
88	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  ReflectionUtilities.reflectUpToClass(object,  multiplierNonZeroOddNumber,  object,  testTransients,  excludeFields);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  ReflectionUtilities.reflectUpToClass(object,  multiplierNonZeroOddNumber,  object,  testTransients,  excludeFields);  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  ReflectionUtilities.reflectUpToClass(object,  multiplierNonZeroOddNumber,  object,  testTransients,  excludeFields);	      int    iConstant    =    multiplierNonZeroOddNumber    +    ReflectionUtilities.reflectUpToClass(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    object,    testTransients,    excludeFields);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
89	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  ReflectionUtilities.reflectUpToClass(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  ReflectionUtilities.reflectUpToClass(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  ReflectionUtilities.reflectUpToClass(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);	      int    iConstant    =    multiplierNonZeroOddNumber    +    ReflectionUtilities.reflectUpToClass(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    object,    testTransients,    excludeFields);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
90	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  ReflectionUtilities.reflectUpToClass(object,  multiplierNonZeroOddNumber,  initialNonZeroOddNumber,  testTransients,  excludeFields);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  ReflectionUtilities.reflectUpToClass(object,  multiplierNonZeroOddNumber,  initialNonZeroOddNumber,  testTransients,  excludeFields);  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  ReflectionUtilities.reflectUpToClass(object,  multiplierNonZeroOddNumber,  initialNonZeroOddNumber,  testTransients,  excludeFields);	      int    iConstant    =    multiplierNonZeroOddNumber    +    ReflectionUtilities.reflectUpToClass(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    object,    testTransients,    excludeFields);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
91	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  reflectionHashCode.length;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  reflectionHashCode.length;  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  reflectionHashCode.length;	      int    iConstant    =    multiplierNonZeroOddNumber    +    reflectUpToClass.length;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
92	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  object.length;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  object.length;  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  object.length;	      int    iConstant    =    multiplierNonZeroOddNumber    +    reflectUpToClass.length;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
93	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  object.getName();  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  object.getName();  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  object.getName();	      int    iConstant    =    multiplierNonZeroOddNumber    +    reflectUpToClass.getName();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
94	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  reflectUpToClass.getIndex();  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  reflectUpToClass.getIndex();  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  reflectUpToClass.getIndex();	      int    iConstant    =    multiplierNonZeroOddNumber    +    reflectUpToClass.getName();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
95	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]    AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  1;  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  1;	      int    iConstant    =    multiplierNonZeroOddNumber;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
96	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  -  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]      AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  -  1;  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  -  1;	      int    iConstant    =    multiplierNonZeroOddNumber;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
97	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]      int  iConstant  =  multiplierNonZeroOddNumber;  int  iCONstant  =  multiplierNonZeroOddNumber;  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	add	        int    iConstant    =    multiplierNonZeroOddNumber;    int  iCONstant  =  multiplierNonZeroOddNumber;	  	compilable	  [FE]  AssertionFailedError  	6	1	add
98	[BUG]  [BUGGY]      int  iConstant  =  multiplierNonZeroOddNumber;  int  iCONstant  =  multiplierNonZeroOddNumber;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]      int  iConstant  =  multiplierNonZeroOddNumber;  int  iCONstant  =  multiplierNonZeroOddNumber;  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	        int    iConstant    =    multiplierNonZeroOddNumber;    int  iCONstant  =  multiplierNonZeroOddNumber;	  	compilable	  [FE]  AssertionFailedError  	6	1	add
99	[BUG]  [BUGGY]  if(object!=  null  ||  testTransients,  reflectUpToClass)  {  [CE]  ')'  expected  [FE]    IllegalArgumentException    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object!=  null  ||  testTransients,  reflectUpToClass)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	if(object!=  null  ||  testTransients,  reflectUpToClass)  {	  if(object!=    null    ||    testTransients)    {    	non-compiled	[CE]  ')'  expected	13	None	replace
100	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber  +  testTransients,  multiplierNonZeroOddNumber;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber  +  testTransients,  multiplierNonZeroOddNumber;  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber  +  testTransients,  multiplierNonZeroOddNumber;	      int    iConstant    =    multiplierNonZeroOddNumber    -    initialNonZeroOddNumber    +    testTransients;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
101	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  *  initialNonZeroOddNumber  +  testTransients;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  *  initialNonZeroOddNumber  +  testTransients;  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  *  initialNonZeroOddNumber  +  testTransients;	      int    iConstant    =    multiplierNonZeroOddNumber    -    initialNonZeroOddNumber    +    testTransients;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
102	[BUG]  [BUGGY]  if(object  ==  null  ||  testTransients,  builder)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  testTransients,  builder)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	if(object  ==  null  ||  testTransients,  builder)  {	  if(object    ==    null    ||    testTransients)    {    	non-compiled	[CE]  ')'  expected	9	None	replace
103	[BUG]  [BUGGY]  Integer  multiERNonZeroOddNumber  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  Integer  multiERNonZeroOddNumber  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	Integer  multiERNonZeroOddNumber  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);	      Integer    iConstant    =    getInitialNonZeroOddNumber(multierNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
104	[BUG]  [BUGGY]  Integer  value  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  Integer  value  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	Integer  value  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);	      Integer    iConstant    =    getInitialNonZeroOddNumber(multierNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
105	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  ReflectionUtilities.reflectUpToClass(initialNonZeroOddNumber,  object);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  ReflectionUtilities.reflectUpToClass(initialNonZeroOddNumber,  object);  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  ReflectionUtilities.reflectUpToClass(initialNonZeroOddNumber,  object);	      int    iConstant    =    multiplierNonZeroOddNumber    +    ReflectionUtilities.reflectUpToClass(initialNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
106	[BUG]  [BUGGY]      int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber;  int  iConstant  =  multiplierNonZeroOddNumber  +  initialNonZeroOddNumber;  [CE]  variable  iConstant  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]    AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]      int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber;  int  iConstant  =  multiplierNonZeroOddNumber  +  initialNonZeroOddNumber;  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	        int    iConstant    =    multiplierNonZeroOddNumber    -    initialNonZeroOddNumber;    int  iConstant  =  multiplierNonZeroOddNumber  +  initialNonZeroOddNumber;	  	non-compiled	[CE]  variable  iConstant  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	2	None	add
107	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  -  inputNonZeroOddNumber;  [CE]  invalid  method  declaration;  return  type  required  [FE]    AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  -  inputNonZeroOddNumber;  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  -  inputNonZeroOddNumber;	      int    iConstant    =    multiplierNonZeroOddNumber    -    initialNonZeroOddNumber;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
108	[BUG]  [BUGGY]  if(object  ==  null  ||  multiplierNonZeroOddNumber  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  multiplierNonZeroOddNumber  <  =  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	if(object  ==  null  ||  multiplierNonZeroOddNumber  <  =  0)  {	  if(object    ==    null    ||    initialNonZeroOddNumber    ==    multiplierNonZeroOddNumber)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
109	[BUG]  [BUGGY]  if(object  ==  null  ||  multiplierNonZeroOddNumber  <  reflectUpToClass)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]    AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  multiplierNonZeroOddNumber  <  reflectUpToClass)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	if(object  ==  null  ||  multiplierNonZeroOddNumber  <  reflectUpToClass)  {	  if(object    ==    null    ||    initialNonZeroOddNumber    >=    multiplierNonZeroOddNumber)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	22	None	replace
110	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object!=  null  ||!testTransients)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	add	if(object!=  null  ||!testTransients)  {	  if(object!=    null)    {    	compilable	  [FE]  NullPointerException  	11	5	replace
111	[BUG]  [BUGGY]  if(object!=  null  ||!testTransients)  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object!=  null  ||!testTransients)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	if(object!=  null  ||!testTransients)  {	  if(object!=    null)    {    	compilable	  [FE]  NullPointerException  	11	5	replace
112	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object!=  null  &&  object.getClass()!=  reflectUpToClass)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	add	if(object!=  null  &&  object.getClass()!=  reflectUpToClass)  {	  if(object!=    null)    {    	compilable	  [FE]  NullPointerException  	11	5	replace
113	[BUG]  [BUGGY]  if(object!=  null  &&  object.getClass()!=  reflectUpToClass)  {  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object!=  null  &&  object.getClass()!=  reflectUpToClass)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	if(object!=  null  &&  object.getClass()!=  reflectUpToClass)  {	  if(object!=    null)    {    	compilable	  [FE]  NullPointerException  	11	5	replace
114	[BUG]  [BUGGY]  if(object  ==  null  ||  multiplierNonZeroOddNumber  <  =  object.length)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  multiplierNonZeroOddNumber  <  =  object.length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	if(object  ==  null  ||  multiplierNonZeroOddNumber  <  =  object.length)  {	  if(object    ==    null    ||    initialNonZeroOddNumber    ==    multiplierNonZeroOddNumber)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
115	[BUG]  [BUGGY]  if(object  ==  null  ||  multiplierNonZeroOddNumber  <  =  object)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  multiplierNonZeroOddNumber  <  =  object)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	if(object  ==  null  ||  multiplierNonZeroOddNumber  <  =  object)  {	  if(object    ==    null    ||    initialNonZeroOddNumber    ==    multiplierNonZeroOddNumber)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
116	[BUG]  [BUGGY]  if(object  ==  null  ||  reflectUpToClass)  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]    AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  reflectUpToClass)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	if(object  ==  null  ||  reflectUpToClass)  {	  if(object    ==    null    ||    testTransients)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	9	None	replace
117	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  object.iTotal;  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  object.iTotal;  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  object.iTotal;	      int    iConstant    =    multiplierNonZeroOddNumber    +    reflectUpToClass;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
118	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  object;  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  object;  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  object;	      int    iConstant    =    multiplierNonZeroOddNumber    +    reflectUpToClass;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
119	[BUG]  [BUGGY]  Integer  number  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  Integer  number  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	Integer  number  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);	      Integer    iConstant    =    getInitialNonZeroOddNumber(multierNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
120	[BUG]  [BUGGY]  if(object  ==  null  ||  testTransients)  {  if(object  {  null  ||  testTransients)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  testTransients)  {  if(object  {  null  ||  testTransients)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	if(object    ==    null    ||    testTransients)    {    if(object  {  null  ||  testTransients)  {	  	non-compiled	[CE]  ')'  expected	8	None	add
121	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  ReflectionUtilities.reflectUpToClass(initialNonZeroOddNumber,  object,  testTransients,  excludeFields);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  ReflectionUtilities.reflectUpToClass(initialNonZeroOddNumber,  object,  testTransients,  excludeFields);  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  ReflectionUtilities.reflectUpToClass(initialNonZeroOddNumber,  object,  testTransients,  excludeFields);	      int    iConstant    =    multiplierNonZeroOddNumber    +    ReflectionUtilities.reflectUpToClass(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients,    excludeFields);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
122	[BUG]  [BUGGY]  if(object  ==  null  ||  initialNonZeroOddNumber  ==  multiplierNonZeroOddNumber)  {  if(object  ==  null  ||  initialNonZeroOddNumber  ==  multiplyerNonZeroOddNumber)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  if(object  ==  null  ||  initialNonZeroOddNumber  ==  multiplierNonZeroOddNumber)  {  if(object  ==  null  ||  initialNonZeroOddNumber  ==  multiplyerNonZeroOddNumber)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	if(object    ==    null    ||    initialNonZeroOddNumber    ==    multiplierNonZeroOddNumber)    {    if(object  ==  null  ||  initialNonZeroOddNumber  ==  multiplyerNonZeroOddNumber)  {	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
123	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  ReflectionUtilities.reflectUpToClass(initialNonZeroOddNumber,  multierNonZeroOddNumber);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  ReflectionUtilities.reflectUpToClass(initialNonZeroOddNumber,  multierNonZeroOddNumber);  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  ReflectionUtilities.reflectUpToClass(initialNonZeroOddNumber,  multierNonZeroOddNumber);	      int    iConstant    =    multiplierNonZeroOddNumber    +    ReflectionUtilities.reflectUpToClass(initialNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
124	[BUG]  [BUGGY]  ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields);  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields);	      Class    <?>    clazz    =    object.getClass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
125	[BUG]  [BUGGY]  ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  builder,  testTransients,  excludeFields);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  builder,  testTransients,  excludeFields);  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  builder,  testTransients,  excludeFields);	      Class    <?>    clazz    =    object.getClass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
126	[BUG]  [BUGGY]  Class  <?>  clazz  =  object.getDeclaringClass();  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  Class  <?>  clazz  =  object.getDeclaringClass();  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	Class  <?>  clazz  =  object.getDeclaringClass();	      Class    <?>    clazz    =    object.getClass();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
127	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  reflectUpToClass.iTotal;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  reflectUpToClass.iTotal;  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  reflectUpToClass.iTotal;	      int    iConstant    =    multiplierNonZeroOddNumber    +    reflectUpToClass.length;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
128	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  initialNonZeroOddNumber  +  testTransients;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  initialNonZeroOddNumber  +  testTransients;  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  initialNonZeroOddNumber  +  testTransients;	      int    iConstant    =    multiplierNonZeroOddNumber    -    initialNonZeroOddNumber    +    testTransients;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
129	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber  +  testTransients,  multiplierNonZeroOddNumber);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {    [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber  +  testTransients,  multiplierNonZeroOddNumber);  [BUGGY]    if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber  +  testTransients,  multiplierNonZeroOddNumber);	      int    iConstant    =    multiplierNonZeroOddNumber    -    initialNonZeroOddNumber    +    testTransients;    	non-compiled	[CE]  ';'  expected	5	None	replace
