bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] return; [FE] AssertionFailedError [CONTEXT] String[] excludeFields) { if (isRegistered(object)) { [BUGGY] return; [BUGGY] } try { register(object); Field[] fields = clazz.getDeclaredFields(); AccessibleObject.setAccessible(fields, true); for (Field field : fields) { if (!ArrayUtils.contains(excludeFields, field.getName()) && (field.getName().indexOf('$') == -1) && (useTransients || !Modifier.isTransient(field.getModifiers())) && (!Modifier.isStatic(field.getModifiers()))) { [CLASS] HashCodeBuilder 1 [METHOD] reflectionAppend [RETURN_TYPE] void  Object object Class<?> clazz HashCodeBuilder builder boolean useTransients String[] excludeFields [VARIABLES] Field field boolean useTransients ThreadLocal REGISTRY HashCodeBuilder builder Object fieldValue object Class clazz String[] excludeFields int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber Field[] fields IllegalAccessException e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] String[] excludeFields) { if (isRegistered(object)) { [BUGGY] [BUGGY] return; } try { register(object); Field[] fields = clazz.getDeclaredFields(); AccessibleObject.setAccessible(fields, true); for (Field field : fields) { if (!ArrayUtils.contains(excludeFields, field.getName()) && (field.getName().indexOf('$') == -1) && (useTransients || !Modifier.isTransient(field.getModifiers())) && (!Modifier.isStatic(field.getModifiers()))) { [CLASS] HashCodeBuilder 1 [METHOD] reflectionAppend [RETURN_TYPE] void  Object object Class<?> clazz HashCodeBuilder builder boolean useTransients String[] excludeFields [VARIABLES] Field field boolean useTransients ThreadLocal REGISTRY HashCodeBuilder builder Object fieldValue object Class clazz String[] excludeFields int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber Field[] fields IllegalAccessException e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	add	
3	[BUG] [BUGGY] return REGISTRY.get(); [FE] AssertionFailedError [CONTEXT] static Set<IDKey> getRegistry() { [BUGGY] return REGISTRY.get(); [BUGGY] } [CLASS] HashCodeBuilder 1 [METHOD] getRegistry [RETURN_TYPE] Set  [VARIABLES] ThreadLocal REGISTRY int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber boolean  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	137	137	1	replace	
4	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] static Set<IDKey> getRegistry() { [BUGGY] [BUGGY] return REGISTRY.get(); } [CLASS] HashCodeBuilder 1 [METHOD] getRegistry [RETURN_TYPE] Set  [VARIABLES] ThreadLocal REGISTRY int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber boolean  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	137	137	1	add	
5	[BUG] [BUGGY] return getRegistry().contains(new IDKey(value)); [FE] AssertionFailedError [CONTEXT] static boolean isRegistered(Object value) { [BUGGY] return getRegistry().contains(new IDKey(value)); [BUGGY] } [CLASS] HashCodeBuilder 1 [METHOD] isRegistered [RETURN_TYPE] boolean  Object value [VARIABLES] Object value boolean ThreadLocal REGISTRY int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	152	152	1	replace	
6	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] static boolean isRegistered(Object value) { [BUGGY] [BUGGY] return getRegistry().contains(new IDKey(value)); } [CLASS] HashCodeBuilder 1 [METHOD] isRegistered [RETURN_TYPE] boolean  Object value [VARIABLES] Object value boolean ThreadLocal REGISTRY int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	152	152	1	add	
7	[BUG] [BUGGY] if (isRegistered(object)) { [FE] AssertionFailedError [CONTEXT] String[] excludeFields) { [BUGGY] if (isRegistered(object)) { [BUGGY] return; } try { register(object); Field[] fields = clazz.getDeclaredFields(); AccessibleObject.setAccessible(fields, true); for (Field field : fields) { if (!ArrayUtils.contains(excludeFields, field.getName()) && (field.getName().indexOf('$') == -1) && (useTransients || !Modifier.isTransient(field.getModifiers())) [CLASS] HashCodeBuilder 1 [METHOD] reflectionAppend [RETURN_TYPE] void  Object object Class<?> clazz HashCodeBuilder builder boolean useTransients String[] excludeFields [VARIABLES] Field field boolean useTransients ThreadLocal REGISTRY HashCodeBuilder builder Object fieldValue object Class clazz String[] excludeFields int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber Field[] fields IllegalAccessException e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] String[] excludeFields) { [BUGGY] [BUGGY] if (isRegistered(object)) { return; } try { register(object); Field[] fields = clazz.getDeclaredFields(); AccessibleObject.setAccessible(fields, true); for (Field field : fields) { if (!ArrayUtils.contains(excludeFields, field.getName()) && (field.getName().indexOf('$') == -1) && (useTransients || !Modifier.isTransient(field.getModifiers())) [CLASS] HashCodeBuilder 1 [METHOD] reflectionAppend [RETURN_TYPE] void  Object object Class<?> clazz HashCodeBuilder builder boolean useTransients String[] excludeFields [VARIABLES] Field field boolean useTransients ThreadLocal REGISTRY HashCodeBuilder builder Object fieldValue object Class clazz String[] excludeFields int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber Field[] fields IllegalAccessException e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	173	173	1	add	
9	[BUG] [BUGGY] register(object); [FE] AssertionFailedError [CONTEXT] String[] excludeFields) { if (isRegistered(object)) { return; } try { [BUGGY] register(object); [BUGGY] Field[] fields = clazz.getDeclaredFields(); AccessibleObject.setAccessible(fields, true); for (Field field : fields) { if (!ArrayUtils.contains(excludeFields, field.getName()) && (field.getName().indexOf('$') == -1) && (useTransients || !Modifier.isTransient(field.getModifiers())) && (!Modifier.isStatic(field.getModifiers()))) { try { Object fieldValue = field.get(object); builder.append(fieldValue); [CLASS] HashCodeBuilder 1 [METHOD] reflectionAppend [RETURN_TYPE] void  Object object Class<?> clazz HashCodeBuilder builder boolean useTransients String[] excludeFields [VARIABLES] Field field boolean useTransients ThreadLocal REGISTRY HashCodeBuilder builder Object fieldValue object Class clazz String[] excludeFields int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber Field[] fields IllegalAccessException e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	replace	
10	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] String[] excludeFields) { if (isRegistered(object)) { return; } try { [BUGGY] [BUGGY] register(object); Field[] fields = clazz.getDeclaredFields(); AccessibleObject.setAccessible(fields, true); for (Field field : fields) { if (!ArrayUtils.contains(excludeFields, field.getName()) && (field.getName().indexOf('$') == -1) && (useTransients || !Modifier.isTransient(field.getModifiers())) && (!Modifier.isStatic(field.getModifiers()))) { try { Object fieldValue = field.get(object); builder.append(fieldValue); [CLASS] HashCodeBuilder 1 [METHOD] reflectionAppend [RETURN_TYPE] void  Object object Class<?> clazz HashCodeBuilder builder boolean useTransients String[] excludeFields [VARIABLES] Field field boolean useTransients ThreadLocal REGISTRY HashCodeBuilder builder Object fieldValue object Class clazz String[] excludeFields int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber Field[] fields IllegalAccessException e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	177	177	1	add	
11	[BUG] [BUGGY] Field[] fields = clazz.getDeclaredFields(); [FE] AssertionFailedError [CONTEXT] String[] excludeFields) { if (isRegistered(object)) { return; } try { register(object); [BUGGY] Field[] fields = clazz.getDeclaredFields(); [BUGGY] AccessibleObject.setAccessible(fields, true); for (Field field : fields) { if (!ArrayUtils.contains(excludeFields, field.getName()) && (field.getName().indexOf('$') == -1) && (useTransients || !Modifier.isTransient(field.getModifiers())) && (!Modifier.isStatic(field.getModifiers()))) { try { Object fieldValue = field.get(object); builder.append(fieldValue); } catch (IllegalAccessException e) { [CLASS] HashCodeBuilder 1 [METHOD] reflectionAppend [RETURN_TYPE] void  Object object Class<?> clazz HashCodeBuilder builder boolean useTransients String[] excludeFields [VARIABLES] Field field boolean useTransients ThreadLocal REGISTRY HashCodeBuilder builder Object fieldValue object Class clazz String[] excludeFields int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber Field[] fields IllegalAccessException e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] String[] excludeFields) { if (isRegistered(object)) { return; } try { register(object); [BUGGY] [BUGGY] Field[] fields = clazz.getDeclaredFields(); AccessibleObject.setAccessible(fields, true); for (Field field : fields) { if (!ArrayUtils.contains(excludeFields, field.getName()) && (field.getName().indexOf('$') == -1) && (useTransients || !Modifier.isTransient(field.getModifiers())) && (!Modifier.isStatic(field.getModifiers()))) { try { Object fieldValue = field.get(object); builder.append(fieldValue); } catch (IllegalAccessException e) { [CLASS] HashCodeBuilder 1 [METHOD] reflectionAppend [RETURN_TYPE] void  Object object Class<?> clazz HashCodeBuilder builder boolean useTransients String[] excludeFields [VARIABLES] Field field boolean useTransients ThreadLocal REGISTRY HashCodeBuilder builder Object fieldValue object Class clazz String[] excludeFields int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber Field[] fields IllegalAccessException e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	add	
13	[BUG] [BUGGY] AccessibleObject.setAccessible(fields, true); [FE] AssertionFailedError [CONTEXT] String[] excludeFields) { if (isRegistered(object)) { return; } try { register(object); Field[] fields = clazz.getDeclaredFields(); [BUGGY] AccessibleObject.setAccessible(fields, true); [BUGGY] for (Field field : fields) { if (!ArrayUtils.contains(excludeFields, field.getName()) && (field.getName().indexOf('$') == -1) && (useTransients || !Modifier.isTransient(field.getModifiers())) && (!Modifier.isStatic(field.getModifiers()))) { try { Object fieldValue = field.get(object); builder.append(fieldValue); } catch (IllegalAccessException e) {  [CLASS] HashCodeBuilder 1 [METHOD] reflectionAppend [RETURN_TYPE] void  Object object Class<?> clazz HashCodeBuilder builder boolean useTransients String[] excludeFields [VARIABLES] Field field boolean useTransients ThreadLocal REGISTRY HashCodeBuilder builder Object fieldValue object Class clazz String[] excludeFields int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber Field[] fields IllegalAccessException e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	
14	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] String[] excludeFields) { if (isRegistered(object)) { return; } try { register(object); Field[] fields = clazz.getDeclaredFields(); [BUGGY] [BUGGY] AccessibleObject.setAccessible(fields, true); for (Field field : fields) { if (!ArrayUtils.contains(excludeFields, field.getName()) && (field.getName().indexOf('$') == -1) && (useTransients || !Modifier.isTransient(field.getModifiers())) && (!Modifier.isStatic(field.getModifiers()))) { try { Object fieldValue = field.get(object); builder.append(fieldValue); } catch (IllegalAccessException e) {  [CLASS] HashCodeBuilder 1 [METHOD] reflectionAppend [RETURN_TYPE] void  Object object Class<?> clazz HashCodeBuilder builder boolean useTransients String[] excludeFields [VARIABLES] Field field boolean useTransients ThreadLocal REGISTRY HashCodeBuilder builder Object fieldValue object Class clazz String[] excludeFields int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber Field[] fields IllegalAccessException e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	add	
15	[BUG] [BUGGY] for (Field field : fields) { [FE] AssertionFailedError [CONTEXT] String[] excludeFields) { if (isRegistered(object)) { return; } try { register(object); Field[] fields = clazz.getDeclaredFields(); AccessibleObject.setAccessible(fields, true); [BUGGY] for (Field field : fields) { [BUGGY] if (!ArrayUtils.contains(excludeFields, field.getName()) && (field.getName().indexOf('$') == -1) && (useTransients || !Modifier.isTransient(field.getModifiers())) && (!Modifier.isStatic(field.getModifiers()))) { try { Object fieldValue = field.get(object); builder.append(fieldValue); } catch (IllegalAccessException e) {   [CLASS] HashCodeBuilder 1 [METHOD] reflectionAppend [RETURN_TYPE] void  Object object Class<?> clazz HashCodeBuilder builder boolean useTransients String[] excludeFields [VARIABLES] Field field boolean useTransients ThreadLocal REGISTRY HashCodeBuilder builder Object fieldValue object Class clazz String[] excludeFields int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber Field[] fields IllegalAccessException e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	180	180	1	replace	
16	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] String[] excludeFields) { if (isRegistered(object)) { return; } try { register(object); Field[] fields = clazz.getDeclaredFields(); AccessibleObject.setAccessible(fields, true); [BUGGY] [BUGGY] for (Field field : fields) { if (!ArrayUtils.contains(excludeFields, field.getName()) && (field.getName().indexOf('$') == -1) && (useTransients || !Modifier.isTransient(field.getModifiers())) && (!Modifier.isStatic(field.getModifiers()))) { try { Object fieldValue = field.get(object); builder.append(fieldValue); } catch (IllegalAccessException e) {   [CLASS] HashCodeBuilder 1 [METHOD] reflectionAppend [RETURN_TYPE] void  Object object Class<?> clazz HashCodeBuilder builder boolean useTransients String[] excludeFields [VARIABLES] Field field boolean useTransients ThreadLocal REGISTRY HashCodeBuilder builder Object fieldValue object Class clazz String[] excludeFields int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber Field[] fields IllegalAccessException e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	180	180	1	add	
17	[BUG] [BUGGY] if (!ArrayUtils.contains(excludeFields, field.getName())  && (field.getName().indexOf('$') == -1)   && (useTransients || !Modifier.isTransient(field.getModifiers())) [FE] AssertionFailedError [CONTEXT] String[] excludeFields) { if (isRegistered(object)) { return; } try { register(object); Field[] fields = clazz.getDeclaredFields(); AccessibleObject.setAccessible(fields, true); for (Field field : fields) { [BUGGY] if (!ArrayUtils.contains(excludeFields, field.getName())     && (field.getName().indexOf('$') == -1)          && (useTransients || !Modifier.isTransient(field.getModifiers())) [BUGGY] && (field.getName().indexOf('$') == -1) && (useTransients || !Modifier.isTransient(field.getModifiers())) && (!Modifier.isStatic(field.getModifiers()))) { try { Object fieldValue = field.get(object); builder.append(fieldValue); } catch (IllegalAccessException e) {   throw new InternalError("Unexpected IllegalAccessException"); [CLASS] HashCodeBuilder 1 [METHOD] reflectionAppend [RETURN_TYPE] void  Object object Class<?> clazz HashCodeBuilder builder boolean useTransients String[] excludeFields [VARIABLES] Field field boolean useTransients ThreadLocal REGISTRY HashCodeBuilder builder Object fieldValue object Class clazz String[] excludeFields int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber Field[] fields IllegalAccessException e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	
18	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] String[] excludeFields) { if (isRegistered(object)) { return; } try { register(object); Field[] fields = clazz.getDeclaredFields(); AccessibleObject.setAccessible(fields, true); for (Field field : fields) { [BUGGY] [BUGGY] if (!ArrayUtils.contains(excludeFields, field.getName())     && (field.getName().indexOf('$') == -1)          && (useTransients || !Modifier.isTransient(field.getModifiers())) && (field.getName().indexOf('$') == -1) && (useTransients || !Modifier.isTransient(field.getModifiers())) && (!Modifier.isStatic(field.getModifiers()))) { try { Object fieldValue = field.get(object); builder.append(fieldValue); } catch (IllegalAccessException e) {   throw new InternalError("Unexpected IllegalAccessException"); [CLASS] HashCodeBuilder 1 [METHOD] reflectionAppend [RETURN_TYPE] void  Object object Class<?> clazz HashCodeBuilder builder boolean useTransients String[] excludeFields [VARIABLES] Field field boolean useTransients ThreadLocal REGISTRY HashCodeBuilder builder Object fieldValue object Class clazz String[] excludeFields int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber Field[] fields IllegalAccessException e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	add	
19	[BUG] [BUGGY] Object fieldValue = field.get(object); [FE] AssertionFailedError [CONTEXT] if (!ArrayUtils.contains(excludeFields, field.getName()) && (field.getName().indexOf('$') == -1) && (useTransients || !Modifier.isTransient(field.getModifiers())) && (!Modifier.isStatic(field.getModifiers()))) { try { [BUGGY] Object fieldValue = field.get(object); [BUGGY] builder.append(fieldValue); } catch (IllegalAccessException e) {   throw new InternalError("Unexpected IllegalAccessException"); } } [CLASS] HashCodeBuilder 1 [METHOD] reflectionAppend [RETURN_TYPE] void  Object object Class<?> clazz HashCodeBuilder builder boolean useTransients String[] excludeFields [VARIABLES] Field field boolean useTransients ThreadLocal REGISTRY HashCodeBuilder builder Object fieldValue object Class clazz String[] excludeFields int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber Field[] fields IllegalAccessException e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	186	186	1	replace	
20	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (!ArrayUtils.contains(excludeFields, field.getName()) && (field.getName().indexOf('$') == -1) && (useTransients || !Modifier.isTransient(field.getModifiers())) && (!Modifier.isStatic(field.getModifiers()))) { try { [BUGGY] [BUGGY] Object fieldValue = field.get(object); builder.append(fieldValue); } catch (IllegalAccessException e) {   throw new InternalError("Unexpected IllegalAccessException"); } } [CLASS] HashCodeBuilder 1 [METHOD] reflectionAppend [RETURN_TYPE] void  Object object Class<?> clazz HashCodeBuilder builder boolean useTransients String[] excludeFields [VARIABLES] Field field boolean useTransients ThreadLocal REGISTRY HashCodeBuilder builder Object fieldValue object Class clazz String[] excludeFields int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber Field[] fields IllegalAccessException e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	186	186	1	add	
21	[BUG] [BUGGY] builder.append(fieldValue); [FE] AssertionFailedError [CONTEXT] if (!ArrayUtils.contains(excludeFields, field.getName()) && (field.getName().indexOf('$') == -1) && (useTransients || !Modifier.isTransient(field.getModifiers())) && (!Modifier.isStatic(field.getModifiers()))) { try { Object fieldValue = field.get(object); [BUGGY] builder.append(fieldValue); [BUGGY] } catch (IllegalAccessException e) {   throw new InternalError("Unexpected IllegalAccessException"); } } [CLASS] HashCodeBuilder 1 [METHOD] reflectionAppend [RETURN_TYPE] void  Object object Class<?> clazz HashCodeBuilder builder boolean useTransients String[] excludeFields [VARIABLES] Field field boolean useTransients ThreadLocal REGISTRY HashCodeBuilder builder Object fieldValue object Class clazz String[] excludeFields int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber Field[] fields IllegalAccessException e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	
22	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (!ArrayUtils.contains(excludeFields, field.getName()) && (field.getName().indexOf('$') == -1) && (useTransients || !Modifier.isTransient(field.getModifiers())) && (!Modifier.isStatic(field.getModifiers()))) { try { Object fieldValue = field.get(object); [BUGGY] [BUGGY] builder.append(fieldValue); } catch (IllegalAccessException e) {   throw new InternalError("Unexpected IllegalAccessException"); } } [CLASS] HashCodeBuilder 1 [METHOD] reflectionAppend [RETURN_TYPE] void  Object object Class<?> clazz HashCodeBuilder builder boolean useTransients String[] excludeFields [VARIABLES] Field field boolean useTransients ThreadLocal REGISTRY HashCodeBuilder builder Object fieldValue object Class clazz String[] excludeFields int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber Field[] fields IllegalAccessException e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	
23	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] && (field.getName().indexOf('$') == -1) && (useTransients || !Modifier.isTransient(field.getModifiers())) && (!Modifier.isStatic(field.getModifiers()))) { try { Object fieldValue = field.get(object); builder.append(fieldValue); } catch (IllegalAccessException e) {   throw new InternalError("Unexpected IllegalAccessException"); [BUGGY] } [BUGGY] } [CLASS] HashCodeBuilder 1 [METHOD] reflectionAppend [RETURN_TYPE] void  Object object Class<?> clazz HashCodeBuilder builder boolean useTransients String[] excludeFields [VARIABLES] Field field boolean useTransients ThreadLocal REGISTRY HashCodeBuilder builder Object fieldValue object Class clazz String[] excludeFields int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber Field[] fields IllegalAccessException e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	
24	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] && (field.getName().indexOf('$') == -1) && (useTransients || !Modifier.isTransient(field.getModifiers())) && (!Modifier.isStatic(field.getModifiers()))) { try { Object fieldValue = field.get(object); builder.append(fieldValue); } catch (IllegalAccessException e) {   throw new InternalError("Unexpected IllegalAccessException"); [BUGGY] [BUGGY] } } [CLASS] HashCodeBuilder 1 [METHOD] reflectionAppend [RETURN_TYPE] void  Object object Class<?> clazz HashCodeBuilder builder boolean useTransients String[] excludeFields [VARIABLES] Field field boolean useTransients ThreadLocal REGISTRY HashCodeBuilder builder Object fieldValue object Class clazz String[] excludeFields int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber Field[] fields IllegalAccessException e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	add	
25	[BUG] [BUGGY] unregister(object); [FE] AssertionFailedError [CONTEXT] Object fieldValue = field.get(object); builder.append(fieldValue); } catch (IllegalAccessException e) {   throw new InternalError("Unexpected IllegalAccessException"); } } } } finally { [BUGGY] unregister(object); [BUGGY] } } [CLASS] HashCodeBuilder 1 [METHOD] reflectionAppend [RETURN_TYPE] void  Object object Class<?> clazz HashCodeBuilder builder boolean useTransients String[] excludeFields [VARIABLES] Field field boolean useTransients ThreadLocal REGISTRY HashCodeBuilder builder Object fieldValue object Class clazz String[] excludeFields int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber Field[] fields IllegalAccessException e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	
26	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Object fieldValue = field.get(object); builder.append(fieldValue); } catch (IllegalAccessException e) {   throw new InternalError("Unexpected IllegalAccessException"); } } } } finally { [BUGGY] [BUGGY] unregister(object); } } [CLASS] HashCodeBuilder 1 [METHOD] reflectionAppend [RETURN_TYPE] void  Object object Class<?> clazz HashCodeBuilder builder boolean useTransients String[] excludeFields [VARIABLES] Field field boolean useTransients ThreadLocal REGISTRY HashCodeBuilder builder Object fieldValue object Class clazz String[] excludeFields int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber Field[] fields IllegalAccessException e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	add	
27	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] builder.append(fieldValue); } catch (IllegalAccessException e) {   throw new InternalError("Unexpected IllegalAccessException"); } } } } finally { unregister(object); [BUGGY] } [BUGGY] } [CLASS] HashCodeBuilder 1 [METHOD] reflectionAppend [RETURN_TYPE] void  Object object Class<?> clazz HashCodeBuilder builder boolean useTransients String[] excludeFields [VARIABLES] Field field boolean useTransients ThreadLocal REGISTRY HashCodeBuilder builder Object fieldValue object Class clazz String[] excludeFields int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber Field[] fields IllegalAccessException e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	
28	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] builder.append(fieldValue); } catch (IllegalAccessException e) {   throw new InternalError("Unexpected IllegalAccessException"); } } } } finally { unregister(object); [BUGGY] [BUGGY] } } [CLASS] HashCodeBuilder 1 [METHOD] reflectionAppend [RETURN_TYPE] void  Object object Class<?> clazz HashCodeBuilder builder boolean useTransients String[] excludeFields [VARIABLES] Field field boolean useTransients ThreadLocal REGISTRY HashCodeBuilder builder Object fieldValue object Class clazz String[] excludeFields int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber Field[] fields IllegalAccessException e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	add	
29	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] } catch (IllegalAccessException e) {   throw new InternalError("Unexpected IllegalAccessException"); } } } } finally { unregister(object); } [BUGGY] } [BUGGY]  [CLASS] HashCodeBuilder 1 [METHOD] reflectionAppend [RETURN_TYPE] void  Object object Class<?> clazz HashCodeBuilder builder boolean useTransients String[] excludeFields [VARIABLES] Field field boolean useTransients ThreadLocal REGISTRY HashCodeBuilder builder Object fieldValue object Class clazz String[] excludeFields int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber Field[] fields IllegalAccessException e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	198	198	1	replace	
30	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } catch (IllegalAccessException e) {   throw new InternalError("Unexpected IllegalAccessException"); } } } } finally { unregister(object); } [BUGGY] [BUGGY] } [CLASS] HashCodeBuilder 1 [METHOD] reflectionAppend [RETURN_TYPE] void  Object object Class<?> clazz HashCodeBuilder builder boolean useTransients String[] excludeFields [VARIABLES] Field field boolean useTransients ThreadLocal REGISTRY HashCodeBuilder builder Object fieldValue object Class clazz String[] excludeFields int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber Field[] fields IllegalAccessException e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	198	198	1	add	
31	[BUG] [BUGGY] Class<?> clazz = object.getClass(); [FE] AssertionFailedError [CONTEXT] public static <T> int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, T object, boolean testTransients, Class<? super T> reflectUpToClass, String[] excludeFields) { if (object == null) { throw new IllegalArgumentException("The object to build a hash code for must not be null"); } HashCodeBuilder builder = new HashCodeBuilder(initialNonZeroOddNumber, multiplierNonZeroOddNumber); [BUGGY] Class<?> clazz = object.getClass(); [BUGGY] reflectionAppend(object, clazz, builder, testTransients, excludeFields); while (clazz.getSuperclass() != null && clazz != reflectUpToClass) { clazz = clazz.getSuperclass(); reflectionAppend(object, clazz, builder, testTransients, excludeFields); } return builder.toHashCode(); } [CLASS] HashCodeBuilder 1 [METHOD] reflectionHashCode [RETURN_TYPE] <T>  int initialNonZeroOddNumber int multiplierNonZeroOddNumber T object boolean testTransients Class<? super T> reflectUpToClass String[] excludeFields [VARIABLES] boolean testTransients T object ThreadLocal REGISTRY HashCodeBuilder builder Class clazz reflectUpToClass String[] excludeFields int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	
32	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public static <T> int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, T object, boolean testTransients, Class<? super T> reflectUpToClass, String[] excludeFields) { if (object == null) { throw new IllegalArgumentException("The object to build a hash code for must not be null"); } HashCodeBuilder builder = new HashCodeBuilder(initialNonZeroOddNumber, multiplierNonZeroOddNumber); [BUGGY] [BUGGY] Class<?> clazz = object.getClass(); reflectionAppend(object, clazz, builder, testTransients, excludeFields); while (clazz.getSuperclass() != null && clazz != reflectUpToClass) { clazz = clazz.getSuperclass(); reflectionAppend(object, clazz, builder, testTransients, excludeFields); } return builder.toHashCode(); } [CLASS] HashCodeBuilder 1 [METHOD] reflectionHashCode [RETURN_TYPE] <T>  int initialNonZeroOddNumber int multiplierNonZeroOddNumber T object boolean testTransients Class<? super T> reflectUpToClass String[] excludeFields [VARIABLES] boolean testTransients T object ThreadLocal REGISTRY HashCodeBuilder builder Class clazz reflectUpToClass String[] excludeFields int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	add	
33	[BUG] [BUGGY] reflectionAppend(object, clazz, builder, testTransients, excludeFields); [FE] AssertionFailedError [CONTEXT] public static <T> int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, T object, boolean testTransients, Class<? super T> reflectUpToClass, String[] excludeFields) { if (object == null) { throw new IllegalArgumentException("The object to build a hash code for must not be null"); } HashCodeBuilder builder = new HashCodeBuilder(initialNonZeroOddNumber, multiplierNonZeroOddNumber); Class<?> clazz = object.getClass(); [BUGGY] reflectionAppend(object, clazz, builder, testTransients, excludeFields); [BUGGY] while (clazz.getSuperclass() != null && clazz != reflectUpToClass) { clazz = clazz.getSuperclass(); reflectionAppend(object, clazz, builder, testTransients, excludeFields); } return builder.toHashCode(); } [CLASS] HashCodeBuilder 1 [METHOD] reflectionHashCode [RETURN_TYPE] <T>  int initialNonZeroOddNumber int multiplierNonZeroOddNumber T object boolean testTransients Class<? super T> reflectUpToClass String[] excludeFields [VARIABLES] boolean testTransients T object ThreadLocal REGISTRY HashCodeBuilder builder Class clazz reflectUpToClass String[] excludeFields int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	
34	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public static <T> int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, T object, boolean testTransients, Class<? super T> reflectUpToClass, String[] excludeFields) { if (object == null) { throw new IllegalArgumentException("The object to build a hash code for must not be null"); } HashCodeBuilder builder = new HashCodeBuilder(initialNonZeroOddNumber, multiplierNonZeroOddNumber); Class<?> clazz = object.getClass(); [BUGGY] [BUGGY] reflectionAppend(object, clazz, builder, testTransients, excludeFields); while (clazz.getSuperclass() != null && clazz != reflectUpToClass) { clazz = clazz.getSuperclass(); reflectionAppend(object, clazz, builder, testTransients, excludeFields); } return builder.toHashCode(); } [CLASS] HashCodeBuilder 1 [METHOD] reflectionHashCode [RETURN_TYPE] <T>  int initialNonZeroOddNumber int multiplierNonZeroOddNumber T object boolean testTransients Class<? super T> reflectUpToClass String[] excludeFields [VARIABLES] boolean testTransients T object ThreadLocal REGISTRY HashCodeBuilder builder Class clazz reflectUpToClass String[] excludeFields int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	add	
35	[BUG] [BUGGY] while (clazz.getSuperclass() != null && clazz != reflectUpToClass) { [FE] AssertionFailedError [CONTEXT] public static <T> int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, T object, boolean testTransients, Class<? super T> reflectUpToClass, String[] excludeFields) { if (object == null) { throw new IllegalArgumentException("The object to build a hash code for must not be null"); } HashCodeBuilder builder = new HashCodeBuilder(initialNonZeroOddNumber, multiplierNonZeroOddNumber); Class<?> clazz = object.getClass(); reflectionAppend(object, clazz, builder, testTransients, excludeFields); [BUGGY] while (clazz.getSuperclass() != null && clazz != reflectUpToClass) { [BUGGY] clazz = clazz.getSuperclass(); reflectionAppend(object, clazz, builder, testTransients, excludeFields); } return builder.toHashCode(); } [CLASS] HashCodeBuilder 1 [METHOD] reflectionHashCode [RETURN_TYPE] <T>  int initialNonZeroOddNumber int multiplierNonZeroOddNumber T object boolean testTransients Class<? super T> reflectUpToClass String[] excludeFields [VARIABLES] boolean testTransients T object ThreadLocal REGISTRY HashCodeBuilder builder Class clazz reflectUpToClass String[] excludeFields int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	
36	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public static <T> int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, T object, boolean testTransients, Class<? super T> reflectUpToClass, String[] excludeFields) { if (object == null) { throw new IllegalArgumentException("The object to build a hash code for must not be null"); } HashCodeBuilder builder = new HashCodeBuilder(initialNonZeroOddNumber, multiplierNonZeroOddNumber); Class<?> clazz = object.getClass(); reflectionAppend(object, clazz, builder, testTransients, excludeFields); [BUGGY] [BUGGY] while (clazz.getSuperclass() != null && clazz != reflectUpToClass) { clazz = clazz.getSuperclass(); reflectionAppend(object, clazz, builder, testTransients, excludeFields); } return builder.toHashCode(); } [CLASS] HashCodeBuilder 1 [METHOD] reflectionHashCode [RETURN_TYPE] <T>  int initialNonZeroOddNumber int multiplierNonZeroOddNumber T object boolean testTransients Class<? super T> reflectUpToClass String[] excludeFields [VARIABLES] boolean testTransients T object ThreadLocal REGISTRY HashCodeBuilder builder Class clazz reflectUpToClass String[] excludeFields int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	add	
37	[BUG] [BUGGY] clazz = clazz.getSuperclass(); [FE] AssertionFailedError [CONTEXT] public static <T> int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, T object, boolean testTransients, Class<? super T> reflectUpToClass, String[] excludeFields) { if (object == null) { throw new IllegalArgumentException("The object to build a hash code for must not be null"); } HashCodeBuilder builder = new HashCodeBuilder(initialNonZeroOddNumber, multiplierNonZeroOddNumber); Class<?> clazz = object.getClass(); reflectionAppend(object, clazz, builder, testTransients, excludeFields); while (clazz.getSuperclass() != null && clazz != reflectUpToClass) { [BUGGY] clazz = clazz.getSuperclass(); [BUGGY] reflectionAppend(object, clazz, builder, testTransients, excludeFields); } return builder.toHashCode(); } [CLASS] HashCodeBuilder 1 [METHOD] reflectionHashCode [RETURN_TYPE] <T>  int initialNonZeroOddNumber int multiplierNonZeroOddNumber T object boolean testTransients Class<? super T> reflectUpToClass String[] excludeFields [VARIABLES] boolean testTransients T object ThreadLocal REGISTRY HashCodeBuilder builder Class clazz reflectUpToClass String[] excludeFields int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	363	363	1	replace	
38	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public static <T> int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, T object, boolean testTransients, Class<? super T> reflectUpToClass, String[] excludeFields) { if (object == null) { throw new IllegalArgumentException("The object to build a hash code for must not be null"); } HashCodeBuilder builder = new HashCodeBuilder(initialNonZeroOddNumber, multiplierNonZeroOddNumber); Class<?> clazz = object.getClass(); reflectionAppend(object, clazz, builder, testTransients, excludeFields); while (clazz.getSuperclass() != null && clazz != reflectUpToClass) { [BUGGY] [BUGGY] clazz = clazz.getSuperclass(); reflectionAppend(object, clazz, builder, testTransients, excludeFields); } return builder.toHashCode(); } [CLASS] HashCodeBuilder 1 [METHOD] reflectionHashCode [RETURN_TYPE] <T>  int initialNonZeroOddNumber int multiplierNonZeroOddNumber T object boolean testTransients Class<? super T> reflectUpToClass String[] excludeFields [VARIABLES] boolean testTransients T object ThreadLocal REGISTRY HashCodeBuilder builder Class clazz reflectUpToClass String[] excludeFields int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	363	363	1	add	
39	[BUG] [BUGGY] reflectionAppend(object, clazz, builder, testTransients, excludeFields); [FE] AssertionFailedError [CONTEXT] boolean testTransients, Class<? super T> reflectUpToClass, String[] excludeFields) { if (object == null) { throw new IllegalArgumentException("The object to build a hash code for must not be null"); } HashCodeBuilder builder = new HashCodeBuilder(initialNonZeroOddNumber, multiplierNonZeroOddNumber); Class<?> clazz = object.getClass(); reflectionAppend(object, clazz, builder, testTransients, excludeFields); while (clazz.getSuperclass() != null && clazz != reflectUpToClass) { clazz = clazz.getSuperclass(); [BUGGY] reflectionAppend(object, clazz, builder, testTransients, excludeFields); [BUGGY] } return builder.toHashCode(); } [CLASS] HashCodeBuilder 1 [METHOD] reflectionHashCode [RETURN_TYPE] <T>  int initialNonZeroOddNumber int multiplierNonZeroOddNumber T object boolean testTransients Class<? super T> reflectUpToClass String[] excludeFields [VARIABLES] boolean testTransients T object ThreadLocal REGISTRY HashCodeBuilder builder Class clazz reflectUpToClass String[] excludeFields int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	
40	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] boolean testTransients, Class<? super T> reflectUpToClass, String[] excludeFields) { if (object == null) { throw new IllegalArgumentException("The object to build a hash code for must not be null"); } HashCodeBuilder builder = new HashCodeBuilder(initialNonZeroOddNumber, multiplierNonZeroOddNumber); Class<?> clazz = object.getClass(); reflectionAppend(object, clazz, builder, testTransients, excludeFields); while (clazz.getSuperclass() != null && clazz != reflectUpToClass) { clazz = clazz.getSuperclass(); [BUGGY] [BUGGY] reflectionAppend(object, clazz, builder, testTransients, excludeFields); } return builder.toHashCode(); } [CLASS] HashCodeBuilder 1 [METHOD] reflectionHashCode [RETURN_TYPE] <T>  int initialNonZeroOddNumber int multiplierNonZeroOddNumber T object boolean testTransients Class<? super T> reflectUpToClass String[] excludeFields [VARIABLES] boolean testTransients T object ThreadLocal REGISTRY HashCodeBuilder builder Class clazz reflectUpToClass String[] excludeFields int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	
41	[BUG] [BUGGY] return builder.toHashCode(); [FE] AssertionFailedError [CONTEXT] if (object == null) { throw new IllegalArgumentException("The object to build a hash code for must not be null"); } HashCodeBuilder builder = new HashCodeBuilder(initialNonZeroOddNumber, multiplierNonZeroOddNumber); Class<?> clazz = object.getClass(); reflectionAppend(object, clazz, builder, testTransients, excludeFields); while (clazz.getSuperclass() != null && clazz != reflectUpToClass) { clazz = clazz.getSuperclass(); reflectionAppend(object, clazz, builder, testTransients, excludeFields); } [BUGGY] return builder.toHashCode(); [BUGGY] } [CLASS] HashCodeBuilder 1 [METHOD] reflectionHashCode [RETURN_TYPE] <T>  int initialNonZeroOddNumber int multiplierNonZeroOddNumber T object boolean testTransients Class<? super T> reflectUpToClass String[] excludeFields [VARIABLES] boolean testTransients T object ThreadLocal REGISTRY HashCodeBuilder builder Class clazz reflectUpToClass String[] excludeFields int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	replace	
42	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (object == null) { throw new IllegalArgumentException("The object to build a hash code for must not be null"); } HashCodeBuilder builder = new HashCodeBuilder(initialNonZeroOddNumber, multiplierNonZeroOddNumber); Class<?> clazz = object.getClass(); reflectionAppend(object, clazz, builder, testTransients, excludeFields); while (clazz.getSuperclass() != null && clazz != reflectUpToClass) { clazz = clazz.getSuperclass(); reflectionAppend(object, clazz, builder, testTransients, excludeFields); } [BUGGY] [BUGGY] return builder.toHashCode(); } [CLASS] HashCodeBuilder 1 [METHOD] reflectionHashCode [RETURN_TYPE] <T>  int initialNonZeroOddNumber int multiplierNonZeroOddNumber T object boolean testTransients Class<? super T> reflectUpToClass String[] excludeFields [VARIABLES] boolean testTransients T object ThreadLocal REGISTRY HashCodeBuilder builder Class clazz reflectUpToClass String[] excludeFields int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	366	366	1	add	
43	[BUG] [BUGGY] return reflectionHashCode(17, 37, object, false, null, null); [FE] AssertionFailedError [CONTEXT] public static int reflectionHashCode(Object object) { [BUGGY] return reflectionHashCode(17, 37, object, false, null, null); [BUGGY] } [CLASS] HashCodeBuilder 1 [METHOD] reflectionHashCode [RETURN_TYPE] int  Object object [VARIABLES] Object object boolean ThreadLocal REGISTRY int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	400	400	1	replace	
44	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public static int reflectionHashCode(Object object) { [BUGGY] [BUGGY] return reflectionHashCode(17, 37, object, false, null, null); } [CLASS] HashCodeBuilder 1 [METHOD] reflectionHashCode [RETURN_TYPE] int  Object object [VARIABLES] Object object boolean ThreadLocal REGISTRY int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	400	400	1	add	
45	[BUG] [BUGGY] getRegistry().add(new IDKey(value)); [FE] AssertionFailedError [CONTEXT] static void register(Object value) { [BUGGY] getRegistry().add(new IDKey(value)); [BUGGY] } [CLASS] HashCodeBuilder 1 [METHOD] register [RETURN_TYPE] void  Object value [VARIABLES] Object value boolean ThreadLocal REGISTRY int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	522	522	1	replace	
46	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] static void register(Object value) { [BUGGY] [BUGGY] getRegistry().add(new IDKey(value)); } [CLASS] HashCodeBuilder 1 [METHOD] register [RETURN_TYPE] void  Object value [VARIABLES] Object value boolean ThreadLocal REGISTRY int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	522	522	1	add	
47	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] static void register(Object value) { getRegistry().add(new IDKey(value)); [BUGGY] } [BUGGY]  [CLASS] HashCodeBuilder 1 [METHOD] register [RETURN_TYPE] void  Object value [VARIABLES] Object value boolean ThreadLocal REGISTRY int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	523	523	1	replace	
48	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] static void register(Object value) { getRegistry().add(new IDKey(value)); [BUGGY] [BUGGY] } [CLASS] HashCodeBuilder 1 [METHOD] register [RETURN_TYPE] void  Object value [VARIABLES] Object value boolean ThreadLocal REGISTRY int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	523	523	1	add	
49	[BUG] [BUGGY] getRegistry().remove(new IDKey(value)); [FE] AssertionFailedError [CONTEXT] static void unregister(Object value) { [BUGGY] getRegistry().remove(new IDKey(value)); [BUGGY] } [CLASS] HashCodeBuilder 1 [METHOD] unregister [RETURN_TYPE] void  Object value [VARIABLES] Object value boolean ThreadLocal REGISTRY int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	538	538	1	replace	
50	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] static void unregister(Object value) { [BUGGY] [BUGGY] getRegistry().remove(new IDKey(value)); } [CLASS] HashCodeBuilder 1 [METHOD] unregister [RETURN_TYPE] void  Object value [VARIABLES] Object value boolean ThreadLocal REGISTRY int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	538	538	1	add	
51	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] static void unregister(Object value) { getRegistry().remove(new IDKey(value)); [BUGGY] } [BUGGY]  [CLASS] HashCodeBuilder 1 [METHOD] unregister [RETURN_TYPE] void  Object value [VARIABLES] Object value boolean ThreadLocal REGISTRY int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	539	539	1	replace	
52	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] static void unregister(Object value) { getRegistry().remove(new IDKey(value)); [BUGGY] [BUGGY] } [CLASS] HashCodeBuilder 1 [METHOD] unregister [RETURN_TYPE] void  Object value [VARIABLES] Object value boolean ThreadLocal REGISTRY int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	539	539	1	add	
53	[BUG] [BUGGY] HashCodeBuilder builder = new HashCodeBuilder(initialNonZeroOddNumber, multiplierNonZeroOddNumber); [FE] AssertionFailedError [CONTEXT] public static <T> int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, T object, boolean testTransients, Class<? super T> reflectUpToClass, String[] excludeFields) { if (object == null) { throw new IllegalArgumentException("The object to build a hash code for must not be null"); } [BUGGY] HashCodeBuilder builder = new HashCodeBuilder(initialNonZeroOddNumber, multiplierNonZeroOddNumber); [BUGGY] Class<?> clazz = object.getClass(); reflectionAppend(object, clazz, builder, testTransients, excludeFields); while (clazz.getSuperclass() != null && clazz != reflectUpToClass) { clazz = clazz.getSuperclass(); reflectionAppend(object, clazz, builder, testTransients, excludeFields); } return builder.toHashCode(); } [CLASS] HashCodeBuilder 1 [METHOD] reflectionHashCode [RETURN_TYPE] <T>  int initialNonZeroOddNumber int multiplierNonZeroOddNumber T object boolean testTransients Class<? super T> reflectUpToClass String[] excludeFields [VARIABLES] boolean testTransients T object ThreadLocal REGISTRY HashCodeBuilder builder Class clazz reflectUpToClass String[] excludeFields int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.35355339059327373	359	359	1	replace	
54	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public static <T> int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, T object, boolean testTransients, Class<? super T> reflectUpToClass, String[] excludeFields) { if (object == null) { throw new IllegalArgumentException("The object to build a hash code for must not be null"); } [BUGGY] [BUGGY] HashCodeBuilder builder = new HashCodeBuilder(initialNonZeroOddNumber, multiplierNonZeroOddNumber); Class<?> clazz = object.getClass(); reflectionAppend(object, clazz, builder, testTransients, excludeFields); while (clazz.getSuperclass() != null && clazz != reflectUpToClass) { clazz = clazz.getSuperclass(); reflectionAppend(object, clazz, builder, testTransients, excludeFields); } return builder.toHashCode(); } [CLASS] HashCodeBuilder 1 [METHOD] reflectionHashCode [RETURN_TYPE] <T>  int initialNonZeroOddNumber int multiplierNonZeroOddNumber T object boolean testTransients Class<? super T> reflectUpToClass String[] excludeFields [VARIABLES] boolean testTransients T object ThreadLocal REGISTRY HashCodeBuilder builder Class clazz reflectUpToClass String[] excludeFields int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.35355339059327373	359	359	1	add	
55	[BUG] [BUGGY] if (object == null) { [FE] AssertionFailedError [CONTEXT] public static <T> int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, T object, boolean testTransients, Class<? super T> reflectUpToClass, String[] excludeFields) { [BUGGY] if (object == null) { [BUGGY] throw new IllegalArgumentException("The object to build a hash code for must not be null"); } HashCodeBuilder builder = new HashCodeBuilder(initialNonZeroOddNumber, multiplierNonZeroOddNumber); Class<?> clazz = object.getClass(); reflectionAppend(object, clazz, builder, testTransients, excludeFields); while (clazz.getSuperclass() != null && clazz != reflectUpToClass) { clazz = clazz.getSuperclass(); reflectionAppend(object, clazz, builder, testTransients, excludeFields); } return builder.toHashCode(); [CLASS] HashCodeBuilder 1 [METHOD] reflectionHashCode [RETURN_TYPE] <T>  int initialNonZeroOddNumber int multiplierNonZeroOddNumber T object boolean testTransients Class<? super T> reflectUpToClass String[] excludeFields [VARIABLES] boolean testTransients T object ThreadLocal REGISTRY HashCodeBuilder builder Class clazz reflectUpToClass String[] excludeFields int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	replace	
56	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public static <T> int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, T object, boolean testTransients, Class<? super T> reflectUpToClass, String[] excludeFields) { [BUGGY] [BUGGY] if (object == null) { throw new IllegalArgumentException("The object to build a hash code for must not be null"); } HashCodeBuilder builder = new HashCodeBuilder(initialNonZeroOddNumber, multiplierNonZeroOddNumber); Class<?> clazz = object.getClass(); reflectionAppend(object, clazz, builder, testTransients, excludeFields); while (clazz.getSuperclass() != null && clazz != reflectUpToClass) { clazz = clazz.getSuperclass(); reflectionAppend(object, clazz, builder, testTransients, excludeFields); } return builder.toHashCode(); [CLASS] HashCodeBuilder 1 [METHOD] reflectionHashCode [RETURN_TYPE] <T>  int initialNonZeroOddNumber int multiplierNonZeroOddNumber T object boolean testTransients Class<? super T> reflectUpToClass String[] excludeFields [VARIABLES] boolean testTransients T object ThreadLocal REGISTRY HashCodeBuilder builder Class clazz reflectUpToClass String[] excludeFields int iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	356	356	1	add	
57	[BUG] [BUGGY] iTotal = iTotal * iConstant + object.hashCode(); [FE] AssertionFailedError [CONTEXT] append((double[]) object); } else if (object instanceof float[]) { append((float[]) object); } else if (object instanceof boolean[]) { append((boolean[]) object); } else {  append((Object[]) object); } } else { [BUGGY] iTotal = iTotal * iConstant + object.hashCode(); [BUGGY] } [CLASS] HashCodeBuilder 1 [METHOD] append [RETURN_TYPE] HashCodeBuilder  Object object [VARIABLES] Object object boolean ThreadLocal REGISTRY int i iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber value  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	883	883	1	replace	
58	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] append((double[]) object); } else if (object instanceof float[]) { append((float[]) object); } else if (object instanceof boolean[]) { append((boolean[]) object); } else {  append((Object[]) object); } } else { [BUGGY] [BUGGY] iTotal = iTotal * iConstant + object.hashCode(); } [CLASS] HashCodeBuilder 1 [METHOD] append [RETURN_TYPE] HashCodeBuilder  Object object [VARIABLES] Object object boolean ThreadLocal REGISTRY int i iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber value  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.3333333333333333	883	883	1	add	
59	[BUG] [BUGGY] if (object == null) { [FE] AssertionFailedError [CONTEXT] public HashCodeBuilder append(Object object) { [BUGGY] if (object == null) { [BUGGY] iTotal = iTotal * iConstant; } else { if(object.getClass().isArray()) {   if (object instanceof long[]) { append((long[]) object); } else if (object instanceof int[]) { append((int[]) object); [CLASS] HashCodeBuilder 1 [METHOD] append [RETURN_TYPE] HashCodeBuilder  Object object [VARIABLES] Object object boolean ThreadLocal REGISTRY int i iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber value  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.23570226039551587	855	855	1	replace	
60	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public HashCodeBuilder append(Object object) { [BUGGY] [BUGGY] if (object == null) { iTotal = iTotal * iConstant; } else { if(object.getClass().isArray()) {   if (object instanceof long[]) { append((long[]) object); } else if (object instanceof int[]) { append((int[]) object); [CLASS] HashCodeBuilder 1 [METHOD] append [RETURN_TYPE] HashCodeBuilder  Object object [VARIABLES] Object object boolean ThreadLocal REGISTRY int i iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber value  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.23570226039551587	855	855	1	add	
61	[BUG] [BUGGY] if(object.getClass().isArray()) { [FE] AssertionFailedError [CONTEXT] if (object == null) { iTotal = iTotal * iConstant; } else { [BUGGY] if(object.getClass().isArray()) { [BUGGY]   if (object instanceof long[]) { append((long[]) object); } else if (object instanceof int[]) { append((int[]) object); } else if (object instanceof short[]) { append((short[]) object); } else if (object instanceof char[]) { append((char[]) object); [CLASS] HashCodeBuilder 1 [METHOD] append [RETURN_TYPE] HashCodeBuilder  Object object [VARIABLES] Object object boolean ThreadLocal REGISTRY int i iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber value  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.23570226039551587	859	859	1	replace	
62	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (object == null) { iTotal = iTotal * iConstant; } else { [BUGGY] [BUGGY] if(object.getClass().isArray()) {   if (object instanceof long[]) { append((long[]) object); } else if (object instanceof int[]) { append((int[]) object); } else if (object instanceof short[]) { append((short[]) object); } else if (object instanceof char[]) { append((char[]) object); [CLASS] HashCodeBuilder 1 [METHOD] append [RETURN_TYPE] HashCodeBuilder  Object object [VARIABLES] Object object boolean ThreadLocal REGISTRY int i iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber value  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.23570226039551587	859	859	1	add	
63	[BUG] [BUGGY] return this; [FE] AssertionFailedError [CONTEXT] } else if (object instanceof boolean[]) { append((boolean[]) object); } else {  append((Object[]) object); } } else { iTotal = iTotal * iConstant + object.hashCode(); } } [BUGGY] return this; [BUGGY] } [CLASS] HashCodeBuilder 1 [METHOD] append [RETURN_TYPE] HashCodeBuilder  Object object [VARIABLES] Object object boolean ThreadLocal REGISTRY int i iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber value  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.23570226039551587	886	886	1	replace	
64	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } else if (object instanceof boolean[]) { append((boolean[]) object); } else {  append((Object[]) object); } } else { iTotal = iTotal * iConstant + object.hashCode(); } } [BUGGY] [BUGGY] return this; } [CLASS] HashCodeBuilder 1 [METHOD] append [RETURN_TYPE] HashCodeBuilder  Object object [VARIABLES] Object object boolean ThreadLocal REGISTRY int i iConstant iTotal initialNonZeroOddNumber multiplierNonZeroOddNumber value  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.23570226039551587	886	886	1	add	
