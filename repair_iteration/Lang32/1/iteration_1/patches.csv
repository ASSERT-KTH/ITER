bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  HashCodeBuilder  builder  =  builder.build();  [CE]  variable  builder  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  HashCodeBuilder  builder  =  builder.build();  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	HashCodeBuilder  builder  =  builder.build();	      FieldValue[]    fields    =    clazz.getDeclaredFields();    HashCodeBuilder    builder    =    builder.build();    	non-compiled	[CE]  variable  builder  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	22	None	replace
2	[BUG]  [BUGGY]  HashCodeBuilder  builder  =  clazz.build();  [CE]  variable  builder  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  HashCodeBuilder  builder  =  clazz.build();  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	HashCodeBuilder  builder  =  clazz.build();	      FieldValue[]    fields    =    clazz.getDeclaredFields();    HashCodeBuilder    builder    =    builder.build();    	non-compiled	[CE]  variable  builder  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	22	None	replace
3	[BUG]  [BUGGY]  FieldValue[]  fields  =  clazz.getDeclaredFields();  HashCodeBuilder  builder  =  constructer.build();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  FieldValue[]  fields  =  clazz.getDeclaredFields();  HashCodeBuilder  builder  =  constructer.build();  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue[]  fields  =  clazz.getDeclaredFields();  HashCodeBuilder  builder  =  constructer.build();	      FieldValue[]    fields    =    clazz.getDeclaredFields();    HashCodeBuilder    builder    =    builder.build();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
4	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields();  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	add	Object[]  fields  =  clazz.getDeclaredFields();	      Object[]    fields    =    object.getDeclaredFields();    	compilable	  [FE]  StackOverflowError  	12	1	replace
5	[BUG]  [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields();  [FE]  StackOverflowError  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields();  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object[]  fields  =  clazz.getDeclaredFields();	      Object[]    fields    =    object.getDeclaredFields();    	compilable	  [FE]  StackOverflowError  	12	1	replace
6	[BUG]  [BUGGY]  Object[]  fields  =  fieldValue.getDeclaredFields();  [CE]  cannot  find  symbol  fieldValue  [FE]              AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  Object[]  fields  =  fieldValue.getDeclaredFields();  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object[]  fields  =  fieldValue.getDeclaredFields();	      Object[]    fields    =    object.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol  fieldValue	12	None	replace
7	[BUG]  [BUGGY]  Object[]  fields  =  excludeFields.getDeclaredFields();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  Object[]  fields  =  excludeFields.getDeclaredFields();  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object[]  fields  =  excludeFields.getDeclaredFields();	      Object[]    fields    =    object.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
8	[BUG]  [BUGGY]  FieldValue  objectValue  =  object.getValue();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  FieldValue  objectValue  =  object.getValue();  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  objectValue  =  object.getValue();	      FieldValue    fieldValue    =    object.getValue();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
9	[BUG]  [BUGGY]  FieldValue  fieldValue  =  object.toString();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  FieldValue  fieldValue  =  object.toString();  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =  object.toString();	      FieldValue    fieldValue    =    object.getValue();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
10	[BUG]  [BUGGY]  FieldValue[]  fields  =  excludeFields.getDeclaredFields();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  FieldValue[]  fields  =  excludeFields.getDeclaredFields();  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue[]  fields  =  excludeFields.getDeclaredFields();	      FieldValue[]    fields    =    object.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
11	[BUG]  [BUGGY]  FieldValue[]  fields  =  class.getDeclaredFields();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  FieldValue[]  fields  =  class.getDeclaredFields();  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue[]  fields  =  class.getDeclaredFields();	      FieldValue[]    fields    =    object.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
12	[BUG]  [BUGGY]  Object  objectValue  =  object.getValue();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  Object  objectValue  =  object.getValue();  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object  objectValue  =  object.getValue();	      Object    fieldValue    =    object.getValue();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
13	[BUG]  [BUGGY]  FieldValue  fieldValue  =  clazz.getValue(object);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  FieldValue  fieldValue  =  clazz.getValue(object);  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =  clazz.getValue(object);	      FieldValue    fieldValue    =    clazz.getValue();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
14	[BUG]  [BUGGY]  FieldValue  objectValue  =  clazz.getValue();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  FieldValue  objectValue  =  clazz.getValue();  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  objectValue  =  clazz.getValue();	      FieldValue    fieldValue    =    clazz.getValue();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
15	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  true);  [CE]  cannot  find  symbol  fields  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  AccessibleObject.setAccessible(fields,  true);  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	AccessibleObject.setAccessible(fields,  true);	      FieldValue[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(fields,    true);    	non-compiled	[CE]  cannot  find  symbol  fields	15	None	replace
16	[BUG]  [BUGGY]  FieldValue[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  true);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  FieldValue[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  true);  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  true);	      FieldValue[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(fields,    true);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
17	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  false);  [CE]  cannot  find  symbol  fields  [FE]              AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  AccessibleObject.setAccessible(fields,  false);  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	AccessibleObject.setAccessible(fields,  false);	      FieldValue[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(fields,    false);    	non-compiled	[CE]  cannot  find  symbol  fields	18	None	replace
18	[BUG]  [BUGGY]  FieldValue[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  false);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  FieldValue[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  false);  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  false);	      FieldValue[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(fields,    false);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
19	[BUG]  [BUGGY]  FieldValue[]  fields  =  clazz.getSuperclassFields();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  FieldValue[]  fields  =  clazz.getSuperclassFields();  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue[]  fields  =  clazz.getSuperclassFields();	      FieldValue[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
20	[BUG]  [BUGGY]  FieldValue[]  fields  =  clazz.getStaticFields();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  FieldValue[]  fields  =  clazz.getStaticFields();  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue[]  fields  =  clazz.getStaticFields();	      FieldValue[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
21	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [BUGGY]    }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwables.throw  new  IllegalStateException( " ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	4	None	replace
22	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".equals(object.getClass()));  [CE]  no  suitable  constructor  found  for  IllegalStateException(boolean)  [FE]      IllegalStateException    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  throw  new  IllegalStateException( " ".equals(object.getClass()));  [BUGGY]    }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	throw  new  IllegalStateException( " ".equals(object.getClass()));	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalStateException(boolean)	4	None	replace
23	[BUG]  [BUGGY]  throw  new  UnsupportedOperationException(   "   ");  throw  new  UnsupportedOperationException(   "   ");  [CE]  unreachable  statement  [FE]    UnsupportedOperationException    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  throw  new  UnsupportedOperationException(   "   ");  throw  new  UnsupportedOperationException(   "   ");  [BUGGY]    }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	throw    new    UnsupportedOperationException(   "   ");    throw  new  UnsupportedOperationException(   "   ");	  	non-compiled	[CE]  unreachable  statement	6	None	add
24	[BUG]  [BUGGY]  throw  new  UnsupportedOperationException(   "   ");  Throwables.throw  new  UnsupportedOperationException( "   ");  [CE]  <identifier>  expected  [FE]      UnsupportedOperationException    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  throw  new  UnsupportedOperationException(   "   ");  Throwables.throw  new  UnsupportedOperationException( "   ");  [BUGGY]    }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	throw    new    UnsupportedOperationException(   "   ");    Throwables.throw  new  UnsupportedOperationException( "   ");	  	non-compiled	[CE]  <identifier>  expected	6	None	add
25	[BUG]  [BUGGY]  throw  new  UnsupportedOperationException(   "   ");  Throw  new  UnsupportedOperationException( "   ");  [CE]  not  a  statement  [FE]        UnsupportedOperationException    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  throw  new  UnsupportedOperationException(   "   ");  Throw  new  UnsupportedOperationException( "   ");  [BUGGY]    }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	throw    new    UnsupportedOperationException(   "   ");    Throw  new  UnsupportedOperationException( "   ");	  	non-compiled	[CE]  not  a  statement	6	None	add
26	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( " ");  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  Throwables.throw  new  RuntimeException( " ");  [BUGGY]    }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwables.throw  new  RuntimeException( " ");	  throw    new    RuntimeException(   "   ");    	non-compiled	[CE]  <identifier>  expected	20	None	replace
27	[BUG]  [BUGGY]  Class  <?>[]  fields  =  clazz.getDeclaredFields();  [CE]  incompatible  types  [FE]    StackOverflowError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  Class  <?>[]  fields  =  clazz.getDeclaredFields();  [BUGGY]    }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Class  <?>[]  fields  =  clazz.getDeclaredFields();	      	non-compiled	[CE]  incompatible  types	9	None	replace
28	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   ");  throw  new  IllegalStateException( "   ");  [CE]  unreachable  statement  [FE]    IllegalStateException    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  throw  new  IllegalStateException(   "   ");  throw  new  IllegalStateException( "   ");  [BUGGY]    }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	throw    new    IllegalStateException(   "   ");    throw  new  IllegalStateException( "   ");	  	non-compiled	[CE]  unreachable  statement	3	None	add
29	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   ");  Throw  new  IllegalStateException( "   ");  [CE]  not  a  statement  [FE]      IllegalStateException    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  throw  new  IllegalStateException(   "   ");  Throw  new  IllegalStateException( "   ");  [BUGGY]    }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	throw    new    IllegalStateException(   "   ");    Throw  new  IllegalStateException( "   ");	  	non-compiled	[CE]  not  a  statement	3	None	add
30	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   ");  Throwables.throw  new  IllegalStateException( "   ");  [CE]  <identifier>  expected  [FE]        IllegalStateException    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  throw  new  IllegalStateException(   "   ");  Throwables.throw  new  IllegalStateException( "   ");  [BUGGY]    }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	throw    new    IllegalStateException(   "   ");    Throwables.throw  new  IllegalStateException( "   ");	  	non-compiled	[CE]  <identifier>  expected	3	None	add
31	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [CE]  <identifier>  expected  [FE]    UnsupportedOperationException    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [BUGGY]    }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwables.throw  new  IllegalArgumentException( " ");	  throw    new    UnsupportedOperationException(   "   ");    	non-compiled	[CE]  <identifier>  expected	7	None	replace
32	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  throw  new  IllegalArgumentException( "   ");  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  throw  new  IllegalArgumentException(   "   ");  throw  new  IllegalArgumentException( "   ");  [BUGGY]    }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	throw    new    IllegalArgumentException(   "   ");    throw  new  IllegalArgumentException( "   ");	  	non-compiled	[CE]  unreachable  statement	1	None	add
33	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwables.throw  new  IllegalArgumentException( "   ");  [CE]  <identifier>  expected  [FE]      IllegalArgumentException    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwables.throw  new  IllegalArgumentException( "   ");  [BUGGY]    }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	throw    new    IllegalArgumentException(   "   ");    Throwables.throw  new  IllegalArgumentException( "   ");	  	non-compiled	[CE]  <identifier>  expected	1	None	add
34	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throw  new  IllegalArgumentException( "   ");  [CE]  not  a  statement  [FE]        IllegalArgumentException    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throw  new  IllegalArgumentException( "   ");  [BUGGY]    }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	throw    new    IllegalArgumentException(   "   ");    Throw  new  IllegalArgumentException( "   ");	  	non-compiled	[CE]  not  a  statement	1	None	add
35	[BUG]  [BUGGY]  throw  new  RuntimeException(   "   ");  throw  new  RuntimeException( "   ");  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  throw  new  RuntimeException(   "   ");  throw  new  RuntimeException( "   ");  [BUGGY]    }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	throw    new    RuntimeException(   "   ");    throw  new  RuntimeException( "   ");	  	non-compiled	[CE]  unreachable  statement	19	None	add
36	[BUG]  [BUGGY]  throw  new  RuntimeException(   "   ");  Throw  new  RuntimeException( "   ");  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  throw  new  RuntimeException(   "   ");  Throw  new  RuntimeException( "   ");  [BUGGY]    }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	throw    new    RuntimeException(   "   ");    Throw  new  RuntimeException( "   ");	  	non-compiled	[CE]  not  a  statement	19	None	add
37	[BUG]  [BUGGY]  throw  new  RuntimeException(   "   ");  Throwables.throw  new  RuntimeException( "   ");  [CE]  <identifier>  expected  [FE]        RuntimeException    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  throw  new  RuntimeException(   "   ");  Throwables.throw  new  RuntimeException( "   ");  [BUGGY]    }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	throw    new    RuntimeException(   "   ");    Throwables.throw  new  RuntimeException( "   ");	  	non-compiled	[CE]  <identifier>  expected	19	None	add
38	[BUG]  [BUGGY]      Class  <?>[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  [CE]  incompatible  types  [FE]    StackOverflowError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]      Class  <?>[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  [BUGGY]    }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	        Class  <?>[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);	  	non-compiled	[CE]  incompatible  types	8	None	add
39	[BUG]  [BUGGY]  FieldValue  fieldValue  =  object.getDeclaredFieldValue();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  FieldValue  fieldValue  =  object.getDeclaredFieldValue();  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =  object.getDeclaredFieldValue();	      FieldValue    fieldValue    =    clazz.getDeclaredFieldValue();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
40	[BUG]  [BUGGY]  FieldValue  objectValue  =  clazz.getDeclaredFieldValue();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  FieldValue  objectValue  =  clazz.getDeclaredFieldValue();  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  objectValue  =  clazz.getDeclaredFieldValue();	      FieldValue    fieldValue    =    clazz.getDeclaredFieldValue();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
41	[BUG]  [BUGGY]  FieldValue  fieldValue  =  this.clazz.getDeclaredFieldValue();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  FieldValue  fieldValue  =  this.clazz.getDeclaredFieldValue();  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =  this.clazz.getDeclaredFieldValue();	      FieldValue    fieldValue    =    clazz.getDeclaredFieldValue();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
42	[BUG]  [BUGGY]  FieldValue  fieldValue  =  object.getDeclaredFields();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  FieldValue  fieldValue  =  object.getDeclaredFields();  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =  object.getDeclaredFields();	      FieldValue    fieldValue    =    clazz.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
43	[BUG]  [BUGGY]  FieldValue  objectValue  =  clazz.getDeclaredFields();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  FieldValue  objectValue  =  clazz.getDeclaredFields();  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  objectValue  =  clazz.getDeclaredFields();	      FieldValue    fieldValue    =    clazz.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
44	[BUG]  [BUGGY]  FieldValue  value  =  clazz.getDeclaredFields();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  FieldValue  value  =  clazz.getDeclaredFields();  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  value  =  clazz.getDeclaredFields();	      FieldValue    fieldValue    =    clazz.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
45	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(excludeFields));  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(boolean)  [FE]    IllegalArgumentException    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(excludeFields));  [BUGGY]    }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	throw  new  IllegalArgumentException( " ".equals(excludeFields));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(boolean)	2	None	replace
46	[BUG]  [BUGGY]      builder.addChangeListener(this);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]    StackOverflowError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]      builder.addChangeListener(this);  [BUGGY]    }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	        builder.addChangeListener(this);	  	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	8	None	add
47	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      StackOverflowError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]      builder.register(object);  [BUGGY]    }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	add	        builder.register(object);	  	compilable	  [FE]  AssertionFailedError  	8	1	add
48	[BUG]  [BUGGY]      builder.register(object);  [FE]  AssertionFailedError  [FE]      StackOverflowError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]      builder.register(object);  [BUGGY]    }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	        builder.register(object);	  	compilable	  [FE]  AssertionFailedError  	8	1	add
49	[BUG]  [BUGGY]      builder.reset();  [CE]  cannot  find  symbol  [FE]        StackOverflowError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]      builder.reset();  [BUGGY]    }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	        builder.reset();	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
50	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]      builder.append(object);  [BUGGY]    }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	add	        builder.append(object);	  	compilable	  [FE]  StackOverflowError  	8	1	add
51	[BUG]  [BUGGY]      builder.append(object);  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]      builder.append(object);  [BUGGY]    }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	        builder.append(object);	  	compilable	  [FE]  StackOverflowError  	8	1	add
52	[BUG]  [BUGGY]      builder.add(object);  [CE]  cannot  find  symbol  [FE]            StackOverflowError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]      builder.add(object);  [BUGGY]    }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	        builder.add(object);	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
53	[BUG]  [BUGGY]  FieldValue  fieldValue  =  clazz.getDeclaredFieldValue(excludeFields);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  FieldValue  fieldValue  =  clazz.getDeclaredFieldValue(excludeFields);  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =  clazz.getDeclaredFieldValue(excludeFields);	      FieldValue    fieldValue    =    clazz.getDeclaredFieldValue();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
54	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".equals(excludeFields));  [CE]  no  suitable  constructor  found  for  IllegalStateException(boolean)  [FE]    IllegalStateException    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  throw  new  IllegalStateException( " ".equals(excludeFields));  [BUGGY]    }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	throw  new  IllegalStateException( " ".equals(excludeFields));	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalStateException(boolean)	4	None	replace
55	[BUG]  [BUGGY]  FieldValue[]  fields  =  clazz.getDeclaredFields(excludeFields);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  FieldValue[]  fields  =  clazz.getDeclaredFields(excludeFields);  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue[]  fields  =  clazz.getDeclaredFields(excludeFields);	      FieldValue[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
56	[BUG]  [BUGGY]  FieldValue[]  fields  =  clazz.getFields();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  FieldValue[]  fields  =  clazz.getFields();  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue[]  fields  =  clazz.getFields();	      FieldValue[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
57	[BUG]  [BUGGY]  throw  new  RuntimeException(   "   ");  throw  new  RuntimeException( ",   ");  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  throw  new  RuntimeException(   "   ");  throw  new  RuntimeException( ",   ");  [BUGGY]    }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	throw    new    RuntimeException(   "   ");    throw  new  RuntimeException( ",   ");	  	non-compiled	[CE]  unreachable  statement	19	None	add
58	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  Throwable  t  =  new  IllegalStateException( " ");  [BUGGY]    }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	add	Throwable  t  =  new  IllegalStateException( " ");	  throw    new    IllegalAccessException(   "   ");    	compilable	  [FE]  StackOverflowError  	5	1	replace
59	[BUG]  [BUGGY]  Throwable  t  =  new  IllegalStateException( " ");  [FE]  StackOverflowError  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  Throwable  t  =  new  IllegalStateException( " ");  [BUGGY]    }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwable  t  =  new  IllegalStateException( " ");	  throw    new    IllegalAccessException(   "   ");    	compilable	  [FE]  StackOverflowError  	5	1	replace
60	[BUG]  [BUGGY]  FieldValue  fieldValue  =  object  instanceof  FieldValue?(FieldValue)object  :  object.getValue();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  FieldValue  fieldValue  =  object  instanceof  FieldValue?(FieldValue)object  :  object.getValue();  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =  object  instanceof  FieldValue?(FieldValue)object  :  object.getValue();	      FieldValue    fieldValue    =    object.getValue();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
61	[BUG]  [BUGGY]  Object  fieldValue  =  object  instanceof  String?((  String)object).getValue()  :  null;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  Object  fieldValue  =  object  instanceof  String?((  String)object).getValue()  :  null;  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object  fieldValue  =  object  instanceof  String?((  String)object).getValue()  :  null;	      Object    fieldValue    =    object.getValue();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
62	[BUG]  [BUGGY]  Object  fieldValue  =  object  instanceof  String?((  String)object).getValue()  :  object.getValue();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  Object  fieldValue  =  object  instanceof  String?((  String)object).getValue()  :  object.getValue();  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object  fieldValue  =  object  instanceof  String?((  String)object).getValue()  :  object.getValue();	      Object    fieldValue    =    object.getValue();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
63	[BUG]  [BUGGY]  FieldValue  fieldValue  =  excludeFields.getDeclaredFields();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  FieldValue  fieldValue  =  excludeFields.getDeclaredFields();  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =  excludeFields.getDeclaredFields();	      FieldValue    fieldValue    =    clazz.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
64	[BUG]  [BUGGY]  FieldValue  fieldValue  =  clazz.getDeclaredFields(excludeFields);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  FieldValue  fieldValue  =  clazz.getDeclaredFields(excludeFields);  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =  clazz.getDeclaredFields(excludeFields);	      FieldValue    fieldValue    =    clazz.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
65	[BUG]  [BUGGY]  FieldValue  fieldValue  =  clazz.getFieldValue();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  FieldValue  fieldValue  =  clazz.getFieldValue();  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =  clazz.getFieldValue();	      FieldValue    fieldValue    =    clazz.getValue();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
66	[BUG]  [BUGGY]  FieldValue  fieldValue  =  clazz.getValue(null);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  FieldValue  fieldValue  =  clazz.getValue(null);  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =  clazz.getValue(null);	      FieldValue    fieldValue    =    clazz.getValue();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
67	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwable  e  =  new  IllegalArgumentException( "   ");  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwable  e  =  new  IllegalArgumentException( "   ");  [BUGGY]    }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	throw    new    IllegalArgumentException(   "   ");    Throwable  e  =  new  IllegalArgumentException( "   ");	  	non-compiled	[CE]  unreachable  statement	1	None	add
68	[BUG]  [BUGGY]  throw  new  UnsupportedOperationException(   "   ");  new  UnsupportedOperationException(   "   ");  [CE]  unreachable  statement  [FE]    UnsupportedOperationException    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  throw  new  UnsupportedOperationException(   "   ");  new  UnsupportedOperationException(   "   ");  [BUGGY]    }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	throw    new    UnsupportedOperationException(   "   ");    new  UnsupportedOperationException(   "   ");	  	non-compiled	[CE]  unreachable  statement	6	None	add
69	[BUG]  [BUGGY]  FieldValue[]  fields  =  clazz.getDeclaredFields();  HashCodeBuilder  builder  =  clazz.build();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  FieldValue[]  fields  =  clazz.getDeclaredFields();  HashCodeBuilder  builder  =  clazz.build();  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue[]  fields  =  clazz.getDeclaredFields();  HashCodeBuilder  builder  =  clazz.build();	      FieldValue[]    fields    =    clazz.getDeclaredFields();    HashCodeBuilder    builder    =    builder.build();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
70	[BUG]  [BUGGY]  FieldValue[]  fields  =  object.getDeclaredFields();  AccessibleObject.setAccessible(fields,  false);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  FieldValue[]  fields  =  object.getDeclaredFields();  AccessibleObject.setAccessible(fields,  false);  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue[]  fields  =  object.getDeclaredFields();  AccessibleObject.setAccessible(fields,  false);	      FieldValue[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(fields,    false);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
71	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwable  m  =  clazz.getDeclaredException( "   ");  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwable  m  =  clazz.getDeclaredException( "   ");  [BUGGY]    }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	throw    new    IllegalArgumentException(   "   ");    Throwable  m  =  clazz.getDeclaredException( "   ");	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
72	[BUG]  [BUGGY]  FieldValue  fieldValue  =  clazz.getDeclaredFieldValue(object);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  FieldValue  fieldValue  =  clazz.getDeclaredFieldValue(object);  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =  clazz.getDeclaredFieldValue(object);	      FieldValue    fieldValue    =    clazz.getDeclaredFieldValue();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
73	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(object.getClass()));  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(boolean)  [FE]    IllegalArgumentException    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(object.getClass()));  [BUGGY]    }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	throw  new  IllegalArgumentException( " ".equals(object.getClass()));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(boolean)	2	None	replace
74	[BUG]  [BUGGY]  FieldValue[]  fields  =  object.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  FieldValue[]  fields  =  object.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue[]  fields  =  object.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);	      FieldValue[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(fields,    true);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
75	[BUG]  [BUGGY]  Object  fieldValue  =  object.getValue();  builder.append(fieldValue);  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  Object  fieldValue  =  object.getValue();  builder.append(fieldValue);  [BUGGY]    }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object  fieldValue  =  object.getValue();  builder.append(fieldValue);	      	non-compiled	[CE]  cannot  find  symbol	9	None	replace
76	[BUG]  [BUGGY]  Object  fieldValue  =  object.getValue();  builder.setAccessible(fieldValue,  true);  [CE]  cannot  find  symbol  [FE]      StackOverflowError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  Object  fieldValue  =  object.getValue();  builder.setAccessible(fieldValue,  true);  [BUGGY]    }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object  fieldValue  =  object.getValue();  builder.setAccessible(fieldValue,  true);	      	non-compiled	[CE]  cannot  find  symbol	9	None	replace
77	[BUG]  [BUGGY]  Object  fieldValue  =  object.getValue();  builder.addChildToBack(fieldValue);  [CE]  cannot  find  symbol  [FE]        StackOverflowError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  Object  fieldValue  =  object.getValue();  builder.addChildToBack(fieldValue);  [BUGGY]    }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object  fieldValue  =  object.getValue();  builder.addChildToBack(fieldValue);	      	non-compiled	[CE]  cannot  find  symbol	9	None	replace
78	[BUG]  [BUGGY]  Object  fieldValue  =  object.getValue();  builder.addChangeListener(this);  [CE]  cannot  find  symbol  [FE]          StackOverflowError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  Object  fieldValue  =  object.getValue();  builder.addChangeListener(this);  [BUGGY]    }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object  fieldValue  =  object.getValue();  builder.addChangeListener(this);	      	non-compiled	[CE]  cannot  find  symbol	9	None	replace
79	[BUG]  [BUGGY]      Object  fieldValue  =  object.getValue();  builder.setAccessible(fieldValue,  false);  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]      Object  fieldValue  =  object.getValue();  builder.setAccessible(fieldValue,  false);  [BUGGY]    }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	        Object  fieldValue  =  object.getValue();  builder.setAccessible(fieldValue,  false);	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
80	[BUG]  [BUGGY]  throw  new  UnsupportedOperationException( " "),  e);  [CE]  [FE]    UnsupportedOperationException    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  throw  new  UnsupportedOperationException( " "),  e);  [BUGGY]    }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	throw  new  UnsupportedOperationException( " "),  e);	  throw    new    UnsupportedOperationException(   "   ");    	non-compiled	[CE]  	7	None	replace
81	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   ");  throw  new  IllegalStateException( ",   ");  [CE]  unreachable  statement  [FE]    IllegalStateException    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  throw  new  IllegalStateException(   "   ");  throw  new  IllegalStateException( ",   ");  [BUGGY]    }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	throw    new    IllegalStateException(   "   ");    throw  new  IllegalStateException( ",   ");	  	non-compiled	[CE]  unreachable  statement	3	None	add
82	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  Object  fieldValue  =  object.toString();  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	add	Object  fieldValue  =  object.toString();	      Object    fieldValue    =    object.getValue();    	compilable	  [FE]  StackOverflowError  	21	1	replace
83	[BUG]  [BUGGY]  Object  fieldValue  =  object.toString();  [FE]  StackOverflowError  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {    [BUGGY]  Object  fieldValue  =  object.toString();  [BUGGY]    return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object  fieldValue  =  object.toString();	      Object    fieldValue    =    object.getValue();    	compilable	  [FE]  StackOverflowError  	21	1	replace
