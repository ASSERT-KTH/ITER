bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]            IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throw  new  IllegalArgumentException( " ");  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throw  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(       "       ");    Throw    new    IllegalArgumentException(   "       ");    	non-compiled	[CE]  not  a  statement	34	None	replace
2	[BUG]  [BUGGY]  Throw  new  IllegalStateException( " ");  [CE]  not  a  statement  [FE]              IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throw  new  IllegalStateException( " ");  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throw  new  IllegalStateException( " ");	  throw    new    IllegalArgumentException(       "       ");    Throw    new    IllegalArgumentException(   "       ");    	non-compiled	[CE]  not  a  statement	34	None	replace
3	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  throw  new  IllegalStateException( " ");  [CE]  <identifier>  expected  [FE]        IllegalStateException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  throw  new  IllegalStateException( " ");  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwables.throw  new  IllegalStateException( " ");  throw  new  IllegalStateException( " ");	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException(   "       ");    	non-compiled	[CE]  <identifier>  expected	28	None	replace
4	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  if(!useTransients)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	add	if(!useTransients)  {  throw  new  IllegalStateException( " ");  }	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException(   "       ");    	compilable	  [FE]  IllegalStateException  	28	1	replace
5	[BUG]  [BUGGY]  if(!useTransients)  {  throw  new  IllegalStateException( " ");  }  [FE]  IllegalStateException  [FE]          IllegalStateException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  if(!useTransients)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	if(!useTransients)  {  throw  new  IllegalStateException( " ");  }	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException(   "       ");    	compilable	  [FE]  IllegalStateException  	28	1	replace
6	[BUG]  [BUGGY]  Object[]  fields  =  clazz.getSuperclasses();  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object[]  fields  =  clazz.getSuperclasses();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object[]  fields  =  clazz.getSuperclasses();	  Object[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
7	[BUG]  [BUGGY]  Object[]  fields  =  clazz.getStaticFields();  [CE]  cannot  find  symbol  [FE]      StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object[]  fields  =  clazz.getStaticFields();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object[]  fields  =  clazz.getStaticFields();	  Object[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
8	[BUG]  [BUGGY]  FieldValue  objectValue  =  clazz.getValue(object);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  objectValue  =  clazz.getValue(object);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  objectValue  =  clazz.getValue(object);	  FieldValue    fieldValue    =    clazz.getValue(object);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
9	[BUG]  [BUGGY]  FieldValue  fieldValue  =  object.getValue(clazz);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  fieldValue  =  object.getValue(clazz);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =  object.getValue(clazz);	  FieldValue    fieldValue    =    clazz.getValue(object);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
10	[BUG]  [BUGGY]  FieldValue  object  =  clazz.getValue(object);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  object  =  clazz.getValue(object);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  object  =  clazz.getValue(object);	  FieldValue    fieldValue    =    clazz.getValue(object);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
11	[BUG]  [BUGGY]  builder.register(object,  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  builder.register(object,  fieldValue);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	builder.register(object,  fieldValue);	          builder.register(object);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	48	None	replace
12	[BUG]  [BUGGY]  builder.register(object,  true);  [CE]  method  register  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  builder.register(object,  true);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	builder.register(object,  true);	          builder.register(object);    	non-compiled	[CE]  method  register  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	48	None	replace
13	[BUG]  [BUGGY]  builder.register(object,  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]        AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  builder.register(object,  iConstant);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	builder.register(object,  iConstant);	          builder.register(object);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	48	None	replace
14	[BUG]  [BUGGY]  Throw  new  UnsupportedOperationException( " ");  [CE]  not  a  statement  [FE]            UnsupportedOperationException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throw  new  UnsupportedOperationException( " ");  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throw  new  UnsupportedOperationException( " ");	  throw    new    UnsupportedOperationException(       "       ");    Throw    new    UnsupportedOperationException(   "       ");    	non-compiled	[CE]  not  a  statement	25	None	replace
15	[BUG]  [BUGGY]  FieldValue  value  =  clazz.getDeclaredFieldValue();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  value  =  clazz.getDeclaredFieldValue();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  value  =  clazz.getDeclaredFieldValue();	  FieldValue    fieldValue    =    this.clazz.getDeclaredFieldValue();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
16	[BUG]  [BUGGY]  FieldValue  objectValue  =  object.getDeclaredFieldValue();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  objectValue  =  object.getDeclaredFieldValue();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  objectValue  =  object.getDeclaredFieldValue();	  FieldValue    fieldValue    =    object.getDeclaredFieldValue();    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
17	[BUG]  [BUGGY]  FieldValue  fieldValue  =  this.object.getDeclaredFieldValue();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  fieldValue  =  this.object.getDeclaredFieldValue();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =  this.object.getDeclaredFieldValue();	  FieldValue    fieldValue    =    object.getDeclaredFieldValue();    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
18	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true);  [CE]  no  suitable  method  found  for  setAccessible(String[],boolean)  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	AccessibleObject.setAccessible(excludeFields,  true);	  AccessibleObject.setAccessible(fields,    true);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],boolean)	15	None	replace
19	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fieldValue,  true);  [CE]  cannot  find  symbol  fieldValue  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  AccessibleObject.setAccessible(fieldValue,  true);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	AccessibleObject.setAccessible(fieldValue,  true);	  AccessibleObject.setAccessible(fields,    true);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	15	None	replace
20	[BUG]  [BUGGY]  FieldValue  objectValue  =  object  instanceof  FieldValue?(FieldValue)object  :  object.getValue();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  objectValue  =  object  instanceof  FieldValue?(FieldValue)object  :  object.getValue();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  objectValue  =  object  instanceof  FieldValue?(FieldValue)object  :  object.getValue();	  FieldValue    objectValue    =    object.getValue();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
21	[BUG]  [BUGGY]  FieldValue  objectValue  =  field.getValue();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  objectValue  =  field.getValue();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  objectValue  =  field.getValue();	  FieldValue    objectValue    =    object.getValue();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
22	[BUG]  [BUGGY]  AccessibleObject.setAccessible(object,  true);  [CE]  no  suitable  method  found  for  setAccessible(Object,boolean)  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  AccessibleObject.setAccessible(object,  true);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	AccessibleObject.setAccessible(object,  true);	  FieldValue[]    fields    =    object.getDeclaredFields();    AccessibleObject.setAccessible(fields,    true);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Object,boolean)	74	None	replace
23	[BUG]  [BUGGY]  HashCodeBuilder  builder  =  object.build();  [CE]  variable  builder  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  HashCodeBuilder  builder  =  object.build();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	HashCodeBuilder  builder  =  object.build();	  HashCodeBuilder    builder    =    builder.build();    	non-compiled	[CE]  variable  builder  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	1	None	replace
24	[BUG]  [BUGGY]  HashCodeBuilder  builder  =  this.object.build();  [CE]  variable  builder  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  HashCodeBuilder  builder  =  this.object.build();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	HashCodeBuilder  builder  =  this.object.build();	  HashCodeBuilder    builder    =    builder.build();    	non-compiled	[CE]  variable  builder  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	1	None	replace
25	[BUG]  [BUGGY]  FieldValue[]  fields  =  object.getFields();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue[]  fields  =  object.getFields();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue[]  fields  =  object.getFields();	  FieldValue[]    fields    =    clazz.getFields();    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
26	[BUG]  [BUGGY]  Builder.addChildToBack(object);  [CE]  cannot  find  symbol  Builder  [FE]            StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Builder.addChildToBack(object);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Builder.addChildToBack(object);	  Object    fieldValue    =    object.getValue();    builder.addChildToBack(fieldValue);    	non-compiled	[CE]  cannot  find  symbol  Builder	77	None	replace
27	[BUG]  [BUGGY]  FieldValue  fieldValue  =  object.getValue();  builder.addChildToBack(fieldValue);  [CE]  cannot  find  symbol  [FE]              StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  fieldValue  =  object.getValue();  builder.addChildToBack(fieldValue);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =  object.getValue();  builder.addChildToBack(fieldValue);	  Object    fieldValue    =    object.getValue();    builder.addChildToBack(fieldValue);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
28	[BUG]  [BUGGY]  builder.addChildToBack(object);  [CE]  cannot  find  symbol  [FE]                StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  builder.addChildToBack(object);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	builder.addChildToBack(object);	  Object    fieldValue    =    object.getValue();    builder.addChildToBack(fieldValue);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
29	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(object));  [CE]  <identifier>  expected  [FE]          IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(object));  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(object));	  throw    new    IllegalArgumentException(       "       ");    Throwables.throw    new    IllegalArgumentException(   "       ");    	non-compiled	[CE]  <identifier>  expected	33	None	replace
30	[BUG]  [BUGGY]  FieldValue  objectValue  =  object.getDeclaredFields();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  objectValue  =  object.getDeclaredFields();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  objectValue  =  object.getDeclaredFields();	  FieldValue    fieldValue    =    object.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
31	[BUG]  [BUGGY]  FieldValue  objectValue  =  clazz.getDeclaredFields(excludeFields);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  objectValue  =  clazz.getDeclaredFields(excludeFields);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  objectValue  =  clazz.getDeclaredFields(excludeFields);	  FieldValue    objectValue    =    clazz.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
32	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( "Unknown  object: "  +  object);  [CE]  <identifier>  expected  [FE]        RuntimeException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwables.throw  new  RuntimeException( "Unknown  object: "  +  object);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwables.throw  new  RuntimeException( "Unknown  object: "  +  object);	  Throwables.throw    new    RuntimeException(   "   ");    	non-compiled	[CE]  <identifier>  expected	26	None	replace
33	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( " ",  e);  [CE]  <identifier>  expected  [FE]          RuntimeException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwables.throw  new  RuntimeException( " ",  e);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwables.throw  new  RuntimeException( " ",  e);	  Throwables.throw    new    RuntimeException(   "   ");    	non-compiled	[CE]  <identifier>  expected	26	None	replace
34	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( " ",  object);  [CE]  <identifier>  expected  [FE]            RuntimeException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwables.throw  new  RuntimeException( " ",  object);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwables.throw  new  RuntimeException( " ",  object);	  Throwables.throw    new    RuntimeException(   "   ");    	non-compiled	[CE]  <identifier>  expected	26	None	replace
35	[BUG]  [BUGGY]  FieldValue[]  fields  =  clazz.getDeclaredFields();  HashCodeBuilder  builder  =  clazz.build(excludeFields);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue[]  fields  =  clazz.getDeclaredFields();  HashCodeBuilder  builder  =  clazz.build(excludeFields);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue[]  fields  =  clazz.getDeclaredFields();  HashCodeBuilder  builder  =  clazz.build(excludeFields);	  FieldValue[]    fields    =    clazz.getDeclaredFields();    HashCodeBuilder    builder    =    clazz.build();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
36	[BUG]  [BUGGY]  FieldValue[]  fields  =  clazz.getDeclaredFields();  HashCodeBuilder  builder  =  module.build();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue[]  fields  =  clazz.getDeclaredFields();  HashCodeBuilder  builder  =  module.build();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue[]  fields  =  clazz.getDeclaredFields();  HashCodeBuilder  builder  =  module.build();	  FieldValue[]    fields    =    clazz.getDeclaredFields();    HashCodeBuilder    builder    =    clazz.build();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
37	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ").equals(object.getClass());  [CE]  <identifier>  expected  [FE]          IllegalStateException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ").equals(object.getClass());  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwables.throw  new  IllegalStateException( " ").equals(object.getClass());	  throw    new    IllegalStateException(   "   ".equals(object.getClass()));    	non-compiled	[CE]  <identifier>  expected	22	None	replace
38	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  object.getClass());  [CE]  <identifier>  expected  [FE]            IllegalStateException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  object.getClass());  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwables.throw  new  IllegalStateException( " "  +  object.getClass());	  throw    new    IllegalStateException(   "   ".equals(object.getClass()));    	non-compiled	[CE]  <identifier>  expected	22	None	replace
39	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ").equals(object.getClass()));  [CE]  <identifier>  expected  [FE]              IllegalStateException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ").equals(object.getClass()));  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwables.throw  new  IllegalStateException( " ").equals(object.getClass()));	  throw    new    IllegalStateException(   "   ".equals(object.getClass()));    	non-compiled	[CE]  <identifier>  expected	22	None	replace
40	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        UnsupportedOperationException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  new  UnsupportedOperationException( " ");  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	add	new  UnsupportedOperationException( " ");	  throw    new    UnsupportedOperationException(       "       ");    new    UnsupportedOperationException(       "       ");    	compilable	  [FE]  StackOverflowError  	68	1	replace
41	[BUG]  [BUGGY]  new  UnsupportedOperationException( " ");  [FE]  StackOverflowError  [FE]        UnsupportedOperationException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  new  UnsupportedOperationException( " ");  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	new  UnsupportedOperationException( " ");	  throw    new    UnsupportedOperationException(       "       ");    new    UnsupportedOperationException(       "       ");    	compilable	  [FE]  StackOverflowError  	68	1	replace
42	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          UnsupportedOperationException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  new  UnsupportedOperationException( "Registered  object: "  +  object);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	add	new  UnsupportedOperationException( "Registered  object: "  +  object);	  throw    new    UnsupportedOperationException(       "       ");    new    UnsupportedOperationException(       "       ");    	compilable	  [FE]  StackOverflowError  	68	1	replace
43	[BUG]  [BUGGY]  new  UnsupportedOperationException( "Registered  object: "  +  object);  [FE]  StackOverflowError  [FE]          UnsupportedOperationException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  new  UnsupportedOperationException( "Registered  object: "  +  object);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	new  UnsupportedOperationException( "Registered  object: "  +  object);	  throw    new    UnsupportedOperationException(       "       ");    new    UnsupportedOperationException(       "       ");    	compilable	  [FE]  StackOverflowError  	68	1	replace
44	[BUG]  [BUGGY]  builder.append(fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  builder.append(fieldValue);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	builder.append(fieldValue);	          builder.append(object);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	51	None	replace
45	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  builder.append('n');  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	add	builder.append('n');	          builder.append(object);    	compilable	  [FE]  StackOverflowError  	51	1	replace
46	[BUG]  [BUGGY]  builder.append('n');  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  builder.append('n');  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	builder.append('n');	          builder.append(object);    	compilable	  [FE]  StackOverflowError  	51	1	replace
47	[BUG]  [BUGGY]  builder.append(objectValue);  [CE]  cannot  find  symbol  objectValue  [FE]        StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  builder.append(objectValue);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	builder.append(objectValue);	          builder.append(object);    	non-compiled	[CE]  cannot  find  symbol  objectValue	51	None	replace
48	[BUG]  [BUGGY]  FieldValue  fieldValue  =  object.getFieldValue();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  fieldValue  =  object.getFieldValue();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =  object.getFieldValue();	  FieldValue    fieldValue    =    clazz.getFieldValue();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
49	[BUG]  [BUGGY]  FieldValue  fieldValue  =  clazz.getFieldValue(false);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  fieldValue  =  clazz.getFieldValue(false);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =  clazz.getFieldValue(false);	  FieldValue    fieldValue    =    clazz.getFieldValue();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
50	[BUG]  [BUGGY]  FieldValue  fieldValue  =  clazz.getFieldValue(object);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  fieldValue  =  clazz.getFieldValue(object);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =  clazz.getFieldValue(object);	  FieldValue    fieldValue    =    clazz.getFieldValue();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
51	[BUG]  [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields();  Object[]  fields  =  clazz.getDeclaredFields();  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields();  Object[]  fields  =  clazz.getDeclaredFields();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object[]    fields    =    clazz.getDeclaredFields();    Object[]  fields  =  clazz.getDeclaredFields();	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	4	None	add
52	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields();  Object[]  fieldValues  =  clazz.getDeclaredFields();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	add	Object[]    fields    =    clazz.getDeclaredFields();    Object[]  fieldValues  =  clazz.getDeclaredFields();	  	compilable	  [FE]  AssertionFailedError  	4	1	add
53	[BUG]  [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields();  Object[]  fieldValues  =  clazz.getDeclaredFields();  [FE]  AssertionFailedError  [FE]      StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields();  Object[]  fieldValues  =  clazz.getDeclaredFields();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object[]    fields    =    clazz.getDeclaredFields();    Object[]  fieldValues  =  clazz.getDeclaredFields();	  	compilable	  [FE]  AssertionFailedError  	4	1	add
54	[BUG]  [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields();  Object[]  fields  =  clazz.getReferenceFields();  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]        StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields();  Object[]  fields  =  clazz.getReferenceFields();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object[]    fields    =    clazz.getDeclaredFields();    Object[]  fields  =  clazz.getReferenceFields();	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	4	None	add
55	[BUG]  [BUGGY]  Object[]  fields  =  excludeFields!=  null?  null  :  excludeFields.getDeclaredFields();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object[]  fields  =  excludeFields!=  null?  null  :  excludeFields.getDeclaredFields();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object[]  fields  =  excludeFields!=  null?  null  :  excludeFields.getDeclaredFields();	  Object[]    fields    =    excludeFields.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
56	[BUG]  [BUGGY]  FieldValue  value  =  object.getDeclaredFields();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  value  =  object.getDeclaredFields();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  value  =  object.getDeclaredFields();	  FieldValue    value    =    clazz.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
57	[BUG]  [BUGGY]  FieldValue  value  =  excludeFields.getDeclaredFields();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  value  =  excludeFields.getDeclaredFields();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  value  =  excludeFields.getDeclaredFields();	  FieldValue    value    =    clazz.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
58	[BUG]  [BUGGY]  FieldValue  value  =  this.clazz.getDeclaredFields();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  value  =  this.clazz.getDeclaredFields();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  value  =  this.clazz.getDeclaredFields();	  FieldValue    value    =    clazz.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
59	[BUG]  [BUGGY]  FieldValue  objectValue  =  object.toString();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  objectValue  =  object.toString();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  objectValue  =  object.toString();	  FieldValue    fieldValue    =    object.toString();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
60	[BUG]  [BUGGY]  FieldValue  fieldValue  =  clazz.toString();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  fieldValue  =  clazz.toString();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =  clazz.toString();	  FieldValue    fieldValue    =    object.toString();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
61	[BUG]  [BUGGY]  FieldValue  fieldValue  =  object.getClass().toString();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  fieldValue  =  object.getClass().toString();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =  object.getClass().toString();	  FieldValue    fieldValue    =    object.toString();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
62	[BUG]  [BUGGY]  FieldValue[]  fields  =  clazz.getDeclaredFields(excludeFields,  object);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue[]  fields  =  clazz.getDeclaredFields(excludeFields,  object);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue[]  fields  =  clazz.getDeclaredFields(excludeFields,  object);	  FieldValue[]    fields    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
63	[BUG]  [BUGGY]  FieldValue[]  fields  =  clazz.getDeclaredFields(fields);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue[]  fields  =  clazz.getDeclaredFields(fields);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue[]  fields  =  clazz.getDeclaredFields(fields);	  FieldValue[]    fields    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
64	[BUG]  [BUGGY]  FieldValue[]  fields  =  clazz.getDeclaredFields(excludeFields,  builder);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue[]  fields  =  clazz.getDeclaredFields(excludeFields,  builder);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue[]  fields  =  clazz.getDeclaredFields(excludeFields,  builder);	  FieldValue[]    fields    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
65	[BUG]  [BUGGY]  Object  fieldValue  =  object.toString();  Object  fieldValue  =  object.toString();  [CE]  variable  fieldValue  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object  fieldValue  =  object.toString();  Object  fieldValue  =  object.toString();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object    fieldValue    =    object.toString();    Object  fieldValue  =  object.toString();	  	non-compiled	[CE]  variable  fieldValue  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	82	None	add
66	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object  fieldValue  =  object.toString();  Object  objectValue  =  object.toString();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	add	Object    fieldValue    =    object.toString();    Object  objectValue  =  object.toString();	  	compilable	  [FE]  StackOverflowError  	82	1	add
67	[BUG]  [BUGGY]  Object  fieldValue  =  object.toString();  Object  objectValue  =  object.toString();  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object  fieldValue  =  object.toString();  Object  objectValue  =  object.toString();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object    fieldValue    =    object.toString();    Object  objectValue  =  object.toString();	  	compilable	  [FE]  StackOverflowError  	82	1	add
68	[BUG]  [BUGGY]  Object  fieldValue  =  object.toString();  Class  <?>  fieldValue  =  object.toString();  [CE]  variable  fieldValue  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]        StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object  fieldValue  =  object.toString();  Class  <?>  fieldValue  =  object.toString();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object    fieldValue    =    object.toString();    Class  <?>  fieldValue  =  object.toString();	  	non-compiled	[CE]  variable  fieldValue  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	82	None	add
69	[BUG]  [BUGGY]  Object  fieldValue  =  object.toString();  String  fieldValue  =  object.toString();  [CE]  variable  fieldValue  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]          StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object  fieldValue  =  object.toString();  String  fieldValue  =  object.toString();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object    fieldValue    =    object.toString();    String  fieldValue  =  object.toString();	  	non-compiled	[CE]  variable  fieldValue  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	82	None	add
70	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object  fieldValue  =  object  ==  null?  null  :  object.toString();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	add	Object  fieldValue  =  object  ==  null?  null  :  object.toString();	  Object    fieldValue    =    object.toString();    	compilable	  [FE]  StackOverflowError  	83	1	replace
71	[BUG]  [BUGGY]  Object  fieldValue  =  object  ==  null?  null  :  object.toString();  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object  fieldValue  =  object  ==  null?  null  :  object.toString();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object  fieldValue  =  object  ==  null?  null  :  object.toString();	  Object    fieldValue    =    object.toString();    	compilable	  [FE]  StackOverflowError  	83	1	replace
72	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object  fieldValue  =  object.getClass();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	add	Object  fieldValue  =  object.getClass();	  Object    fieldValue    =    object.toString();    	compilable	  [FE]  StackOverflowError  	83	1	replace
73	[BUG]  [BUGGY]  Object  fieldValue  =  object.getClass();  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object  fieldValue  =  object.getClass();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object  fieldValue  =  object.getClass();	  Object    fieldValue    =    object.toString();    	compilable	  [FE]  StackOverflowError  	83	1	replace
74	[BUG]  [BUGGY]  builder.addChangeListener(this,  iConstant);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]        StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  builder.addChangeListener(this,  iConstant);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	builder.addChangeListener(this,  iConstant);	          builder.addChangeListener(this);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	46	None	replace
75	[BUG]  [BUGGY]  builder.addChangeListener(this,  object);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]          StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  builder.addChangeListener(this,  object);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	builder.addChangeListener(this,  object);	          builder.addChangeListener(this);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	46	None	replace
76	[BUG]  [BUGGY]  builder.addChangeListener(object);  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  builder.addChangeListener(object);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	builder.addChangeListener(object);	          builder.addChangeListener(this);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
77	[BUG]  [BUGGY]  Throw  new  RuntimeException( " ");  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throw  new  RuntimeException( " ");  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throw  new  RuntimeException( " ");	  throw    new    RuntimeException(       "       ");    Throw    new    RuntimeException(   "       ");    	non-compiled	[CE]  not  a  statement	36	None	replace
78	[BUG]  [BUGGY]  Throwables.throw(new  IllegalStateException( " "));  [CE]  <identifier>  expected  [FE]          IllegalStateException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwables.throw(new  IllegalStateException( " "));  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwables.throw(new  IllegalStateException( " "));	  throw    new    IllegalStateException(       "       ");    Throw    new    IllegalStateException(   "       ");    	non-compiled	[CE]  <identifier>  expected	29	None	replace
79	[BUG]  [BUGGY]  builder.setAccessible(object,  true);  [CE]  cannot  find  symbol  [FE]          StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  builder.setAccessible(object,  true);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	builder.setAccessible(object,  true);	  Object    fieldValue    =    object.getValue();    builder.setAccessible(fieldValue,    true);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
80	[BUG]  [BUGGY]  Builder.setAccessible(object,  true);  [CE]  cannot  find  symbol  Builder  [FE]            StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Builder.setAccessible(object,  true);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Builder.setAccessible(object,  true);	  Object    fieldValue    =    object.getValue();    builder.setAccessible(fieldValue,    true);    	non-compiled	[CE]  cannot  find  symbol  Builder	76	None	replace
81	[BUG]  [BUGGY]  FieldValue  fieldValue  =  excludeFields.getDeclaredFieldValue(clazz);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  fieldValue  =  excludeFields.getDeclaredFieldValue(clazz);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =  excludeFields.getDeclaredFieldValue(clazz);	  FieldValue    fieldValue    =    clazz.getDeclaredFieldValue(excludeFields);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
82	[BUG]  [BUGGY]  FieldValue  fieldValue  =  clazz.getDeclaredFieldValue(excludeFields,  object);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  fieldValue  =  clazz.getDeclaredFieldValue(excludeFields,  object);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =  clazz.getDeclaredFieldValue(excludeFields,  object);	  FieldValue    fieldValue    =    clazz.getDeclaredFieldValue(excludeFields);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
83	[BUG]  [BUGGY]  Throwable  m  =  clazz.getDeclaredException( " ");  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwable  m  =  clazz.getDeclaredException( " ");  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwable  m  =  clazz.getDeclaredException( " ");	  throw    new    IllegalArgumentException(       "       ");    Throwable    m    =    clazz.getDeclaredException(   "       ");    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
84	[BUG]  [BUGGY]  Throwable  m  =  clazz.getDeclaredException( ", ");  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwable  m  =  clazz.getDeclaredException( ", ");  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwable  m  =  clazz.getDeclaredException( ", ");	  throw    new    IllegalArgumentException(       "       ");    Throwable    m    =    clazz.getDeclaredException(   "       ");    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
85	[BUG]  [BUGGY]  Throwable  m  =  clazz.getDeclaredException( ". ");  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwable  m  =  clazz.getDeclaredException( ". ");  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwable  m  =  clazz.getDeclaredException( ". ");	  throw    new    IllegalArgumentException(       "       ");    Throwable    m    =    clazz.getDeclaredException(   "       ");    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
86	[BUG]  [BUGGY]  builder.add(object,  excludeFields);  [CE]  cannot  find  symbol  [FE]                StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  builder.add(object,  excludeFields);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	builder.add(object,  excludeFields);	          builder.add(object);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
87	[BUG]  [BUGGY]  builder.add(object,  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]                  StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  builder.add(object,  fieldValue);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	builder.add(object,  fieldValue);	          builder.add(object);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	52	None	replace
88	[BUG]  [BUGGY]  builder.add(object,  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]                    StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  builder.add(object,  iConstant);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	builder.add(object,  iConstant);	          builder.add(object);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	52	None	replace
89	[BUG]  [BUGGY]  FieldValue  fieldValue  =  clazz.getValue(excludeFields);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  fieldValue  =  clazz.getValue(excludeFields);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =  clazz.getValue(excludeFields);	  FieldValue    fieldValue    =    clazz.getValue(null);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
90	[BUG]  [BUGGY]  FieldValue  fieldValue  =  clazz.getValue(null,  null);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  fieldValue  =  clazz.getValue(null,  null);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =  clazz.getValue(null,  null);	  FieldValue    fieldValue    =    clazz.getValue(null);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
91	[BUG]  [BUGGY]  Throwables.throw  new  UnsupportedOperationException( " ");  [CE]  <identifier>  expected  [FE]          UnsupportedOperationException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwables.throw  new  UnsupportedOperationException( " ");  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwables.throw  new  UnsupportedOperationException( " ");	  throw    new    UnsupportedOperationException(       "       ");    Throwables.throw    new    UnsupportedOperationException(   "       ");    	non-compiled	[CE]  <identifier>  expected	24	None	replace
92	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]          builder.append(object);  builder.append(object);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	add	                builder.append(object);    builder.append(object);	  	compilable	  [FE]  StackOverflowError  	50	1	add
93	[BUG]  [BUGGY]          builder.append(object);  builder.append(object);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]          builder.append(object);  builder.append(object);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	                builder.append(object);    builder.append(object);	  	compilable	  [FE]  StackOverflowError  	50	1	add
94	[BUG]  [BUGGY]          builder.append(object);  if(object!=  null)  {  StackOverflowError  >>  StackOverflowError  <  String>outputFields  =  new  StackOverflowError(excludeFields.length);  for(int  i  =  0;  i  <  fields.length;  ++i)  {  builder.append(fieldValue[i]  [CE]  ')'  expected  [FE]      StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]          builder.append(object);  if(object!=  null)  {  StackOverflowError  >>  StackOverflowError  <  String>outputFields  =  new  StackOverflowError(excludeFields.length);  for(int  i  =  0;  i  <  fields.length;  ++i)  {  builder.append(fieldValue[i]  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	                builder.append(object);    if(object!=  null)  {  StackOverflowError  >>  StackOverflowError  <  String>outputFields  =  new  StackOverflowError(excludeFields.length);  for(int  i  =  0;  i  <  fields.length;  ++i)  {  builder.append(fieldValue[i]	  	non-compiled	[CE]  ')'  expected	50	None	add
95	[BUG]  [BUGGY]          builder.append(object);  if(object!=  null)  {  StackOverflowError  >>  StackOverflowError  <  String>outputFields  =  new  StackOverflowError(excludeFields.length);  for(String  fieldValue  :  excludeFields)  {  builder.append(fieldValue);  }  [CE]  illegal  start  of  expression  [FE]        StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]          builder.append(object);  if(object!=  null)  {  StackOverflowError  >>  StackOverflowError  <  String>outputFields  =  new  StackOverflowError(excludeFields.length);  for(String  fieldValue  :  excludeFields)  {  builder.append(fieldValue);  }  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	                builder.append(object);    if(object!=  null)  {  StackOverflowError  >>  StackOverflowError  <  String>outputFields  =  new  StackOverflowError(excludeFields.length);  for(String  fieldValue  :  excludeFields)  {  builder.append(fieldValue);  }	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
96	[BUG]  [BUGGY]          builder.append(object);  if(object!=  null)  {  StackOverflowError  >>  StackOverflowError  <  String>outputFields  =  new  StackOverflowError(excludeFields.length);  for(int  i  =  0;  i  <  fields.length;  ++i)  {  builder.append(  [CE]  illegal  start  of  expression  [FE]          StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]          builder.append(object);  if(object!=  null)  {  StackOverflowError  >>  StackOverflowError  <  String>outputFields  =  new  StackOverflowError(excludeFields.length);  for(int  i  =  0;  i  <  fields.length;  ++i)  {  builder.append(  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	                builder.append(object);    if(object!=  null)  {  StackOverflowError  >>  StackOverflowError  <  String>outputFields  =  new  StackOverflowError(excludeFields.length);  for(int  i  =  0;  i  <  fields.length;  ++i)  {  builder.append(	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
97	[BUG]  [BUGGY]          builder.append(object);  if(object!=  null)  {  StackOverflowError  >>  StackOverflowError  <  String>outputFields  =  new  StackOverflowError(excludeFields.length);  for(String  fieldValue  :  fields)  {  builder.append(fieldValue);  }  [CE]  illegal  start  of  expression  [FE]            StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]          builder.append(object);  if(object!=  null)  {  StackOverflowError  >>  StackOverflowError  <  String>outputFields  =  new  StackOverflowError(excludeFields.length);  for(String  fieldValue  :  fields)  {  builder.append(fieldValue);  }  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	                builder.append(object);    if(object!=  null)  {  StackOverflowError  >>  StackOverflowError  <  String>outputFields  =  new  StackOverflowError(excludeFields.length);  for(String  fieldValue  :  fields)  {  builder.append(fieldValue);  }	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
98	[BUG]  [BUGGY]  FieldValue  fieldValue  =  excludeFields!=  null?  null  :  excludeFields.getDeclaredFields();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  fieldValue  =  excludeFields!=  null?  null  :  excludeFields.getDeclaredFields();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =  excludeFields!=  null?  null  :  excludeFields.getDeclaredFields();	  FieldValue    fieldValue    =    excludeFields.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
99	[BUG]  [BUGGY]  FieldValue  fieldValue  =  excludeFields  ==  null?  null  :  excludeFields.getDeclaredFields();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  fieldValue  =  excludeFields  ==  null?  null  :  excludeFields.getDeclaredFields();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =  excludeFields  ==  null?  null  :  excludeFields.getDeclaredFields();	  FieldValue    fieldValue    =    excludeFields.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
100	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  false);  [CE]  no  suitable  method  found  for  setAccessible(String[],boolean)  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  AccessibleObject.setAccessible(excludeFields,  false);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	AccessibleObject.setAccessible(excludeFields,  false);	  AccessibleObject.setAccessible(fields,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],boolean)	17	None	replace
101	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fieldValue,  false);  [CE]  cannot  find  symbol  fieldValue  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  AccessibleObject.setAccessible(fieldValue,  false);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	AccessibleObject.setAccessible(fieldValue,  false);	  AccessibleObject.setAccessible(fields,    false);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	17	None	replace
102	[BUG]  [BUGGY]  FieldValue[]  fields  =  object.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  false);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue[]  fields  =  object.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  false);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue[]  fields  =  object.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  false);	  FieldValue[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(excludeFields,    false);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
103	[BUG]  [BUGGY]  builder.add(excludeFields[iConstant]);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]            StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  builder.add(excludeFields[iConstant]);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	builder.add(excludeFields[iConstant]);	          builder.reset();    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	49	None	replace
104	[BUG]  [BUGGY]  builder.reset(excludeFields);  [CE]  cannot  find  symbol  [FE]              StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  builder.reset(excludeFields);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	builder.reset(excludeFields);	          builder.reset();    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
105	[BUG]  [BUGGY]  builder.add(excludeFields[iTotal]);  [CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context  [FE]                StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  builder.add(excludeFields[iTotal]);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	builder.add(excludeFields[iTotal]);	          builder.reset();    	non-compiled	[CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context	49	None	replace
106	[BUG]  [BUGGY]  FieldValue  objectValue  =  clazz.getValue(null);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  objectValue  =  clazz.getValue(null);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  objectValue  =  clazz.getValue(null);	  FieldValue    objectValue    =    clazz.getValue();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
107	[BUG]  [BUGGY]  FieldValue  objectValue  =  this.clazz.getDeclaredFieldValue();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  objectValue  =  this.clazz.getDeclaredFieldValue();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  objectValue  =  this.clazz.getDeclaredFieldValue();	  FieldValue    objectValue    =    clazz.getDeclaredFieldValue();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
108	[BUG]  [BUGGY]  FieldValue  objectValue  =  clazz.getDeclaredFieldValue(object);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  objectValue  =  clazz.getDeclaredFieldValue(object);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  objectValue  =  clazz.getDeclaredFieldValue(object);	  FieldValue    objectValue    =    clazz.getDeclaredFieldValue();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
109	[BUG]  [BUGGY]  FieldValue[]  fields  =  excludeFields!=  null?  null  :  excludeFields.getDeclaredFields();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue[]  fields  =  excludeFields!=  null?  null  :  excludeFields.getDeclaredFields();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue[]  fields  =  excludeFields!=  null?  null  :  excludeFields.getDeclaredFields();	  FieldValue[]    fields    =    excludeFields.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
110	[BUG]  [BUGGY]  FieldValue[]  fields  =  object.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  true);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue[]  fields  =  object.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  true);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue[]  fields  =  object.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  true);	  FieldValue[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(excludeFields,    true);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
111	[BUG]  [BUGGY]  FieldValue[]  fields  =  object.getSuperclassFields();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue[]  fields  =  object.getSuperclassFields();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue[]  fields  =  object.getSuperclassFields();	  FieldValue[]    fields    =    clazz.getSuperclassFields();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
112	[BUG]  [BUGGY]  FieldValue[]  fields  =  clazz.getSuperclassFields(excludeFields);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue[]  fields  =  clazz.getSuperclassFields(excludeFields);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue[]  fields  =  clazz.getSuperclassFields(excludeFields);	  FieldValue[]    fields    =    clazz.getSuperclassFields();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
113	[BUG]  [BUGGY]  FieldValue[]  fields  =  class.getSuperclassFields();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue[]  fields  =  class.getSuperclassFields();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue[]  fields  =  class.getSuperclassFields();	  FieldValue[]    fields    =    clazz.getSuperclassFields();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
114	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( " ");  throw  new  RuntimeException( ", ");  [CE]  <identifier>  expected  [FE]        RuntimeException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwables.throw  new  RuntimeException( " ");  throw  new  RuntimeException( ", ");  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwables.throw  new  RuntimeException( " ");  throw  new  RuntimeException( ", ");	  throw    new    RuntimeException(       "       ");    throw    new    RuntimeException(   ",       ");    	non-compiled	[CE]  <identifier>  expected	57	None	replace
115	[BUG]  [BUGGY]  Object  objectValue  =  object.getValue();  builder.addChangeListener(this);  [CE]  cannot  find  symbol  [FE]              StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object  objectValue  =  object.getValue();  builder.addChangeListener(this);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object  objectValue  =  object.getValue();  builder.addChangeListener(this);	  Object    fieldValue    =    object.getValue();    builder.addChangeListener(this);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
116	[BUG]  [BUGGY]  Builder.addChangeListener(this);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Builder.addChangeListener(this);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Builder.addChangeListener(this);	  Object    fieldValue    =    object.getValue();    builder.addChangeListener(this);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	78	None	replace
117	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  throw  new  IllegalStateException( ", ");  [CE]  <identifier>  expected  [FE]        IllegalStateException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  throw  new  IllegalStateException( ", ");  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwables.throw  new  IllegalStateException( " ");  throw  new  IllegalStateException( ", ");	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException(   ",       ");    	non-compiled	[CE]  <identifier>  expected	81	None	replace
118	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(object.getClass());  [CE]  <identifier>  expected  [FE]        IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(object.getClass());  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwables.throw  new  IllegalArgumentException( " ").equals(object.getClass());	  throw    new    IllegalArgumentException(   "   ".equals(object.getClass()));    	non-compiled	[CE]  <identifier>  expected	73	None	replace
119	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ").equals(object.getClass());  [CE]  incompatible  types  [FE]          IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  throw  new  IllegalArgumentException( " ").equals(object.getClass());  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	throw  new  IllegalArgumentException( " ").equals(object.getClass());	  throw    new    IllegalArgumentException(   "   ".equals(object.getClass()));    	non-compiled	[CE]  incompatible  types	73	None	replace
120	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  object.getClass());  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  object.getClass());  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwables.throw  new  IllegalArgumentException( " "  +  object.getClass());	  throw    new    IllegalArgumentException(   "   ".equals(object.getClass()));    	non-compiled	[CE]  <identifier>  expected	73	None	replace
121	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]          builder.register(object);  builder.register(object);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	add	                builder.register(object);    builder.register(object);	  	compilable	  [FE]  AssertionFailedError  	47	1	add
122	[BUG]  [BUGGY]          builder.register(object);  builder.register(object);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]          builder.register(object);  builder.register(object);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	                builder.register(object);    builder.register(object);	  	compilable	  [FE]  AssertionFailedError  	47	1	add
123	[BUG]  [BUGGY]          builder.register(object);  builder.register(object);  if(useTransients  ||!Modifier.isTransient(fieldValue.getModifiers()))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]          builder.register(object);  builder.register(object);  if(useTransients  ||!Modifier.isTransient(fieldValue.getModifiers()))  {  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	                builder.register(object);    builder.register(object);  if(useTransients  ||!Modifier.isTransient(fieldValue.getModifiers()))  {	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
124	[BUG]  [BUGGY]          builder.register(object);  builder.register(object);  if(useTransients  ||!Modifier.isTransient(object.getModifiers()))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]          builder.register(object);  builder.register(object);  if(useTransients  ||!Modifier.isTransient(object.getModifiers()))  {  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	                builder.register(object);    builder.register(object);  if(useTransients  ||!Modifier.isTransient(object.getModifiers()))  {	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
125	[BUG]  [BUGGY]          builder.register(object);  builder.register(object);  if(useTransients  ||!Modifier.isTransient(fieldValue))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]          builder.register(object);  builder.register(object);  if(useTransients  ||!Modifier.isTransient(fieldValue))  {  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	                builder.register(object);    builder.register(object);  if(useTransients  ||!Modifier.isTransient(fieldValue))  {	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
126	[BUG]  [BUGGY]          builder.register(object);  builder.register(object);  if(useTransients  ||!Modifier.isTransient(objectValue))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]          builder.register(object);  builder.register(object);  if(useTransients  ||!Modifier.isTransient(objectValue))  {  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	                builder.register(object);    builder.register(object);  if(useTransients  ||!Modifier.isTransient(objectValue))  {	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
127	[BUG]  [BUGGY]  HashCodeBuilder  builder  =  clazz.build(object);  [CE]  variable  builder  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  HashCodeBuilder  builder  =  clazz.build(object);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	HashCodeBuilder  builder  =  clazz.build(object);	  HashCodeBuilder    builder    =    clazz.build();    	non-compiled	[CE]  variable  builder  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	2	None	replace
128	[BUG]  [BUGGY]  HashCodeBuilder  builder  =  clazz.buildConstructor();  [CE]  variable  builder  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  HashCodeBuilder  builder  =  clazz.buildConstructor();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	HashCodeBuilder  builder  =  clazz.buildConstructor();	  HashCodeBuilder    builder    =    clazz.build();    	non-compiled	[CE]  variable  builder  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	2	None	replace
129	[BUG]  [BUGGY]  Object  objectValue  =  object  instanceof  String?((  String)object).getValue()  :  object.getValue();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object  objectValue  =  object  instanceof  String?((  String)object).getValue()  :  object.getValue();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object  objectValue  =  object  instanceof  String?((  String)object).getValue()  :  object.getValue();	  Object    fieldValue    =    object    instanceof    String?((    String)object).getValue()    :    object.getValue();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
130	[BUG]  [BUGGY]  Throwable  t  =  new  IllegalStateException(   "   ");  Throwable  t  =  new  IllegalStateException( "   ");  [CE]  variable  t  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwable  t  =  new  IllegalStateException(   "   ");  Throwable  t  =  new  IllegalStateException( "   ");  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwable    t    =    new    IllegalStateException(   "   ");    Throwable  t  =  new  IllegalStateException( "   ");	  	non-compiled	[CE]  variable  t  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	58	None	add
131	[BUG]  [BUGGY]  Throwable  t  =  new  IllegalStateException(   "   ");  Throwable  t  =  new  IllegalStateException( ".   ");  [CE]  variable  t  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]      StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwable  t  =  new  IllegalStateException(   "   ");  Throwable  t  =  new  IllegalStateException( ".   ");  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwable    t    =    new    IllegalStateException(   "   ");    Throwable  t  =  new  IllegalStateException( ".   ");	  	non-compiled	[CE]  variable  t  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	58	None	add
132	[BUG]  [BUGGY]  Throwable  t  =  new  IllegalStateException(   "   ");  Throwable  t  =  new  IllegalStateException( ",   ");  [CE]  variable  t  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]        StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwable  t  =  new  IllegalStateException(   "   ");  Throwable  t  =  new  IllegalStateException( ",   ");  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwable    t    =    new    IllegalStateException(   "   ");    Throwable  t  =  new  IllegalStateException( ",   ");	  	non-compiled	[CE]  variable  t  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	58	None	add
133	[BUG]  [BUGGY]  Throwable  t  =  new  IllegalStateException(   "   ");  Throwable  t  =  new  IllegalStateException(. "   ");  [CE]  illegal  start  of  expression  [FE]          StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwable  t  =  new  IllegalStateException(   "   ");  Throwable  t  =  new  IllegalStateException(. "   ");  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwable    t    =    new    IllegalStateException(   "   ");    Throwable  t  =  new  IllegalStateException(. "   ");	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
134	[BUG]  [BUGGY]  FieldValue[]  fields  =  getClass().getDeclaredFields();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue[]  fields  =  getClass().getDeclaredFields();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue[]  fields  =  getClass().getDeclaredFields();	  FieldValue[]    fields    =    class.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
135	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ").equals(excludeFields));  [CE]  <identifier>  expected  [FE]        IllegalStateException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ").equals(excludeFields));  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwables.throw  new  IllegalStateException( " ").equals(excludeFields));	  throw    new    IllegalStateException(   "   ".equals(excludeFields));    	non-compiled	[CE]  <identifier>  expected	54	None	replace
136	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          IllegalStateException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  throw  new  IllegalStateException( " "  +  excludeFields.equals(object));  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	add	throw  new  IllegalStateException( " "  +  excludeFields.equals(object));	  throw    new    IllegalStateException(   "   ".equals(excludeFields));    	compilable	  [FE]  NullPointerException  	54	1	replace
137	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  excludeFields.equals(object));  [FE]  NullPointerException  [FE]          IllegalStateException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  throw  new  IllegalStateException( " "  +  excludeFields.equals(object));  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	throw  new  IllegalStateException( " "  +  excludeFields.equals(object));	  throw    new    IllegalStateException(   "   ".equals(excludeFields));    	compilable	  [FE]  NullPointerException  	54	1	replace
138	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ").equals(excludeFields);  [CE]  <identifier>  expected  [FE]            IllegalStateException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ").equals(excludeFields);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwables.throw  new  IllegalStateException( " ").equals(excludeFields);	  throw    new    IllegalStateException(   "   ".equals(excludeFields));    	non-compiled	[CE]  <identifier>  expected	54	None	replace
139	[BUG]  [BUGGY]  Throwables.throw  new  UnsupportedOperationException( " "),  e);  [CE]  <identifier>  expected  [FE]        UnsupportedOperationException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwables.throw  new  UnsupportedOperationException( " "),  e);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwables.throw  new  UnsupportedOperationException( " "),  e);	  throw    new    UnsupportedOperationException(   "   "),    e);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
140	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwable  e  =  new  IllegalArgumentException( " ");  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	add	Throwable  e  =  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(       "       ");    Throwable    e    =    new    IllegalArgumentException(   "       ");    	compilable	  [FE]  StackOverflowError  	67	1	replace
141	[BUG]  [BUGGY]  Throwable  e  =  new  IllegalArgumentException( " ");  [FE]  StackOverflowError  [FE]        IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwable  e  =  new  IllegalArgumentException( " ");  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwable  e  =  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(       "       ");    Throwable    e    =    new    IllegalArgumentException(   "       ");    	compilable	  [FE]  StackOverflowError  	67	1	replace
142	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwable  e  =  new  IllegalStateException( " ");  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	add	Throwable  e  =  new  IllegalStateException( " ");	  throw    new    IllegalArgumentException(       "       ");    Throwable    e    =    new    IllegalArgumentException(   "       ");    	compilable	  [FE]  StackOverflowError  	67	1	replace
143	[BUG]  [BUGGY]  Throwable  e  =  new  IllegalStateException( " ");  [FE]  StackOverflowError  [FE]          IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwable  e  =  new  IllegalStateException( " ");  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwable  e  =  new  IllegalStateException( " ");	  throw    new    IllegalArgumentException(       "       ");    Throwable    e    =    new    IllegalArgumentException(   "       ");    	compilable	  [FE]  StackOverflowError  	67	1	replace
144	[BUG]  [BUGGY]  Throwable  e  =  new  IllegalStatementException( " ");  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwable  e  =  new  IllegalStatementException( " ");  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwable  e  =  new  IllegalStatementException( " ");	  throw    new    IllegalArgumentException(       "       ");    Throwable    e    =    new    IllegalArgumentException(   "       ");    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
145	[BUG]  [BUGGY]  FieldValue  fieldValue  =  excludeFields.getDeclaredFields(clazz);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  fieldValue  =  excludeFields.getDeclaredFields(clazz);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =  excludeFields.getDeclaredFields(clazz);	  FieldValue    fieldValue    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
146	[BUG]  [BUGGY]  FieldValue  fieldValue  =  clazz.getDeclaredFields(excludeFields,  object);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  fieldValue  =  clazz.getDeclaredFields(excludeFields,  object);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =  clazz.getDeclaredFields(excludeFields,  object);	  FieldValue    fieldValue    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
147	[BUG]  [BUGGY]  FieldValue[]  fields  =  object.getStaticFields();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue[]  fields  =  object.getStaticFields();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue[]  fields  =  object.getStaticFields();	  FieldValue[]    fields    =    clazz.getStaticFields();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
148	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(object));  [CE]  <identifier>  expected  [FE]            IllegalStateException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(object));  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwables.throw  new  IllegalStateException( " ".equals(object));	  throw    new    IllegalStateException(       "       ");    Throwables.throw    new    IllegalStateException(   "       ");    	non-compiled	[CE]  <identifier>  expected	30	None	replace
149	[BUG]  [BUGGY]  Throwable  t  =  new  IllegalStateException( " ".equals(excludeFields));  [CE]  no  suitable  constructor  found  for  IllegalStateException(boolean)  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwable  t  =  new  IllegalStateException( " ".equals(excludeFields));  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwable  t  =  new  IllegalStateException( " ".equals(excludeFields));	  Throwable    t    =    new    IllegalStateException(   "   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalStateException(boolean)	59	None	replace
150	[BUG]  [BUGGY]  Throwable  t  =  new  IllegalStateException( " ".equals(fieldValue));  [CE]  cannot  find  symbol  fieldValue  [FE]      StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwable  t  =  new  IllegalStateException( " ".equals(fieldValue));  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwable  t  =  new  IllegalStateException( " ".equals(fieldValue));	  Throwable    t    =    new    IllegalStateException(   "   ");    	non-compiled	[CE]  cannot  find  symbol  fieldValue	59	None	replace
151	[BUG]  [BUGGY]  Throwable  t  =  new  IllegalStateException( " ".equals(object.getClass()));  [CE]  no  suitable  constructor  found  for  IllegalStateException(boolean)  [FE]        StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwable  t  =  new  IllegalStateException( " ".equals(object.getClass()));  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwable  t  =  new  IllegalStateException( " ".equals(object.getClass()));	  Throwable    t    =    new    IllegalStateException(   "   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalStateException(boolean)	59	None	replace
152	[BUG]  [BUGGY]  Object  objectValue  =  object  instanceof  String?((  String)object).getValue()  :  null;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object  objectValue  =  object  instanceof  String?((  String)object).getValue()  :  null;  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object  objectValue  =  object  instanceof  String?((  String)object).getValue()  :  null;	  Object    fieldValue    =    object    instanceof    String?((    String)object).getValue()    :    null;    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
153	[BUG]  [BUGGY]  Object  object  =  object  instanceof  String?((  String)object).getValue()  :  null;  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object  object  =  object  instanceof  String?((  String)object).getValue()  :  null;  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object  object  =  object  instanceof  String?((  String)object).getValue()  :  null;	  Object    fieldValue    =    object    instanceof    String?((    String)object).getValue()    :    null;    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	61	None	replace
154	[BUG]  [BUGGY]  HashCodeBuilder  builder  =  constructer.build();  [CE]  variable  builder  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  HashCodeBuilder  builder  =  constructer.build();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	HashCodeBuilder  builder  =  constructer.build();	  FieldValue[]    fields    =    clazz.getDeclaredFields();    HashCodeBuilder    builder    =    constructer.build();    	non-compiled	[CE]  variable  builder  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	3	None	replace
155	[BUG]  [BUGGY]  FieldValue[]  fields  =  clazz.getDeclaredFields();  HashCodeBuilder  builder  =  constructor.build();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue[]  fields  =  clazz.getDeclaredFields();  HashCodeBuilder  builder  =  constructor.build();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue[]  fields  =  clazz.getDeclaredFields();  HashCodeBuilder  builder  =  constructor.build();	  FieldValue[]    fields    =    clazz.getDeclaredFields();    HashCodeBuilder    builder    =    constructer.build();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
156	[BUG]  [BUGGY]  HashCodeBuilder  builder  =  constructor.build();  [CE]  variable  builder  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  HashCodeBuilder  builder  =  constructor.build();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	HashCodeBuilder  builder  =  constructor.build();	  FieldValue[]    fields    =    clazz.getDeclaredFields();    HashCodeBuilder    builder    =    constructer.build();    	non-compiled	[CE]  variable  builder  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	3	None	replace
157	[BUG]  [BUGGY]  FieldValue[]  fields  =  constructor.getDeclaredFields();  HashCodeBuilder  builder  =  clazz.build();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue[]  fields  =  constructor.getDeclaredFields();  HashCodeBuilder  builder  =  clazz.build();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue[]  fields  =  constructor.getDeclaredFields();  HashCodeBuilder  builder  =  clazz.build();	  FieldValue[]    fields    =    clazz.getDeclaredFields();    HashCodeBuilder    builder    =    constructer.build();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
158	[BUG]  [BUGGY]  FieldValue  fieldValue  =  object.getDeclaredFieldValue(clazz);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  fieldValue  =  object.getDeclaredFieldValue(clazz);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =  object.getDeclaredFieldValue(clazz);	  FieldValue    fieldValue    =    clazz.getDeclaredFieldValue(object);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
159	[BUG]  [BUGGY]  FieldValue  object  =  clazz.getDeclaredFieldValue(object);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  object  =  clazz.getDeclaredFieldValue(object);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  object  =  clazz.getDeclaredFieldValue(object);	  FieldValue    fieldValue    =    clazz.getDeclaredFieldValue(object);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
160	[BUG]  [BUGGY]  FieldValue  object  =  object  instanceof  FieldValue?(FieldValue)object  :  object.getValue();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  object  =  object  instanceof  FieldValue?(FieldValue)object  :  object.getValue();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  object  =  object  instanceof  FieldValue?(FieldValue)object  :  object.getValue();	  FieldValue    fieldValue    =    object    instanceof    FieldValue?(FieldValue)object    :    object.getValue();    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
161	[BUG]  [BUGGY]  Builder.append(object.getValue());  [CE]  cannot  find  symbol  [FE]        StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Builder.append(object.getValue());  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Builder.append(object.getValue());	  Object    fieldValue    =    object.getValue();    builder.append(fieldValue);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
162	[BUG]  [BUGGY]  builder.append(object.getValue());  [CE]  cannot  find  symbol  [FE]          StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  builder.append(object.getValue());  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	builder.append(object.getValue());	  Object    fieldValue    =    object.getValue();    builder.append(fieldValue);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
163	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(excludeFields));  [CE]  <identifier>  expected  [FE]        UnsupportedOperationException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(excludeFields));  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(excludeFields));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	31	None	replace
164	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  excludeFields.equals(object));  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	add	throw  new  IllegalArgumentException( " "  +  excludeFields.equals(object));	  throw    new    IllegalArgumentException(   "   ".equals(excludeFields));    	compilable	  [FE]  NullPointerException  	45	1	replace
165	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  excludeFields.equals(object));  [FE]  NullPointerException  [FE]        IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  excludeFields.equals(object));  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	throw  new  IllegalArgumentException( " "  +  excludeFields.equals(object));	  throw    new    IllegalArgumentException(   "   ".equals(excludeFields));    	compilable	  [FE]  NullPointerException  	45	1	replace
166	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(excludeFields));  [CE]  <identifier>  expected  [FE]          IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(excludeFields));  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwables.throw  new  IllegalArgumentException( " ").equals(excludeFields));	  throw    new    IllegalArgumentException(   "   ".equals(excludeFields));    	non-compiled	[CE]  <identifier>  expected	45	None	replace
167	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(excludeFields);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(excludeFields);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwables.throw  new  IllegalArgumentException( " ").equals(excludeFields);	  throw    new    IllegalArgumentException(   "   ".equals(excludeFields));    	non-compiled	[CE]  <identifier>  expected	45	None	replace
168	[BUG]  [BUGGY]  ThreadLocal.throw  new  RuntimeException( " ");  [CE]  <identifier>  expected  [FE]            RuntimeException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  ThreadLocal.throw  new  RuntimeException( " ");  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	ThreadLocal.throw  new  RuntimeException( " ");	  throw    new    RuntimeException(       "       ");    Throwables.throw    new    RuntimeException(   "       ");    	non-compiled	[CE]  <identifier>  expected	37	None	replace
169	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( " ".equals(object.getClass()));  [CE]  <identifier>  expected  [FE]              RuntimeException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwables.throw  new  RuntimeException( " ".equals(object.getClass()));  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwables.throw  new  RuntimeException( " ".equals(object.getClass()));	  throw    new    RuntimeException(       "       ");    Throwables.throw    new    RuntimeException(   "       ");    	non-compiled	[CE]  <identifier>  expected	37	None	replace
170	[BUG]  [BUGGY]  Class  <?>[]  fields  =  object.getDeclaredFields();  [CE]  cannot  find  symbol  [FE]        StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Class  <?>[]  fields  =  object.getDeclaredFields();  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Class  <?>[]  fields  =  object.getDeclaredFields();	  Class    <?>[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
171	[BUG]  [BUGGY]  Class  <?>[]  fields  =  clazz.getDeclaredFields(excludeFields);  [CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Class  <?>[]  fields  =  clazz.getDeclaredFields(excludeFields);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Class  <?>[]  fields  =  clazz.getDeclaredFields(excludeFields);	  Class    <?>[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;	27	None	replace
172	[BUG]  [BUGGY]  Class  <?>[]  fields  =  clazz.getSuperclassFields();  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Class  <?>[]  fields  =  clazz.getSuperclassFields();  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Class  <?>[]  fields  =  clazz.getSuperclassFields();	  Class    <?>[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
173	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(excludeFields));  [CE]  <identifier>  expected  [FE]        IllegalStateException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(excludeFields));  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwables.throw  new  IllegalStateException( " ".equals(excludeFields));	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	21	None	replace
174	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ",  e);  [CE]  <identifier>  expected  [FE]          IllegalStateException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ",  e);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwables.throw  new  IllegalStateException( " ",  e);	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	21	None	replace
175	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(fieldValue));  [CE]  <identifier>  expected  [FE]            IllegalStateException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(fieldValue));  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwables.throw  new  IllegalStateException( " ".equals(fieldValue));	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	21	None	replace
176	[BUG]  [BUGGY]  builder.setAccessible(object,  false);  [CE]  cannot  find  symbol  [FE]        StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  builder.setAccessible(object,  false);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	builder.setAccessible(object,  false);	          Object    fieldValue    =    object.getValue();    builder.setAccessible(fieldValue,    false);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
177	[BUG]  [BUGGY]  Builder.setAccessible(object,  false);  [CE]  cannot  find  symbol  Builder  [FE]          StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Builder.setAccessible(object,  false);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Builder.setAccessible(object,  false);	          Object    fieldValue    =    object.getValue();    builder.setAccessible(fieldValue,    false);    	non-compiled	[CE]  cannot  find  symbol  Builder	79	None	replace
178	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  throw  new  IllegalArgumentException( " ");  [CE]  <identifier>  expected  [FE]        IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwables.throw  new  IllegalArgumentException( " ");  throw  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(       "       ");    throw    new    IllegalArgumentException(   "       ");    	non-compiled	[CE]  <identifier>  expected	32	None	replace
179	[BUG]  [BUGGY]  Object  objectValue  =  clazz.getValue();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object  objectValue  =  clazz.getValue();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object  objectValue  =  clazz.getValue();	  Object    objectValue    =    object.getValue();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
180	[BUG]  [BUGGY]  Object  objectValue  =  field.getValue();  [CE]  cannot  find  symbol  field  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object  objectValue  =  field.getValue();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object  objectValue  =  field.getValue();	  Object    objectValue    =    object.getValue();    	non-compiled	[CE]  cannot  find  symbol  field	12	None	replace
181	[BUG]  [BUGGY]  Object[]  fields  =  scope.getDeclaredFields();  [CE]  cannot  find  symbol  scope  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object[]  fields  =  scope.getDeclaredFields();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object[]  fields  =  scope.getDeclaredFields();	  Object[]    fields    =    fieldValue.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol  scope	6	None	replace
182	[BUG]  [BUGGY]  Object[]  fields  =  class.getDeclaredFields();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object[]  fields  =  class.getDeclaredFields();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object[]  fields  =  class.getDeclaredFields();	  Object[]    fields    =    fieldValue.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
183	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  if(excludeFields  ==  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	add	if(excludeFields  ==  null)  {  throw  new  RuntimeException( " ");  }	  throw    new    RuntimeException(       "       ");    Throwables.throw    new    RuntimeException(   "       ");    	compilable	  [FE]  RuntimeException  	37	1	replace
184	[BUG]  [BUGGY]  if(excludeFields  ==  null)  {  throw  new  RuntimeException( " ");  }  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  if(excludeFields  ==  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	if(excludeFields  ==  null)  {  throw  new  RuntimeException( " ");  }	  throw    new    RuntimeException(       "       ");    Throwables.throw    new    RuntimeException(   "       ");    	compilable	  [FE]  RuntimeException  	37	1	replace
185	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  if(!useTransients)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	add	if(!useTransients)  {  throw  new  RuntimeException( " ");  }	  throw    new    RuntimeException(       "       ");    Throwables.throw    new    RuntimeException(   "       ");    	compilable	  [FE]  RuntimeException  	37	1	replace
186	[BUG]  [BUGGY]  if(!useTransients)  {  throw  new  RuntimeException( " ");  }  [FE]  RuntimeException  [FE]              RuntimeException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  if(!useTransients)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	if(!useTransients)  {  throw  new  RuntimeException( " ");  }	  throw    new    RuntimeException(       "       ");    Throwables.throw    new    RuntimeException(   "       ");    	compilable	  [FE]  RuntimeException  	37	1	replace
187	[BUG]  [BUGGY]  FieldValue[]  fields  =  constructer.getDeclaredFields();  HashCodeBuilder  builder  =  clazz.build();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue[]  fields  =  constructer.getDeclaredFields();  HashCodeBuilder  builder  =  clazz.build();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue[]  fields  =  constructer.getDeclaredFields();  HashCodeBuilder  builder  =  clazz.build();	  FieldValue[]    fields    =    clazz.getDeclaredFields();    HashCodeBuilder    builder    =    constructer.build();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
188	[BUG]  [BUGGY]  FieldValue[]  fields  =  constructer.getDeclaredFields();  HashCodeBuilder  builder  =  constructer.build();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue[]  fields  =  constructer.getDeclaredFields();  HashCodeBuilder  builder  =  constructer.build();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue[]  fields  =  constructer.getDeclaredFields();  HashCodeBuilder  builder  =  constructer.build();	  FieldValue[]    fields    =    clazz.getDeclaredFields();    HashCodeBuilder    builder    =    constructer.build();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
189	[BUG]  [BUGGY]  Object  fieldValue  =  clazz.getValue();  builder.setAccessible(fieldValue,  true);  [CE]  cannot  find  symbol  [FE]          StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object  fieldValue  =  clazz.getValue();  builder.setAccessible(fieldValue,  true);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object  fieldValue  =  clazz.getValue();  builder.setAccessible(fieldValue,  true);	  Object    fieldValue    =    object.getValue();    builder.setAccessible(fieldValue,    true);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
190	[BUG]  [BUGGY]  Object  fieldValue  =  object.getValue();  builder.setAccessible(objectValue,  true);  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object  fieldValue  =  object.getValue();  builder.setAccessible(objectValue,  true);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object  fieldValue  =  object.getValue();  builder.setAccessible(objectValue,  true);	  Object    fieldValue    =    object.getValue();    builder.setAccessible(fieldValue,    true);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
191	[BUG]  [BUGGY]          builder.append(object);  BuildUtils.append(builder,  fieldValue);  builder.append(object);  [CE]  cannot  find  symbol  fieldValue  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]          builder.append(object);  BuildUtils.append(builder,  fieldValue);  builder.append(object);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	                builder.append(object);    BuildUtils.append(builder,  fieldValue);  builder.append(object);	  	non-compiled	[CE]  cannot  find  symbol  fieldValue	50	None	add
192	[BUG]  [BUGGY]          builder.append(object);  BuildUtils.append(builder,  object);  builder.append(object);  [CE]  cannot  find  symbol  BuildUtils  [FE]      StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]          builder.append(object);  BuildUtils.append(builder,  object);  builder.append(object);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	                builder.append(object);    BuildUtils.append(builder,  object);  builder.append(object);	  	non-compiled	[CE]  cannot  find  symbol  BuildUtils	50	None	add
193	[BUG]  [BUGGY]          builder.append(object);  BuildUtils.append(builder,  object);  builder.append(fieldValue);  [CE]  cannot  find  symbol  BuildUtils  [FE]        StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]          builder.append(object);  BuildUtils.append(builder,  object);  builder.append(fieldValue);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	                builder.append(object);    BuildUtils.append(builder,  object);  builder.append(fieldValue);	  	non-compiled	[CE]  cannot  find  symbol  BuildUtils	50	None	add
194	[BUG]  [BUGGY]          builder.append(object);  BuildUtils.append(builder,  object);  [CE]  cannot  find  symbol  BuildUtils  [FE]          StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]          builder.append(object);  BuildUtils.append(builder,  object);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	                builder.append(object);    BuildUtils.append(builder,  object);	  	non-compiled	[CE]  cannot  find  symbol  BuildUtils	50	None	add
195	[BUG]  [BUGGY]  Object  fieldValue  =  object.getValue();  builder.append(objectValue);  [CE]  cannot  find  symbol  [FE]        StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object  fieldValue  =  object.getValue();  builder.append(objectValue);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object  fieldValue  =  object.getValue();  builder.append(objectValue);	  Object    fieldValue    =    object.getValue();    builder.append(fieldValue);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
196	[BUG]  [BUGGY]  Object  fieldValue  =  object.getValue();  builder.append(fieldValue,  excludeFields);  [CE]  cannot  find  symbol  [FE]          StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object  fieldValue  =  object.getValue();  builder.append(fieldValue,  excludeFields);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object  fieldValue  =  object.getValue();  builder.append(fieldValue,  excludeFields);	  Object    fieldValue    =    object.getValue();    builder.append(fieldValue);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
197	[BUG]  [BUGGY]  FieldValue[]  fields  =  class.getDeclaredFields(excludeFields);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue[]  fields  =  class.getDeclaredFields(excludeFields);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue[]  fields  =  class.getDeclaredFields(excludeFields);	  FieldValue[]    fields    =    class.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
198	[BUG]  [BUGGY]  throw  new  UnsupportedOperationException( " ",  e);  [CE]  cannot  find  symbol  e  [FE]        UnsupportedOperationException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  throw  new  UnsupportedOperationException( " ",  e);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	throw  new  UnsupportedOperationException( " ",  e);	  throw    new    UnsupportedOperationException(   "   "),    e);    	non-compiled	[CE]  cannot  find  symbol  e	80	None	replace
199	[BUG]  [BUGGY]  throw  new  UnsupportedOperationException( " "  +  object,  e);  [CE]  cannot  find  symbol  e  [FE]          UnsupportedOperationException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  throw  new  UnsupportedOperationException( " "  +  object,  e);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	throw  new  UnsupportedOperationException( " "  +  object,  e);	  throw    new    UnsupportedOperationException(   "   "),    e);    	non-compiled	[CE]  cannot  find  symbol  e	80	None	replace
200	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( " "  +  object);  [CE]  <identifier>  expected  [FE]        RuntimeException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwables.throw  new  RuntimeException( " "  +  object);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwables.throw  new  RuntimeException( " "  +  object);	  Throwables.throw    new    RuntimeException(   "   ");    	non-compiled	[CE]  <identifier>  expected	26	None	replace
201	[BUG]  [BUGGY]  FieldValue  fieldValue  =  clazz.getValue(excludeFields,  null);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  fieldValue  =  clazz.getValue(excludeFields,  null);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =  clazz.getValue(excludeFields,  null);	  FieldValue    fieldValue    =    clazz.getValue(null);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
202	[BUG]  [BUGGY]  FieldValue  fieldValue  =  clazz.getValue(null,  excludeFields);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  fieldValue  =  clazz.getValue(null,  excludeFields);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =  clazz.getValue(null,  excludeFields);	  FieldValue    fieldValue    =    clazz.getValue(null);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
203	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  object.getClass());  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	add	throw  new  IllegalArgumentException( " "  +  object.getClass());	  throw    new    IllegalArgumentException(   "   ".equals(object.getClass()));    	compilable	  [FE]  IllegalArgumentException  	73	1	replace
204	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  object.getClass());  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  object.getClass());  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	throw  new  IllegalArgumentException( " "  +  object.getClass());	  throw    new    IllegalArgumentException(   "   ".equals(object.getClass()));    	compilable	  [FE]  IllegalArgumentException  	73	1	replace
205	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(object.getClass()));  [CE]  <identifier>  expected  [FE]          IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(object.getClass()));  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwables.throw  new  IllegalArgumentException( " ").equals(object.getClass()));	  throw    new    IllegalArgumentException(   "   ".equals(object.getClass()));    	non-compiled	[CE]  <identifier>  expected	73	None	replace
206	[BUG]  [BUGGY]  Object  objectValue  =  object  instanceof  FieldValue?((  FieldValue)object).getValue()  :  null;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object  objectValue  =  object  instanceof  FieldValue?((  FieldValue)object).getValue()  :  null;  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object  objectValue  =  object  instanceof  FieldValue?((  FieldValue)object).getValue()  :  null;	  Object    objectValue    =    object.getValue();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
207	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  builder.append( ", ");  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	add	builder.append( ", ");	          builder.append(object);    	compilable	  [FE]  StackOverflowError  	51	1	replace
208	[BUG]  [BUGGY]  builder.append( ", ");  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  builder.append( ", ");  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	builder.append( ", ");	          builder.append(object);    	compilable	  [FE]  StackOverflowError  	51	1	replace
209	[BUG]  [BUGGY]  FieldValue  fieldValue  =  object  instanceof  FieldValue?(FieldValue)object  :  clazz.getDeclaredFieldValue();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  fieldValue  =  object  instanceof  FieldValue?(FieldValue)object  :  clazz.getDeclaredFieldValue();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =  object  instanceof  FieldValue?(FieldValue)object  :  clazz.getDeclaredFieldValue();	  FieldValue    fieldValue    =    object.getDeclaredFieldValue();    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
210	[BUG]  [BUGGY]  FieldValue  objectValue  =  excludeFields.getDeclaredFields();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  objectValue  =  excludeFields.getDeclaredFields();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  objectValue  =  excludeFields.getDeclaredFields();	  FieldValue    objectValue    =    clazz.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
211	[BUG]  [BUGGY]  FieldValue  objectValue  =  clazz.getScope().getDeclaredFields();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  objectValue  =  clazz.getScope().getDeclaredFields();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  objectValue  =  clazz.getScope().getDeclaredFields();	  FieldValue    objectValue    =    clazz.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
212	[BUG]  [BUGGY]  FieldValue  fieldValue  =  object  instanceof  String?((  String)object).toString()  :  null;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  fieldValue  =  object  instanceof  String?((  String)object).toString()  :  null;  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =  object  instanceof  String?((  String)object).toString()  :  null;	  FieldValue    fieldValue    =    object.toString();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
213	[BUG]  [BUGGY]  FieldValue[]  fields  =  excludeFields.getDeclaredFields(clazz);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue[]  fields  =  excludeFields.getDeclaredFields(clazz);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue[]  fields  =  excludeFields.getDeclaredFields(clazz);	  FieldValue[]    fields    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
214	[BUG]  [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields(excludeFields);  [CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields(excludeFields);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object[]  fields  =  clazz.getDeclaredFields(excludeFields);	  Object[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;	5	None	replace
215	[BUG]  [BUGGY]  Object[]  fields  =  excludeFields  ==  null?  null  :  excludeFields.getDeclaredFields();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object[]  fields  =  excludeFields  ==  null?  null  :  excludeFields.getDeclaredFields();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object[]  fields  =  excludeFields  ==  null?  null  :  excludeFields.getDeclaredFields();	  Object[]    fields    =    excludeFields.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
216	[BUG]  [BUGGY]  FieldValue  fieldValue  =  object  instanceof  FieldValue?(FieldValue)object  :  clazz.getDeclaredFields();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  fieldValue  =  object  instanceof  FieldValue?(FieldValue)object  :  clazz.getDeclaredFields();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =  object  instanceof  FieldValue?(FieldValue)object  :  clazz.getDeclaredFields();	  FieldValue    fieldValue    =    object.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
217	[BUG]  [BUGGY]  builder.add(fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]                StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  builder.add(fieldValue);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	builder.add(fieldValue);	          builder.add(object);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	52	None	replace
218	[BUG]  [BUGGY]  Object  fieldValue  =  clazz.getValue();  builder.addChildToBack(fieldValue);  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object  fieldValue  =  clazz.getValue();  builder.addChildToBack(fieldValue);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object  fieldValue  =  clazz.getValue();  builder.addChildToBack(fieldValue);	  Object    fieldValue    =    object.getValue();    builder.addChildToBack(fieldValue);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
219	[BUG]  [BUGGY]  Object  fieldValue  =  object.getValue();  builder.addChildToBack(objectValue);  [CE]  cannot  find  symbol  [FE]              StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object  fieldValue  =  object.getValue();  builder.addChildToBack(objectValue);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object  fieldValue  =  object.getValue();  builder.addChildToBack(objectValue);	  Object    fieldValue    =    object.getValue();    builder.addChildToBack(fieldValue);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
220	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  if(!useTransients)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	add	if(!useTransients)  {  throw  new  IllegalArgumentException( " ");  }	  throw    new    IllegalArgumentException(       "       ");    throw    new    IllegalArgumentException(   "       ");    	compilable	  [FE]  IllegalArgumentException  	32	1	replace
221	[BUG]  [BUGGY]  if(!useTransients)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  if(!useTransients)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	if(!useTransients)  {  throw  new  IllegalArgumentException( " ");  }	  throw    new    IllegalArgumentException(       "       ");    throw    new    IllegalArgumentException(   "       ");    	compilable	  [FE]  IllegalArgumentException  	32	1	replace
222	[BUG]  [BUGGY]  Throwable  m  =  clazz.getDeclaredException( " ",  excludeFields);  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwable  m  =  clazz.getDeclaredException( " ",  excludeFields);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwable  m  =  clazz.getDeclaredException( " ",  excludeFields);	  throw    new    IllegalArgumentException(       "       ");    Throwable    m    =    clazz.getDeclaredException(   "       ");    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
223	[BUG]  [BUGGY]  FieldValue  value  =  clazz.getDeclaredFields(excludeFields);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  value  =  clazz.getDeclaredFields(excludeFields);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  value  =  clazz.getDeclaredFields(excludeFields);	  FieldValue    value    =    clazz.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
224	[BUG]  [BUGGY]  FieldValue  fieldValue  =  this.clazz.getDeclaredFieldValue(excludeFields);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  fieldValue  =  this.clazz.getDeclaredFieldValue(excludeFields);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =  this.clazz.getDeclaredFieldValue(excludeFields);	  FieldValue    fieldValue    =    this.clazz.getDeclaredFieldValue();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
225	[BUG]  [BUGGY]  Class  <?>[]  fields  =  clazz.getSuperclasses();  [CE]  cannot  find  symbol  [FE]        StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Class  <?>[]  fields  =  clazz.getSuperclasses();  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Class  <?>[]  fields  =  clazz.getSuperclasses();	  Class    <?>[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
226	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:    [FE]        RuntimeException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  throw  new  RuntimeException( ", ");  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	add	throw  new  RuntimeException( ", ");	  throw    new    RuntimeException(       "       ");    throw    new    RuntimeException(   ",       ");    	compilable	  [FE]  java.lang.RuntimeException:    	57	1	replace
227	[BUG]  [BUGGY]  throw  new  RuntimeException( ", ");  [FE]  java.lang.RuntimeException:    [FE]        RuntimeException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  throw  new  RuntimeException( ", ");  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	throw  new  RuntimeException( ", ");	  throw    new    RuntimeException(       "       ");    throw    new    RuntimeException(   ",       ");    	compilable	  [FE]  java.lang.RuntimeException:    	57	1	replace
228	[BUG]  [BUGGY]  e  =  new  IllegalArgumentException( " ");  [CE]  cannot  find  symbol  e  [FE]        IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  e  =  new  IllegalArgumentException( " ");  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	e  =  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(       "       ");    Throwable    e    =    new    IllegalArgumentException(   "       ");    	non-compiled	[CE]  cannot  find  symbol  e	67	None	replace
229	[BUG]  [BUGGY]  FieldValue[]  fields  =  excludeFields.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  true);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue[]  fields  =  excludeFields.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  true);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue[]  fields  =  excludeFields.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  true);	  FieldValue[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(excludeFields,    true);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
230	[BUG]  [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields();  Field[]  fields  =  clazz.getDeclaredFields();  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields();  Field[]  fields  =  clazz.getDeclaredFields();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object[]    fields    =    clazz.getDeclaredFields();    Field[]  fields  =  clazz.getDeclaredFields();	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	4	None	add
231	[BUG]  [BUGGY]  FieldValue  objectValue  =  object  instanceof  FieldValue?(FieldValue)object  :  clazz.getValue();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  objectValue  =  object  instanceof  FieldValue?(FieldValue)object  :  clazz.getValue();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  objectValue  =  object  instanceof  FieldValue?(FieldValue)object  :  clazz.getValue();	  FieldValue    objectValue    =    object.getValue();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
232	[BUG]  [BUGGY]  Throwable  t  =  new  IllegalStateException( " ");  t.equals(excludeFields));  [CE]  [FE]        IllegalStateException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwable  t  =  new  IllegalStateException( " ");  t.equals(excludeFields));  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwable  t  =  new  IllegalStateException( " ");  t.equals(excludeFields));	  throw    new    IllegalStateException(   "   ".equals(excludeFields));    	non-compiled	[CE]  	54	None	replace
233	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  clazz.getName()  + "  excludes: "  +  excludeFields));  [CE]  [FE]          IllegalStateException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  throw  new  IllegalStateException( " "  +  clazz.getName()  + "  excludes: "  +  excludeFields));  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	throw  new  IllegalStateException( " "  +  clazz.getName()  + "  excludes: "  +  excludeFields));	  throw    new    IllegalStateException(   "   ".equals(excludeFields));    	non-compiled	[CE]  	54	None	replace
234	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  throw  new  IllegalStateException( " "  +  excludeFields);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	add	throw  new  IllegalStateException( " "  +  excludeFields);	  throw    new    IllegalStateException(   "   ".equals(excludeFields));    	compilable	  [FE]  IllegalStateException  	54	1	replace
235	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  excludeFields);  [FE]  IllegalStateException  [FE]            IllegalStateException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  throw  new  IllegalStateException( " "  +  excludeFields);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	throw  new  IllegalStateException( " "  +  excludeFields);	  throw    new    IllegalStateException(   "   ".equals(excludeFields));    	compilable	  [FE]  IllegalStateException  	54	1	replace
236	[BUG]  [BUGGY]  FieldValue  fieldValue  =  clazz.getValue(field);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  fieldValue  =  clazz.getValue(field);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =  clazz.getValue(field);	  FieldValue    fieldValue    =    clazz.getValue(object);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
237	[BUG]  [BUGGY]  FieldValue[]  fields  =  excludeFields.getSuperclassFields();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue[]  fields  =  excludeFields.getSuperclassFields();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue[]  fields  =  excludeFields.getSuperclassFields();	  FieldValue[]    fields    =    clazz.getSuperclassFields();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
238	[BUG]  [BUGGY]  FieldValue  objectValue  =  clazz.getDeclaredFieldValue(excludeFields);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  objectValue  =  clazz.getDeclaredFieldValue(excludeFields);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  objectValue  =  clazz.getDeclaredFieldValue(excludeFields);	  FieldValue    objectValue    =    clazz.getDeclaredFieldValue();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
239	[BUG]  [BUGGY]  FieldValue[]  fields  =  class.getDeclaredFields();  HashCodeBuilder  builder  =  clazz.build();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue[]  fields  =  class.getDeclaredFields();  HashCodeBuilder  builder  =  clazz.build();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue[]  fields  =  class.getDeclaredFields();  HashCodeBuilder  builder  =  clazz.build();	  FieldValue[]    fields    =    clazz.getDeclaredFields();    HashCodeBuilder    builder    =    clazz.build();    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
240	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object  fieldValue  =  object.toString();  Object  areaValue  =  object.toString();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	add	Object    fieldValue    =    object.toString();    Object  areaValue  =  object.toString();	  	compilable	  [FE]  StackOverflowError  	82	1	add
241	[BUG]  [BUGGY]  Object  fieldValue  =  object.toString();  Object  areaValue  =  object.toString();  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object  fieldValue  =  object.toString();  Object  areaValue  =  object.toString();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object    fieldValue    =    object.toString();    Object  areaValue  =  object.toString();	  	compilable	  [FE]  StackOverflowError  	82	1	add
242	[BUG]  [BUGGY]  Object  fieldValue  =  clazz.getValue();  builder.setAccessible(fieldValue,  false);  [CE]  cannot  find  symbol  [FE]        StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object  fieldValue  =  clazz.getValue();  builder.setAccessible(fieldValue,  false);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object  fieldValue  =  clazz.getValue();  builder.setAccessible(fieldValue,  false);	          Object    fieldValue    =    object.getValue();    builder.setAccessible(fieldValue,    false);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
243	[BUG]  [BUGGY]  FieldValue[]  fields  =  excludeFields.getFields();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue[]  fields  =  excludeFields.getFields();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue[]  fields  =  excludeFields.getFields();	  FieldValue[]    fields    =    clazz.getFields();    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
244	[BUG]  [BUGGY]  HashCodeBuilder  builder  =  target.build();  [CE]  variable  builder  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  HashCodeBuilder  builder  =  target.build();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	HashCodeBuilder  builder  =  target.build();	  HashCodeBuilder    builder    =    builder.build();    	non-compiled	[CE]  variable  builder  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	1	None	replace
245	[BUG]  [BUGGY]  HashCodeBuilder  builder  =  this.getClass().build();  [CE]  variable  builder  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  HashCodeBuilder  builder  =  this.getClass().build();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	HashCodeBuilder  builder  =  this.getClass().build();	  HashCodeBuilder    builder    =    builder.build();    	non-compiled	[CE]  variable  builder  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	1	None	replace
246	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwable  t  =  new  IllegalArgumentException( " ");  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	add	Throwable  t  =  new  IllegalArgumentException( " ");	  Throwable    t    =    new    IllegalStateException(   "   ");    	compilable	  [FE]  StackOverflowError  	59	1	replace
247	[BUG]  [BUGGY]  Throwable  t  =  new  IllegalArgumentException( " ");  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwable  t  =  new  IllegalArgumentException( " ");  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwable  t  =  new  IllegalArgumentException( " ");	  Throwable    t    =    new    IllegalStateException(   "   ");    	compilable	  [FE]  StackOverflowError  	59	1	replace
248	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwable  t  =  new  IllegalStateException( "Unknown  object: ");  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	add	Throwable  t  =  new  IllegalStateException( "Unknown  object: ");	  Throwable    t    =    new    IllegalStateException(   "   ");    	compilable	  [FE]  StackOverflowError  	59	1	replace
249	[BUG]  [BUGGY]  Throwable  t  =  new  IllegalStateException( "Unknown  object: ");  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwable  t  =  new  IllegalStateException( "Unknown  object: ");  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwable  t  =  new  IllegalStateException( "Unknown  object: ");	  Throwable    t    =    new    IllegalStateException(   "   ");    	compilable	  [FE]  StackOverflowError  	59	1	replace
250	[BUG]  [BUGGY]  HashCodeBuilder  builder  =  clazz.build(excludeFields);  [CE]  variable  builder  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  HashCodeBuilder  builder  =  clazz.build(excludeFields);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	HashCodeBuilder  builder  =  clazz.build(excludeFields);	  HashCodeBuilder    builder    =    clazz.build();    	non-compiled	[CE]  variable  builder  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	2	None	replace
251	[BUG]  [BUGGY]  HashCodeBuilder  builder  =  clazz.getDeclaredFields();  [CE]  variable  builder  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  HashCodeBuilder  builder  =  clazz.getDeclaredFields();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	HashCodeBuilder  builder  =  clazz.getDeclaredFields();	  HashCodeBuilder    builder    =    clazz.build();    	non-compiled	[CE]  variable  builder  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	2	None	replace
252	[BUG]  [BUGGY]  FieldValue  fieldValue  =  clazz.getFieldValue(excludeFields);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  fieldValue  =  clazz.getFieldValue(excludeFields);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =  clazz.getFieldValue(excludeFields);	  FieldValue    fieldValue    =    clazz.getFieldValue();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
253	[BUG]  [BUGGY]  FieldValue  fieldValue  =  clazz.getFieldValue(null);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  fieldValue  =  clazz.getFieldValue(null);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =  clazz.getFieldValue(null);	  FieldValue    fieldValue    =    clazz.getFieldValue();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
254	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  builder.register(excludeFields);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	add	builder.register(excludeFields);	          builder.reset();    	compilable	  [FE]  StackOverflowError  	49	1	replace
255	[BUG]  [BUGGY]  builder.register(excludeFields);  [FE]  StackOverflowError  [FE]            StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  builder.register(excludeFields);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	builder.register(excludeFields);	          builder.reset();    	compilable	  [FE]  StackOverflowError  	49	1	replace
256	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  if(excludeFields  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	add	if(excludeFields  ==  null)  {  throw  new  IllegalStateException( " ");  }	  throw    new    IllegalStateException(       "       ");    Throwables.throw    new    IllegalStateException(   "       ");    	compilable	  [FE]  IllegalStateException  	30	1	replace
257	[BUG]  [BUGGY]  if(excludeFields  ==  null)  {  throw  new  IllegalStateException( " ");  }  [FE]  IllegalStateException  [FE]            IllegalStateException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  if(excludeFields  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	if(excludeFields  ==  null)  {  throw  new  IllegalStateException( " ");  }	  throw    new    IllegalStateException(       "       ");    Throwables.throw    new    IllegalStateException(   "       ");    	compilable	  [FE]  IllegalStateException  	30	1	replace
258	[BUG]  [BUGGY]  builder.addChangeListener(excludeFields);  [CE]  cannot  find  symbol  [FE]        StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  builder.addChangeListener(excludeFields);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	builder.addChangeListener(excludeFields);	          builder.addChangeListener(this);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
259	[BUG]  [BUGGY]  builder.addChangeListener(this,  excludeFields);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]          StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  builder.addChangeListener(this,  excludeFields);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	builder.addChangeListener(this,  excludeFields);	          builder.addChangeListener(this);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	46	None	replace
260	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object  fieldValue  =  object!=  null?  null  :  object.toString();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	add	Object  fieldValue  =  object!=  null?  null  :  object.toString();	  Object    fieldValue    =    object.toString();    	compilable	  [FE]  StackOverflowError  	83	1	replace
261	[BUG]  [BUGGY]  Object  fieldValue  =  object!=  null?  null  :  object.toString();  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object  fieldValue  =  object!=  null?  null  :  object.toString();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object  fieldValue  =  object!=  null?  null  :  object.toString();	  Object    fieldValue    =    object.toString();    	compilable	  [FE]  StackOverflowError  	83	1	replace
262	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]          UnsupportedOperationException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  if(excludeFields  ==  null)  {  throw  new  UnsupportedOperationException( " ");  }  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	add	if(excludeFields  ==  null)  {  throw  new  UnsupportedOperationException( " ");  }	  throw    new    UnsupportedOperationException(       "       ");    Throwables.throw    new    UnsupportedOperationException(   "       ");    	compilable	  [FE]  UnsupportedOperationException  	24	1	replace
263	[BUG]  [BUGGY]  if(excludeFields  ==  null)  {  throw  new  UnsupportedOperationException( " ");  }  [FE]  UnsupportedOperationException  [FE]          UnsupportedOperationException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  if(excludeFields  ==  null)  {  throw  new  UnsupportedOperationException( " ");  }  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	if(excludeFields  ==  null)  {  throw  new  UnsupportedOperationException( " ");  }	  throw    new    UnsupportedOperationException(       "       ");    Throwables.throw    new    UnsupportedOperationException(   "       ");    	compilable	  [FE]  UnsupportedOperationException  	24	1	replace
264	[BUG]  [BUGGY]  FieldValue  objectValue  =  clazz.getObjectValue();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  objectValue  =  clazz.getObjectValue();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  objectValue  =  clazz.getObjectValue();	  FieldValue    objectValue    =    clazz.getValue();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
265	[BUG]  [BUGGY]  FieldValue  objectValue  =  clazz.getKey();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  objectValue  =  clazz.getKey();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  objectValue  =  clazz.getKey();	  FieldValue    objectValue    =    clazz.getValue();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
266	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  excludeFields);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	add	throw  new  IllegalArgumentException( " "  +  excludeFields);	  throw    new    IllegalArgumentException(   "   ".equals(excludeFields));    	compilable	  [FE]  IllegalArgumentException  	45	1	replace
267	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  excludeFields);  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  excludeFields);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	throw  new  IllegalArgumentException( " "  +  excludeFields);	  throw    new    IllegalArgumentException(   "   ".equals(excludeFields));    	compilable	  [FE]  IllegalArgumentException  	45	1	replace
268	[BUG]  [BUGGY]  Throwable  t  =  new  IllegalArgumentException( " ");  t.equals(excludeFields));  [CE]  [FE]          IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwable  t  =  new  IllegalArgumentException( " ");  t.equals(excludeFields));  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwable  t  =  new  IllegalArgumentException( " ");  t.equals(excludeFields));	  throw    new    IllegalArgumentException(   "   ".equals(excludeFields));    	non-compiled	[CE]  	45	None	replace
269	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  clazz.getName()  + "  excludes: "  +  excludeFields));  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  clazz.getName()  + "  excludes: "  +  excludeFields));  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	throw  new  IllegalArgumentException( " "  +  clazz.getName()  + "  excludes: "  +  excludeFields));	  throw    new    IllegalArgumentException(   "   ".equals(excludeFields));    	non-compiled	[CE]  	45	None	replace
270	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  throw  new  IllegalStateException( " "  +  object.getClass());  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	add	throw  new  IllegalStateException( " "  +  object.getClass());	  throw    new    IllegalStateException(   "   ".equals(object.getClass()));    	compilable	  [FE]  IllegalStateException  	22	1	replace
271	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  object.getClass());  [FE]  IllegalStateException  [FE]          IllegalStateException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  throw  new  IllegalStateException( " "  +  object.getClass());  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	throw  new  IllegalStateException( " "  +  object.getClass());	  throw    new    IllegalStateException(   "   ".equals(object.getClass()));    	compilable	  [FE]  IllegalStateException  	22	1	replace
272	[BUG]  [BUGGY]          builder.register(object);  builder.register(object);  this.fieldValue  =  clazz.getDeclaredFields();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]          builder.register(object);  builder.register(object);  this.fieldValue  =  clazz.getDeclaredFields();  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	                builder.register(object);    builder.register(object);  this.fieldValue  =  clazz.getDeclaredFields();	  	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	47	None	add
273	[BUG]  [BUGGY]          builder.register(object);  builder.register(object);  this.fieldValue  =  clazz.getDeclaredFieldValue();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]          builder.register(object);  builder.register(object);  this.fieldValue  =  clazz.getDeclaredFieldValue();  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	                builder.register(object);    builder.register(object);  this.fieldValue  =  clazz.getDeclaredFieldValue();	  	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	47	None	add
274	[BUG]  [BUGGY]          builder.register(object);  builder.register(object);  this.fieldValue  =  clazz.getDeclaredFields()[0];  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]        AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]          builder.register(object);  builder.register(object);  this.fieldValue  =  clazz.getDeclaredFields()[0];  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	                builder.register(object);    builder.register(object);  this.fieldValue  =  clazz.getDeclaredFields()[0];	  	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	47	None	add
275	[BUG]  [BUGGY]  FieldValue[]  fields  =  excludeFields  ==  null?  null  :  excludeFields.getDeclaredFields();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue[]  fields  =  excludeFields  ==  null?  null  :  excludeFields.getDeclaredFields();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue[]  fields  =  excludeFields  ==  null?  null  :  excludeFields.getDeclaredFields();	  FieldValue[]    fields    =    excludeFields.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
276	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( "Unknown  field  value: ");  [CE]  <identifier>  expected  [FE]        RuntimeException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwables.throw  new  RuntimeException( "Unknown  field  value: ");  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwables.throw  new  RuntimeException( "Unknown  field  value: ");	  Throwables.throw    new    RuntimeException(   "   ");    	non-compiled	[CE]  <identifier>  expected	26	None	replace
277	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( " ")  [CE]  <identifier>  expected  [FE]          RuntimeException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwables.throw  new  RuntimeException( " ")  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwables.throw  new  RuntimeException( " ")	  Throwables.throw    new    RuntimeException(   "   ");    	non-compiled	[CE]  <identifier>  expected	26	None	replace
278	[BUG]  [BUGGY]  FieldValue  fieldValue  =  clazz.getValue(object,  field);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  fieldValue  =  clazz.getValue(object,  field);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =  clazz.getValue(object,  field);	  FieldValue    fieldValue    =    clazz.getValue(object);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
279	[BUG]  [BUGGY]  FieldValue  fieldValue  =  clazz.getFieldValue(iConstant);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  fieldValue  =  clazz.getFieldValue(iConstant);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =  clazz.getFieldValue(iConstant);	  FieldValue    fieldValue    =    clazz.getFieldValue();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
280	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(object.getClass()));  [CE]  <identifier>  expected  [FE]        IllegalStateException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(object.getClass()));  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwables.throw  new  IllegalStateException( " ".equals(object.getClass()));	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	21	None	replace
281	[BUG]  [BUGGY]  Object  fieldValue  =  object.getValue();  builder.addChildToBack(fieldValue,  excludeFields);  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object  fieldValue  =  object.getValue();  builder.addChildToBack(fieldValue,  excludeFields);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object  fieldValue  =  object.getValue();  builder.addChildToBack(fieldValue,  excludeFields);	  Object    fieldValue    =    object.getValue();    builder.addChildToBack(fieldValue);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
282	[BUG]  [BUGGY]  Object  fieldValue  =  object.getValue();  constructor.addChildToBack(fieldValue);  [CE]  cannot  find  symbol  [FE]              StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object  fieldValue  =  object.getValue();  constructor.addChildToBack(fieldValue);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object  fieldValue  =  object.getValue();  constructor.addChildToBack(fieldValue);	  Object    fieldValue    =    object.getValue();    builder.addChildToBack(fieldValue);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
283	[BUG]  [BUGGY]  FieldUtils.setAccessible(fields,  true);  [CE]  cannot  find  symbol  fields  [FE]        StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldUtils.setAccessible(fields,  true);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldUtils.setAccessible(fields,  true);	          Class    <?>[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(fields,    true);    	non-compiled	[CE]  cannot  find  symbol  fields	38	None	replace
284	[BUG]  [BUGGY]  accessibleObject.setAccessible(fields,  true);  [CE]  cannot  find  symbol  fields  [FE]          StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  accessibleObject.setAccessible(fields,  true);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	accessibleObject.setAccessible(fields,  true);	          Class    <?>[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(fields,    true);    	non-compiled	[CE]  cannot  find  symbol  fields	38	None	replace
285	[BUG]  [BUGGY]  Object  objectValue  =  object.getValue();  builder.setAccessible(fieldValue,  true);  [CE]  cannot  find  symbol  [FE]          StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object  objectValue  =  object.getValue();  builder.setAccessible(fieldValue,  true);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object  objectValue  =  object.getValue();  builder.setAccessible(fieldValue,  true);	  Object    fieldValue    =    object.getValue();    builder.setAccessible(fieldValue,    true);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
286	[BUG]  [BUGGY]  Object  fieldValue  =  object.getValue();  constructer.setAccessible(fieldValue,  true);  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object  fieldValue  =  object.getValue();  constructer.setAccessible(fieldValue,  true);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object  fieldValue  =  object.getValue();  constructer.setAccessible(fieldValue,  true);	  Object    fieldValue    =    object.getValue();    builder.setAccessible(fieldValue,    true);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
287	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  throw  new  IllegalStateException( ", ");  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	add	throw  new  IllegalStateException( ", ");	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException(   ",       ");    	compilable	  [FE]  IllegalStateException  	81	1	replace
288	[BUG]  [BUGGY]  throw  new  IllegalStateException( ", ");  [FE]  IllegalStateException  [FE]        IllegalStateException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  throw  new  IllegalStateException( ", ");  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	throw  new  IllegalStateException( ", ");	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException(   ",       ");    	compilable	  [FE]  IllegalStateException  	81	1	replace
289	[BUG]  [BUGGY]  FieldValue  fieldValue  =(this.clazz!=  null)?  this.clazz.getDeclaredFieldValue()  :  null;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  fieldValue  =(this.clazz!=  null)?  this.clazz.getDeclaredFieldValue()  :  null;  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =(this.clazz!=  null)?  this.clazz.getDeclaredFieldValue()  :  null;	  FieldValue    fieldValue    =    this.clazz.getDeclaredFieldValue();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
290	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object  objectValue  =  object.toString();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	add	Object  objectValue  =  object.toString();	  Object    objectValue    =    object.getValue();    	compilable	  [FE]  StackOverflowError  	12	1	replace
291	[BUG]  [BUGGY]  Object  objectValue  =  object.toString();  [FE]  StackOverflowError  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object  objectValue  =  object.toString();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object  objectValue  =  object.toString();	  Object    objectValue    =    object.getValue();    	compilable	  [FE]  StackOverflowError  	12	1	replace
292	[BUG]  [BUGGY]  Object  objectValue  =  object.cloneTree();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object  objectValue  =  object.cloneTree();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object  objectValue  =  object.cloneTree();	  Object    objectValue    =    object.getValue();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
293	[BUG]  [BUGGY]          builder.append(object);  if(object!=  null)  {  builder.append(object);  }  else  {  Class  <?>  clazz  =  object.getDeclaredClass();  builder.append(fieldValue);  }  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]          builder.append(object);  if(object!=  null)  {  builder.append(object);  }  else  {  Class  <?>  clazz  =  object.getDeclaredClass();  builder.append(fieldValue);  }  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	                builder.append(object);    if(object!=  null)  {  builder.append(object);  }  else  {  Class  <?>  clazz  =  object.getDeclaredClass();  builder.append(fieldValue);  }	  	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	50	None	add
294	[BUG]  [BUGGY]          builder.append(object);  if(object!=  null)  {  builder.append(object);  }  else  {  Class  <?>  clazz  =  fieldValue.getSuperclass();  builder.append(fieldValue);  }  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]      StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]          builder.append(object);  if(object!=  null)  {  builder.append(object);  }  else  {  Class  <?>  clazz  =  fieldValue.getSuperclass();  builder.append(fieldValue);  }  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	                builder.append(object);    if(object!=  null)  {  builder.append(object);  }  else  {  Class  <?>  clazz  =  fieldValue.getSuperclass();  builder.append(fieldValue);  }	  	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	50	None	add
295	[BUG]  [BUGGY]          builder.append(object);  if(object!=  null)  {  builder.append(object);  }  else  {  Class  <?>  clazz  =  object.getSuperclass();  builder.append(fieldValue);  }  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]        StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]          builder.append(object);  if(object!=  null)  {  builder.append(object);  }  else  {  Class  <?>  clazz  =  object.getSuperclass();  builder.append(fieldValue);  }  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	                builder.append(object);    if(object!=  null)  {  builder.append(object);  }  else  {  Class  <?>  clazz  =  object.getSuperclass();  builder.append(fieldValue);  }	  	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	50	None	add
296	[BUG]  [BUGGY]          builder.append(object);  if(object!=  null)  {  builder.append(object);  }  else  {  Class  <?>  clazz  =  fieldValue.getSuperclass();  builder.append(fieldValue.getSuperclass());  }  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]          StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]          builder.append(object);  if(object!=  null)  {  builder.append(object);  }  else  {  Class  <?>  clazz  =  fieldValue.getSuperclass();  builder.append(fieldValue.getSuperclass());  }  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	                builder.append(object);    if(object!=  null)  {  builder.append(object);  }  else  {  Class  <?>  clazz  =  fieldValue.getSuperclass();  builder.append(fieldValue.getSuperclass());  }	  	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	50	None	add
297	[BUG]  [BUGGY]  Object  fieldValue  =  object.getValue();  builder.append(fieldValue,  false);  [CE]  cannot  find  symbol  [FE]        StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object  fieldValue  =  object.getValue();  builder.append(fieldValue,  false);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object  fieldValue  =  object.getValue();  builder.append(fieldValue,  false);	  Object    fieldValue    =    object.getValue();    builder.append(fieldValue);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
298	[BUG]  [BUGGY]  FieldValue[]  fields  =  clazz.getReferences();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue[]  fields  =  clazz.getReferences();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue[]  fields  =  clazz.getReferences();	  FieldValue[]    fields    =    clazz.getFields();    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
299	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( " ",  excludeFields);  [CE]  <identifier>  expected  [FE]            RuntimeException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwables.throw  new  RuntimeException( " ",  excludeFields);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwables.throw  new  RuntimeException( " ",  excludeFields);	  throw    new    RuntimeException(       "       ");    Throwables.throw    new    RuntimeException(   "       ");    	non-compiled	[CE]  <identifier>  expected	37	None	replace
300	[BUG]  [BUGGY]  FieldValue[]  fields  =  constructor.getDeclaredFields();  HashCodeBuilder  builder  =  constructor.build();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue[]  fields  =  constructor.getDeclaredFields();  HashCodeBuilder  builder  =  constructor.build();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue[]  fields  =  constructor.getDeclaredFields();  HashCodeBuilder  builder  =  constructor.build();	  FieldValue[]    fields    =    clazz.getDeclaredFields();    HashCodeBuilder    builder    =    constructer.build();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
301	[BUG]  [BUGGY]  HashCodeBuilder  builder  =  this.clazz.build();  [CE]  variable  builder  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  HashCodeBuilder  builder  =  this.clazz.build();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	HashCodeBuilder  builder  =  this.clazz.build();	  HashCodeBuilder    builder    =    clazz.build();    	non-compiled	[CE]  variable  builder  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	2	None	replace
302	[BUG]  [BUGGY]  FieldValue[]  fields  =  clazz.getDeclaredFields(fieldValues);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue[]  fields  =  clazz.getDeclaredFields(fieldValues);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue[]  fields  =  clazz.getDeclaredFields(fieldValues);	  FieldValue[]    fields    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
303	[BUG]  [BUGGY]  FieldValue  objectValue  =  clazz.getFieldValue(object);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  objectValue  =  clazz.getFieldValue(object);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  objectValue  =  clazz.getFieldValue(object);	  FieldValue    objectValue    =    clazz.getValue();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
304	[BUG]  [BUGGY]  builder.addChildToBack(fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]            StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  builder.addChildToBack(fieldValue);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	builder.addChildToBack(fieldValue);	          builder.reset();    	non-compiled	[CE]  cannot  find  symbol  fieldValue	49	None	replace
305	[BUG]  [BUGGY]  builder.addChildToFront(fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]              StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  builder.addChildToFront(fieldValue);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	builder.addChildToFront(fieldValue);	          builder.reset();    	non-compiled	[CE]  cannot  find  symbol  fieldValue	49	None	replace
306	[BUG]  [BUGGY]  builder.addChildToBack(excludeFields);  [CE]  cannot  find  symbol  [FE]                StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  builder.addChildToBack(excludeFields);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	builder.addChildToBack(excludeFields);	          builder.reset();    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
307	[BUG]  [BUGGY]  Object  value  =  object.getValue();  builder.addChangeListener(this);  [CE]  cannot  find  symbol  [FE]              StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object  value  =  object.getValue();  builder.addChangeListener(this);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object  value  =  object.getValue();  builder.addChangeListener(this);	  Object    fieldValue    =    object.getValue();    builder.addChangeListener(this);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
308	[BUG]  [BUGGY]          builder.register(object);  builder.register(object);  if(useTransients  ||!Modifier.isTransient(field.getModifiers()))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]          builder.register(object);  builder.register(object);  if(useTransients  ||!Modifier.isTransient(field.getModifiers()))  {  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	                builder.register(object);    builder.register(object);  if(useTransients  ||!Modifier.isTransient(field.getModifiers()))  {	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
309	[BUG]  [BUGGY]          builder.register(object);  builder.register(object);  if(useTransients  ||!Modifier.isStatic(field.getModifiers()))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]          builder.register(object);  builder.register(object);  if(useTransients  ||!Modifier.isStatic(field.getModifiers()))  {  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	                builder.register(object);    builder.register(object);  if(useTransients  ||!Modifier.isStatic(field.getModifiers()))  {	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
310	[BUG]  [BUGGY]          builder.register(object);  builder.register(object);  if(useTransients  ||!Modifier.isTransient(field.getModifiers()))  {  return;  }  [CE]  cannot  find  symbol  field  [FE]        AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]          builder.register(object);  builder.register(object);  if(useTransients  ||!Modifier.isTransient(field.getModifiers()))  {  return;  }  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	                builder.register(object);    builder.register(object);  if(useTransients  ||!Modifier.isTransient(field.getModifiers()))  {  return;  }	  	non-compiled	[CE]  cannot  find  symbol  field	47	None	add
311	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  throw  new  IllegalStateException( " "  +  clazz.getName()  + ",  excludeFields: "  +  excludeFields);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	add	throw  new  IllegalStateException( " "  +  clazz.getName()  + ",  excludeFields: "  +  excludeFields);	  throw    new    IllegalStateException(   "   ".equals(excludeFields));    	compilable	  [FE]  IllegalStateException  	54	1	replace
312	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  clazz.getName()  + ",  excludeFields: "  +  excludeFields);  [FE]  IllegalStateException  [FE]        IllegalStateException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  throw  new  IllegalStateException( " "  +  clazz.getName()  + ",  excludeFields: "  +  excludeFields);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	throw  new  IllegalStateException( " "  +  clazz.getName()  + ",  excludeFields: "  +  excludeFields);	  throw    new    IllegalStateException(   "   ".equals(excludeFields));    	compilable	  [FE]  IllegalStateException  	54	1	replace
313	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  throw  new  IllegalStateException( " "  +  clazz.getName()  + "  excludes: "  +  excludeFields);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	add	throw  new  IllegalStateException( " "  +  clazz.getName()  + "  excludes: "  +  excludeFields);	  throw    new    IllegalStateException(   "   ".equals(excludeFields));    	compilable	  [FE]  IllegalStateException  	54	1	replace
314	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  clazz.getName()  + "  excludes: "  +  excludeFields);  [FE]  IllegalStateException  [FE]          IllegalStateException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  throw  new  IllegalStateException( " "  +  clazz.getName()  + "  excludes: "  +  excludeFields);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	throw  new  IllegalStateException( " "  +  clazz.getName()  + "  excludes: "  +  excludeFields);	  throw    new    IllegalStateException(   "   ".equals(excludeFields));    	compilable	  [FE]  IllegalStateException  	54	1	replace
315	[BUG]  [BUGGY]  HashCodeBuilder  builder  =  objects.build();  [CE]  variable  builder  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  HashCodeBuilder  builder  =  objects.build();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	HashCodeBuilder  builder  =  objects.build();	  HashCodeBuilder    builder    =    builder.build();    	non-compiled	[CE]  variable  builder  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	1	None	replace
316	[BUG]  [BUGGY]  FieldValue  fieldValue  =  object  instanceof  FieldValue?(FieldValue)object  :  object.toString();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  fieldValue  =  object  instanceof  FieldValue?(FieldValue)object  :  object.toString();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =  object  instanceof  FieldValue?(FieldValue)object  :  object.toString();	  FieldValue    fieldValue    =    object    instanceof    FieldValue?(FieldValue)object    :    object.getValue();    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
317	[BUG]  [BUGGY]  throw  new  RuntimeException( " ",  ArrayUtils.mayHaveSideEffects(excludeFields));  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  throw  new  RuntimeException( " ",  ArrayUtils.mayHaveSideEffects(excludeFields));  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	throw  new  RuntimeException( " ",  ArrayUtils.mayHaveSideEffects(excludeFields));	  throw    new    RuntimeException(       "       ");    throw    new    RuntimeException(   ",       ");    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
318	[BUG]  [BUGGY]  throw  new  RuntimeException( " ",  ArrayUtils.toBooleanObject(excludeFields));  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  throw  new  RuntimeException( " ",  ArrayUtils.toBooleanObject(excludeFields));  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	throw  new  RuntimeException( " ",  ArrayUtils.toBooleanObject(excludeFields));	  throw    new    RuntimeException(       "       ");    throw    new    RuntimeException(   ",       ");    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
319	[BUG]  [BUGGY]  FieldValue[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fieldValues,  true);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fieldValues,  true);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fieldValues,  true);	  FieldValue[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(excludeFields,    true);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
320	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object[]  fields  =  excludeFields!=  null?  clazz.getDeclaredFields()  :  excludeFields;  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	add	Object[]  fields  =  excludeFields!=  null?  clazz.getDeclaredFields()  :  excludeFields;	  Object[]    fields    =    excludeFields.getDeclaredFields();    	compilable	  [FE]  StackOverflowError  	7	1	replace
321	[BUG]  [BUGGY]  Object[]  fields  =  excludeFields!=  null?  clazz.getDeclaredFields()  :  excludeFields;  [FE]  StackOverflowError  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object[]  fields  =  excludeFields!=  null?  clazz.getDeclaredFields()  :  excludeFields;  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object[]  fields  =  excludeFields!=  null?  clazz.getDeclaredFields()  :  excludeFields;	  Object[]    fields    =    excludeFields.getDeclaredFields();    	compilable	  [FE]  StackOverflowError  	7	1	replace
322	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  throw  new  IllegalStateException( "Unknown  class: "  +  object.getClass());  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	add	throw  new  IllegalStateException( "Unknown  class: "  +  object.getClass());	  throw    new    IllegalStateException(   "   ".equals(object.getClass()));    	compilable	  [FE]  IllegalStateException  	22	1	replace
323	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Unknown  class: "  +  object.getClass());  [FE]  IllegalStateException  [FE]          IllegalStateException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  throw  new  IllegalStateException( "Unknown  class: "  +  object.getClass());  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	throw  new  IllegalStateException( "Unknown  class: "  +  object.getClass());	  throw    new    IllegalStateException(   "   ".equals(object.getClass()));    	compilable	  [FE]  IllegalStateException  	22	1	replace
324	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  org.apache.commons.lang3.builder.HashCodeBuilderTest$ReflectionTestCycleA  [FE]        IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  clazz.getName()  + ",  excludeFields: "  +  excludeFields);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	add	throw  new  IllegalArgumentException( " "  +  clazz.getName()  + ",  excludeFields: "  +  excludeFields);	  throw    new    IllegalArgumentException(   "   ".equals(excludeFields));    	compilable	  [FE]  java.lang.IllegalArgumentException:  org.apache.commons.lang3.builder.HashCodeBuilderTest$ReflectionTestCycleA  	45	1	replace
325	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  clazz.getName()  + ",  excludeFields: "  +  excludeFields);  [FE]  java.lang.IllegalArgumentException:  org.apache.commons.lang3.builder.HashCodeBuilderTest$ReflectionTestCycleA  [FE]        IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  clazz.getName()  + ",  excludeFields: "  +  excludeFields);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	throw  new  IllegalArgumentException( " "  +  clazz.getName()  + ",  excludeFields: "  +  excludeFields);	  throw    new    IllegalArgumentException(   "   ".equals(excludeFields));    	compilable	  [FE]  java.lang.IllegalArgumentException:  org.apache.commons.lang3.builder.HashCodeBuilderTest$ReflectionTestCycleA  	45	1	replace
326	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ").equals(excludeFields);  [CE]  incompatible  types  [FE]          IllegalArgumentException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  throw  new  IllegalArgumentException( " ").equals(excludeFields);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	throw  new  IllegalArgumentException( " ").equals(excludeFields);	  throw    new    IllegalArgumentException(   "   ".equals(excludeFields));    	non-compiled	[CE]  incompatible  types	45	None	replace
327	[BUG]  [BUGGY]  new  UnsupportedOperationException( " ")  [CE]  [FE]        UnsupportedOperationException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  new  UnsupportedOperationException( " ")  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	new  UnsupportedOperationException( " ")	  throw    new    UnsupportedOperationException(       "       ");    new    UnsupportedOperationException(       "       ");    	non-compiled	[CE]  	68	None	replace
328	[BUG]  [BUGGY]  Object  objectValue  =  object.getValue();  builder.setAccessible(fieldValue,  false);  [CE]  cannot  find  symbol  [FE]        StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object  objectValue  =  object.getValue();  builder.setAccessible(fieldValue,  false);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object  objectValue  =  object.getValue();  builder.setAccessible(fieldValue,  false);	          Object    fieldValue    =    object.getValue();    builder.setAccessible(fieldValue,    false);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
329	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(object.getClass()));  [CE]  <identifier>  expected  [FE]        UnsupportedOperationException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(object.getClass()));  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(object.getClass()));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	31	None	replace
330	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(fieldValue));  [CE]  <identifier>  expected  [FE]          UnsupportedOperationException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(fieldValue));  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(fieldValue));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	31	None	replace
331	[BUG]  [BUGGY]  FieldValue  fieldValue  =  excludeFields!=  null?  clazz.getDeclaredFields()  :  null;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  fieldValue  =  excludeFields!=  null?  clazz.getDeclaredFields()  :  null;  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =  excludeFields!=  null?  clazz.getDeclaredFields()  :  null;	  FieldValue    fieldValue    =    excludeFields.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
332	[BUG]  [BUGGY]  FieldValue  fieldValue  =  excludeFields!=  null?  object.getDeclaredFields()  :  excludeFields;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  fieldValue  =  excludeFields!=  null?  object.getDeclaredFields()  :  excludeFields;  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =  excludeFields!=  null?  object.getDeclaredFields()  :  excludeFields;	  FieldValue    fieldValue    =    excludeFields.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
333	[BUG]  [BUGGY]  FieldValue[]  fields  =  this.class.getDeclaredFields();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue[]  fields  =  this.class.getDeclaredFields();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue[]  fields  =  this.class.getDeclaredFields();	  FieldValue[]    fields    =    class.getDeclaredFields();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
334	[BUG]  [BUGGY]  builder.addField(fieldValue,  object);  [CE]  cannot  find  symbol  fieldValue  [FE]                StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  builder.addField(fieldValue,  object);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	builder.addField(fieldValue,  object);	          builder.add(object);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	52	None	replace
335	[BUG]  [BUGGY]  builder.add(fieldValue,  object);  [CE]  cannot  find  symbol  fieldValue  [FE]                  StackOverflowError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  builder.add(fieldValue,  object);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	builder.add(fieldValue,  object);	          builder.add(object);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	52	None	replace
336	[BUG]  [BUGGY]  Throwable  t  =  new  IllegalStateException( " ")  [CE]  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Throwable  t  =  new  IllegalStateException( " ")  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Throwable  t  =  new  IllegalStateException( " ")	  Throwable    t    =    new    IllegalStateException(   "   ");    	non-compiled	[CE]  	59	None	replace
337	[BUG]  [BUGGY]  FieldValue[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fieldValues,  false);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fieldValues,  false);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fieldValues,  false);	  FieldValue[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(excludeFields,    false);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
338	[BUG]  [BUGGY]  FieldValue[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fieldValue,  false);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fieldValue,  false);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fieldValue,  false);	  FieldValue[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(excludeFields,    false);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
339	[BUG]  [BUGGY]  throw  new  UnsupportedOperationException( " ".equals(object.getClass()));  [CE]  no  suitable  constructor  found  for  UnsupportedOperationException(boolean)  [FE]        UnsupportedOperationException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  throw  new  UnsupportedOperationException( " ".equals(object.getClass()));  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	throw  new  UnsupportedOperationException( " ".equals(object.getClass()));	  throw    new    UnsupportedOperationException(       "       ");    throw    new    UnsupportedOperationException(       "       ");    	non-compiled	[CE]  no  suitable  constructor  found  for  UnsupportedOperationException(boolean)	23	None	replace
340	[BUG]  [BUGGY]  Object[]  fields  =  this.fieldValue.getDeclaredFields();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object[]  fields  =  this.fieldValue.getDeclaredFields();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object[]  fields  =  this.fieldValue.getDeclaredFields();	  Object[]    fields    =    fieldValue.getDeclaredFields();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	6	None	replace
341	[BUG]  [BUGGY]  builder.register(fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  builder.register(fieldValue);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	builder.register(fieldValue);	          builder.register(object);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	48	None	replace
342	[BUG]  [BUGGY]  builder.append(fieldValue,  object);  [CE]  cannot  find  symbol  fieldValue  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  builder.append(fieldValue,  object);  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	builder.append(fieldValue,  object);	          builder.register(object);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	48	None	replace
343	[BUG]  [BUGGY]  FieldValue  fieldValue  =  clazz.getDeclaredFieldValue(fields);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  fieldValue  =  clazz.getDeclaredFieldValue(fields);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =  clazz.getDeclaredFieldValue(fields);	  FieldValue    fieldValue    =    clazz.getDeclaredFieldValue(excludeFields);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
344	[BUG]  [BUGGY]  FieldValue  fieldValue  =  clazz.getValue(null,  field);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  fieldValue  =  clazz.getValue(null,  field);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =  clazz.getValue(null,  field);	  FieldValue    fieldValue    =    clazz.getValue(null);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
345	[BUG]  [BUGGY]  FieldValue  fieldValue  =  clazz.getValue(null,  object);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  fieldValue  =  clazz.getValue(null,  object);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =  clazz.getValue(null,  object);	  FieldValue    fieldValue    =    clazz.getValue(null);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
346	[BUG]  [BUGGY]  FieldValue  fieldValue  =  clazz.getDeclaredFields(fields);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  fieldValue  =  clazz.getDeclaredFields(fields);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =  clazz.getDeclaredFields(fields);	  FieldValue    fieldValue    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
347	[BUG]  [BUGGY]  FieldValue[]  fields  =  clazz.getDeclaredFields();  HashCodeBuilder  builder  =  clazz.builders();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue[]  fields  =  clazz.getDeclaredFields();  HashCodeBuilder  builder  =  clazz.builders();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue[]  fields  =  clazz.getDeclaredFields();  HashCodeBuilder  builder  =  clazz.builders();	  FieldValue[]    fields    =    clazz.getDeclaredFields();    HashCodeBuilder    builder    =    clazz.build();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
348	[BUG]  [BUGGY]  FieldValue  fieldValue  =  clazz.getDeclaredFieldValue(field);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue  fieldValue  =  clazz.getDeclaredFieldValue(field);  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue  fieldValue  =  clazz.getDeclaredFieldValue(field);	  FieldValue    fieldValue    =    clazz.getDeclaredFieldValue(object);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
349	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]          UnsupportedOperationException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  if(!useTransients)  {  throw  new  UnsupportedOperationException( " ");  }  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	add	if(!useTransients)  {  throw  new  UnsupportedOperationException( " ");  }	  throw    new    UnsupportedOperationException(       "       ");    Throwables.throw    new    UnsupportedOperationException(   "       ");    	compilable	  [FE]  UnsupportedOperationException  	24	1	replace
350	[BUG]  [BUGGY]  if(!useTransients)  {  throw  new  UnsupportedOperationException( " ");  }  [FE]  UnsupportedOperationException  [FE]          UnsupportedOperationException      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  if(!useTransients)  {  throw  new  UnsupportedOperationException( " ");  }  [BUGGY]      }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	if(!useTransients)  {  throw  new  UnsupportedOperationException( " ");  }	  throw    new    UnsupportedOperationException(       "       ");    Throwables.throw    new    UnsupportedOperationException(   "       ");    	compilable	  [FE]  UnsupportedOperationException  	24	1	replace
351	[BUG]  [BUGGY]  FieldValue[]  fields  =  excludeFields!=  null?  clazz.getDeclaredFields()  :  excludeFields;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  FieldValue[]  fields  =  excludeFields!=  null?  clazz.getDeclaredFields()  :  excludeFields;  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	FieldValue[]  fields  =  excludeFields!=  null?  clazz.getDeclaredFields()  :  excludeFields;	  FieldValue[]    fields    =    excludeFields.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
352	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object  fieldValue  =  object.toString();  Object  boxValue  =  object.toString();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	add	Object    fieldValue    =    object.toString();    Object  boxValue  =  object.toString();	  	compilable	  [FE]  StackOverflowError  	82	1	add
353	[BUG]  [BUGGY]  Object  fieldValue  =  object.toString();  Object  boxValue  =  object.toString();  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {      [BUGGY]  Object  fieldValue  =  object.toString();  Object  boxValue  =  object.toString();  [BUGGY]      return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	1.0	174	174	1	replace	Object    fieldValue    =    object.toString();    Object  boxValue  =  object.toString();	  	compilable	  [FE]  StackOverflowError  	82	1	add
