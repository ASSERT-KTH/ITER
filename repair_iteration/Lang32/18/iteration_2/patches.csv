bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.initialNonZeroOddNumber.getItemCount()  -  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.initialNonZeroOddNumber.getItemCount()  -  1;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.initialNonZeroOddNumber.getItemCount()  -  1;	  int    iConstant    =    multiplierNonZeroOddNumber    +    clazz.initialNonZeroOddNumber.getItemCount();    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
2	[BUG]  [BUGGY]  int  iConstant  =  initialNonZeroOddNumber  +  clazz.initialNonZeroOddNumber.getItemCount();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  initialNonZeroOddNumber  +  clazz.initialNonZeroOddNumber.getItemCount();  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  initialNonZeroOddNumber  +  clazz.initialNonZeroOddNumber.getItemCount();	  int    iConstant    =    multiplierNonZeroOddNumber    +    clazz.initialNonZeroOddNumber.getItemCount();    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
3	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplyNonZeroOddNumber,    initialNonZeroOddNumber,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
4	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(numberNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(numberNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(numberNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplyNonZeroOddNumber,    initialNonZeroOddNumber,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
5	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplyNonZeroOddNumber,    initialNonZeroOddNumber,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
6	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplyerNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
7	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplyerNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
8	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplyerNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
9	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(object,  multiplierNonZeroOddNumber,  initialNonZeroOddNumber,  testTransients,  excludeFields);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(object,  multiplierNonZeroOddNumber,  initialNonZeroOddNumber,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(object,  multiplierNonZeroOddNumber,  initialNonZeroOddNumber,  testTransients,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    object,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
10	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients,  reflectUpToClass,  excludeFields);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients,  reflectUpToClass,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients,  reflectUpToClass,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    object,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
11	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(object,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(object,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(object,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    object,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
12	[BUG]  [BUGGY]  honneurAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  honneurAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	honneurAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  if(testTransients)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
13	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipatterNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipatterNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multipatterNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multipatterNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
14	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipatterNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipatterNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multipatterNonZeroOddNumber,  multiplierNonZeroOddNumber);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multipatterNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
15	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipatterNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipatterNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multipatterNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multipatterNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
16	[BUG]  [BUGGY]  while(clazz!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while(clazz!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	while(clazz!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
17	[BUG]  [BUGGY]  while(clazz!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while(clazz!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	while(clazz!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
18	[BUG]  [BUGGY]  while(clazz!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz!=  null  &&  clazz!=  testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while(clazz!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz!=  null  &&  clazz!=  testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	while(clazz!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz!=  null  &&  clazz!=  testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
19	[BUG]  [BUGGY]  while(clazz!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz!=  null  &&  clazz!=  ReflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while(clazz!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz!=  null  &&  clazz!=  ReflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	while(clazz!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz!=  null  &&  clazz!=  ReflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
20	[BUG]  [BUGGY]  while(clazz!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  illegal  start  of  expression  [FE]            NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while(clazz!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	while(clazz!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
21	[BUG]  [BUGGY]  int  iConstant  =  initialNonZeroOddNumber  +  multiplierNonZeroOddNumber.length();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  initialNonZeroOddNumber  +  multiplierNonZeroOddNumber.length();  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  initialNonZeroOddNumber  +  multiplierNonZeroOddNumber.length();	  int    iConstant    =    constructerNonZeroOddNumber    +    multiplierNonZeroOddNumber.length();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
22	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  constructerNonZeroOddNumber.length();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  constructerNonZeroOddNumber.length();  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  constructerNonZeroOddNumber.length();	  int    iConstant    =    constructerNonZeroOddNumber    +    multiplierNonZeroOddNumber.length();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
23	[BUG]  [BUGGY]  int  iConstant  =  initialNonZeroOddNumber  +  builder.initialNonZeroOddNumber.length();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  initialNonZeroOddNumber  +  builder.initialNonZeroOddNumber.length();  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  initialNonZeroOddNumber  +  builder.initialNonZeroOddNumber.length();	  int    iConstant    =    multiplierNonZeroOddNumber    +    builder.initialNonZeroOddNumber.length();    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
24	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  builder.testTransients.length();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  builder.testTransients.length();  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  builder.testTransients.length();	  int    iConstant    =    multiplierNonZeroOddNumber    +    builder.initialNonZeroOddNumber.length();    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
25	[BUG]  [BUGGY]  int  iConstant  =  builder.initialNonZeroOddNumber  +  multiplierNonZeroOddNumber.length();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  builder.initialNonZeroOddNumber  +  multiplierNonZeroOddNumber.length();  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  builder.initialNonZeroOddNumber  +  multiplierNonZeroOddNumber.length();	  int    iConstant    =    multiplierNonZeroOddNumber    +    builder.initialNonZeroOddNumber.length();    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
26	[BUG]  [BUGGY]  clazz  =  clazz.getSuperClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  clazz  =  clazz.getSuperClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	clazz  =  clazz.getSuperClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz    =    clazz.getSuperClass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
27	[BUG]  [BUGGY]  nceAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  nceAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	nceAppend(object,  clazz,  builder,  testTransients,  excludeFields);	          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz    =    clazz.getSuperClass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
28	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplierNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
29	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplierNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
30	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplierNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
31	[BUG]  [BUGGY]  while  (clazz.getSuperclass()  ==  null  &&  clazz!=  reflectUpToClass)  {  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while  (clazz.getSuperclass()  ==  null  &&  clazz!=  reflectUpToClass)  {  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  [BUGGY]      clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	while    (clazz.getSuperclass()    ==    null    &&    clazz!=    reflectUpToClass)    {    while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
32	[BUG]  [BUGGY]  while  (clazz.getSuperclass()  ==  null  &&  clazz!=  reflectUpToClass)  {  while  (clazz.getSuperclass()  ==  null  &&  clazz!=  reflectUpToClass)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while  (clazz.getSuperclass()  ==  null  &&  clazz!=  reflectUpToClass)  {  while  (clazz.getSuperclass()  ==  null  &&  clazz!=  reflectUpToClass)  {  [BUGGY]      clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	while    (clazz.getSuperclass()    ==    null    &&    clazz!=    reflectUpToClass)    {    while  (clazz.getSuperclass()  ==  null  &&  clazz!=  reflectUpToClass)  {	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
33	[BUG]  [BUGGY]  while  (clazz.getSuperclass()  ==  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while  (clazz.getSuperclass()  ==  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	while    (clazz.getSuperclass()    ==    null    &&    clazz!=    reflectUpToClass)    {    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
34	[BUG]  [BUGGY]  while(clazz.getType()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while(clazz.getType()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	while(clazz.getType()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getType()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getType();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
35	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplyNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
36	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplyNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
37	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplyNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
38	[BUG]  [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
39	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass,  multiplierNonZeroOddNumber,  excludeFields);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass,  multiplierNonZeroOddNumber,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass,  multiplierNonZeroOddNumber,  excludeFields);	  reflectionAppend(object,    clazz,    builder,    testTransients,    reflectUpToClass,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
40	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass,  multiplierNonZeroOddNumber);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass,  multiplierNonZeroOddNumber);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass,  multiplierNonZeroOddNumber);	  reflectionAppend(object,    clazz,    builder,    testTransients,    reflectUpToClass,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
41	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  builder)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  incomparable  types:  Class<CAP#1>  and  HashCodeBuilder  [FE]          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  builder)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  builder)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getClass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    timeout    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  HashCodeBuilder	33	None	replace
42	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  *  clazz.getItemCount()  -  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  *  clazz.getItemCount()  -  1;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  *  clazz.getItemCount()  -  1;	  int    iConstant    =    multiplierNonZeroOddNumber    *    clazz.getItemCount();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
43	[BUG]  [BUGGY]  int  iConstant  =  initialNonZeroOddNumber  *  clazz.getItemCount();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  initialNonZeroOddNumber  *  clazz.getItemCount();  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  initialNonZeroOddNumber  *  clazz.getItemCount();	  int    iConstant    =    multiplierNonZeroOddNumber    *    clazz.getItemCount();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
44	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  *  clazz.getItemCount()  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  *  clazz.getItemCount()  +  1;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  *  clazz.getItemCount()  +  1;	  int    iConstant    =    multiplierNonZeroOddNumber    *    clazz.getItemCount();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
45	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  *  clazz.getItemCount(initialNonZeroOddNumber);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  *  clazz.getItemCount(initialNonZeroOddNumber);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  *  clazz.getItemCount(initialNonZeroOddNumber);	  int    iConstant    =    multiplierNonZeroOddNumber    *    clazz.getItemCount();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
46	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(object,  multiplierNonZeroOddNumber,  multiplyNonZeroOddNumber,  testTransients,  excludeFields);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(object,  multiplierNonZeroOddNumber,  multiplyNonZeroOddNumber,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(object,  multiplierNonZeroOddNumber,  multiplyNonZeroOddNumber,  testTransients,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplyNonZeroOddNumber,    multiplierNonZeroOddNumber,    object,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
47	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients,  reflectUpToClass,  excludeFields);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients,  reflectUpToClass,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients,  reflectUpToClass,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplyNonZeroOddNumber,    multiplierNonZeroOddNumber,    object,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
48	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(object,  multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(object,  multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(object,  multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplyNonZeroOddNumber,    multiplierNonZeroOddNumber,    object,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
49	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients,  reflectUpToClass);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients,  reflectUpToClass);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients,  reflectUpToClass);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients,    reflectUpToClass);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
50	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  object,  reflectUpToClass);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  object,  reflectUpToClass);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  object,  reflectUpToClass);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients,    reflectUpToClass);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
51	[BUG]  [BUGGY]  ReflectionBuilder  <?>  builder  =  ReflectionBuilder.create(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  <?>  builder  =  ReflectionBuilder.create(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  <?>  builder  =  ReflectionBuilder.create(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields);	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    ReflectionBuilder    <?>    builder    =    ReflectionBuilder.create(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    reflectUpToClass,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
52	[BUG]  [BUGGY]  ReflectionBuilder  <?>  builder  =  ReflectionBuilder.create(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  <?>  builder  =  ReflectionBuilder.create(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  <?>  builder  =  ReflectionBuilder.create(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    ReflectionBuilder    <?>    builder    =    ReflectionBuilder.create(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    reflectUpToClass,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
53	[BUG]  [BUGGY]  ReflectionBuilder  <?>  builder  =  ReflectionBuilder.create(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectionHashCode,  excludeFields);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  <?>  builder  =  ReflectionBuilder.create(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectionHashCode,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  <?>  builder  =  ReflectionBuilder.create(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectionHashCode,  excludeFields);	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    ReflectionBuilder    <?>    builder    =    ReflectionBuilder.create(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    reflectUpToClass,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
54	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  initialNonZeroOddNumber  +  multiplierNonZeroOddNumber;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  initialNonZeroOddNumber  +  multiplierNonZeroOddNumber;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  initialNonZeroOddNumber  +  multiplierNonZeroOddNumber;	  int    iConstant    =    multiplierNonZeroOddNumber    +    initialNonZeroOddNumber;    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
55	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  initialNonZeroOddNumber  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  initialNonZeroOddNumber  +  1;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  initialNonZeroOddNumber  +  1;	  int    iConstant    =    multiplierNonZeroOddNumber    +    initialNonZeroOddNumber;    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
56	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  *  initialNonZeroOddNumber;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  *  initialNonZeroOddNumber;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  *  initialNonZeroOddNumber;	  int    iConstant    =    multiplierNonZeroOddNumber    +    initialNonZeroOddNumber;    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
57	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	add	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	compilable	  [FE]  AssertionFailedError  	8	4	add
58	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	compilable	  [FE]  AssertionFailedError  	8	4	add
59	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
60	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
61	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
62	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
63	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  Integer.toHexString(initialNonZeroOddNumber);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  Integer.toHexString(initialNonZeroOddNumber);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  Integer.toHexString(initialNonZeroOddNumber);	  int    iConstant    =    initialNonZeroOddNumber;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
64	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  illegal  start  of  type  [FE]    NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber);	          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
65	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  illegal  start  of  type  [FE]      NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber);	          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
66	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [CE]  illegal  start  of  type  [FE]        NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);	          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
67	[BUG]  [BUGGY]  while  (clazz.getSuperClass()!=  null  &&  clazz!=  reflectUpToClass)  {  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while  (clazz.getSuperClass()!=  null  &&  clazz!=  reflectUpToClass)  {  [BUGGY]      clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	while  (clazz.getSuperClass()!=  null  &&  clazz!=  reflectUpToClass)  {	  while    (clazz.getSuperclass()!=    null    ||    clazz!=    reflectUpToClass)    {    while    (clazz.getSuperClass()!=    null    ||    clazz!=    reflectUpToClass)    {    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
68	[BUG]  [BUGGY]  timeout  [FE]          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	add	                while(clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        }        while(clazz.getClass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getClass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  timeout    	compilable	timeout	32	1	add
69	[BUG]  [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  timeout  [FE]          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                while(clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        }        while(clazz.getClass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getClass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  timeout    	compilable	timeout	32	1	add
70	[BUG]  [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  ReflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  cannot  find  symbol  ReflectUpToClass  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  ReflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                while(clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        }        while(clazz.getClass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getClass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  ReflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  ReflectUpToClass	32	None	add
71	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getSuperclass()!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	add	                while(clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        }        while(clazz.getClass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getClass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  timeout    	compilable	timeout	32	1	add
72	[BUG]  [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getSuperclass()!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getSuperclass()!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                while(clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        }        while(clazz.getClass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getClass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  timeout    	compilable	timeout	32	1	add
73	[BUG]  [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  passUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  cannot  find  symbol  passUpToClass  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  passUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                while(clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        }        while(clazz.getClass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getClass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  passUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  passUpToClass	32	None	add
74	[BUG]  [BUGGY]  int  iConstant  =  initialNonZeroOddNumber;  int  iConstant  =  multiplierNonZeroOddNumber;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  initialNonZeroOddNumber;  int  iConstant  =  multiplierNonZeroOddNumber;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  initialNonZeroOddNumber;  int  iConstant  =  multiplierNonZeroOddNumber;	          int    iConstant    =    multiplierNonZeroOddNumber;    int    iConstant    =    multiplyerNonZeroOddNumber;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
75	[BUG]  [BUGGY]  int  iConstant  =  initialNonZeroOddNumber;  int  iConstant  =  multiplyerNonZeroOddNumber;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  initialNonZeroOddNumber;  int  iConstant  =  multiplyerNonZeroOddNumber;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  initialNonZeroOddNumber;  int  iConstant  =  multiplyerNonZeroOddNumber;	          int    iConstant    =    multiplierNonZeroOddNumber;    int    iConstant    =    multiplyerNonZeroOddNumber;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
76	[BUG]  [BUGGY]  Integer  iConstant  =  initialNonZeroOddNumber  +  clazz.getItemCount();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  Integer  iConstant  =  initialNonZeroOddNumber  +  clazz.getItemCount();  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	Integer  iConstant  =  initialNonZeroOddNumber  +  clazz.getItemCount();	  int    iConstant    =    initialNonZeroOddNumber    +    clazz.getItemCount();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
77	[BUG]  [BUGGY]  int  iConstant  =  initialNonZeroOddNumber  +  clazz.testTransients;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  initialNonZeroOddNumber  +  clazz.testTransients;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  initialNonZeroOddNumber  +  clazz.testTransients;	  int    iConstant    =    multiplierNonZeroOddNumber    +    clazz.testTransients;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
78	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.testTransients,  initialNonZeroOddNumber;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.testTransients,  initialNonZeroOddNumber;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.testTransients,  initialNonZeroOddNumber;	  int    iConstant    =    multiplierNonZeroOddNumber    +    clazz.testTransients;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
79	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.testTransients,  0;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.testTransients,  0;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.testTransients,  0;	  int    iConstant    =    multiplierNonZeroOddNumber    +    clazz.testTransients;    	non-compiled	[CE]  <identifier>  expected	85	None	replace
80	[BUG]  [BUGGY]  while  (clazz!=  null  &&  clazz!=  reflectUpToClass)  {  while  (clazz!=  null  &&  clazz!=  reflectUpToClass)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while  (clazz!=  null  &&  clazz!=  reflectUpToClass)  {  while  (clazz!=  null  &&  clazz!=  reflectUpToClass)  {  [BUGGY]      clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	while    (clazz!=    null    &&    clazz!=    reflectUpToClass)    {    while  (clazz!=  null  &&  clazz!=  reflectUpToClass)  {	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
81	[BUG]  [BUGGY]  while  (clazz!=  null  &&  clazz!=  reflectUpToClass)  {  while  (clazz!=  null  &&  clazz  ==  reflectUpToClass)  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while  (clazz!=  null  &&  clazz!=  reflectUpToClass)  {  while  (clazz!=  null  &&  clazz  ==  reflectUpToClass)  {  [BUGGY]      clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	while    (clazz!=    null    &&    clazz!=    reflectUpToClass)    {    while  (clazz!=  null  &&  clazz  ==  reflectUpToClass)  {	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
82	[BUG]  [BUGGY]  while  (clazz!=  null  &&  clazz!=  reflectUpToClass)  {  while  (clazz!=  null  &&  clazz  >=  reflectUpToClass)  {  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while  (clazz!=  null  &&  clazz!=  reflectUpToClass)  {  while  (clazz!=  null  &&  clazz  >=  reflectUpToClass)  {  [BUGGY]      clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	while    (clazz!=    null    &&    clazz!=    reflectUpToClass)    {    while  (clazz!=  null  &&  clazz  >=  reflectUpToClass)  {	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
83	[BUG]  [BUGGY]  while  (clazz!=  null  &&  clazz!=  reflectUpToClass)  {  while  (clazz  ==  null  &&  clazz!=  reflectUpToClass)  {  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while  (clazz!=  null  &&  clazz!=  reflectUpToClass)  {  while  (clazz  ==  null  &&  clazz!=  reflectUpToClass)  {  [BUGGY]      clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	while    (clazz!=    null    &&    clazz!=    reflectUpToClass)    {    while  (clazz  ==  null  &&  clazz!=  reflectUpToClass)  {	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
84	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz,  testTransients,  excludeFields);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz,  testTransients,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplyNonZeroOddNumber,    clazz,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
85	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  multiplierNonZeroOddN  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  multiplierNonZeroOddN  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  multiplierNonZeroOddN	          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    int    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  ')'  expected	83	None	replace
86	[BUG]  [BUGGY]  reflectionHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  reflectionHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	reflectionHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber);	          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    int    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
87	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multipleNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
88	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multipleNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
89	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multipleNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
90	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  builder,  testTransients,  excludeFields);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  builder,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  builder,  testTransients,  excludeFields);	  if(testTransients)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
91	[BUG]  [BUGGY]  ReflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  if(testTransients)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
92	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass,  excludeFields,  object);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass,  excludeFields,  object);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass,  excludeFields,  object);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients,    reflectUpToClass,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
93	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass,  excludeFields,  clazz);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass,  excludeFields,  clazz);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass,  excludeFields,  clazz);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients,    reflectUpToClass,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
94	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    reflectUpToClass,    testTransients);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
95	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  testTransients,  clazz);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  testTransients,  clazz);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  testTransients,  clazz);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    reflectUpToClass,    testTransients);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
96	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  testTransients,  object);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  testTransients,  object);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  testTransients,  object);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    reflectUpToClass,    testTransients);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
97	[BUG]  [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  ReflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  ReflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  ReflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    ReflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
98	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  builder)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  builder)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  builder)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=    null    &&    clazz    ==    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
99	[BUG]  [BUGGY]  int  iConstant  =  0L;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  0L;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  0L;	  int    iConstant    =    0;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
100	[BUG]  [BUGGY]  int  iConstant  =  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  1;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  1;	  int    iConstant    =    0;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
101	[BUG]  [BUGGY]  while(clazz.getInterface()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while(clazz.getInterface()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	while(clazz.getInterface()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getInterface()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getInterface();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
102	[BUG]  [BUGGY]  while  (clazz.getSuperclass()  ==  null  ||  clazz!=  reflectUpToClass)  {  while  (clazz.getSuperclass()  ==  null  ||  clazz!=  reflectUpToClass)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while  (clazz.getSuperclass()  ==  null  ||  clazz!=  reflectUpToClass)  {  while  (clazz.getSuperclass()  ==  null  ||  clazz!=  reflectUpToClass)  {  [BUGGY]      clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	while    (clazz.getSuperclass()    ==    null    ||    clazz!=    reflectUpToClass)    {    while  (clazz.getSuperclass()  ==  null  ||  clazz!=  reflectUpToClass)  {	  	non-compiled	[CE]  illegal  start  of  expression	102	None	add
103	[BUG]  [BUGGY]  while  (clazz.getSuperclass()  ==  null  ||  clazz!=  reflectUpToClass)  {  while  (clazz.getSuperclass()!=  null  ||  clazz!=  reflectUpToClass)  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while  (clazz.getSuperclass()  ==  null  ||  clazz!=  reflectUpToClass)  {  while  (clazz.getSuperclass()!=  null  ||  clazz!=  reflectUpToClass)  {  [BUGGY]      clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	while    (clazz.getSuperclass()    ==    null    ||    clazz!=    reflectUpToClass)    {    while  (clazz.getSuperclass()!=  null  ||  clazz!=  reflectUpToClass)  {	  	non-compiled	[CE]  illegal  start  of  expression	102	None	add
104	[BUG]  [BUGGY]  while  (clazz.getSuperclass()  ==  null  ||  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while  (clazz.getSuperclass()  ==  null  ||  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	while    (clazz.getSuperclass()    ==    null    ||    clazz!=    reflectUpToClass)    {    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	non-compiled	[CE]  illegal  start  of  expression	102	None	add
105	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  if(testTransients)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
106	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	add	                while(clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        }        while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	compilable	  [FE]  AssertionFailedError  	30	1	add
107	[BUG]  [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                while(clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        }        while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	compilable	  [FE]  AssertionFailedError  	30	1	add
108	[BUG]  [BUGGY]  timeout  [FE]      AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	add	                while(clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        }        while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	compilable	timeout	30	1	add
109	[BUG]  [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  timeout  [FE]      AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                while(clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        }        while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	compilable	timeout	30	1	add
110	[BUG]  [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getInterface()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getInterface();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getInterface()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getInterface();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                while(clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        }        while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getInterface()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getInterface();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	non-compiled	[CE]  cannot  find  symbol	30	None	add
111	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getSuperclass()!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	add	                while(clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        }        while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	compilable	  [FE]  AssertionFailedError  	30	1	add
112	[BUG]  [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getSuperclass()!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getSuperclass()!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                while(clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        }        while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	compilable	  [FE]  AssertionFailedError  	30	1	add
113	[BUG]  [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  ReflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  cannot  find  symbol  ReflectUpToClass  [FE]            AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  ReflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                while(clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        }        while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  ReflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	non-compiled	[CE]  cannot  find  symbol  ReflectUpToClass	30	None	add
114	[BUG]  [BUGGY]  int  iConstant  =  initialNonZeroOddNumber;  Integer  iConstant  =  multiplierNonZeroOddNumber;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  initialNonZeroOddNumber;  Integer  iConstant  =  multiplierNonZeroOddNumber;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  initialNonZeroOddNumber;  Integer  iConstant  =  multiplierNonZeroOddNumber;	          int    iConstant    =    multiplierNonZeroOddNumber;    Int    iConstant    =    multiplierNonZeroOddNumber;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
115	[BUG]  [BUGGY]  Int  iConstant  =  multiplierNonZeroOddNumber;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  Int  iConstant  =  multiplierNonZeroOddNumber;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	Int  iConstant  =  multiplierNonZeroOddNumber;	          int    iConstant    =    multiplierNonZeroOddNumber;    Int    iConstant    =    multiplierNonZeroOddNumber;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
116	[BUG]  [BUGGY]  int  iConstant  =  initialNonZeroOddNumber;  Int  iConstant  =  multiplierNonZeroOddNumber;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  initialNonZeroOddNumber;  Int  iConstant  =  multiplierNonZeroOddNumber;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  initialNonZeroOddNumber;  Int  iConstant  =  multiplierNonZeroOddNumber;	          int    iConstant    =    multiplierNonZeroOddNumber;    Int    iConstant    =    multiplierNonZeroOddNumber;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
117	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplicerNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplicerNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplicerNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplicerNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
118	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplicerNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplicerNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplicerNonZeroOddNumber,  multiplierNonZeroOddNumber);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplicerNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
119	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplicerNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplicerNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplicerNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplicerNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
120	[BUG]  [BUGGY]  int  iConstant  =  constructer  +  multiplierNonZeroOddNumber.length();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  constructer  +  multiplierNonZeroOddNumber.length();  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  constructer  +  multiplierNonZeroOddNumber.length();	  int    iConstant    =    multiplierNonZeroOddNumber    +    constructer.length();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
121	[BUG]  [BUGGY]  int  iConstant  =  initialNonZeroOddNumber  +  constructer.length();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  initialNonZeroOddNumber  +  constructer.length();  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  initialNonZeroOddNumber  +  constructer.length();	  int    iConstant    =    multiplierNonZeroOddNumber    +    constructer.length();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
122	[BUG]  [BUGGY]  int  iConstant  =  constructer.length();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  constructer.length();  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  constructer.length();	  int    iConstant    =    multiplierNonZeroOddNumber    +    constructer.length();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
123	[BUG]  [BUGGY]  ReflectionBuilder  <?>  builder  =  ReflectionBuilder.create(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  <?>  builder  =  ReflectionBuilder.create(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  <?>  builder  =  ReflectionBuilder.create(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    ReflectionBuilder    <?>    builder    =    ReflectionBuilder.create(initialNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
124	[BUG]  [BUGGY]  ReflectionBuilder  <?>  builder  =  ReflectionBuilder.create(initialNonZeroOddNumber,  multierNonZeroOddNumber);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  <?>  builder  =  ReflectionBuilder.create(initialNonZeroOddNumber,  multierNonZeroOddNumber);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  <?>  builder  =  ReflectionBuilder.create(initialNonZeroOddNumber,  multierNonZeroOddNumber);	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    ReflectionBuilder    <?>    builder    =    ReflectionBuilder.create(initialNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
125	[BUG]  [BUGGY]  ReflectionBuilder  <?>  builder  =  ReflectionBuilder.create(multiplyUpToClass,  initialNonZeroOddNumber);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  <?>  builder  =  ReflectionBuilder.create(multiplyUpToClass,  initialNonZeroOddNumber);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  <?>  builder  =  ReflectionBuilder.create(multiplyUpToClass,  initialNonZeroOddNumber);	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    ReflectionBuilder    <?>    builder    =    ReflectionBuilder.create(initialNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
126	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber,  testTransients);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber,  testTransients);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber,  testTransients);	  reflectionAppend(object,    clazz,    builder,    testTransients,    multiplyerNonZeroOddNumber,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
127	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  false,  excludeFields);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  false,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  false,  excludeFields);	  reflectionAppend(object,    clazz,    builder,    testTransients,    multiplyerNonZeroOddNumber,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
128	[BUG]  [BUGGY]          int    iConstant    =    multiplierNonZeroOddNumber;    int  iCONstant  =  multiplierNonZeroOddNumber;  int  iConstant  =  multiplierNonZeroOddNumber;  int  iCONstant  =  multiplierNonZeroOddNumber;  [CE]  variable  iConstant  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]    AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          int    iConstant    =    multiplierNonZeroOddNumber;    int  iCONstant  =  multiplierNonZeroOddNumber;  int  iConstant  =  multiplierNonZeroOddNumber;  int  iCONstant  =  multiplierNonZeroOddNumber;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                int        iConstant        =        multiplierNonZeroOddNumber;        int    iCONstant    =    multiplierNonZeroOddNumber;    int  iConstant  =  multiplierNonZeroOddNumber;  int  iCONstant  =  multiplierNonZeroOddNumber;	  	non-compiled	[CE]  variable  iConstant  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	4	None	add
129	[BUG]  [BUGGY]          int    iConstant    =    multiplierNonZeroOddNumber;    int  iCONstant  =  multiplierNonZeroOddNumber;  Integer  iConstant  =  multiplierNonZeroOddNumber;  int  iCONstant  =  multiplierNonZeroOddNumber;  [CE]  variable  iConstant  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]      AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          int    iConstant    =    multiplierNonZeroOddNumber;    int  iCONstant  =  multiplierNonZeroOddNumber;  Integer  iConstant  =  multiplierNonZeroOddNumber;  int  iCONstant  =  multiplierNonZeroOddNumber;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                int        iConstant        =        multiplierNonZeroOddNumber;        int    iCONstant    =    multiplierNonZeroOddNumber;    Integer  iConstant  =  multiplierNonZeroOddNumber;  int  iCONstant  =  multiplierNonZeroOddNumber;	  	non-compiled	[CE]  variable  iConstant  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	4	None	add
130	[BUG]  [BUGGY]          int    iConstant    =    multiplierNonZeroOddNumber;    int  iCONstant  =  multiplierNonZeroOddNumber;  int  multiplierNonZeroOddNumber;  int  iCONstant  =  multiplierNonZeroOddNumber;  [CE]  variable  multiplierNonZeroOddNumber  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]        AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          int    iConstant    =    multiplierNonZeroOddNumber;    int  iCONstant  =  multiplierNonZeroOddNumber;  int  multiplierNonZeroOddNumber;  int  iCONstant  =  multiplierNonZeroOddNumber;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                int        iConstant        =        multiplierNonZeroOddNumber;        int    iCONstant    =    multiplierNonZeroOddNumber;    int  multiplierNonZeroOddNumber;  int  iCONstant  =  multiplierNonZeroOddNumber;	  	non-compiled	[CE]  variable  multiplierNonZeroOddNumber  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	4	None	add
131	[BUG]  [BUGGY]          int    iConstant    =    multiplierNonZeroOddNumber;    int  iCONstant  =  multiplierNonZeroOddNumber;  int  iConstant  =  multiplierNonZeroOddNumber;  int  iCONstant  =  multiplierNonZeroOddNumber);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          int    iConstant    =    multiplierNonZeroOddNumber;    int  iCONstant  =  multiplierNonZeroOddNumber;  int  iConstant  =  multiplierNonZeroOddNumber;  int  iCONstant  =  multiplierNonZeroOddNumber);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                int        iConstant        =        multiplierNonZeroOddNumber;        int    iCONstant    =    multiplierNonZeroOddNumber;    int  iConstant  =  multiplierNonZeroOddNumber;  int  iCONstant  =  multiplierNonZeroOddNumber);	  	non-compiled	[CE]  ';'  expected	4	None	add
132	[BUG]  [BUGGY]  int  iConstant  =  initialNonZeroOddNumber;  int  iCONstant  =  multiplierNonZeroOddNumber;  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  initialNonZeroOddNumber;  int  iCONstant  =  multiplierNonZeroOddNumber;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  initialNonZeroOddNumber;  int  iCONstant  =  multiplierNonZeroOddNumber;	          int    iConstant    =    multiplierNonZeroOddNumber;    int    iCONstant    =    multiplierNonZeroOddNumber;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
133	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber;  int  iCONstant  =  0;  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber;  int  iCONstant  =  0;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  multiplierNonZeroOddNumber;  int  iCONstant  =  0;	          int    iConstant    =    multiplierNonZeroOddNumber;    int    iCONstant    =    multiplierNonZeroOddNumber;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
134	[BUG]  [BUGGY]  while(clazz.getName()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while(clazz.getName()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	while(clazz.getName()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getName()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getName();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
135	[BUG]  [BUGGY]  int  iConstant  =  initialNonZeroOddNumber  +  1;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  initialNonZeroOddNumber  +  1;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  initialNonZeroOddNumber  +  1;	  int    iConstant    =    multiplierNonZeroOddNumber    +    1;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
136	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  2;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  2;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  2;	  int    iConstant    =    multiplierNonZeroOddNumber    +    1;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
137	[BUG]  [BUGGY]  int  iConstant  =  initialNonZeroOddNumber  +  clazz.reflectUpToClass();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  initialNonZeroOddNumber  +  clazz.reflectUpToClass();  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  initialNonZeroOddNumber  +  clazz.reflectUpToClass();	  int    iConstant    =    multiplierNonZeroOddNumber    +    clazz.reflectUpToClass();    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
138	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.getName();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.getName();  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.getName();	  int    iConstant    =    multiplierNonZeroOddNumber    +    clazz.reflectUpToClass();    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
139	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.reflectUpToClass(initialNonZeroOddNumber);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.reflectUpToClass(initialNonZeroOddNumber);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.reflectUpToClass(initialNonZeroOddNumber);	  int    iConstant    =    multiplierNonZeroOddNumber    +    clazz.reflectUpToClass();    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
140	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber,  reflectUpToClass);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber,  reflectUpToClass);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber,  reflectUpToClass);	  reflectionAppend(object,    clazz,    builder,    testTransients,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
141	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  null,  excludeFields);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  null,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  null,  excludeFields);	  reflectionAppend(object,    clazz,    builder,    testTransients,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
142	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectionHashCode,  excludeFields,  testTransients);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectionHashCode,  excludeFields,  testTransients);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectionHashCode,  excludeFields,  testTransients);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    reflectUpToClass,    excludeFields,    testTransients);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
143	[BUG]  [BUGGY]  ReflectionBuilder  <?>  builder  =  ReflectionBuilder.create(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  <?>  builder  =  ReflectionBuilder.create(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields));  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  <?>  builder  =  ReflectionBuilder.create(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields));	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    ReflectionBuilder    <?>    builder    =    ReflectionBuilder.create(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    reflectUpToClass,    excludeFields));    	non-compiled	[CE]  ';'  expected	94	None	replace
144	[BUG]  [BUGGY]  ReflectionBuilder  <?>  builder  =  ReflectionBuilder.create(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  <?>  builder  =  ReflectionBuilder.create(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields));  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  <?>  builder  =  ReflectionBuilder.create(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields));	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    ReflectionBuilder    <?>    builder    =    ReflectionBuilder.create(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    reflectUpToClass,    excludeFields));    	non-compiled	[CE]  ';'  expected	94	None	replace
145	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass);	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    reflectUpToClass);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
146	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass);	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    reflectUpToClass);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
147	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(object,  multiplierNonZeroOddNumber,  multipleNonZeroOddNumber,  testTransients,  excludeFields);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(object,  multiplierNonZeroOddNumber,  multipleNonZeroOddNumber,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(object,  multiplierNonZeroOddNumber,  multipleNonZeroOddNumber,  testTransients,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multipleNonZeroOddNumber,    multiplierNonZeroOddNumber,    object,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
148	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients,  reflectUpToClass,  excludeFields);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients,  reflectUpToClass,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients,  reflectUpToClass,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multipleNonZeroOddNumber,    multiplierNonZeroOddNumber,    object,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
149	[BUG]  [BUGGY]  int  iConstant  =  initialNonZeroOddNumber  -  1;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  initialNonZeroOddNumber  -  1;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  initialNonZeroOddNumber  -  1;	  int    iConstant    =    multiplierNonZeroOddNumber    -    1;    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
150	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  /  1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  /  1;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  /  1;	  int    iConstant    =    multiplierNonZeroOddNumber    -    1;    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
151	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while  (clazz!=  null  &&  clazz  ==  reflectUpToClass)  {  [BUGGY]      clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	add	while  (clazz!=  null  &&  clazz  ==  reflectUpToClass)  {	  while    (clazz!=    null    &&    clazz!=    reflectUpToClass)    {    	compilable	  [FE]  AssertionFailedError  	67	2	replace
152	[BUG]  [BUGGY]  while  (clazz!=  null  &&  clazz  ==  reflectUpToClass)  {  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while  (clazz!=  null  &&  clazz  ==  reflectUpToClass)  {  [BUGGY]      clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	while  (clazz!=  null  &&  clazz  ==  reflectUpToClass)  {	  while    (clazz!=    null    &&    clazz!=    reflectUpToClass)    {    	compilable	  [FE]  AssertionFailedError  	67	2	replace
153	[BUG]  [BUGGY]  while  (clazz!=  null  &&  clazz!=  reflectionHashCode)  {  [CE]  cannot  find  symbol  reflectionHashCode  [FE]      NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while  (clazz!=  null  &&  clazz!=  reflectionHashCode)  {  [BUGGY]      clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	while  (clazz!=  null  &&  clazz!=  reflectionHashCode)  {	  while    (clazz!=    null    &&    clazz!=    reflectUpToClass)    {    	non-compiled	[CE]  cannot  find  symbol  reflectionHashCode	67	None	replace
154	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields).put(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields).put(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields).put(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields).put(initialNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
155	[BUG]  [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields).put(initialNonZeroOddNumber,  multiplierN  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields).put(initialNonZeroOddNumber,  multiplierN  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields).put(initialNonZeroOddNumber,  multiplierN	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields).put(initialNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  ')'  expected	73	None	replace
156	[BUG]  [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields).put(initialNonZeroOddNumber,  multiplierNonZeroOd  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields).put(initialNonZeroOddNumber,  multiplierNonZeroOd  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields).put(initialNonZeroOddNumber,  multiplierNonZeroOd	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields).put(initialNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  ')'  expected	73	None	replace
157	[BUG]  [BUGGY]  int  iConstant  =  builder  +  initialNonZeroOddNumber.length();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  builder  +  initialNonZeroOddNumber.length();  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  builder  +  initialNonZeroOddNumber.length();	  int    iConstant    =    initialNonZeroOddNumber    +    builder.length();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
158	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  *  builder.length();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  *  builder.length();  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  *  builder.length();	  int    iConstant    =    initialNonZeroOddNumber    +    builder.length();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
159	[BUG]  [BUGGY]  reflectionAppend(Object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  reflectionAppend(Object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	reflectionAppend(Object,  clazz,  builder,  testTransients,  excludeFields);	          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz    =    clazz.getSuperclass();    reflectionAppend(Object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
160	[BUG]  [BUGGY]  if(testTransients)  {  clazz  =  clazz.getSuperclass();  }  else  if(initialNonZeroOddNumber  ==  multiplierNonZeroOddNumber)  {  reflectionAppend(object,  builder,  testTransients,  excludeFields);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  if(testTransients)  {  clazz  =  clazz.getSuperclass();  }  else  if(initialNonZeroOddNumber  ==  multiplierNonZeroOddNumber)  {  reflectionAppend(object,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	if(testTransients)  {  clazz  =  clazz.getSuperclass();  }  else  if(initialNonZeroOddNumber  ==  multiplierNonZeroOddNumber)  {  reflectionAppend(object,  builder,  testTransients,  excludeFields);  }	          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz    =    clazz.getSuperclass();    reflectionAppend(Object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
161	[BUG]  [BUGGY]  if(testTransients)  {  clazz  =  clazz.getSuperclass();  }  else  if(initialNonZeroOddNumber  >=  multiplierNonZeroOddNumber)  {  reflectionAppend(object,  builder,  testTransients,  excludeFields);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  if(testTransients)  {  clazz  =  clazz.getSuperclass();  }  else  if(initialNonZeroOddNumber  >=  multiplierNonZeroOddNumber)  {  reflectionAppend(object,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	if(testTransients)  {  clazz  =  clazz.getSuperclass();  }  else  if(initialNonZeroOddNumber  >=  multiplierNonZeroOddNumber)  {  reflectionAppend(object,  builder,  testTransients,  excludeFields);  }	          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz    =    clazz.getSuperclass();    reflectionAppend(Object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
162	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields).put(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields).put(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields).put(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields).put(initialNonZeroOddNumber,    multiplierNonZeroOddNumber    +    1);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
163	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields).put(initialNonZeroOddNumber,  multiplyerNonZeroOddNumber  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields).put(initialNonZeroOddNumber,  multiplyerNonZeroOddNumber  +  1);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields).put(initialNonZeroOddNumber,  multiplyerNonZeroOddNumber  +  1);	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields).put(initialNonZeroOddNumber,    multiplierNonZeroOddNumber    +    1);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
164	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludedFields).put(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludedFields).put(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  excludedFields).put(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields).put(initialNonZeroOddNumber,    multiplierNonZeroOddNumber    +    1);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
165	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	add	                clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	compilable	  [FE]  NullPointerException  	40	4	add
166	[BUG]  [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	compilable	  [FE]  NullPointerException  	40	4	add
167	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	add	                clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();	  	compilable	  [FE]  NullPointerException  	40	4	add
168	[BUG]  [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();	  	compilable	  [FE]  NullPointerException  	40	4	add
169	[BUG]  [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
170	[BUG]  [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
171	[BUG]  [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.get  [CE]  ';'  expected  [FE]            NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.get  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.get	  	non-compiled	[CE]  ';'  expected	40	None	add
172	[BUG]  [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  ReflectionBuilder  <?>  builder  =  ReflectionBuilder.create(initialNonZeroOddNumber,  multiplierNonZeroOddN  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  ReflectionBuilder  <?>  builder  =  ReflectionBuilder.create(initialNonZeroOddNumber,  multiplierNonZeroOddN  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  ReflectionBuilder  <?>  builder  =  ReflectionBuilder.create(initialNonZeroOddNumber,  multiplierNonZeroOddN	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    ReflectionBuilder    <?>    builder    =    ReflectionBuilder.create(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients,    excludeFields);    	non-compiled	[CE]  ')'  expected	93	None	replace
173	[BUG]  [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  ReflectionBuilder  <?>  builder  =  ReflectionBuilder.create(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  ReflectionBuilder  <?>  builder  =  ReflectionBuilder.create(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  ReflectionBuilder  <?>  builder  =  ReflectionBuilder.create(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    ReflectionBuilder    <?>    builder    =    ReflectionBuilder.create(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients,    excludeFields);    	non-compiled	[CE]  ')'  expected	93	None	replace
174	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	add	                while(clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        }        while(clazz.getClass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	compilable	  [FE]  NullPointerException  	97	4	add
175	[BUG]  [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                while(clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        }        while(clazz.getClass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	compilable	  [FE]  NullPointerException  	97	4	add
176	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	add	                while(clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        }        while(clazz.getClass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	compilable	  [FE]  NullPointerException  	97	4	add
177	[BUG]  [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                while(clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        }        while(clazz.getClass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	compilable	  [FE]  NullPointerException  	97	4	add
178	[BUG]  [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getInterface()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getInterface();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getInterface()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getInterface();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                while(clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        }        while(clazz.getClass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getInterface()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getInterface();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	non-compiled	[CE]  cannot  find  symbol	97	None	add
179	[BUG]  [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  incomparable  types:  Class<CAP#1>  and  boolean  [FE]          NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                while(clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        }        while(clazz.getClass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  boolean	97	None	add
180	[BUG]  [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  builder)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  incomparable  types:  Class<CAP#1>  and  HashCodeBuilder  [FE]            NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  builder)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                while(clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        }        while(clazz.getClass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  builder)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  HashCodeBuilder	97	None	add
181	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectionHashCode,  testTransients,  excludeFields);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectionHashCode,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectionHashCode,  testTransients,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    reflectUpToClass,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
182	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            NullPointerException      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while  (clazz.getSuperclass()!=  null  ||  clazz  ==  reflectUpToClass)  {  [BUGGY]      clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	add	while  (clazz.getSuperclass()!=  null  ||  clazz  ==  reflectUpToClass)  {	  while    (clazz.getSuperclass()!=    null    ||    clazz!=    reflectUpToClass)    {    while    (clazz.getSuperclass()!=    null    ||    clazz    ==    reflectUpToClass)    {    	compilable	  [FE]  AssertionFailedError  	19	1	replace
183	[BUG]  [BUGGY]  while  (clazz.getSuperclass()!=  null  ||  clazz  ==  reflectUpToClass)  {  [FE]  AssertionFailedError  [FE]            NullPointerException      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while  (clazz.getSuperclass()!=  null  ||  clazz  ==  reflectUpToClass)  {  [BUGGY]      clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	while  (clazz.getSuperclass()!=  null  ||  clazz  ==  reflectUpToClass)  {	  while    (clazz.getSuperclass()!=    null    ||    clazz!=    reflectUpToClass)    {    while    (clazz.getSuperclass()!=    null    ||    clazz    ==    reflectUpToClass)    {    	compilable	  [FE]  AssertionFailedError  	19	1	replace
184	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	add	                while(clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        }        while(clazz.getSuperclass()!=    null    &&    clazz    ==    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	compilable	  [FE]  AssertionFailedError  	34	1	add
185	[BUG]  [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                while(clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        }        while(clazz.getSuperclass()!=    null    &&    clazz    ==    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	compilable	  [FE]  AssertionFailedError  	34	1	add
186	[BUG]  [BUGGY]  timeout  [FE]      AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	add	                while(clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        }        while(clazz.getSuperclass()!=    null    &&    clazz    ==    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	compilable	timeout	34	1	add
187	[BUG]  [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  timeout  [FE]      AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                while(clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        }        while(clazz.getSuperclass()!=    null    &&    clazz    ==    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	compilable	timeout	34	1	add
188	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getSuperclass()!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	add	                while(clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        }        while(clazz.getSuperclass()!=    null    &&    clazz    ==    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	compilable	  [FE]  AssertionFailedError  	34	1	add
189	[BUG]  [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getSuperclass()!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getSuperclass()!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                while(clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        }        while(clazz.getSuperclass()!=    null    &&    clazz    ==    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	compilable	  [FE]  AssertionFailedError  	34	1	add
190	[BUG]  [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getInterface()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getInterface();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getInterface()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getInterface();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                while(clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        }        while(clazz.getSuperclass()!=    null    &&    clazz    ==    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getInterface()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getInterface();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	non-compiled	[CE]  cannot  find  symbol	34	None	add
191	[BUG]  [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  ReflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  cannot  find  symbol  ReflectUpToClass  [FE]            AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  ReflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                while(clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        }        while(clazz.getSuperclass()!=    null    &&    clazz    ==    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  ReflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	non-compiled	[CE]  cannot  find  symbol  ReflectUpToClass	34	None	add
192	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  refiningHashCode,  excludeFields);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  refiningHashCode,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  refiningHashCode,  excludeFields);	  reflectionAppend(object,    clazz,    builder,    testTransients,    multiplierNonZeroOddNumber,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
193	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplyerNonZeroOddNumber,    initialNonZeroOddNumber,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
194	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz,  reflectUpToClass,  excludeFields,  testTransients);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz,  reflectUpToClass,  excludeFields,  testTransients);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz,  reflectUpToClass,  excludeFields,  testTransients);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    clazz,    reflectUpToClass,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
195	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz,  reflectUpToClass,  testTransients,  excludeFields);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz,  reflectUpToClass,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz,  reflectUpToClass,  testTransients,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    clazz,    reflectUpToClass,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
196	[BUG]  [BUGGY]  while(clazz!=  null  &&  clazz!=  testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  incomparable  types:  Class<CAP#1>  and  boolean  [FE]              AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while(clazz!=  null  &&  clazz!=  testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	while(clazz!=  null  &&  clazz!=  testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  while(clazz.getSuperclass()!=    null    &&    clazz!=    testTransients)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  boolean	21	None	replace
197	[BUG]  [BUGGY]          int    iConstant    =    multiplierNonZeroOddNumber;    int  iCONstant  =  multiplierNonZeroOddNumber;  int  iConstant  =  multiplierNonZeroOddNumber;  int  iCONStant  =  multiplierNonZeroOddNumber;  [CE]  variable  iConstant  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]    AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          int    iConstant    =    multiplierNonZeroOddNumber;    int  iCONstant  =  multiplierNonZeroOddNumber;  int  iConstant  =  multiplierNonZeroOddNumber;  int  iCONStant  =  multiplierNonZeroOddNumber;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                int        iConstant        =        multiplierNonZeroOddNumber;        int    iCONstant    =    multiplierNonZeroOddNumber;    int  iConstant  =  multiplierNonZeroOddNumber;  int  iCONStant  =  multiplierNonZeroOddNumber;	  	non-compiled	[CE]  variable  iConstant  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	4	None	add
198	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber;  int  iConstant  =  0;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber;  int  iConstant  =  0;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  multiplierNonZeroOddNumber;  int  iConstant  =  0;	          int    iConstant    =    multiplierNonZeroOddNumber;    int    iConstant    =    multiplierNonZeroOddNumber;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
199	[BUG]  [BUGGY]  Integer  iConstant  =  multiplierNonZeroOddNumber;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  Integer  iConstant  =  multiplierNonZeroOddNumber;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	Integer  iConstant  =  multiplierNonZeroOddNumber;	          int    iConstant    =    multiplierNonZeroOddNumber;    int    iConstant    =    multiplierNonZeroOddNumber;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
200	[BUG]  [BUGGY]  ReflectionBuilder  <?>  builder  =  ReflectionBuilder.create(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  refinderUpToClass,  excludeFields);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  <?>  builder  =  ReflectionBuilder.create(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  refinderUpToClass,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  <?>  builder  =  ReflectionBuilder.create(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  refinderUpToClass,  excludeFields);	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    ReflectionBuilder    <?>    builder    =    ReflectionBuilder.create(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    reflectUpToClass,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
201	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  reflectNonZeroOddNumber,  excludeFields);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  reflectNonZeroOddNumber,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  reflectNonZeroOddNumber,  excludeFields);	  reflectionAppend(object,    clazz,    builder,    testTransients,    reflectUpToClass,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
202	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while(clazz!=  null)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	add	while(clazz!=  null)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getClass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    timeout    	compilable	  [FE]  NullPointerException  	33	4	replace
203	[BUG]  [BUGGY]  while(clazz!=  null)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [FE]  NullPointerException  [FE]          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while(clazz!=  null)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	while(clazz!=  null)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getClass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    timeout    	compilable	  [FE]  NullPointerException  	33	4	replace
204	[BUG]  [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  return  ReflectionBuilder.create(initialNonZeroOddNumber,  multiplierNonZeroOddN  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  return  ReflectionBuilder.create(initialNonZeroOddNumber,  multiplierNonZeroOddN  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  return  ReflectionBuilder.create(initialNonZeroOddNumber,  multiplierNonZeroOddN	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    ReflectionBuilder    <?>    builder    =    ReflectionBuilder.create(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients,    excludeFields);    	non-compiled	[CE]  ')'  expected	93	None	replace
205	[BUG]  [BUGGY]  ReflectionHandler  <  Object>  builder  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionHandler  <  Object>  builder  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionHandler  <  Object>  builder  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  if(testTransients)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
206	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber.initialNonZeroOddNumber;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber.initialNonZeroOddNumber;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  multiplierNonZeroOddNumber.initialNonZeroOddNumber;	  int    iConstant    =    initialNonZeroOddNumber;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
207	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber;  int  iCONstant  =  multiplierNonZeroOddNumber  +  1;  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber;  int  iCONstant  =  multiplierNonZeroOddNumber  +  1;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  multiplierNonZeroOddNumber;  int  iCONstant  =  multiplierNonZeroOddNumber  +  1;	          int    iConstant    =    multiplierNonZeroOddNumber;    int    iCONstant    =    multiplierNonZeroOddNumber;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
208	[BUG]  [BUGGY]  Integer  iConstant  =  multiplierNonZeroOddNumber;  int  iCONstant  =  multiplierNonZeroOddNumber;  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  Integer  iConstant  =  multiplierNonZeroOddNumber;  int  iCONstant  =  multiplierNonZeroOddNumber;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	Integer  iConstant  =  multiplierNonZeroOddNumber;  int  iCONstant  =  multiplierNonZeroOddNumber;	          int    iConstant    =    multiplierNonZeroOddNumber;    int    iCONstant    =    multiplierNonZeroOddNumber;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
209	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber;  Int  iConstant  =  iConstant;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber;  Int  iConstant  =  iConstant;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  multiplierNonZeroOddNumber;  Int  iConstant  =  iConstant;	          int    iConstant    =    multiplierNonZeroOddNumber;    Int    iConstant    =    multiplierNonZeroOddNumber;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
210	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber;  Int  iConstant  =  iConstantNonZeroOddNumber;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber;  Int  iConstant  =  iConstantNonZeroOddNumber;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  multiplierNonZeroOddNumber;  Int  iConstant  =  iConstantNonZeroOddNumber;	          int    iConstant    =    multiplierNonZeroOddNumber;    Int    iConstant    =    multiplierNonZeroOddNumber;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
211	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber;  Int  iConstant  =  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber;  Int  iConstant  =  0;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  multiplierNonZeroOddNumber;  Int  iConstant  =  0;	          int    iConstant    =    multiplierNonZeroOddNumber;    Int    iConstant    =    multiplierNonZeroOddNumber;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
212	[BUG]  [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields).put(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields).put(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields).put(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  }	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields).put(initialNonZeroOddNumber,    multiplierNonZeroOddNumber    +    1);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
213	[BUG]  [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields).put(initialNonZeroOddNumb  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields).put(initialNonZeroOddNumb  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields).put(initialNonZeroOddNumb	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields).put(initialNonZeroOddNumber,    multiplierNonZeroOddNumber    +    1);    	non-compiled	[CE]  ')'  expected	75	None	replace
214	[BUG]  [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields).put(initialNonZeroOddN  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields).put(initialNonZeroOddN  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields).put(initialNonZeroOddN	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields).put(initialNonZeroOddNumber,    multiplierNonZeroOddNumber    +    1);    	non-compiled	[CE]  ')'  expected	75	None	replace
215	[BUG]  [BUGGY]  ReflectionHashCode  <  T>  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionHashCode  <  T>  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionHashCode  <  T>  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  if(testTransients)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
216	[BUG]  [BUGGY]  reflectUpToClass(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  reflectUpToClass(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	reflectUpToClass(object,  clazz,  builder,  testTransients,  excludeFields);	  if(testTransients)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
217	[BUG]  [BUGGY]  if(testTransients)  {  clazz  =  clazz.getSuperclass();  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  if(testTransients)  {  clazz  =  clazz.getSuperclass();  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	if(testTransients)  {  clazz  =  clazz.getSuperclass();  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz    =    clazz.getSuperclass();    reflectionAppend(Object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
218	[BUG]  [BUGGY]  int  iConstant  =  Integer.MAX_VALUE;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  Integer.MAX_VALUE;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  Integer.MAX_VALUE;	  int    iConstant    =    0;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
219	[BUG]  [BUGGY]  int  iConstant  =  Integer.MIN_VALUE;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  Integer.MIN_VALUE;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  Integer.MIN_VALUE;	  int    iConstant    =    0;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
220	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	add	                clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	compilable	  [FE]  NullPointerException  	40	3	add
221	[BUG]  [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	compilable	  [FE]  NullPointerException  	40	3	add
222	[BUG]  [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz.getSuperclass()  }  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  ')'  expected  [FE]      NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz.getSuperclass()  }  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz.getSuperclass()  }  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	non-compiled	[CE]  ')'  expected	40	None	add
223	[BUG]  [BUGGY]  while(clazz!=  null  &&  clazz!=  reflectionHashCode)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while(clazz!=  null  &&  clazz!=  reflectionHashCode)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	while(clazz!=  null  &&  clazz!=  reflectionHashCode)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
224	[BUG]  [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields).put(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields).put(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields).put(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  }	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields).put(initialNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
225	[BUG]  [BUGGY]  reflectionAppend(initialNonZeroOddNumber,  clazz,  testTransients,  excludeFields);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  reflectionAppend(initialNonZeroOddNumber,  clazz,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	reflectionAppend(initialNonZeroOddNumber,  clazz,  testTransients,  excludeFields);	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    reflectUpToClass);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
226	[BUG]  [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getInterface()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getInterface();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getInterface()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getInterface();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                while(clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        }        while(clazz.getClass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getClass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getInterface()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getInterface();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  timeout    	non-compiled	[CE]  cannot  find  symbol	32	None	add
227	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	add	                while(clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        }        while(clazz.getClass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getClass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  timeout    	compilable	timeout	32	1	add
228	[BUG]  [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  timeout  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                while(clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        }        while(clazz.getClass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getClass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  timeout    	compilable	timeout	32	1	add
229	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  1L;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  1L;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  1L;	  int    iConstant    =    multiplierNonZeroOddNumber    +    1;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
230	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  3;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  3;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  3;	  int    iConstant    =    multiplierNonZeroOddNumber    +    1;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
231	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while(clazz!=  null  &&  clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  [BUGGY]      clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	add	while(clazz!=  null  &&  clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {	  while    (clazz.getSuperclass()!=    null    &&    clazz    ==    reflectUpToClass)    {    while    (clazz.getSuperclass()!=    null    &&    clazz    ==    reflectUpToClass)    {    	compilable	  [FE]  AssertionFailedError  	44	1	replace
232	[BUG]  [BUGGY]  while(clazz!=  null  &&  clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while(clazz!=  null  &&  clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  [BUGGY]      clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	while(clazz!=  null  &&  clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {	  while    (clazz.getSuperclass()!=    null    &&    clazz    ==    reflectUpToClass)    {    while    (clazz.getSuperclass()!=    null    &&    clazz    ==    reflectUpToClass)    {    	compilable	  [FE]  AssertionFailedError  	44	1	replace
233	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz,  testTransients,  reflectUpToClass);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz,  testTransients,  reflectUpToClass);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz,  testTransients,  reflectUpToClass);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients,    reflectUpToClass);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
234	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields);	  reflectionAppend(object,    clazz,    builder,    testTransients,    multiplyerNonZeroOddNumber,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
235	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients,  reflectUpToClass);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients,  reflectUpToClass);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients,  reflectUpToClass);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplyNonZeroOddNumber,    multiplierNonZeroOddNumber,    object,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
236	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass,  excludeFields);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplyNonZeroOddNumber,    clazz,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
237	[BUG]  [BUGGY]  reflectionAppend(initialNonZeroOddNumber,  clazz,  builder,  testTransients,  excludeFields);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  reflectionAppend(initialNonZeroOddNumber,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	reflectionAppend(initialNonZeroOddNumber,  clazz,  builder,  testTransients,  excludeFields);	  reflectionAppend(object,    clazz,    builder,    testTransients,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
238	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  *  multiplierNonZeroOddNumber.length();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  *  multiplierNonZeroOddNumber.length();  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  *  multiplierNonZeroOddNumber.length();	  int    iConstant    =    builder    +    multiplierNonZeroOddNumber.length();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
239	[BUG]  [BUGGY]  while  (clazz.getSuperclass()  ==  null  ||  clazz!=  reflectUpToClass)  {  while  (clazz.getSuperclass()  ==  null  ||  clazz  >=  reflectUpToClass)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while  (clazz.getSuperclass()  ==  null  ||  clazz!=  reflectUpToClass)  {  while  (clazz.getSuperclass()  ==  null  ||  clazz  >=  reflectUpToClass)  {  [BUGGY]      clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	while    (clazz.getSuperclass()    ==    null    ||    clazz!=    reflectUpToClass)    {    while  (clazz.getSuperclass()  ==  null  ||  clazz  >=  reflectUpToClass)  {	  	non-compiled	[CE]  illegal  start  of  expression	102	None	add
240	[BUG]  [BUGGY]  reflectionHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  builder,  testTransients,  excludeFields);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  reflectionHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  builder,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	reflectionHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  builder,  testTransients,  excludeFields);	          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    int    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
241	[BUG]  [BUGGY]  reflectionHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz,  testTransients,  excludeFields);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  reflectionHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	reflectionHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz,  testTransients,  excludeFields);	          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    int    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
242	[BUG]  [BUGGY]  while(clazz!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz!=  null  &&  clazz  >=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while(clazz!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz!=  null  &&  clazz  >=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	while(clazz!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz!=  null  &&  clazz  >=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
243	[BUG]  [BUGGY]  while(clazz!=  null)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  illegal  start  of  type  [FE]    NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while(clazz!=  null)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	while(clazz!=  null)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
244	[BUG]  [BUGGY]  ReflectionHashCode  <  T>  clazz  =  builder.build();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionHashCode  <  T>  clazz  =  builder.build();  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionHashCode  <  T>  clazz  =  builder.build();	  if(testTransients)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
245	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  iTotal;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  iTotal;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  iTotal;	  int    iConstant    =    multiplierNonZeroOddNumber    +    initialNonZeroOddNumber;    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
246	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.testTransients  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.testTransients  +  1;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.testTransients  +  1;	  int    iConstant    =    multiplierNonZeroOddNumber    +    clazz.testTransients;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
247	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.testTransients  +  initialNonZeroOddNumber;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.testTransients  +  initialNonZeroOddNumber;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.testTransients  +  initialNonZeroOddNumber;	  int    iConstant    =    multiplierNonZeroOddNumber    +    clazz.testTransients;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
248	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.testTransients,  reflectUpToClass;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.testTransients,  reflectUpToClass;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.testTransients,  reflectUpToClass;	  int    iConstant    =    multiplierNonZeroOddNumber    +    clazz.testTransients;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
249	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectUpToClass(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectUpToClass(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectUpToClass(object,  clazz,  builder,  testTransients,  excludeFields);	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
250	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builders,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  builders  [FE]      AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builders,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builders,  testTransients,  excludeFields);	  	non-compiled	[CE]  cannot  find  symbol  builders	8	None	add
251	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludedFields);  [CE]  cannot  find  symbol  excludedFields  [FE]        AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludedFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludedFields);	  	non-compiled	[CE]  cannot  find  symbol  excludedFields	8	None	add
252	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testtransients,  excludeFields);  [CE]  cannot  find  symbol  testtransients  [FE]          AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testtransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testtransients,  excludeFields);	  	non-compiled	[CE]  cannot  find  symbol  testtransients	8	None	add
253	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass,  excludeFields,  false);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass,  excludeFields,  false);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass,  excludeFields,  false);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients,    reflectUpToClass,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
254	[BUG]  [BUGGY]  if(testTransients)  {  clazz  =  clazz.getSuperclass();  }  else  {  reflectionAppend(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  builder,  testTransients,  excludeFields);  }  [CE]  illegal  start  of  type  [FE]    NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  if(testTransients)  {  clazz  =  clazz.getSuperclass();  }  else  {  reflectionAppend(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	if(testTransients)  {  clazz  =  clazz.getSuperclass();  }  else  {  reflectionAppend(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  builder,  testTransients,  excludeFields);  }	          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
255	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  multiplierNonZeroOddNumber);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  multiplierNonZeroOddNumber);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  multiplierNonZeroOddNumber);	  reflectionAppend(object,    clazz,    builder,    testTransients,    multiplierNonZeroOddNumber,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
256	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  builder.toInitialNonZeroOddNumber.length();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  builder.toInitialNonZeroOddNumber.length();  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  builder.toInitialNonZeroOddNumber.length();	  int    iConstant    =    multiplierNonZeroOddNumber    +    builder.initialNonZeroOddNumber.length();    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
257	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  builder.initialNonZeroOddNumber.length()  -  1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  builder.initialNonZeroOddNumber.length()  -  1;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  builder.initialNonZeroOddNumber.length()  -  1;	  int    iConstant    =    multiplierNonZeroOddNumber    +    builder.initialNonZeroOddNumber.length();    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
258	[BUG]  [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getType()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getType();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getType()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getType();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                while(clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        }        while(clazz.getClass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getType()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getType();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	non-compiled	[CE]  cannot  find  symbol	97	None	add
259	[BUG]  [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getNativeClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getNativeClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getNativeClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getNativeClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                while(clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        }        while(clazz.getClass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getNativeClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getNativeClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	non-compiled	[CE]  cannot  find  symbol	97	None	add
260	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  testTransients,  excludeFields);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  testTransients,  excludeFields);	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
261	[BUG]  [BUGGY]  while(clazz!=  null  &&  clazz!=  testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while(clazz!=  null  &&  clazz!=  testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	while(clazz!=  null  &&  clazz!=  testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  while(clazz.getSuperclass()!=    null    &&    clazz!=    testTransients)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
262	[BUG]  [BUGGY]  while  (clazz.getSuperclass()!=  null  &&  clazz  >=  reflectUpToClass)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        NullPointerException      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while  (clazz.getSuperclass()!=  null  &&  clazz  >=  reflectUpToClass)  {  [BUGGY]      clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	while  (clazz.getSuperclass()!=  null  &&  clazz  >=  reflectUpToClass)  {	  while    (clazz.getSuperclass()!=    null    ||    clazz!=    reflectUpToClass)    {    while    (clazz.getSuperclass()!=    null    ||    clazz    >=    reflectUpToClass)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	62	None	replace
263	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass,  excludeFields);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplyerNonZeroOddNumber,    initialNonZeroOddNumber,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
264	[BUG]  [BUGGY]  While  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  While  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  [BUGGY]      clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	While  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {	  while    (clazz.getSuperclass()!=    null    &&    clazz    ==    reflectUpToClass)    {    While    (clazz.getSuperclass()!=    null    &&    clazz    ==    reflectUpToClass)    {    	non-compiled	[CE]  ';'  expected	87	None	replace
265	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  clazz);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  clazz);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  clazz);	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
266	[BUG]  [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  return  builder.toHashCode();  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  return  builder.toHashCode();  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  return  builder.toHashCode();  }	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
267	[BUG]  [BUGGY]  Integer  iConstant  =  multiplierNonZeroOddNumber  +  clazz.getItemCount();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  Integer  iConstant  =  multiplierNonZeroOddNumber  +  clazz.getItemCount();  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	Integer  iConstant  =  multiplierNonZeroOddNumber  +  clazz.getItemCount();	  int    iConstant    =    initialNonZeroOddNumber    +    clazz.getItemCount();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
268	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  -  1  +  initialNonZeroOddNumber;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  -  1  +  initialNonZeroOddNumber;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  -  1  +  initialNonZeroOddNumber;	  int    iConstant    =    multiplierNonZeroOddNumber    -    1;    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
269	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  -  1L;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  -  1L;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  -  1L;	  int    iConstant    =    multiplierNonZeroOddNumber    -    1;    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
270	[BUG]  [BUGGY]  while(clazz!=  null  &&  clazz!=  builder.getSuperclass())  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while(clazz!=  null  &&  clazz!=  builder.getSuperclass())  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	while(clazz!=  null  &&  clazz!=  builder.getSuperclass())  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  while(clazz.getSuperclass()!=    null    &&    clazz!=    builder.getSuperclass())    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
271	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz,  testTransients);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz,  testTransients);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz,  testTransients);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    reflectUpToClass,    testTransients);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
272	[BUG]  [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getType()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getType();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getType()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getType();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                while(clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        }        while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getType()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getType();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	non-compiled	[CE]  cannot  find  symbol	30	None	add
273	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	add	                while(clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        }        while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	compilable	  [FE]  NullPointerException  	30	4	add
274	[BUG]  [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [FE]  NullPointerException  [FE]      AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                while(clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        }        while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	compilable	  [FE]  NullPointerException  	30	4	add
275	[BUG]  [BUGGY]  while  (clazz!=  null  &&  clazz!=  reflectUpToClass)  {  While  (clazz!=  null  &&  clazz!=  reflectUpToClass)  {  [CE]  ';'  expected  [FE]    NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while  (clazz!=  null  &&  clazz!=  reflectUpToClass)  {  While  (clazz!=  null  &&  clazz!=  reflectUpToClass)  {  [BUGGY]      clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	while    (clazz!=    null    &&    clazz!=    reflectUpToClass)    {    While  (clazz!=  null  &&  clazz!=  reflectUpToClass)  {	  	non-compiled	[CE]  ';'  expected	66	None	add
276	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.initialNonZeroOddNumber.getIndex();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.initialNonZeroOddNumber.getIndex();  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.initialNonZeroOddNumber.getIndex();	  int    iConstant    =    multiplierNonZeroOddNumber    +    clazz.initialNonZeroOddNumber.getItemCount();    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
277	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.reflectUpToClass.getItemCount();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.reflectUpToClass.getItemCount();  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.reflectUpToClass.getItemCount();	  int    iConstant    =    multiplierNonZeroOddNumber    +    clazz.initialNonZeroOddNumber.getItemCount();    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
278	[BUG]  [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getType()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getType();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getType()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getType();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                while(clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        }        while(clazz.getSuperclass()!=    null    &&    clazz    ==    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getType()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getType();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	non-compiled	[CE]  cannot  find  symbol	34	None	add
279	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	add	                while(clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        }        while(clazz.getSuperclass()!=    null    &&    clazz    ==    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	compilable	  [FE]  NullPointerException  	34	4	add
280	[BUG]  [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [FE]  NullPointerException  [FE]      AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                while(clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        }        while(clazz.getSuperclass()!=    null    &&    clazz    ==    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	compilable	  [FE]  NullPointerException  	34	4	add
281	[BUG]  [BUGGY]  ReflectionBuilder  <?>  builder  =  ReflectionBuilder.create(multipleNonZeroOddNumber,  clazz);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  <?>  builder  =  ReflectionBuilder.create(multipleNonZeroOddNumber,  clazz);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  <?>  builder  =  ReflectionBuilder.create(multipleNonZeroOddNumber,  clazz);	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    ReflectionBuilder    <?>    builder    =    ReflectionBuilder.create(initialNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
282	[BUG]  [BUGGY]  ReflectionBuilder  <?>  builder  =  ReflectionBuilder.create(multiplyerNonZeroOddNumber,  clazz);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  <?>  builder  =  ReflectionBuilder.create(multiplyerNonZeroOddNumber,  clazz);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  <?>  builder  =  ReflectionBuilder.create(multiplyerNonZeroOddNumber,  clazz);	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    ReflectionBuilder    <?>    builder    =    ReflectionBuilder.create(initialNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
283	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while(clazz.getSuperclass()!=  null)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	while(clazz.getSuperclass()!=  null)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getName()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getName();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
284	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  injectorNonZeroOddNumber,  excludeFields);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  injectorNonZeroOddNumber,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  injectorNonZeroOddNumber,  excludeFields);	  reflectionAppend(object,    clazz,    builder,    testTransients,    multiplierNonZeroOddNumber,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
285	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectNonZeroOddNumber)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectNonZeroOddNumber)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectNonZeroOddNumber)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getName()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getName();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
286	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectionHashCode)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectionHashCode)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectionHashCode)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getName()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getName();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
287	[BUG]  [BUGGY]  ReflectionAdapter  <  Object>  builder  =  getReferenceAdapter(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionAdapter  <  Object>  builder  =  getReferenceAdapter(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionAdapter  <  Object>  builder  =  getReferenceAdapter(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);	  if(testTransients)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
288	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while  (clazz.getSuperclass()!=  reflectUpToClass  &&  clazz!=  reflectUpToClass)  {  [BUGGY]      clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	add	while  (clazz.getSuperclass()!=  reflectUpToClass  &&  clazz!=  reflectUpToClass)  {	  while    (clazz.getSuperclass()    ==    null    &&    clazz!=    reflectUpToClass)    {    	compilable	  [FE]  AssertionFailedError  	23	1	replace
289	[BUG]  [BUGGY]  while  (clazz.getSuperclass()!=  reflectUpToClass  &&  clazz!=  reflectUpToClass)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while  (clazz.getSuperclass()!=  reflectUpToClass  &&  clazz!=  reflectUpToClass)  {  [BUGGY]      clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	while  (clazz.getSuperclass()!=  reflectUpToClass  &&  clazz!=  reflectUpToClass)  {	  while    (clazz.getSuperclass()    ==    null    &&    clazz!=    reflectUpToClass)    {    	compilable	  [FE]  AssertionFailedError  	23	1	replace
290	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipatterNonZeroOddNumber,  multiplierNonZeroOddNumber,  object);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipatterNonZeroOddNumber,  multiplierNonZeroOddNumber,  object);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multipatterNonZeroOddNumber,  multiplierNonZeroOddNumber,  object);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multipatterNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
291	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  object);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  object);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  object);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplierNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
292	[BUG]  [BUGGY]  while  (clazz.getSuperclass()  ==  null  ||  clazz!=  reflectUpToClass)  {  while  (clazz.getSuperClass()  ==  null  ||  clazz!=  reflectUpToClass)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while  (clazz.getSuperclass()  ==  null  ||  clazz!=  reflectUpToClass)  {  while  (clazz.getSuperClass()  ==  null  ||  clazz!=  reflectUpToClass)  {  [BUGGY]      clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	while    (clazz.getSuperclass()    ==    null    ||    clazz!=    reflectUpToClass)    {    while  (clazz.getSuperClass()  ==  null  ||  clazz!=  reflectUpToClass)  {	  	non-compiled	[CE]  illegal  start  of  expression	102	None	add
293	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	add	while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();	          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	compilable	  [FE]  NullPointerException  	41	4	replace
294	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();	          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	compilable	  [FE]  NullPointerException  	41	4	replace
295	[BUG]  [BUGGY]  if(reflectUpToClass!=  null)  {  clazz  =  clazz.getSuperclass();  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  illegal  start  of  type  [FE]      NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  if(reflectUpToClass!=  null)  {  clazz  =  clazz.getSuperclass();  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	if(reflectUpToClass!=  null)  {  clazz  =  clazz.getSuperclass();  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
296	[BUG]  [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields).put(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields).put(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields).put(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields).put(initialNonZeroOddNumber,    multiplierNonZeroOddNumber    +    1);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
297	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  initialNonZeroOddNumber  *  multiplierNonZeroOddNumber;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  initialNonZeroOddNumber  *  multiplierNonZeroOddNumber;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  initialNonZeroOddNumber  *  multiplierNonZeroOddNumber;	  int    iConstant    =    multiplierNonZeroOddNumber    +    initialNonZeroOddNumber;    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
298	[BUG]  [BUGGY]  if(reflectUpToClass  ==  null)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  if(reflectUpToClass  ==  null)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	if(reflectUpToClass  ==  null)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
299	[BUG]  [BUGGY]  int  iConstant  =  Integer.parseInt(initialNonZeroOddNumber);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  Integer.parseInt(initialNonZeroOddNumber);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  Integer.parseInt(initialNonZeroOddNumber);	  int    iConstant    =    0;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
300	[BUG]  [BUGGY]  int  iConstant  =  Integer.parseInt(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  Integer.parseInt(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  Integer.parseInt(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);	  int    iConstant    =    0;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
301	[BUG]  [BUGGY]  hilst(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  hilst(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	hilst(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getInterface()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getInterface();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  ';'  expected	78	None	replace
302	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  object);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  object);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  object);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplyNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
303	[BUG]  [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  ReflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  cannot  find  symbol  ReflectUpToClass  [FE]    NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  ReflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                while(clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        }        while(clazz.getClass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  ReflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	non-compiled	[CE]  cannot  find  symbol  ReflectUpToClass	97	None	add
304	[BUG]  [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields).put(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields).put(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields).put(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields).put(initialNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
305	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  instanceAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  instanceAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  instanceAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
306	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  this.reflectUpToClass(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  multiplierNonZeroOddN  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  this.reflectUpToClass(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  multiplierNonZeroOddN  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  this.reflectUpToClass(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  multiplierNonZeroOddN	  	non-compiled	[CE]  ')'  expected	8	None	add
307	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  this.reflectUpToClass(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]        AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  this.reflectUpToClass(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  this.reflectUpToClass(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber);	  	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	8	None	add
308	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  this.reflectUpToClass(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]          AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  this.reflectUpToClass(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  this.reflectUpToClass(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);	  	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	8	None	add
309	[BUG]  [BUGGY]  while  (clazz.getSuperclass()  >=  null  &&  clazz!=  reflectUpToClass)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          NullPointerException      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while  (clazz.getSuperclass()  >=  null  &&  clazz!=  reflectUpToClass)  {  [BUGGY]      clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	while  (clazz.getSuperclass()  >=  null  &&  clazz!=  reflectUpToClass)  {	  while    (clazz.getSuperclass()!=    null    ||    clazz!=    reflectUpToClass)    {    while    (clazz.getSuperclass()    >=    null    ||    clazz!=    reflectUpToClass)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	101	None	replace
310	[BUG]  [BUGGY]  if(reflectUpToClass!=  null)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  if(reflectUpToClass!=  null)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	if(reflectUpToClass!=  null)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    Class    <?>    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
311	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  InitialNonZeroOddNumber;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  InitialNonZeroOddNumber;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  InitialNonZeroOddNumber;	  int    iConstant    =    initialNonZeroOddNumber    +    multiplierNonZeroOddNumber;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
312	[BUG]  [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  ReflectionBuilder  <?>  builder  =  ReflectionBuilder.create(initialNonZeroOddNumber,  multiplierNonZeroOd  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  ReflectionBuilder  <?>  builder  =  ReflectionBuilder.create(initialNonZeroOddNumber,  multiplierNonZeroOd  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  ReflectionBuilder  <?>  builder  =  ReflectionBuilder.create(initialNonZeroOddNumber,  multiplierNonZeroOd	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    ReflectionBuilder    <?>    builder    =    ReflectionBuilder.create(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients,    excludeFields);    	non-compiled	[CE]  ')'  expected	93	None	replace
313	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  object);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  object);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  object);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplyerNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
314	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.getImmediateParentPointer();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.getImmediateParentPointer();  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.getImmediateParentPointer();	  int    iConstant    =    multiplierNonZeroOddNumber    +    clazz.reflectUpToClass();    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
315	[BUG]  [BUGGY]  if(testTransients!=  null)  {  clazz  =  clazz.getSuperclass();  clazz  =  builder.getSuperClass();  clazz  =  clazz.getSuperClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  if(testTransients!=  null)  {  clazz  =  clazz.getSuperclass();  clazz  =  builder.getSuperClass();  clazz  =  clazz.getSuperClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	if(testTransients!=  null)  {  clazz  =  clazz.getSuperclass();  clazz  =  builder.getSuperClass();  clazz  =  clazz.getSuperClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz    =    clazz.getSuperClass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
316	[BUG]  [BUGGY]  if(testTransients!=  null)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  if(testTransients!=  null)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	if(testTransients!=  null)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz    =    clazz.getSuperClass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
317	[BUG]  [BUGGY]  if(testTransients!=  null)  {  clazz  =  clazz.getSuperclass();  clazz  =  builder.getSuperClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  if(testTransients!=  null)  {  clazz  =  clazz.getSuperclass();  clazz  =  builder.getSuperClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	if(testTransients!=  null)  {  clazz  =  clazz.getSuperclass();  clazz  =  builder.getSuperClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz    =    clazz.getSuperClass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
318	[BUG]  [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddN  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddN  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddN	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    reflectUpToClass,    excludeFields);    	non-compiled	[CE]  ')'  expected	11	None	replace
319	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber,  initialNonZeroOddNumber;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber,  initialNonZeroOddNumber;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  multiplierNonZeroOddNumber,  initialNonZeroOddNumber;	  int    iConstant    =    initialNonZeroOddNumber;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
320	[BUG]  [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  ReflectionBuilder  <?>  builder  =  ReflectionBuilder.create(initialNonZeroOddNumber,  multiplierNonZer  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  ReflectionBuilder  <?>  builder  =  ReflectionBuilder.create(initialNonZeroOddNumber,  multiplierNonZer  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  ReflectionBuilder  <?>  builder  =  ReflectionBuilder.create(initialNonZeroOddNumber,  multiplierNonZer	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    ReflectionBuilder    <?>    builder    =    ReflectionBuilder.create(initialNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  ')'  expected	95	None	replace
321	[BUG]  [BUGGY]          int    iConstant    =    multiplierNonZeroOddNumber;    int  iCONstant  =  multiplierNonZeroOddNumber;  int  iCONstant  =  multiplierNonZeroOddNumber;  int  iCONstant  =  multiplierNonZeroOddNumber;  [CE]  variable  iCONstant  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]    AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          int    iConstant    =    multiplierNonZeroOddNumber;    int  iCONstant  =  multiplierNonZeroOddNumber;  int  iCONstant  =  multiplierNonZeroOddNumber;  int  iCONstant  =  multiplierNonZeroOddNumber;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                int        iConstant        =        multiplierNonZeroOddNumber;        int    iCONstant    =    multiplierNonZeroOddNumber;    int  iCONstant  =  multiplierNonZeroOddNumber;  int  iCONstant  =  multiplierNonZeroOddNumber;	  	non-compiled	[CE]  variable  iCONstant  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	4	None	add
322	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  *  1;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  *  1;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  *  1;	  int    iConstant    =    multiplierNonZeroOddNumber    +    1;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
323	[BUG]  [BUGGY]  if(testTransients  >  0)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  ReflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  if(testTransients  >  0)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  ReflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	if(testTransients  >  0)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  ReflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    ReflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
324	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber;  Int  iConstant  =  iTotal;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber;  Int  iConstant  =  iTotal;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  multiplierNonZeroOddNumber;  Int  iConstant  =  iTotal;	          int    iConstant    =    multiplierNonZeroOddNumber;    Int    iConstant    =    multiplierNonZeroOddNumber;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
325	[BUG]  [BUGGY]  int  iConstant  =  constructerNonZeroOddNumber  +  multiplierNonZeroOddNumber.length()  -  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  constructerNonZeroOddNumber  +  multiplierNonZeroOddNumber.length()  -  1;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  constructerNonZeroOddNumber  +  multiplierNonZeroOddNumber.length()  -  1;	  int    iConstant    =    constructerNonZeroOddNumber    +    multiplierNonZeroOddNumber.length();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
326	[BUG]  [BUGGY]  Int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.getItemCount();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  Int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.getItemCount();  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	Int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.getItemCount();	  int    iConstant    =    initialNonZeroOddNumber    +    clazz.getItemCount();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
327	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectionHashCode,  excludeFields);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectionHashCode,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectionHashCode,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    reflectUpToClass,    testTransients);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
328	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectionHashCode,  object,  testTransients,  excludeFields);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectionHashCode,  object,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectionHashCode,  object,  testTransients,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    reflectUpToClass,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
329	[BUG]  [BUGGY]  while  (clazz.getSuperclass()  ==  null  &&  clazz!=  reflectUpToClass)  {  while  (clazz.getSuperClass()  ==  null  &&  clazz!=  reflectUpToClass)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while  (clazz.getSuperclass()  ==  null  &&  clazz!=  reflectUpToClass)  {  while  (clazz.getSuperClass()  ==  null  &&  clazz!=  reflectUpToClass)  {  [BUGGY]      clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	while    (clazz.getSuperclass()    ==    null    &&    clazz!=    reflectUpToClass)    {    while  (clazz.getSuperClass()  ==  null  &&  clazz!=  reflectUpToClass)  {	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
330	[BUG]  [BUGGY]  while  (clazz.getSuperclass()  ==  null  &&  clazz!=  reflectUpToClass)  {  while  (clazz.getSuperclass()  ==  null  &&  clazz  >=  reflectUpToClass)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while  (clazz.getSuperclass()  ==  null  &&  clazz!=  reflectUpToClass)  {  while  (clazz.getSuperclass()  ==  null  &&  clazz  >=  reflectUpToClass)  {  [BUGGY]      clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	while    (clazz.getSuperclass()    ==    null    &&    clazz!=    reflectUpToClass)    {    while  (clazz.getSuperclass()  ==  null  &&  clazz  >=  reflectUpToClass)  {	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
331	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.testTransients,  iTotal;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.testTransients,  iTotal;  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.testTransients,  iTotal;	  int    iConstant    =    multiplierNonZeroOddNumber    +    clazz.testTransients;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
332	[BUG]  [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  ReflectionBuilder  <?>  builder  =  ReflectionBuilder.create(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  ReflectionBuilder  <?>  builder  =  ReflectionBuilder.create(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  ReflectionBuilder  <?>  builder  =  ReflectionBuilder.create(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    ReflectionBuilder    <?>    builder    =    ReflectionBuilder.create(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    reflectUpToClass,    excludeFields);    	non-compiled	[CE]  ')'  expected	92	None	replace
333	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  object);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  object);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  object);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multipleNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
334	[BUG]  [BUGGY]  ReflectionInterceptor  <?>  builder  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionInterceptor  <?>  builder  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionInterceptor  <?>  builder  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  if(testTransients)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    else    {    return    builder.toHashCode();    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
335	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients,  excludeFields);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplyerNonZeroOddNumber,    initialNonZeroOddNumber,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
336	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplicerNonZeroOddNumber,  multiplierNonZeroOddNumber,  object);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplicerNonZeroOddNumber,  multiplierNonZeroOddNumber,  object);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplicerNonZeroOddNumber,  multiplierNonZeroOddNumber,  object);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplicerNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
337	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass,  excludeFields).initCause(initialNonZeroOddNumber);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass,  excludeFields).initCause(initialNonZeroOddNumber);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass,  excludeFields).initCause(initialNonZeroOddNumber);	  reflectionAppend(object,    clazz,    builder,    testTransients,    reflectUpToClass,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
338	[BUG]  [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getSuperClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getSuperClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                while(clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        }        while(clazz.getClass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getClass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getSuperClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  timeout    	non-compiled	[CE]  cannot  find  symbol	32	None	add
339	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	add	                while(clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        }        while(clazz.getClass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getClass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  timeout    	compilable	timeout	32	1	add
340	[BUG]  [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  timeout  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]          while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	                while(clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        }        while(clazz.getClass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getClass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  timeout    	compilable	timeout	32	1	add
341	[BUG]  [BUGGY]  while(clazz!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz!=  null  &&  clazz!=  reflectionUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while(clazz!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz!=  null  &&  clazz!=  reflectionUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	while(clazz!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz!=  null  &&  clazz!=  reflectionUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
342	[BUG]  [BUGGY]  Class  <?>  clazz  =  clazz.getSuperclass();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  Class  <?>  clazz  =  clazz.getSuperclass();  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	Class  <?>  clazz  =  clazz.getSuperclass();	  if(testTransients)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
343	[BUG]  [BUGGY]  Class  <?>  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  Class  <?>  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	Class  <?>  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  if(testTransients)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
344	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(testTransients)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
345	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz,  testTransients,  reflectUpToClass,  excludeFields);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz,  testTransients,  reflectUpToClass,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  clazz,  testTransients,  reflectUpToClass,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients,    reflectUpToClass,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
346	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  objects,  testTransients,  reflectUpToClass,  excludeFields);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  objects,  testTransients,  reflectUpToClass,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  objects,  testTransients,  reflectUpToClass,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients,    reflectUpToClass,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
347	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClass(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  aughtExceptionHandler.handleMissingClass(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	aughtExceptionHandler.handleMissingClass(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);	  if(testTransients)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
348	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClass(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  aughtExceptionHandler.handleMissingClass(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	aughtExceptionHandler.handleMissingClass(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);	  if(testTransients)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
349	[BUG]  [BUGGY]  while(clazz!=  null  &&  clazz!=  ReflectionHashCode.class)  {  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  while(clazz!=  null  &&  clazz!=  ReflectionHashCode.class)  {  [BUGGY]      clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	while(clazz!=  null  &&  clazz!=  ReflectionHashCode.class)  {	  while    (clazz!=    null    &&    clazz!=    reflectUpToClass)    {    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
350	[BUG]  [BUGGY]  While(clazz.getSuperclass()!=  null)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  While(clazz.getSuperclass()!=  null)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	While(clazz.getSuperclass()!=  null)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  While(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  ';'  expected	106	None	replace
351	[BUG]  [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass);  }	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    reflectUpToClass);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
352	[BUG]  [BUGGY]  if(testTransients!=  null)  {  clazz  =  clazz.getSuperclass();  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);      [BUGGY]  if(testTransients!=  null)  {  clazz  =  clazz.getSuperclass();  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	362	362	1	replace	if(testTransients!=  null)  {  clazz  =  clazz.getSuperclass();  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz    =    clazz.getSuperclass();    reflectionAppend(Object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
