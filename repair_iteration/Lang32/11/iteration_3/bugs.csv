bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue        ==        null?        null        :        fieldValue);        builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	89	4	add
2	[BUG]  [BUGGY]  builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue        ==        null?        null        :        fieldValue);        builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	89	4	add
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue        ==        null?        null        :        fieldValue);        builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	89	4	add
4	[BUG]  [BUGGY]  builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue        ==        null?        null        :        fieldValue);        builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	89	4	add
5	[BUG]  [BUGGY]  builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  if(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  if(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue        ==        null?        null        :        fieldValue);        builder.append(fieldValue    ==    null?    null    :    fieldValue);    if(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);	  	non-compiled	[CE]  incompatible  types	89	None	add
6	[BUG]  [BUGGY]  builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  Builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  [CE]  cannot  find  symbol  Builder  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  Builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue        ==        null?        null        :        fieldValue);        builder.append(fieldValue    ==    null?    null    :    fieldValue);    Builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);	  	non-compiled	[CE]  cannot  find  symbol  Builder	89	None	add
7	[BUG]  [BUGGY]  builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  if(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  if(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue        ==        null?        null        :        fieldValue);        builder.append(fieldValue    ==    null?    null    :    fieldValue);    if(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);	  	non-compiled	[CE]  incompatible  types	89	None	add
8	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  builder.append( ".s.IFJDCS ".charAt(fieldValue.length()  -  1))  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [CE]  [FE]          AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  builder.append( ".s.IFJDCS ".charAt(fieldValue.length()  -  1))  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append('$');  builder.append( ".s.IFJDCS ".charAt(fieldValue.length()  -  1))  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  builder.append('$');    builder.append(   ".s.IFJDCS   ".charAt(fieldValue.length()    -    1))    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    	non-compiled	[CE]  	159	None	replace
9	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  builder.append('$');  builder.append( ".s.IFJDCS ".charAt(fieldValue.length()  -  1))  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append('$');  builder.append( ".s.IFJDCS ".charAt(fieldValue.length()  -  1))  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null)  {  builder.append('$');  builder.append( ".s.IFJDCS ".charAt(fieldValue.length()  -  1))  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  builder.append('$');    builder.append(   ".s.IFJDCS   ".charAt(fieldValue.length()    -    1))    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    	non-compiled	[CE]  	159	None	replace
10	[BUG]  [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append('$');  builder.append( ".s.IFJDCS ".charAt(fieldValue.length()  -  1))  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append('$');  builder.append( ".s.IFJDCS ".charAt(fieldValue.length()  -  1))  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  Field)  {  builder.append('$');  builder.append( ".s.IFJDCS ".charAt(fieldValue.length()  -  1))  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  builder.append('$');    builder.append(   ".s.IFJDCS   ".charAt(fieldValue.length()    -    1))    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    	non-compiled	[CE]  	159	None	replace
11	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())||(field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())||(field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())||(field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.	  if(fieldValue    ==    null)    {    if(!ArrayUtils.contains(excludeFields,    field.getName())    &&    (field.getName().indexOf('$')    ==    -1)    &&    useTransients    ||!Modifier.    	non-compiled	[CE]  <identifier>  expected	50	None	replace
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }	  builder.append(fieldValue.toString());    if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    	compilable	  [FE]  AssertionFailedError  	79	4	replace
13	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }	  builder.append(fieldValue.toString());    if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    	compilable	  [FE]  AssertionFailedError  	79	4	replace
14	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  ==  null)  {  builder.append(fieldValue.toString());  }	  builder.append(fieldValue.toString());    if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    	compilable	  [FE]  AssertionFailedError  	79	4	replace
15	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue.toString());  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null)  {  builder.append(fieldValue.toString());  }	  builder.append(fieldValue.toString());    if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    	compilable	  [FE]  AssertionFailedError  	79	4	replace
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(fieldValue.toString());    if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    	compilable	  [FE]  AssertionFailedError  	79	4	replace
17	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(fieldValue.toString());    if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    	compilable	  [FE]  AssertionFailedError  	79	4	replace
18	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue!=  null?  null  :  fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue!=  null?  null  :  fieldValue);  }	  builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue    ==    null?    null    :    fieldValue);    	compilable	  [FE]  AssertionFailedError  	19	4	replace
19	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue!=  null?  null  :  fieldValue);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue!=  null?  null  :  fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue!=  null?  null  :  fieldValue);  }	  builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue    ==    null?    null    :    fieldValue);    	compilable	  [FE]  AssertionFailedError  	19	4	replace
20	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    builder.append(fieldValue).append('_');  builder.append(fieldValue).append('_');  builder.append(fieldValue).append('_');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('_');        builder.append(fieldValue).append('_');    builder.append(fieldValue).append('_');  builder.append(fieldValue).append('_');	  	compilable	  [FE]  AssertionFailedError  	63	4	add
21	[BUG]  [BUGGY]  builder.append(fieldValue).append('_');    builder.append(fieldValue).append('_');  builder.append(fieldValue).append('_');  builder.append(fieldValue).append('_');  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    builder.append(fieldValue).append('_');  builder.append(fieldValue).append('_');  builder.append(fieldValue).append('_');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_');        builder.append(fieldValue).append('_');    builder.append(fieldValue).append('_');  builder.append(fieldValue).append('_');	  	compilable	  [FE]  AssertionFailedError  	63	4	add
22	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('_');        builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  builder.append(fieldValue).append('_');  }	  	compilable	  [FE]  AssertionFailedError  	63	4	add
23	[BUG]  [BUGGY]  builder.append(fieldValue).append('_');    builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  builder.append(fieldValue).append('_');  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_');        builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  builder.append(fieldValue).append('_');  }	  	compilable	  [FE]  AssertionFailedError  	63	4	add
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    builder.append(fieldValue).append('_');  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('_');        builder.append(fieldValue).append('_');    if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  builder.append(fieldValue).append('_');  }	  	compilable	  [FE]  AssertionFailedError  	63	4	add
25	[BUG]  [BUGGY]  builder.append(fieldValue).append('_');    builder.append(fieldValue).append('_');  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  builder.append(fieldValue).append('_');  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    builder.append(fieldValue).append('_');  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_');        builder.append(fieldValue).append('_');    if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  builder.append(fieldValue).append('_');  }	  	compilable	  [FE]  AssertionFailedError  	63	4	add
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    builder.append(fieldValue).append('_');  if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('_');  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('_');        builder.append(fieldValue).append('_');    if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('_');  builder.append(fieldValue).append('_');  }	  	compilable	  [FE]  AssertionFailedError  	63	4	add
27	[BUG]  [BUGGY]  builder.append(fieldValue).append('_');    builder.append(fieldValue).append('_');  if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('_');  builder.append(fieldValue).append('_');  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    builder.append(fieldValue).append('_');  if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('_');  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_');        builder.append(fieldValue).append('_');    if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('_');  builder.append(fieldValue).append('_');  }	  	compilable	  [FE]  AssertionFailedError  	63	4	add
28	[BUG]  [BUGGY]  builder.append(fieldValue).append('_');    builder.append(fieldValue).append('_');  Builder.append(fieldValue).append('_');  builder.append(fieldValue).append('_');  [CE]  cannot  find  symbol  Builder  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    builder.append(fieldValue).append('_');  Builder.append(fieldValue).append('_');  builder.append(fieldValue).append('_');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_');        builder.append(fieldValue).append('_');    Builder.append(fieldValue).append('_');  builder.append(fieldValue).append('_');	  	non-compiled	[CE]  cannot  find  symbol  Builder	63	None	add
29	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  ==  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(fieldValue.toString());    if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	172	4	replace
30	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(fieldValue.toString());    if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	172	4	replace
31	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append(     ",     ");    builder.append(fieldValue).append(',');  builder.append(fieldValue).append( ",   ");  builder.append(fieldValue).append(',');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append(       ",       ");        builder.append(fieldValue).append(',');    builder.append(fieldValue).append( ",   ");  builder.append(fieldValue).append(',');	  	compilable	  [FE]  AssertionFailedError  	173	4	add
32	[BUG]  [BUGGY]  builder.append(fieldValue).append(     ",     ");    builder.append(fieldValue).append(',');  builder.append(fieldValue).append( ",   ");  builder.append(fieldValue).append(',');  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append(     ",     ");    builder.append(fieldValue).append(',');  builder.append(fieldValue).append( ",   ");  builder.append(fieldValue).append(',');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append(       ",       ");        builder.append(fieldValue).append(',');    builder.append(fieldValue).append( ",   ");  builder.append(fieldValue).append(',');	  	compilable	  [FE]  AssertionFailedError  	173	4	add
33	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append(     ",     ");    builder.append(fieldValue).append(',');  builder.append(fieldValue).append( ".,   ");  builder.append(fieldValue).append(',');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append(       ",       ");        builder.append(fieldValue).append(',');    builder.append(fieldValue).append( ".,   ");  builder.append(fieldValue).append(',');	  	compilable	  [FE]  AssertionFailedError  	173	4	add
34	[BUG]  [BUGGY]  builder.append(fieldValue).append(     ",     ");    builder.append(fieldValue).append(',');  builder.append(fieldValue).append( ".,   ");  builder.append(fieldValue).append(',');  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append(     ",     ");    builder.append(fieldValue).append(',');  builder.append(fieldValue).append( ".,   ");  builder.append(fieldValue).append(',');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append(       ",       ");        builder.append(fieldValue).append(',');    builder.append(fieldValue).append( ".,   ");  builder.append(fieldValue).append(',');	  	compilable	  [FE]  AssertionFailedError  	173	4	add
35	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append(     ",     ");    builder.append(fieldValue).append(',');  builder.append(fieldValue).append(',');  builder.append(fieldValue).append(',');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append(       ",       ");        builder.append(fieldValue).append(',');    builder.append(fieldValue).append(',');  builder.append(fieldValue).append(',');	  	compilable	  [FE]  AssertionFailedError  	173	4	add
36	[BUG]  [BUGGY]  builder.append(fieldValue).append(     ",     ");    builder.append(fieldValue).append(',');  builder.append(fieldValue).append(',');  builder.append(fieldValue).append(',');  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append(     ",     ");    builder.append(fieldValue).append(',');  builder.append(fieldValue).append(',');  builder.append(fieldValue).append(',');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append(       ",       ");        builder.append(fieldValue).append(',');    builder.append(fieldValue).append(',');  builder.append(fieldValue).append(',');	  	compilable	  [FE]  AssertionFailedError  	173	4	add
37	[BUG]  [BUGGY]  Field[]  excludeFields  =  fieldValue.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }  [CE]  variable  excludeFields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  Field[]  excludeFields  =  fieldValue.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Field[]  excludeFields  =  fieldValue.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }	  Field[]    excludeFields    =    field.getexcludeFields();    for(int    i    =    0;    i    <    excludeFields.length;    i++)    {    builder.append(excludeFields[i]);    }    	non-compiled	[CE]  variable  excludeFields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	73	None	replace
38	[BUG]  [BUGGY]  Field[]  fields  =  fieldValue.getFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                  AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  Field[]  fields  =  fieldValue.getFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Field[]  fields  =  fieldValue.getFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }	  Field[]    excludeFields    =    field.getexcludeFields();    for(int    i    =    0;    i    <    excludeFields.length;    i++)    {    builder.append(excludeFields[i]);    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	73	None	replace
39	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append(     ",     ");    builder.append(fieldValue).append(   ".,     ");  builder.append(fieldValue).append( ",   ");  builder.append(fieldValue).append(   ".,   ");  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append(       ",       ");        builder.append(fieldValue).append(   ".,       ");    builder.append(fieldValue).append( ",   ");  builder.append(fieldValue).append(   ".,   ");	  	compilable	  [FE]  AssertionFailedError  	103	4	add
40	[BUG]  [BUGGY]  builder.append(fieldValue).append(     ",     ");    builder.append(fieldValue).append(   ".,     ");  builder.append(fieldValue).append( ",   ");  builder.append(fieldValue).append(   ".,   ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append(     ",     ");    builder.append(fieldValue).append(   ".,     ");  builder.append(fieldValue).append( ",   ");  builder.append(fieldValue).append(   ".,   ");  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append(       ",       ");        builder.append(fieldValue).append(   ".,       ");    builder.append(fieldValue).append( ",   ");  builder.append(fieldValue).append(   ".,   ");	  	compilable	  [FE]  AssertionFailedError  	103	4	add
41	[BUG]  [BUGGY]  builder.append(fieldValue.toString(),  fieldValue.toString(),  excludeFields);  [CE]  no  suitable  method  found  for  append(String,String,String[])  [FE]        AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString(),  fieldValue.toString(),  excludeFields);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString(),  fieldValue.toString(),  excludeFields);	  builder.append(fieldValue.toString(),    fieldValue.toString());    	non-compiled	[CE]  no  suitable  method  found  for  append(String,String,String[])	85	None	replace
42	[BUG]  [BUGGY]  builder.append(fieldValue.toString(),  fieldValue.toString(),  useTransients);  [CE]  no  suitable  method  found  for  append(String,String,boolean)  [FE]          AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString(),  fieldValue.toString(),  useTransients);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString(),  fieldValue.toString(),  useTransients);	  builder.append(fieldValue.toString(),    fieldValue.toString());    	non-compiled	[CE]  no  suitable  method  found  for  append(String,String,boolean)	85	None	replace
43	[BUG]  [BUGGY]  builder.append(fieldValue.toString(),  object.toString());  [CE]  no  suitable  method  found  for  append(String,String)  [FE]            AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString(),  object.toString());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString(),  object.toString());	  builder.append(fieldValue.toString(),    fieldValue.toString());    	non-compiled	[CE]  no  suitable  method  found  for  append(String,String)	85	None	replace
44	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.toString());  }	  builder.append(fieldValue.toString());    if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    builder.append(fieldValue.toString());    }    	compilable	  [FE]  AssertionFailedError  	129	4	replace
45	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.toString());  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.toString());  }	  builder.append(fieldValue.toString());    if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    builder.append(fieldValue.toString());    }    	compilable	  [FE]  AssertionFailedError  	129	4	replace
46	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  ==  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.toString());  }	  builder.append(fieldValue.toString());    if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    builder.append(fieldValue.toString());    }    	compilable	  [FE]  AssertionFailedError  	129	4	replace
47	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.toString());  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.toString());  }	  builder.append(fieldValue.toString());    if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    builder.append(fieldValue.toString());    }    	compilable	  [FE]  AssertionFailedError  	129	4	replace
48	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue.toString());  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue.toString());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue    ==    null?   "null   "    :    fieldValue.toString());    builder.append(fieldValue  ==  null?   "null   "  :  fieldValue.toString());	  	compilable	  [FE]  AssertionFailedError  	124	4	add
49	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue.toString());  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue.toString());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue.toString());  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue.toString());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue    ==    null?   "null   "    :    fieldValue.toString());    builder.append(fieldValue  ==  null?   "null   "  :  fieldValue.toString());	  	compilable	  [FE]  AssertionFailedError  	124	4	add
50	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue.toString());  if(fieldValue  ==  null?   "null   "  :  fieldValue.toString());  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue.toString());  if(fieldValue  ==  null?   "null   "  :  fieldValue.toString());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue    ==    null?   "null   "    :    fieldValue.toString());    if(fieldValue  ==  null?   "null   "  :  fieldValue.toString());	  	non-compiled	[CE]  incompatible  types	124	None	add
51	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue.toString());  builder.append(fieldValue  ==  null?   "null ",  :  fieldValue.toString());  [CE]  :  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue.toString());  builder.append(fieldValue  ==  null?   "null ",  :  fieldValue.toString());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue    ==    null?   "null   "    :    fieldValue.toString());    builder.append(fieldValue  ==  null?   "null ",  :  fieldValue.toString());	  	non-compiled	[CE]  :  expected	124	None	add
52	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue.toString());  builder.append(fieldValue!=  null?   "null   "  :  fieldValue.toString());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue    ==    null?   "null   "    :    fieldValue.toString());    builder.append(fieldValue!=  null?   "null   "  :  fieldValue.toString());	  	compilable	  [FE]  AssertionFailedError  	124	4	add
53	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue.toString());  builder.append(fieldValue!=  null?   "null   "  :  fieldValue.toString());  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue.toString());  builder.append(fieldValue!=  null?   "null   "  :  fieldValue.toString());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue    ==    null?   "null   "    :    fieldValue.toString());    builder.append(fieldValue!=  null?   "null   "  :  fieldValue.toString());	  	compilable	  [FE]  AssertionFailedError  	124	4	add
54	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.toString());  }  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.toString());  }  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    builder.append(fieldValue.toString());    }    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }	  	non-compiled	[CE]  'catch'  without  'try'	128	None	add
55	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.toString());  }  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.to  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.toString());  }  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.to  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    builder.append(fieldValue.toString());    }    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.to	  	non-compiled	[CE]  ')'  expected	128	None	add
56	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.toString());  }  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValu  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.toString());  }  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValu  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    builder.append(fieldValue.toString());    }    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValu	  	non-compiled	[CE]  ')'  expected	128	None	add
57	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.toString());  }  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.toString());  }  [CE]  'catch'  without  'try'  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.toString());  }  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    builder.append(fieldValue.toString());    }    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.toString());  }	  	non-compiled	[CE]  'catch'  without  'try'	128	None	add
58	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.toString());  }  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldVal  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.toString());  }  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldVal  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    builder.append(fieldValue.toString());    }    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldVal	  	non-compiled	[CE]  ')'  expected	128	None	add
59	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('$');        if(fieldValue!=    null)    {    builder.append('$');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }	  	compilable	  [FE]  AssertionFailedError  	59	4	add
60	[BUG]  [BUGGY]  builder.append('$');    if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');        if(fieldValue!=    null)    {    builder.append('$');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }	  	compilable	  [FE]  AssertionFailedError  	59	4	add
61	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue  ==  null)  {  builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('$');        if(fieldValue!=    null)    {    builder.append('$');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    if(fieldValue  ==  null)  {  builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }	  	compilable	  [FE]  AssertionFailedError  	59	4	add
62	[BUG]  [BUGGY]  builder.append('$');    if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue  ==  null)  {  builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue  ==  null)  {  builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');        if(fieldValue!=    null)    {    builder.append('$');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    if(fieldValue  ==  null)  {  builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }	  	compilable	  [FE]  AssertionFailedError  	59	4	add
63	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('$');        if(fieldValue!=    null)    {    builder.append('$');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	compilable	  [FE]  AssertionFailedError  	59	4	add
64	[BUG]  [BUGGY]  builder.append('$');    if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');        if(fieldValue!=    null)    {    builder.append('$');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	compilable	  [FE]  AssertionFailedError  	59	4	add
65	[BUG]  [BUGGY]  builder.append('$');    if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [CE]  'catch'  without  'try'  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');        if(fieldValue!=    null)    {    builder.append('$');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	non-compiled	[CE]  'catch'  without  'try'	59	None	add
66	[BUG]  [BUGGY]  builder.append('$');    if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue  ==  null)  {  builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [CE]  'catch'  without  'try'  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue  ==  null)  {  builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');        if(fieldValue!=    null)    {    builder.append('$');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    if(fieldValue  ==  null)  {  builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	non-compiled	[CE]  'catch'  without  'try'	59	None	add
67	[BUG]  [BUGGY]  [FE]  InternalError  [FE]    InternalError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('$');        if(fieldValue    ==    null)    {    builder.append('$');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }	  	compilable	  [FE]  InternalError  	61	4	add
68	[BUG]  [BUGGY]  builder.append('$');    if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }  [FE]  InternalError  [FE]    InternalError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');        if(fieldValue    ==    null)    {    builder.append('$');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }	  	compilable	  [FE]  InternalError  	61	4	add
69	[BUG]  [BUGGY]  [FE]  InternalError  [FE]      InternalError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('$');        if(fieldValue    ==    null)    {    builder.append('$');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	compilable	  [FE]  InternalError  	61	4	add
70	[BUG]  [BUGGY]  builder.append('$');    if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [FE]  InternalError  [FE]      InternalError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');        if(fieldValue    ==    null)    {    builder.append('$');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	compilable	  [FE]  InternalError  	61	4	add
71	[BUG]  [BUGGY]  [FE]  InternalError  [FE]        InternalError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue  ==  null)  {  builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('$');        if(fieldValue    ==    null)    {    builder.append('$');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    if(fieldValue  ==  null)  {  builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }	  	compilable	  [FE]  InternalError  	61	4	add
72	[BUG]  [BUGGY]  builder.append('$');    if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue  ==  null)  {  builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }  [FE]  InternalError  [FE]        InternalError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue  ==  null)  {  builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');        if(fieldValue    ==    null)    {    builder.append('$');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    if(fieldValue  ==  null)  {  builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }	  	compilable	  [FE]  InternalError  	61	4	add
73	[BUG]  [BUGGY]  [FE]  InternalError  [FE]          InternalError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('$');        if(fieldValue    ==    null)    {    builder.append('$');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	compilable	  [FE]  InternalError  	61	4	add
74	[BUG]  [BUGGY]  builder.append('$');    if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [FE]  InternalError  [FE]          InternalError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');        if(fieldValue    ==    null)    {    builder.append('$');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	compilable	  [FE]  InternalError  	61	4	add
75	[BUG]  [BUGGY]  [FE]  InternalError  [FE]            InternalError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('$');        if(fieldValue    ==    null)    {    builder.append('$');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	compilable	  [FE]  InternalError  	61	4	add
76	[BUG]  [BUGGY]  builder.append('$');    if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [FE]  InternalError  [FE]            InternalError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');        if(fieldValue    ==    null)    {    builder.append('$');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	compilable	  [FE]  InternalError  	61	4	add
77	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=  null?   "null   "  :  fieldValue.toString());  builder.append(fieldValue!=  null?   "null   "  :  fieldValue.toString());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue!=    null?   "null   "    :    fieldValue.toString());    builder.append(fieldValue!=  null?   "null   "  :  fieldValue.toString());	  	compilable	  [FE]  AssertionFailedError  	126	4	add
78	[BUG]  [BUGGY]  builder.append(fieldValue!=  null?   "null   "  :  fieldValue.toString());  builder.append(fieldValue!=  null?   "null   "  :  fieldValue.toString());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=  null?   "null   "  :  fieldValue.toString());  builder.append(fieldValue!=  null?   "null   "  :  fieldValue.toString());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=    null?   "null   "    :    fieldValue.toString());    builder.append(fieldValue!=  null?   "null   "  :  fieldValue.toString());	  	compilable	  [FE]  AssertionFailedError  	126	4	add
79	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=  null?   "null   "  :  fieldValue.toString());  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue.toString());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue!=    null?   "null   "    :    fieldValue.toString());    builder.append(fieldValue  ==  null?   "null   "  :  fieldValue.toString());	  	compilable	  [FE]  AssertionFailedError  	126	4	add
80	[BUG]  [BUGGY]  builder.append(fieldValue!=  null?   "null   "  :  fieldValue.toString());  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue.toString());  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=  null?   "null   "  :  fieldValue.toString());  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue.toString());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=    null?   "null   "    :    fieldValue.toString());    builder.append(fieldValue  ==  null?   "null   "  :  fieldValue.toString());	  	compilable	  [FE]  AssertionFailedError  	126	4	add
81	[BUG]  [BUGGY]  builder.append(fieldValue!=  null?   "null   "  :  fieldValue.toString());  if(fieldValue!=  null?   "null   "  :  fieldValue.toString());  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=  null?   "null   "  :  fieldValue.toString());  if(fieldValue!=  null?   "null   "  :  fieldValue.toString());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=    null?   "null   "    :    fieldValue.toString());    if(fieldValue!=  null?   "null   "  :  fieldValue.toString());	  	non-compiled	[CE]  incompatible  types	126	None	add
82	[BUG]  [BUGGY]  builder.append(fieldValue!=  null?   "null   "  :  fieldValue.toString());  builder.append(fieldValue!=  null?   "null ",  :  fieldValue.toString());  [CE]  :  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=  null?   "null   "  :  fieldValue.toString());  builder.append(fieldValue!=  null?   "null ",  :  fieldValue.toString());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=    null?   "null   "    :    fieldValue.toString());    builder.append(fieldValue!=  null?   "null ",  :  fieldValue.toString());	  	non-compiled	[CE]  :  expected	126	None	add
83	[BUG]  [BUGGY]  [FE]  InternalError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  builder.append(fieldValue).append('_');    if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    	compilable	  [FE]  InternalError  	70	4	replace
84	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [FE]  InternalError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  builder.append(fieldValue).append('_');    if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    	compilable	  [FE]  InternalError  	70	4	replace
85	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  }	  builder.append(fieldValue).append('_');    if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    	compilable	  [FE]  AssertionFailedError  	70	4	replace
86	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  }	  builder.append(fieldValue).append('_');    if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    	compilable	  [FE]  AssertionFailedError  	70	4	replace
87	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('/');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue).append('/');  }	  builder.append(fieldValue).append('/');    	compilable	  [FE]  AssertionFailedError  	176	4	replace
88	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('/');  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('/');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue).append('/');  }	  builder.append(fieldValue).append('/');    	compilable	  [FE]  AssertionFailedError  	176	4	replace
89	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('/');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue).append('/');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(fieldValue).append('/');    	compilable	  [FE]  AssertionFailedError  	176	4	replace
90	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('/');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('/');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue).append('/');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(fieldValue).append('/');    	compilable	  [FE]  AssertionFailedError  	176	4	replace
91	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('/');  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue).append('/');  }  else  {  throw  new  IllegalStateException( " ");  }	  builder.append(fieldValue).append('/');    	compilable	  [FE]  AssertionFailedError  	176	4	replace
92	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('/');  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('/');  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue).append('/');  }  else  {  throw  new  IllegalStateException( " ");  }	  builder.append(fieldValue).append('/');    	compilable	  [FE]  AssertionFailedError  	176	4	replace
93	[BUG]  [BUGGY]  builder.append('$',  fieldValue,  iTotal);  [CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context  [FE]          AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$',  fieldValue,  iTotal);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$',  fieldValue,  iTotal);	  builder.append('$',    fieldValue);    	non-compiled	[CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context	15	None	replace
94	[BUG]  [BUGGY]  builder.append('$',  fieldValue,  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]            AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$',  fieldValue,  iConstant);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$',  fieldValue,  iConstant);	  builder.append('$',    fieldValue);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	15	None	replace
95	[BUG]  [BUGGY]  builder.append('$',  fieldValue,  excludeFields);  [CE]  no  suitable  method  found  for  append(char,Object,String[])  [FE]              AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$',  fieldValue,  excludeFields);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$',  fieldValue,  excludeFields);	  builder.append('$',    fieldValue);    	non-compiled	[CE]  no  suitable  method  found  for  append(char,Object,String[])	15	None	replace
96	[BUG]  [BUGGY]  builder.append('$',  fieldValue,  useTransients);  [CE]  no  suitable  method  found  for  append(char,Object,boolean)  [FE]                AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$',  fieldValue,  useTransients);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$',  fieldValue,  useTransients);	  builder.append('$',    fieldValue);    	non-compiled	[CE]  no  suitable  method  found  for  append(char,Object,boolean)	15	None	replace
97	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }	  builder.append(fieldValue.getClass());    if(fieldValue.getClass()!=    null)    {    builder.append(fieldValue.getClass());    }    	compilable	  [FE]  AssertionFailedError  	36	4	replace
98	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }	  builder.append(fieldValue.getClass());    if(fieldValue.getClass()!=    null)    {    builder.append(fieldValue.getClass());    }    	compilable	  [FE]  AssertionFailedError  	36	4	replace
99	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }	  builder.append(fieldValue.getClass());    if(fieldValue.getClass()!=    null)    {    builder.append(fieldValue.getClass());    }    	compilable	  [FE]  AssertionFailedError  	36	4	replace
100	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }	  builder.append(fieldValue.getClass());    if(fieldValue.getClass()!=    null)    {    builder.append(fieldValue.getClass());    }    	compilable	  [FE]  AssertionFailedError  	36	4	replace
101	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null  ||  fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null  ||  fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }	  builder.append(fieldValue.getClass());    if(fieldValue.getClass()!=    null)    {    builder.append(fieldValue.getClass());    }    	compilable	  [FE]  AssertionFailedError  	36	4	replace
102	[BUG]  [BUGGY]  if(fieldValue!=  null  ||  fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null  ||  fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null  ||  fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }	  builder.append(fieldValue.getClass());    if(fieldValue.getClass()!=    null)    {    builder.append(fieldValue.getClass());    }    	compilable	  [FE]  AssertionFailedError  	36	4	replace
103	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(fieldValue.getClass());    if(fieldValue.getClass()!=    null)    {    builder.append(fieldValue.getClass());    }    	compilable	  [FE]  AssertionFailedError  	36	4	replace
104	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(fieldValue.getClass());    if(fieldValue.getClass()!=    null)    {    builder.append(fieldValue.getClass());    }    	compilable	  [FE]  AssertionFailedError  	36	4	replace
105	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('$');  builder.append(fieldValue).append('$');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('$');    builder.append(fieldValue).append('$');	  	compilable	  [FE]  AssertionFailedError  	139	4	add
106	[BUG]  [BUGGY]  builder.append(fieldValue).append('$');  builder.append(fieldValue).append('$');  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('$');  builder.append(fieldValue).append('$');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('$');    builder.append(fieldValue).append('$');	  	compilable	  [FE]  AssertionFailedError  	139	4	add
107	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('$');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('$');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('$');  }	  	compilable	  [FE]  AssertionFailedError  	139	4	add
108	[BUG]  [BUGGY]  builder.append(fieldValue).append('$');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('$');  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('$');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('$');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('$');  }	  	compilable	  [FE]  AssertionFailedError  	139	4	add
109	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('$');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('$');  }  else  {  builder.append(fieldValue).append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('$');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('$');  }  else  {  builder.append(fieldValue).append('$');  }	  	compilable	  [FE]  AssertionFailedError  	139	4	add
110	[BUG]  [BUGGY]  builder.append(fieldValue).append('$');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('$');  }  else  {  builder.append(fieldValue).append('$');  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('$');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('$');  }  else  {  builder.append(fieldValue).append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('$');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('$');  }  else  {  builder.append(fieldValue).append('$');  }	  	compilable	  [FE]  AssertionFailedError  	139	4	add
111	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('$');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('$');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	compilable	  [FE]  AssertionFailedError  	139	4	add
112	[BUG]  [BUGGY]  builder.append(fieldValue).append('$');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('$');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('$');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	compilable	  [FE]  AssertionFailedError  	139	4	add
113	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('$');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('$');  }  else  {  builder.append(fieldValue).append('[');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('$');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('$');  }  else  {  builder.append(fieldValue).append('[');  }	  	compilable	  [FE]  AssertionFailedError  	139	4	add
114	[BUG]  [BUGGY]  builder.append(fieldValue).append('$');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('$');  }  else  {  builder.append(fieldValue).append('[');  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('$');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('$');  }  else  {  builder.append(fieldValue).append('[');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('$');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('$');  }  else  {  builder.append(fieldValue).append('[');  }	  	compilable	  [FE]  AssertionFailedError  	139	4	add
115	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue!=        null?        null        :        fieldValue);        builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	18	4	add
116	[BUG]  [BUGGY]  builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=        null?        null        :        fieldValue);        builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	18	4	add
117	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue!=        null?        null        :        fieldValue);        builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	18	4	add
118	[BUG]  [BUGGY]  builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=        null?        null        :        fieldValue);        builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	18	4	add
119	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue!=        null?        null        :        fieldValue);        builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	18	4	add
120	[BUG]  [BUGGY]  builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=        null?        null        :        fieldValue);        builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	18	4	add
121	[BUG]  [BUGGY]  builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  Builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  [CE]  cannot  find  symbol  Builder  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  Builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=        null?        null        :        fieldValue);        builder.append(fieldValue    ==    null?    null    :    fieldValue);    Builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);	  	non-compiled	[CE]  cannot  find  symbol  Builder	18	None	add
122	[BUG]  [BUGGY]  builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  if(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  if(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=        null?        null        :        fieldValue);        builder.append(fieldValue    ==    null?    null    :    fieldValue);    if(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);	  	non-compiled	[CE]  incompatible  types	18	None	add
123	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException.   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException.   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException.   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.	  	non-compiled	[CE]  unclosed  string  literal	169	None	add
124	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException.   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.   ");  }  [CE]  'catch'  without  'try'  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException.   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.   ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException.   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.   ");  }	  	non-compiled	[CE]  'catch'  without  'try'	169	None	add
125	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException.   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  Il  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException.   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  Il  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException.   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  Il	  	non-compiled	[CE]  unclosed  string  literal	169	None	add
126	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException.   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  [CE]  'catch'  without  'try'  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException.   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException.   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }	  	non-compiled	[CE]  'catch'  without  'try'	169	None	add
127	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException.   ");  }  if(fieldValue  ==  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.  [CE]  unclosed  string  literal  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException.   ");  }  if(fieldValue  ==  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException.   ");    }    if(fieldValue  ==  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.	  	non-compiled	[CE]  unclosed  string  literal	169	None	add
128	[BUG]  [BUGGY]  'catch'  without  'try'  [CE]  unclosed  character  literal  [FE]          AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  'catch'  without  'try'  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	'catch'  without  'try'	  builder.append(fieldValue.getClass());    if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    Class    <?>[]    fields    =    fieldValue.getFields();    for(int    i    =    0;    i    <    fields.length;    ++i)    {    	non-compiled	[CE]  unclosed  character  literal	162	None	replace
129	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  Class  <?>[]  fields  =  fieldValue.getFields();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  [CE]  'catch'  without  'try'  [FE]            AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  Class  <?>[]  fields  =  fieldValue.getFields();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  Class  <?>[]  fields  =  fieldValue.getFields();  for(int  i  =  0;  i  <  fields.length;  ++i)  {	  builder.append(fieldValue.getClass());    if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    Class    <?>[]    fields    =    fieldValue.getFields();    for(int    i    =    0;    i    <    fields.length;    ++i)    {    	non-compiled	[CE]  'catch'  without  'try'	162	None	replace
130	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  else  {  Class  <?>[]  fields  =  fieldValue.getFields();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  [CE]  'catch'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  else  {  Class  <?>[]  fields  =  fieldValue.getFields();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  else  {  Class  <?>[]  fields  =  fieldValue.getFields();  for(int  i  =  0;  i  <  fields.length;  ++i)  {	  builder.append(fieldValue.getClass());    if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    Class    <?>[]    fields    =    fieldValue.getFields();    for(int    i    =    0;    i    <    fields.length;    ++i)    {    	non-compiled	[CE]  'catch'  without  'try'	162	None	replace
131	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  [CE]  'catch'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }	  builder.append(fieldValue.getClass());    if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    Class    <?>[]    fields    =    fieldValue.getFields();    for(int    i    =    0;    i    <    fields.length;    ++i)    {    	non-compiled	[CE]  'catch'  without  'try'	162	None	replace
132	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  builder.append(fieldValue.toString());    if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    	compilable	  [FE]  AssertionFailedError  	84	4	replace
133	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  builder.append(fieldValue.toString());    if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    	compilable	  [FE]  AssertionFailedError  	84	4	replace
134	[BUG]  [BUGGY]  [FE]  InternalError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  ==  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  builder.append(fieldValue.toString());    if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    	compilable	  [FE]  InternalError  	84	4	replace
135	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [FE]  InternalError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  builder.append(fieldValue.toString());    if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    	compilable	  [FE]  InternalError  	84	4	replace
136	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('_');  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('_');  builder.append(fieldValue).append('_');  }	  builder.append(fieldValue).append('_');    builder.append(fieldValue).append('_');    	compilable	  [FE]  AssertionFailedError  	64	4	replace
137	[BUG]  [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('_');  builder.append(fieldValue).append('_');  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('_');  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('_');  builder.append(fieldValue).append('_');  }	  builder.append(fieldValue).append('_');    builder.append(fieldValue).append('_');    	compilable	  [FE]  AssertionFailedError  	64	4	replace
138	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }	  builder.append(fieldValue).append('_');    builder.append(fieldValue).append('_');    	compilable	  [FE]  AssertionFailedError  	64	4	replace
139	[BUG]  [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }	  builder.append(fieldValue).append('_');    builder.append(fieldValue).append('_');    	compilable	  [FE]  AssertionFailedError  	64	4	replace
140	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }	  builder.append(fieldValue).append('_');    builder.append(fieldValue).append('_');    	compilable	  [FE]  AssertionFailedError  	64	4	replace
141	[BUG]  [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }	  builder.append(fieldValue).append('_');    builder.append(fieldValue).append('_');    	compilable	  [FE]  AssertionFailedError  	64	4	replace
142	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }	  builder.append(fieldValue).append('_');    if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    builder.append(fieldValue).append('_');    }    	compilable	  [FE]  AssertionFailedError  	68	4	replace
143	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }	  builder.append(fieldValue).append('_');    if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    builder.append(fieldValue).append('_');    }    	compilable	  [FE]  AssertionFailedError  	68	4	replace
144	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }	  builder.append(fieldValue).append('_');    if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    builder.append(fieldValue).append('_');    }    	compilable	  [FE]  AssertionFailedError  	68	4	replace
145	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }	  builder.append(fieldValue).append('_');    if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    builder.append(fieldValue).append('_');    }    	compilable	  [FE]  AssertionFailedError  	68	4	replace
146	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException.   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.   ");  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException.   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.   ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException.   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.   ");  }	  	non-compiled	[CE]  'catch'  without  'try'	160	None	add
147	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException.   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException.   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException.   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.	  	non-compiled	[CE]  unclosed  string  literal	160	None	add
148	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException.   ");  }  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.   ");  }  [CE]  'catch'  without  'try'  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException.   ");  }  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.   ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException.   ");    }    if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.   ");  }	  	non-compiled	[CE]  'catch'  without  'try'	160	None	add
149	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException.   ");  }  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.   ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.getClass());        if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException.   ");    }    builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.   ");  }	  	compilable	  [FE]  AssertionFailedError  	160	4	add
150	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException.   ");  }  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.   ");  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException.   ");  }  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.   ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException.   ");    }    builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.   ");  }	  	compilable	  [FE]  AssertionFailedError  	160	4	add
151	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException.   ");  }  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.  [CE]  unclosed  string  literal  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException.   ");  }  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException.   ");    }    if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.	  	non-compiled	[CE]  unclosed  string  literal	160	None	add
152	[BUG]  [BUGGY]  [FE]  InternalError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  field  value: "  +  fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  field  value: "  +  fieldValue);  }	  if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    InternalError(   "Unexpected    field    value:   "    +    fieldValue);    }    	compilable	  [FE]  InternalError  	12	4	replace
153	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  field  value: "  +  fieldValue);  }  [FE]  InternalError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  field  value: "  +  fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  field  value: "  +  fieldValue);  }	  if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    InternalError(   "Unexpected    field    value:   "    +    fieldValue);    }    	compilable	  [FE]  InternalError  	12	4	replace
154	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  field  value: "  +  fieldValue);  }  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  field  value: "  +  fieldValue);  }  }	  if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    InternalError(   "Unexpected    field    value:   "    +    fieldValue);    }    	compilable	  [FE]  AssertionFailedError  	12	4	replace
155	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  field  value: "  +  fieldValue);  }  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  field  value: "  +  fieldValue);  }  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  field  value: "  +  fieldValue);  }  }	  if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    InternalError(   "Unexpected    field    value:   "    +    fieldValue);    }    	compilable	  [FE]  AssertionFailedError  	12	4	replace
156	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue);  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue    ==    null?   "null   "    :    fieldValue);    builder.append(fieldValue  ==  null?   "null   "  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	180	4	add
157	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue);  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue);  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue    ==    null?   "null   "    :    fieldValue);    builder.append(fieldValue  ==  null?   "null   "  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	180	4	add
158	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue);  builder.append(fieldValue  ==  null?   "null ",  :  fieldValue);  [CE]  :  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue);  builder.append(fieldValue  ==  null?   "null ",  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue    ==    null?   "null   "    :    fieldValue);    builder.append(fieldValue  ==  null?   "null ",  :  fieldValue);	  	non-compiled	[CE]  :  expected	180	None	add
159	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue);  builder.append(fieldValue!=  null?   "null   "  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue    ==    null?   "null   "    :    fieldValue);    builder.append(fieldValue!=  null?   "null   "  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	180	4	add
160	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue);  builder.append(fieldValue!=  null?   "null   "  :  fieldValue);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue);  builder.append(fieldValue!=  null?   "null   "  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue    ==    null?   "null   "    :    fieldValue);    builder.append(fieldValue!=  null?   "null   "  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	180	4	add
161	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue);  if(fieldValue  ==  null?   "null   "  :  fieldValue);  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue);  if(fieldValue  ==  null?   "null   "  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue    ==    null?   "null   "    :    fieldValue);    if(fieldValue  ==  null?   "null   "  :  fieldValue);	  	non-compiled	[CE]  incompatible  types	180	None	add
162	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  AssertionFailedError  	9	4	add
163	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  AssertionFailedError  	9	4	add
164	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	9	None	add
165	[BUG]  [BUGGY]  String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('  }	  if(fieldValue    ==    null)    {    String[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iTotal++)    {    builder.append('    }    	non-compiled	[CE]  ')'  expected	110	None	replace
166	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	non-compiled	[CE]  'catch'  without  'try'	83	None	add
167	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  Il  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  Il  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  Il	  	non-compiled	[CE]  unclosed  string  literal	83	None	add
168	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  [CE]  'catch'  without  'try'  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }	  	non-compiled	[CE]  'catch'  without  'try'	83	None	add
169	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue  ==  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [CE]  'catch'  without  'try'  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue  ==  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    if(fieldValue  ==  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	non-compiled	[CE]  'catch'  without  'try'	83	None	add
170	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(object.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [CE]  'catch'  without  'try'  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(object.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    if(fieldValue!=  null)  {  builder.append(object.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	non-compiled	[CE]  'catch'  without  'try'	83	None	add
171	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_').append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue).append('_').append('_');  }	  builder.append(fieldValue).append('_').append('_');    	compilable	  [FE]  AssertionFailedError  	150	4	replace
172	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_').append('_');  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_').append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue).append('_').append('_');  }	  builder.append(fieldValue).append('_').append('_');    	compilable	  [FE]  AssertionFailedError  	150	4	replace
173	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_').append('_');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue).append('_').append('_');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(fieldValue).append('_').append('_');    	compilable	  [FE]  AssertionFailedError  	150	4	replace
174	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_').append('_');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_').append('_');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue).append('_').append('_');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(fieldValue).append('_').append('_');    	compilable	  [FE]  AssertionFailedError  	150	4	replace
175	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_').append('_');  }  else  {  return;  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue).append('_').append('_');  }  else  {  return;  }	  builder.append(fieldValue).append('_').append('_');    	compilable	  [FE]  AssertionFailedError  	150	4	replace
176	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_').append('_');  }  else  {  return;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_').append('_');  }  else  {  return;  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue).append('_').append('_');  }  else  {  return;  }	  builder.append(fieldValue).append('_').append('_');    	compilable	  [FE]  AssertionFailedError  	150	4	replace
177	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  (useTransients  ||  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  (useTransients  ||  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  (useTransients  ||	  if(fieldValue!=    null)    {    if(!ArrayUtils.contains(excludeFields,    field.getName())    &&(field.getName().indexOf('$')    ==    -1)    &&    (useTransients    ||!    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
178	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  'catch'  without  'try'	171	None	add
179	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  [CE]  'catch'  without  'try'  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }	  	non-compiled	[CE]  'catch'  without  'try'	171	None	add
180	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue  ==  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'catch'  without  'try'  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue  ==  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(fieldValue  ==  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  'catch'  without  'try'	171	None	add
181	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue  ==  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  [CE]  'catch'  without  'try'  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue  ==  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(fieldValue  ==  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }	  	non-compiled	[CE]  'catch'  without  'try'	171	None	add
182	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(object.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'catch'  without  'try'  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(object.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(fieldValue!=  null)  {  builder.append(object.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  'catch'  without  'try'	171	None	add
183	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }	  	non-compiled	[CE]  'catch'  without  'try'	25	None	add
184	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('n');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }	  	compilable	  [FE]  AssertionFailedError  	25	4	add
185	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }	  	compilable	  [FE]  AssertionFailedError  	25	4	add
186	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  [CE]  'catch'  without  'try'  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }	  	non-compiled	[CE]  'catch'  without  'try'	25	None	add
187	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('n');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }	  	compilable	  [FE]  AssertionFailedError  	25	4	add
188	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }	  	compilable	  [FE]  AssertionFailedError  	25	4	add
189	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('  [CE]  illegal  line  end  in  character  literal  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('	  	non-compiled	[CE]  illegal  line  end  in  character  literal	25	None	add
190	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.   ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.   ");  }	  builder.append(fieldValue.getClass());    if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException.   ");    }    	compilable	  [FE]  AssertionFailedError  	161	4	replace
191	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.   ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.   ");  }	  builder.append(fieldValue.getClass());    if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException.   ");    }    	compilable	  [FE]  AssertionFailedError  	161	4	replace
192	[BUG]  [BUGGY]  builder.append(fieldValue).append('n')/  1;  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n')/  1;  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n')/  1;	  builder.append(fieldValue).append('n')+    1;    	non-compiled	[CE]  not  a  statement	141	None	replace
193	[BUG]  [BUGGY]  builder.append(fieldValue).append('n')+  2;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n')+  2;  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n')+  2;	  builder.append(fieldValue).append('n')+    1;    	non-compiled	[CE]  not  a  statement	141	None	replace
194	[BUG]  [BUGGY]  builder.append(fieldValue).append('n')/  2  +  1;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n')/  2  +  1;  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n')/  2  +  1;	  builder.append(fieldValue).append('n')+    1;    	non-compiled	[CE]  not  a  statement	141	None	replace
195	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null)  {  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('  }	  if(fieldValue!=    null)    {    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iTotal++)    {    builder.append('    }    	non-compiled	[CE]  ')'  expected	184	None	replace
196	[BUG]  [BUGGY]  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('  }	  if(fieldValue!=    null)    {    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iTotal++)    {    builder.append('    }    	non-compiled	[CE]  ')'  expected	184	None	replace
197	[BUG]  [BUGGY]  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iTotal;  iTotal++)  {  builder.append('  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iTotal;  iTotal++)  {  builder.append('  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iTotal;  iTotal++)  {  builder.append('  }	  if(fieldValue!=    null)    {    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iTotal++)    {    builder.append('    }    	non-compiled	[CE]  ')'  expected	184	None	replace
198	[BUG]  [BUGGY]  Field[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append( ",   ");  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  Field[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append( ",   ");  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Field[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append( ",   ");  }	  Field[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iConstant++)    {    builder.append(   ",       ");    }    	non-compiled	[CE]  	43	None	replace
199	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  }	  builder.append(fieldValue).append('n');    if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    	compilable	  [FE]  AssertionFailedError  	26	4	replace
200	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  }	  builder.append(fieldValue).append('n');    if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    	compilable	  [FE]  AssertionFailedError  	26	4	replace
201	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append('n');  }	  builder.append(fieldValue).append('n');    if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    	compilable	  [FE]  AssertionFailedError  	26	4	replace
202	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append('n');  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append('n');  }	  builder.append(fieldValue).append('n');    if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    	compilable	  [FE]  AssertionFailedError  	26	4	replace
203	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append('n');  builder.append(fieldValue).append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  instanceof  Field)  {  builder.append('n');  builder.append(fieldValue).append('n');  }	  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');    	compilable	  [FE]  AssertionFailedError  	24	4	replace
204	[BUG]  [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append('n');  builder.append(fieldValue).append('n');  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append('n');  builder.append(fieldValue).append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  Field)  {  builder.append('n');  builder.append(fieldValue).append('n');  }	  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');    	compilable	  [FE]  AssertionFailedError  	24	4	replace
205	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('n');  }  else  {  builder.append(fieldValue).append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('n');  }  else  {  builder.append(fieldValue).append('n');  }	  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');    	compilable	  [FE]  AssertionFailedError  	24	4	replace
206	[BUG]  [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('n');  }  else  {  builder.append(fieldValue).append('n');  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('n');  }  else  {  builder.append(fieldValue).append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('n');  }  else  {  builder.append(fieldValue).append('n');  }	  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');    	compilable	  [FE]  AssertionFailedError  	24	4	replace
207	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  }  else  {  Class  <?>  clazz  =  fieldValue.getComponentType();  builder.append(clazz.getName());  }  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]        AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  }  else  {  Class  <?>  clazz  =  fieldValue.getComponentType();  builder.append(clazz.getName());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append('$');  }  else  {  Class  <?>  clazz  =  fieldValue.getComponentType();  builder.append(clazz.getName());  }	  builder.append('$');    if(fieldValue!=    null)    {    builder.append('$');    }    else    {    Class    <?>    clazz    =    fieldValue.getComponentType();    builder.append(clazz.getName());    }    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	158	None	replace
208	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  Class  <?>  clazz  =  fieldValue.getComponentType();  builder.append(clazz.getName());  }  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]          AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  Class  <?>  clazz  =  fieldValue.getComponentType();  builder.append(clazz.getName());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  Class  <?>  clazz  =  fieldValue.getComponentType();  builder.append(clazz.getName());  }	  builder.append('$');    if(fieldValue!=    null)    {    builder.append('$');    }    else    {    Class    <?>    clazz    =    fieldValue.getComponentType();    builder.append(clazz.getName());    }    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	158	None	replace
209	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  ==  null)  {  builder.append('$');  }	  builder.append('$');    if(fieldValue!=    null)    {    builder.append('$');    }    else    {    Class    <?>    clazz    =    fieldValue.getComponentType();    builder.append(clazz.getName());    }    	compilable	  [FE]  AssertionFailedError  	158	4	replace
210	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  builder.append('$');  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null)  {  builder.append('$');  }	  builder.append('$');    if(fieldValue!=    null)    {    builder.append('$');    }    else    {    Class    <?>    clazz    =    fieldValue.getComponentType();    builder.append(clazz.getName());    }    	compilable	  [FE]  AssertionFailedError  	158	4	replace
211	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	non-compiled	[CE]  'catch'  without  'try'	41	None	add
212	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [CE]  'catch'  without  'try'  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	non-compiled	[CE]  'catch'  without  'try'	41	None	add
213	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.getClass());        if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }	  	compilable	  [FE]  AssertionFailedError  	41	4	add
214	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }	  	compilable	  [FE]  AssertionFailedError  	41	4	add
215	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.getClass());        if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	compilable	  [FE]  AssertionFailedError  	41	4	add
216	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	compilable	  [FE]  AssertionFailedError  	41	4	add
217	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  [CE]  'catch'  without  'try'  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }	  	non-compiled	[CE]  'catch'  without  'try'	41	None	add
218	[BUG]  [BUGGY]  if(fieldValue  ==  null?  null  :  fieldValue);  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null?  null  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null?  null  :  fieldValue);	  builder.append(fieldValue    ==    null?    null    :    fieldValue);    if(fieldValue    ==    null?    null    :    fieldValue);    	non-compiled	[CE]  incompatible  types	93	None	replace
219	[BUG]  [BUGGY]  if(fieldValue  ==  null?  null  :  fieldValue.toString())  {  builder.append(fieldValue  ==  null?  null  :  fieldValue);  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null?  null  :  fieldValue.toString())  {  builder.append(fieldValue  ==  null?  null  :  fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null?  null  :  fieldValue.toString())  {  builder.append(fieldValue  ==  null?  null  :  fieldValue);  }	  builder.append(fieldValue    ==    null?    null    :    fieldValue);    if(fieldValue    ==    null?    null    :    fieldValue);    	non-compiled	[CE]  incompatible  types	93	None	replace
220	[BUG]  [BUGGY]  if(fieldValue  ==  null?  null  :  fieldValue.getClass())  {  builder.append(fieldValue);  }  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null?  null  :  fieldValue.getClass())  {  builder.append(fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null?  null  :  fieldValue.getClass())  {  builder.append(fieldValue);  }	  builder.append(fieldValue    ==    null?    null    :    fieldValue);    if(fieldValue    ==    null?    null    :    fieldValue);    	non-compiled	[CE]  incompatible  types	93	None	replace
221	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue  ==  null?  null  :  fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  ==  null)  {  builder.append(fieldValue  ==  null?  null  :  fieldValue);  }	  builder.append(fieldValue    ==    null?    null    :    fieldValue);    if(fieldValue    ==    null?    null    :    fieldValue);    	compilable	  [FE]  AssertionFailedError  	93	4	replace
222	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue  ==  null?  null  :  fieldValue);  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue  ==  null?  null  :  fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null)  {  builder.append(fieldValue  ==  null?  null  :  fieldValue);  }	  builder.append(fieldValue    ==    null?    null    :    fieldValue);    if(fieldValue    ==    null?    null    :    fieldValue);    	compilable	  [FE]  AssertionFailedError  	93	4	replace
223	[BUG]  [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  if(!ArrayUtils.contains(excludeFields,  field.getName())  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  if(!ArrayUtils.contains(excludeFields,  field.getName())  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  if(!ArrayUtils.contains(excludeFields,  field.getName())	  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');    if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&    useTransients    ||!    	non-compiled	[CE]  ')'  expected	166	None	replace
224	[BUG]  [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  if(!ArrayUtils.contains(excludeFields,  field.getName())  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  if(!ArrayUtils.contains(excludeFields,  field.getName())  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  if(!ArrayUtils.contains(excludeFields,  field.getName())	  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');    if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&    useTransients    ||!    	non-compiled	[CE]  ')'  expected	166	None	replace
225	[BUG]  [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  if(!ArrayUtils.contains(excludeFields,  field.getName())&&	  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');    if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&    useTransients    ||!    	non-compiled	[CE]  illegal  start  of  expression	166	None	replace
226	[BUG]  [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  if(!ArrayUtils.contains(excludeFields,  field.getName())&&	  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');    if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&    useTransients    ||!    	non-compiled	[CE]  illegal  start  of  expression	166	None	replace
227	[BUG]  [BUGGY]  builder.append(fieldValue).append('_')/  2  +  1;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_')/  2  +  1;  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_')/  2  +  1;	  builder.append(fieldValue).append('_')+    1;    	non-compiled	[CE]  not  a  statement	152	None	replace
228	[BUG]  [BUGGY]  builder.append(fieldValue).append('_')/  1;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_')/  1;  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_')/  1;	  builder.append(fieldValue).append('_')+    1;    	non-compiled	[CE]  not  a  statement	152	None	replace
229	[BUG]  [BUGGY]  builder.append(fieldValue).append('_')+  2;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_')+  2;  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_')+  2;	  builder.append(fieldValue).append('_')+    1;    	non-compiled	[CE]  not  a  statement	152	None	replace
230	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        if(fieldValue    ==    null)    {    builder.append(fieldValue.getClass());    }    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }	  	non-compiled	[CE]  'catch'  without  'try'	39	None	add
231	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  builder.append(fieldValue.getClass());  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.getClass());        if(fieldValue    ==    null)    {    builder.append(fieldValue.getClass());    }    builder.append(fieldValue.getClass());  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }	  	compilable	  [FE]  AssertionFailedError  	39	4	add
232	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  builder.append(fieldValue.getClass());  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  builder.append(fieldValue.getClass());  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        if(fieldValue    ==    null)    {    builder.append(fieldValue.getClass());    }    builder.append(fieldValue.getClass());  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }	  	compilable	  [FE]  AssertionFailedError  	39	4	add
233	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  [CE]  'catch'  without  'try'  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        if(fieldValue    ==    null)    {    builder.append(fieldValue.getClass());    }    if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }	  	non-compiled	[CE]  'catch'  without  'try'	39	None	add
234	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  [CE]  'catch'  without  'try'  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        if(fieldValue    ==    null)    {    builder.append(fieldValue.getClass());    }    if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }	  	non-compiled	[CE]  'catch'  without  'try'	39	None	add
235	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.getClass());        if(fieldValue    ==    null)    {    builder.append(fieldValue.getClass());    }    builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }	  	compilable	  [FE]  AssertionFailedError  	39	4	add
236	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        if(fieldValue    ==    null)    {    builder.append(fieldValue.getClass());    }    builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }	  	compilable	  [FE]  AssertionFailedError  	39	4	add
237	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('/');  builder.append(fieldValue).append('/');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('/');    builder.append(fieldValue).append('/');	  	compilable	  [FE]  AssertionFailedError  	175	4	add
238	[BUG]  [BUGGY]  builder.append(fieldValue).append('/');  builder.append(fieldValue).append('/');  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('/');  builder.append(fieldValue).append('/');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('/');    builder.append(fieldValue).append('/');	  	compilable	  [FE]  AssertionFailedError  	175	4	add
239	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('/');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('/');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('/');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('/');  }	  	compilable	  [FE]  AssertionFailedError  	175	4	add
240	[BUG]  [BUGGY]  builder.append(fieldValue).append('/');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('/');  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('/');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('/');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('/');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('/');  }	  	compilable	  [FE]  AssertionFailedError  	175	4	add
241	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('/');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('/');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('/');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('/');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	compilable	  [FE]  AssertionFailedError  	175	4	add
242	[BUG]  [BUGGY]  builder.append(fieldValue).append('/');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('/');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('/');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('/');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('/');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('/');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	compilable	  [FE]  AssertionFailedError  	175	4	add
243	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('/');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('/');  }  else  {  builder.append(fieldValue).append('/');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('/');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('/');  }  else  {  builder.append(fieldValue).append('/');  }	  	compilable	  [FE]  AssertionFailedError  	175	4	add
244	[BUG]  [BUGGY]  builder.append(fieldValue).append('/');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('/');  }  else  {  builder.append(fieldValue).append('/');  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('/');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('/');  }  else  {  builder.append(fieldValue).append('/');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('/');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('/');  }  else  {  builder.append(fieldValue).append('/');  }	  	compilable	  [FE]  AssertionFailedError  	175	4	add
245	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('/');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('/');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('/');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('/');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	175	4	add
246	[BUG]  [BUGGY]  builder.append(fieldValue).append('/');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('/');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('/');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('/');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('/');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('/');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	175	4	add
247	[BUG]  [BUGGY]  if(fieldValue  instanceof  String)  {  String[]  excludeFields  =(String[])fieldValue;  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }  [CE]  'catch'  without  'try'  [FE]          AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  String[]  excludeFields  =(String[])fieldValue;  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  String)  {  String[]  excludeFields  =(String[])fieldValue;  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }	  builder.append('$');    if(fieldValue    instanceof    String)    {    String[]    excludeFields    =(String[])fieldValue;    for(int    i    =    0;    i    <    excludeFields.length;    i++)    {    builder.append(excludeFields[i]);    }    	non-compiled	[CE]  'catch'  without  'try'	143	None	replace
248	[BUG]  [BUGGY]  if(fieldValue  instanceof  String)  {  String[]  excludeFields  =(String[])fieldValue;  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  String[]  excludeFields  =(String[])fieldValue;  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  String)  {  String[]  excludeFields  =(String[])fieldValue;  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]	  builder.append('$');    if(fieldValue    instanceof    String)    {    String[]    excludeFields    =(String[])fieldValue;    for(int    i    =    0;    i    <    excludeFields.length;    i++)    {    builder.append(excludeFields[i]);    }    	non-compiled	[CE]  ')'  expected	143	None	replace
249	[BUG]  [BUGGY]  if(fieldValue  instanceof  String)  {  String[]  excludeFields  =(String[])fieldValue;  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  String[]  excludeFields  =(String[])fieldValue;  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  String)  {  String[]  excludeFields  =(String[])fieldValue;  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i	  builder.append('$');    if(fieldValue    instanceof    String)    {    String[]    excludeFields    =(String[])fieldValue;    for(int    i    =    0;    i    <    excludeFields.length;    i++)    {    builder.append(excludeFields[i]);    }    	non-compiled	[CE]  ']'  expected	143	None	replace
250	[BUG]  [BUGGY]  if(fieldValue  instanceof  String)  {  String[]  excludeFields  =(String[])fieldValue;  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  String[]  excludeFields  =(String[])fieldValue;  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  String)  {  String[]  excludeFields  =(String[])fieldValue;  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[	  builder.append('$');    if(fieldValue    instanceof    String)    {    String[]    excludeFields    =(String[])fieldValue;    for(int    i    =    0;    i    <    excludeFields.length;    i++)    {    builder.append(excludeFields[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
251	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append('$');    if(fieldValue    ==    null)    {    builder.append('$');    }    	compilable	  [FE]  AssertionFailedError  	58	4	replace
252	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append('$');    if(fieldValue    ==    null)    {    builder.append('$');    }    	compilable	  [FE]  AssertionFailedError  	58	4	replace
253	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    builder.append(fieldValue.getClass());  builder.append(fieldValue.getClass());  builder.append(fieldValue.getClass());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.getClass());        builder.append(fieldValue.getClass());    builder.append(fieldValue.getClass());  builder.append(fieldValue.getClass());	  	compilable	  [FE]  AssertionFailedError  	33	4	add
254	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    builder.append(fieldValue.getClass());  builder.append(fieldValue.getClass());  builder.append(fieldValue.getClass());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    builder.append(fieldValue.getClass());  builder.append(fieldValue.getClass());  builder.append(fieldValue.getClass());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        builder.append(fieldValue.getClass());    builder.append(fieldValue.getClass());  builder.append(fieldValue.getClass());	  	compilable	  [FE]  AssertionFailedError  	33	4	add
255	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  builder.append(fieldValue.getClass());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.getClass());        builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  builder.append(fieldValue.getClass());  }	  	compilable	  [FE]  AssertionFailedError  	33	4	add
256	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  builder.append(fieldValue.getClass());  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  builder.append(fieldValue.getClass());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  builder.append(fieldValue.getClass());  }	  	compilable	  [FE]  AssertionFailedError  	33	4	add
257	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    builder.append(fieldValue.getClass());  if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  builder.append(fieldValue.getClass());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.getClass());        builder.append(fieldValue.getClass());    if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  builder.append(fieldValue.getClass());  }	  	compilable	  [FE]  AssertionFailedError  	33	4	add
258	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    builder.append(fieldValue.getClass());  if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  builder.append(fieldValue.getClass());  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    builder.append(fieldValue.getClass());  if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  builder.append(fieldValue.getClass());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        builder.append(fieldValue.getClass());    if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  builder.append(fieldValue.getClass());  }	  	compilable	  [FE]  AssertionFailedError  	33	4	add
259	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    builder.append(fieldValue.getClass());  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  builder.append(fieldValue.getClass());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.getClass());        builder.append(fieldValue.getClass());    if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  builder.append(fieldValue.getClass());  }	  	compilable	  [FE]  AssertionFailedError  	33	4	add
260	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    builder.append(fieldValue.getClass());  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  builder.append(fieldValue.getClass());  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    builder.append(fieldValue.getClass());  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  builder.append(fieldValue.getClass());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        builder.append(fieldValue.getClass());    if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  builder.append(fieldValue.getClass());  }	  	compilable	  [FE]  AssertionFailedError  	33	4	add
261	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    builder.append(fieldValue.getClass());  Builder.append(fieldValue.getClass());  builder.append(fieldValue.getClass());  [CE]  cannot  find  symbol  Builder  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    builder.append(fieldValue.getClass());  Builder.append(fieldValue.getClass());  builder.append(fieldValue.getClass());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        builder.append(fieldValue.getClass());    Builder.append(fieldValue.getClass());  builder.append(fieldValue.getClass());	  	non-compiled	[CE]  cannot  find  symbol  Builder	33	None	add
262	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    builder.append(fieldValue.toString());  builder.append(fieldValue.toString());  builder.append(fieldValue.toString());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.toString());        builder.append(fieldValue.toString());    builder.append(fieldValue.toString());  builder.append(fieldValue.toString());	  	compilable	  [FE]  AssertionFailedError  	76	4	add
263	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    builder.append(fieldValue.toString());  builder.append(fieldValue.toString());  builder.append(fieldValue.toString());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    builder.append(fieldValue.toString());  builder.append(fieldValue.toString());  builder.append(fieldValue.toString());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        builder.append(fieldValue.toString());    builder.append(fieldValue.toString());  builder.append(fieldValue.toString());	  	compilable	  [FE]  AssertionFailedError  	76	4	add
264	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.toString());        builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  builder.append(fieldValue.toString());  }	  	compilable	  [FE]  AssertionFailedError  	76	4	add
265	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  builder.append(fieldValue.toString());  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  builder.append(fieldValue.toString());  }	  	compilable	  [FE]  AssertionFailedError  	76	4	add
266	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    builder.append(fieldValue.toString());  if(fieldValue  ==  null)  {  builder.append(fieldValue.toString());  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.toString());        builder.append(fieldValue.toString());    if(fieldValue  ==  null)  {  builder.append(fieldValue.toString());  builder.append(fieldValue.toString());  }	  	compilable	  [FE]  AssertionFailedError  	76	4	add
267	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    builder.append(fieldValue.toString());  if(fieldValue  ==  null)  {  builder.append(fieldValue.toString());  builder.append(fieldValue.toString());  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    builder.append(fieldValue.toString());  if(fieldValue  ==  null)  {  builder.append(fieldValue.toString());  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        builder.append(fieldValue.toString());    if(fieldValue  ==  null)  {  builder.append(fieldValue.toString());  builder.append(fieldValue.toString());  }	  	compilable	  [FE]  AssertionFailedError  	76	4	add
268	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    builder.append(fieldValue.toString());  Builder.append(fieldValue.toString());  builder.append(fieldValue.toString());  [CE]  cannot  find  symbol  Builder  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    builder.append(fieldValue.toString());  Builder.append(fieldValue.toString());  builder.append(fieldValue.toString());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        builder.append(fieldValue.toString());    Builder.append(fieldValue.toString());  builder.append(fieldValue.toString());	  	non-compiled	[CE]  cannot  find  symbol  Builder	76	None	add
269	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.toString());        builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	76	4	add
270	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	76	4	add
271	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('r');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('r');  }	  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('r');    	compilable	  [FE]  AssertionFailedError  	115	4	replace
272	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('r');  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('r');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('r');  }	  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('r');    	compilable	  [FE]  AssertionFailedError  	115	4	replace
273	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('r');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('r');  }	  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('r');    	compilable	  [FE]  AssertionFailedError  	115	4	replace
274	[BUG]  [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('r');  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('r');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('r');  }	  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('r');    	compilable	  [FE]  AssertionFailedError  	115	4	replace
275	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('r');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('r');  }	  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('r');    	compilable	  [FE]  AssertionFailedError  	115	4	replace
276	[BUG]  [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('r');  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('r');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('r');  }	  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('r');    	compilable	  [FE]  AssertionFailedError  	115	4	replace
277	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('r');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('r');  }	  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('r');    	compilable	  [FE]  AssertionFailedError  	115	4	replace
278	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('r');  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('r');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('r');  }	  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('r');    	compilable	  [FE]  AssertionFailedError  	115	4	replace
279	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  }  if(fieldValue!=  null)  {  builder.append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=    null)    {    builder.append('$');    }    if(fieldValue!=  null)  {  builder.append('$');  }	  	compilable	  [FE]  AssertionFailedError  	13	4	add
280	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  }  if(fieldValue!=  null)  {  builder.append('$');  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  }  if(fieldValue!=  null)  {  builder.append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=    null)    {    builder.append('$');    }    if(fieldValue!=  null)  {  builder.append('$');  }	  	compilable	  [FE]  AssertionFailedError  	13	4	add
281	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  }  if(fieldValue  ==  null)  {  builder.append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=    null)    {    builder.append('$');    }    if(fieldValue  ==  null)  {  builder.append('$');  }	  	compilable	  [FE]  AssertionFailedError  	13	4	add
282	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  }  if(fieldValue  ==  null)  {  builder.append('$');  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  }  if(fieldValue  ==  null)  {  builder.append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=    null)    {    builder.append('$');    }    if(fieldValue  ==  null)  {  builder.append('$');  }	  	compilable	  [FE]  AssertionFailedError  	13	4	add
283	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  }  If(fieldValue!=  null)  {  builder.append('$');  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  }  If(fieldValue!=  null)  {  builder.append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=    null)    {    builder.append('$');    }    If(fieldValue!=  null)  {  builder.append('$');  }	  	non-compiled	[CE]  ';'  expected	13	None	add
284	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  }  if(fieldValue  >=  null)  {  builder.append('$');  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  }  if(fieldValue  >=  null)  {  builder.append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=    null)    {    builder.append('$');    }    if(fieldValue  >=  null)  {  builder.append('$');  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	13	None	add
285	[BUG]  [BUGGY]  String[]  excludeFields  =  fieldValue.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }  [CE]  variable  excludeFields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                    AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  String[]  excludeFields  =  fieldValue.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	String[]  excludeFields  =  fieldValue.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }	  String[]    excludeFields    =    field.getexcludeFields();    for(int    i    =    0;    i    <    excludeFields.length;    i++)    {    builder.append(excludeFields[i]);    }    	non-compiled	[CE]  variable  excludeFields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	75	None	replace
286	[BUG]  [BUGGY]  Field[]  fields  =  fieldValue.getFields();  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append(excludeFields[i]);  }  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                      AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  Field[]  fields  =  fieldValue.getFields();  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append(excludeFields[i]);  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Field[]  fields  =  fieldValue.getFields();  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append(excludeFields[i]);  }	  String[]    excludeFields    =    field.getexcludeFields();    for(int    i    =    0;    i    <    excludeFields.length;    i++)    {    builder.append(excludeFields[i]);    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	75	None	replace
287	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$').append(fieldValue.toString());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('$').append(fieldValue.toString());	  builder.append('$').append(fieldValue);    	compilable	  [FE]  AssertionFailedError  	147	4	replace
288	[BUG]  [BUGGY]  builder.append('$').append(fieldValue.toString());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$').append(fieldValue.toString());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$').append(fieldValue.toString());	  builder.append('$').append(fieldValue);    	compilable	  [FE]  AssertionFailedError  	147	4	replace
289	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append('$').append(fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append('$').append(fieldValue);  }	  builder.append('$').append(fieldValue);    	compilable	  [FE]  AssertionFailedError  	147	4	replace
290	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append('$').append(fieldValue);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append('$').append(fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append('$').append(fieldValue);  }	  builder.append('$').append(fieldValue);    	compilable	  [FE]  AssertionFailedError  	147	4	replace
291	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append('$').append(fieldValue);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append('$').append(fieldValue);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append('$').append(fieldValue);    	compilable	  [FE]  AssertionFailedError  	147	4	replace
292	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append('$').append(fieldValue);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append('$').append(fieldValue);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append('$').append(fieldValue);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append('$').append(fieldValue);    	compilable	  [FE]  AssertionFailedError  	147	4	replace
293	[BUG]  [BUGGY]  builder.append(fieldValue).append( "_ ",  fieldValue);  [CE]  no  suitable  method  found  for  append(String,Object)  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append( "_ ",  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append( "_ ",  fieldValue);	  builder.append(fieldValue).append(   "_   ");    	non-compiled	[CE]  no  suitable  method  found  for  append(String,Object)	6	None	replace
294	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append( "._ ");  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append( "._ ");	  builder.append(fieldValue).append(   "_   ");    	compilable	  [FE]  AssertionFailedError  	6	4	replace
295	[BUG]  [BUGGY]  builder.append(fieldValue).append( "._ ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append( "._ ");  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append( "._ ");	  builder.append(fieldValue).append(   "_   ");    	compilable	  [FE]  AssertionFailedError  	6	4	replace
296	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue!=  null?  null  :  fieldValue);  }  else  {  builder.append(fieldValue!=  null?  null  :  fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue!=  null?  null  :  fieldValue);  }  else  {  builder.append(fieldValue!=  null?  null  :  fieldValue);  }	  builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue    >>    null?    null    :    fieldValue);    	compilable	  [FE]  AssertionFailedError  	20	4	replace
297	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue!=  null?  null  :  fieldValue);  }  else  {  builder.append(fieldValue!=  null?  null  :  fieldValue);  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue!=  null?  null  :  fieldValue);  }  else  {  builder.append(fieldValue!=  null?  null  :  fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue!=  null?  null  :  fieldValue);  }  else  {  builder.append(fieldValue!=  null?  null  :  fieldValue);  }	  builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue    >>    null?    null    :    fieldValue);    	compilable	  [FE]  AssertionFailedError  	20	4	replace
298	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue!=  null?  null  :  fieldValue);  }  else  {  builder.append(fieldValue  ==  null?  null  :  fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue!=  null?  null  :  fieldValue);  }  else  {  builder.append(fieldValue  ==  null?  null  :  fieldValue);  }	  builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue    >>    null?    null    :    fieldValue);    	compilable	  [FE]  AssertionFailedError  	20	4	replace
299	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue!=  null?  null  :  fieldValue);  }  else  {  builder.append(fieldValue  ==  null?  null  :  fieldValue);  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue!=  null?  null  :  fieldValue);  }  else  {  builder.append(fieldValue  ==  null?  null  :  fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue!=  null?  null  :  fieldValue);  }  else  {  builder.append(fieldValue  ==  null?  null  :  fieldValue);  }	  builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue    >>    null?    null    :    fieldValue);    	compilable	  [FE]  AssertionFailedError  	20	4	replace
300	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append(   "_   ");  builder.append(fieldValue).append( "_   ");  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append(   "_   ");    builder.append(fieldValue).append( "_   ");	  	compilable	  [FE]  AssertionFailedError  	5	4	add
301	[BUG]  [BUGGY]  builder.append(fieldValue).append(   "_   ");  builder.append(fieldValue).append( "_   ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append(   "_   ");  builder.append(fieldValue).append( "_   ");  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append(   "_   ");    builder.append(fieldValue).append( "_   ");	  	compilable	  [FE]  AssertionFailedError  	5	4	add
302	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append(   "_   ");  builder.append(fieldValue).append( "._   ");  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append(   "_   ");    builder.append(fieldValue).append( "._   ");	  	compilable	  [FE]  AssertionFailedError  	5	4	add
303	[BUG]  [BUGGY]  builder.append(fieldValue).append(   "_   ");  builder.append(fieldValue).append( "._   ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append(   "_   ");  builder.append(fieldValue).append( "._   ");  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append(   "_   ");    builder.append(fieldValue).append( "._   ");	  	compilable	  [FE]  AssertionFailedError  	5	4	add
304	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append(   "_   ");  builder.append(fieldValue).append('_');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append(   "_   ");    builder.append(fieldValue).append('_');	  	compilable	  [FE]  AssertionFailedError  	5	4	add
305	[BUG]  [BUGGY]  builder.append(fieldValue).append(   "_   ");  builder.append(fieldValue).append('_');  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append(   "_   ");  builder.append(fieldValue).append('_');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append(   "_   ");    builder.append(fieldValue).append('_');	  	compilable	  [FE]  AssertionFailedError  	5	4	add
306	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(fieldValue.getClass());    if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    	compilable	  [FE]  IllegalArgumentException  	38	4	replace
307	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(fieldValue.getClass());    if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    	compilable	  [FE]  IllegalArgumentException  	38	4	replace
308	[BUG]  [BUGGY]  if(fieldValue  instanceof  String)  {  String[]  excludeFields  =(String[])fieldValue;  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]  }  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  String[]  excludeFields  =(String[])fieldValue;  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  String)  {  String[]  excludeFields  =(String[])fieldValue;  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]  }	  builder.append('$');    if(fieldValue    instanceof    String)    {    String[]    excludeFields    =(String[])fieldValue;    for(int    i    =    0;    i    <    excludeFields.length;    i++)    {    builder.append(excludeFields[i]    	non-compiled	[CE]  ')'  expected	144	None	replace
309	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append( ", ");  }  else  {  builder.append(fieldValue).append( ", ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append( ", ");  }  else  {  builder.append(fieldValue).append( ", ");  }	  builder.append(fieldValue).append(       ",       ");    builder.append(fieldValue).append(       ",       ");    	compilable	  [FE]  AssertionFailedError  	102	4	replace
310	[BUG]  [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append( ", ");  }  else  {  builder.append(fieldValue).append( ", ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append( ", ");  }  else  {  builder.append(fieldValue).append( ", ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append( ", ");  }  else  {  builder.append(fieldValue).append( ", ");  }	  builder.append(fieldValue).append(       ",       ");    builder.append(fieldValue).append(       ",       ");    	compilable	  [FE]  AssertionFailedError  	102	4	replace
311	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append( ", ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue).append( ", ");  }	  builder.append(fieldValue).append(       ",       ");    builder.append(fieldValue).append(       ",       ");    	compilable	  [FE]  AssertionFailedError  	102	4	replace
312	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append( ", ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append( ", ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue).append( ", ");  }	  builder.append(fieldValue).append(       ",       ");    builder.append(fieldValue).append(       ",       ");    	compilable	  [FE]  AssertionFailedError  	102	4	replace
313	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append( ", ");  }  else  {  builder.append(fieldValue).append( ", ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue).append( ", ");  }  else  {  builder.append(fieldValue).append( ", ");  }	  builder.append(fieldValue).append(       ",       ");    builder.append(fieldValue).append(       ",       ");    	compilable	  [FE]  AssertionFailedError  	102	4	replace
314	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append( ", ");  }  else  {  builder.append(fieldValue).append( ", ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append( ", ");  }  else  {  builder.append(fieldValue).append( ", ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue).append( ", ");  }  else  {  builder.append(fieldValue).append( ", ");  }	  builder.append(fieldValue).append(       ",       ");    builder.append(fieldValue).append(       ",       ");    	compilable	  [FE]  AssertionFailedError  	102	4	replace
315	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }	  	non-compiled	[CE]  'catch'  without  'try'	78	None	add
316	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }	  	compilable	  [FE]  AssertionFailedError  	78	4	add
317	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }	  	compilable	  [FE]  AssertionFailedError  	78	4	add
318	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  if(fieldValue  ==  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  [CE]  'catch'  without  'try'  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  if(fieldValue  ==  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    if(fieldValue  ==  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }	  	non-compiled	[CE]  'catch'  without  'try'	78	None	add
319	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue  ==  null)  {  builder.append(fieldValue.toString());  }  [CE]  'catch'  without  'try'  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue  ==  null)  {  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue  ==  null)  {  builder.append(fieldValue.toString());  }	  	non-compiled	[CE]  'catch'  without  'try'	78	None	add
320	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  }	  	compilable	  [FE]  AssertionFailedError  	78	4	add
321	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  }	  	compilable	  [FE]  AssertionFailedError  	78	4	add
322	[BUG]  [BUGGY]  Builder.append(fieldValue.toString());  [CE]  cannot  find  symbol  Builder  [FE]              AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  Builder.append(fieldValue.toString());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Builder.append(fieldValue.toString());	  builder.append(fieldValue.toString());    if(fieldValue.isArray())    {    builder.append(fieldValue.toString());    }    	non-compiled	[CE]  cannot  find  symbol  Builder	82	None	replace
323	[BUG]  [BUGGY]  BuilderBuilder.append(fieldValue.toString());  [CE]  cannot  find  symbol  BuilderBuilder  [FE]                AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  BuilderBuilder.append(fieldValue.toString());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	BuilderBuilder.append(fieldValue.toString());	  builder.append(fieldValue.toString());    if(fieldValue.isArray())    {    builder.append(fieldValue.toString());    }    	non-compiled	[CE]  cannot  find  symbol  BuilderBuilder	82	None	replace
324	[BUG]  [BUGGY]  Field[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  Field[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Field[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('  }	  Field[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iTotal++)    {    builder.append('    	non-compiled	[CE]  ')'  expected	111	None	replace
325	[BUG]  [BUGGY]  Field[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  Field[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Field[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('	  Field[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iTotal++)    {    builder.append('    	non-compiled	[CE]  ')'  expected	111	None	replace
326	[BUG]  [BUGGY]  Field[]  fields  =  object.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  Field[]  fields  =  object.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Field[]  fields  =  object.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('  }	  Field[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iTotal++)    {    builder.append('    	non-compiled	[CE]  ')'  expected	111	None	replace
327	[BUG]  [BUGGY]  String[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  String[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	String[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('  }	  Field[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iTotal++)    {    builder.append('    	non-compiled	[CE]  ')'  expected	111	None	replace
328	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append('_');  builder.append(fieldValue).append( "._ ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append('_');  builder.append(fieldValue).append( "._ ");  }	  builder.append(fieldValue).append('_');    builder.append(fieldValue).append(   "._   ");    	compilable	  [FE]  AssertionFailedError  	156	4	replace
329	[BUG]  [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append('_');  builder.append(fieldValue).append( "._ ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append('_');  builder.append(fieldValue).append( "._ ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append('_');  builder.append(fieldValue).append( "._ ");  }	  builder.append(fieldValue).append('_');    builder.append(fieldValue).append(   "._   ");    	compilable	  [FE]  AssertionFailedError  	156	4	replace
330	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('_');  builder.append(fieldValue).append( "._ ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('_');  builder.append(fieldValue).append( "._ ");  }	  builder.append(fieldValue).append('_');    builder.append(fieldValue).append(   "._   ");    	compilable	  [FE]  AssertionFailedError  	156	4	replace
331	[BUG]  [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('_');  builder.append(fieldValue).append( "._ ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('_');  builder.append(fieldValue).append( "._ ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('_');  builder.append(fieldValue).append( "._ ");  }	  builder.append(fieldValue).append('_');    builder.append(fieldValue).append(   "._   ");    	compilable	  [FE]  AssertionFailedError  	156	4	replace
332	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  builder.append(fieldValue).append( "._ ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  builder.append(fieldValue).append( "._ ");  }	  builder.append(fieldValue).append('_');    builder.append(fieldValue).append(   "._   ");    	compilable	  [FE]  AssertionFailedError  	156	4	replace
333	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  builder.append(fieldValue).append( "._ ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  builder.append(fieldValue).append( "._ ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  builder.append(fieldValue).append( "._ ");  }	  builder.append(fieldValue).append('_');    builder.append(fieldValue).append(   "._   ");    	compilable	  [FE]  AssertionFailedError  	156	4	replace
334	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  builder.append(fieldValue).append( "._ ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  builder.append(fieldValue).append( "._ ");  }	  builder.append(fieldValue).append('_');    builder.append(fieldValue).append(   "._   ");    	compilable	  [FE]  AssertionFailedError  	156	4	replace
335	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  builder.append(fieldValue).append( "._ ");  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  builder.append(fieldValue).append( "._ ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  builder.append(fieldValue).append( "._ ");  }	  builder.append(fieldValue).append('_');    builder.append(fieldValue).append(   "._   ");    	compilable	  [FE]  AssertionFailedError  	156	4	replace
336	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('r');  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('r');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('n');        builder.append(fieldValue).append('r');    builder.append(fieldValue).append('n');  builder.append(fieldValue).append('r');	  	compilable	  [FE]  AssertionFailedError  	114	4	add
337	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('r');  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('r');  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('r');  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('r');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');        builder.append(fieldValue).append('r');    builder.append(fieldValue).append('n');  builder.append(fieldValue).append('r');	  	compilable	  [FE]  AssertionFailedError  	114	4	add
338	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('r');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('r');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('n');        builder.append(fieldValue).append('r');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('r');  }	  	compilable	  [FE]  AssertionFailedError  	114	4	add
339	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('r');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('r');  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('r');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('r');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');        builder.append(fieldValue).append('r');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('r');  }	  	compilable	  [FE]  AssertionFailedError  	114	4	add
340	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('r');  Builder.append(fieldValue).append('n');  builder.append(fieldValue).append('r');  [CE]  cannot  find  symbol  Builder  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('r');  Builder.append(fieldValue).append('n');  builder.append(fieldValue).append('r');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');        builder.append(fieldValue).append('r');    Builder.append(fieldValue).append('n');  builder.append(fieldValue).append('r');	  	non-compiled	[CE]  cannot  find  symbol  Builder	114	None	add
341	[BUG]  [BUGGY]  builder.append(fieldValue).append('_').append(iTotal);  [CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context  [FE]          AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_').append(iTotal);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_').append(iTotal);	  builder.append(fieldValue).append('_').append(iConstant);    	non-compiled	[CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context	151	None	replace
342	[BUG]  [BUGGY]  builder.append(fieldValue).append('_').append(initialNonZeroOddNumber);  [CE]  cannot  find  symbol  initialNonZeroOddNumber  [FE]            AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_').append(initialNonZeroOddNumber);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_').append(initialNonZeroOddNumber);	  builder.append(fieldValue).append('_').append(iConstant);    	non-compiled	[CE]  cannot  find  symbol  initialNonZeroOddNumber	151	None	replace
343	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_').append(object);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('_').append(object);	  builder.append(fieldValue).append('_').append(iConstant);    	compilable	  [FE]  AssertionFailedError  	151	4	replace
344	[BUG]  [BUGGY]  builder.append(fieldValue).append('_').append(object);  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_').append(object);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_').append(object);	  builder.append(fieldValue).append('_').append(iConstant);    	compilable	  [FE]  AssertionFailedError  	151	4	replace
345	[BUG]  [BUGGY]  builder.append(fieldValue).append('_').append(value);  [CE]  cannot  find  symbol  value  [FE]                AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_').append(value);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_').append(value);	  builder.append(fieldValue).append('_').append(iConstant);    	non-compiled	[CE]  cannot  find  symbol  value	151	None	replace
346	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalAccessException(   "   ");  }  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('n');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    IllegalAccessException(   "   ");    }    builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalAccessException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	31	4	add
347	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalAccessException(   "   ");  }  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalAccessException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalAccessException(   "   ");  }  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    IllegalAccessException(   "   ");    }    builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalAccessException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	31	4	add
348	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalAccessException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalAccessException( " ");  }  [CE]  'catch'  without  'try'  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalAccessException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    IllegalAccessException(   "   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalAccessException( " ");  }	  	non-compiled	[CE]  'catch'  without  'try'	31	None	add
349	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalAccessException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalAccessException( "  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalAccessException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalAccessException( "  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    IllegalAccessException(   "   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalAccessException( "	  	non-compiled	[CE]  unclosed  string  literal	31	None	add
350	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalAccessException(   "   ");  }  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalAccessException( " ");  }  [CE]  'catch'  without  'try'  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalAccessException(   "   ");  }  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    IllegalAccessException(   "   ");    }    if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalAccessException( " ");  }	  	non-compiled	[CE]  'catch'  without  'try'	31	None	add
351	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalAccessException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('  [CE]  illegal  line  end  in  character  literal  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalAccessException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    IllegalAccessException(   "   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('	  	non-compiled	[CE]  illegal  line  end  in  character  literal	31	None	add
352	[BUG]  [BUGGY]  Integer[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append( ",   ");  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  Integer[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append( ",   ");  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Integer[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append( ",   ");  }	  Integer[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iConstant++)    {    builder.append(   ",       ");    }    	non-compiled	[CE]  	44	None	replace
353	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  (useTransients  ||!Modifier.isTransient(field.getModifiers())  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  (useTransients  ||!Modifier.isTransient(field.getModifiers())  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  (useTransients  ||!Modifier.isTransient(field.getModifiers())	  if(fieldValue!=    null)    {    if(!ArrayUtils.contains(excludeFields,    field.getName())    &&(field.getName().indexOf('$')    ==    -1)    &&    (useTransients    ||!Modifier.isTransient(field.getModifiers())    	non-compiled	[CE]  ')'  expected	96	None	replace
354	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError(   "Unexpected  field  value:   "  +  fieldValue);  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  field  value:   "  +  fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    InternalError(   "Unexpected    field    value:   "    +    fieldValue);    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  field  value:   "  +  fieldValue);  }	  	compilable	  [FE]  AssertionFailedError  	11	4	add
355	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError(   "Unexpected  field  value:   "  +  fieldValue);  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  field  value:   "  +  fieldValue);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError(   "Unexpected  field  value:   "  +  fieldValue);  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  field  value:   "  +  fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    InternalError(   "Unexpected    field    value:   "    +    fieldValue);    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  field  value:   "  +  fieldValue);  }	  	compilable	  [FE]  AssertionFailedError  	11	4	add
356	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  }	  if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    	non-compiled	[CE]  'catch'  without  'try'	183	None	replace
357	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  [CE]  'catch'  without  'try'  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }	  if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    	non-compiled	[CE]  'catch'  without  'try'	183	None	replace
358	[BUG]  [BUGGY]  builder.append('$');    if(fieldValue  ==  null)  {  builder.append('$');  }  if(fieldValue  ==  null)  {  builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    if(fieldValue  ==  null)  {  builder.append('$');  }  if(fieldValue  ==  null)  {  builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');        if(fieldValue    ==    null)    {    builder.append('$');    }    if(fieldValue  ==  null)  {  builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }	  	non-compiled	[CE]  'catch'  without  'try'	57	None	add
359	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    if(fieldValue  ==  null)  {  builder.append('$');  }  if(fieldValue  ==  null)  {  builder.append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('$');        if(fieldValue    ==    null)    {    builder.append('$');    }    if(fieldValue  ==  null)  {  builder.append('$');  }	  	compilable	  [FE]  AssertionFailedError  	57	4	add
360	[BUG]  [BUGGY]  builder.append('$');    if(fieldValue  ==  null)  {  builder.append('$');  }  if(fieldValue  ==  null)  {  builder.append('$');  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    if(fieldValue  ==  null)  {  builder.append('$');  }  if(fieldValue  ==  null)  {  builder.append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');        if(fieldValue    ==    null)    {    builder.append('$');    }    if(fieldValue  ==  null)  {  builder.append('$');  }	  	compilable	  [FE]  AssertionFailedError  	57	4	add
361	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    if(fieldValue  ==  null)  {  builder.append('$');  }  builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('$');        if(fieldValue    ==    null)    {    builder.append('$');    }    builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }	  	compilable	  [FE]  AssertionFailedError  	57	4	add
362	[BUG]  [BUGGY]  builder.append('$');    if(fieldValue  ==  null)  {  builder.append('$');  }  builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    if(fieldValue  ==  null)  {  builder.append('$');  }  builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');        if(fieldValue    ==    null)    {    builder.append('$');    }    builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }	  	compilable	  [FE]  AssertionFailedError  	57	4	add
363	[BUG]  [BUGGY]  builder.append('$');    if(fieldValue  ==  null)  {  builder.append('$');  }  if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }  [CE]  'catch'  without  'try'  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    if(fieldValue  ==  null)  {  builder.append('$');  }  if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');        if(fieldValue    ==    null)    {    builder.append('$');    }    if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }	  	non-compiled	[CE]  'catch'  without  'try'	57	None	add
364	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    if(fieldValue  ==  null)  {  builder.append('$');  }  if(fieldValue!=  null)  {  builder.append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('$');        if(fieldValue    ==    null)    {    builder.append('$');    }    if(fieldValue!=  null)  {  builder.append('$');  }	  	compilable	  [FE]  AssertionFailedError  	57	4	add
365	[BUG]  [BUGGY]  builder.append('$');    if(fieldValue  ==  null)  {  builder.append('$');  }  if(fieldValue!=  null)  {  builder.append('$');  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    if(fieldValue  ==  null)  {  builder.append('$');  }  if(fieldValue!=  null)  {  builder.append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');        if(fieldValue    ==    null)    {    builder.append('$');    }    if(fieldValue!=  null)  {  builder.append('$');  }	  	compilable	  [FE]  AssertionFailedError  	57	4	add
366	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('_');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    builder.append(fieldValue).append('_');    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }	  	compilable	  [FE]  AssertionFailedError  	67	4	add
367	[BUG]  [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    builder.append(fieldValue).append('_');    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }	  	compilable	  [FE]  AssertionFailedError  	67	4	add
368	[BUG]  [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldVal  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldVal  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    builder.append(fieldValue).append('_');    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldVal	  	non-compiled	[CE]  ')'  expected	67	None	add
369	[BUG]  [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append(  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append(  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    builder.append(fieldValue).append('_');    }    builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append(	  	non-compiled	[CE]  ')'  expected	67	None	add
370	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('_');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    builder.append(fieldValue).append('_');    }    if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }	  	compilable	  [FE]  AssertionFailedError  	67	4	add
371	[BUG]  [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    builder.append(fieldValue).append('_');    }    if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }	  	compilable	  [FE]  AssertionFailedError  	67	4	add
372	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('_');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    builder.append(fieldValue).append('_');    }    builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }	  	compilable	  [FE]  AssertionFailedError  	67	4	add
373	[BUG]  [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    builder.append(fieldValue).append('_');    }    builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }	  	compilable	  [FE]  AssertionFailedError  	67	4	add
374	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(excludeFields[0]);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(excludeFields[0]);  }	  builder.append(fieldValue.getClass());    if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    builder.append(excludeFields[0]);    }    	compilable	  [FE]  AssertionFailedError  	138	4	replace
375	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(excludeFields[0]);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(excludeFields[0]);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(excludeFields[0]);  }	  builder.append(fieldValue.getClass());    if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    builder.append(excludeFields[0]);    }    	compilable	  [FE]  AssertionFailedError  	138	4	replace
376	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(excludeFields[0]);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(excludeFields[0]);  }	  builder.append(fieldValue.getClass());    if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    builder.append(excludeFields[0]);    }    	compilable	  [FE]  NullPointerException  	138	4	replace
377	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(excludeFields[0]);  }  [FE]  NullPointerException  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(excludeFields[0]);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(excludeFields[0]);  }	  builder.append(fieldValue.getClass());    if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    builder.append(excludeFields[0]);    }    	compilable	  [FE]  NullPointerException  	138	4	replace
378	[BUG]  [BUGGY]  Field[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('+');  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  Field[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('+');  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Field[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('+');  }	  Field[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iConstant++)    {    builder.append('+');    }    	non-compiled	[CE]  ')'  expected	98	None	replace
379	[BUG]  [BUGGY]  String[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('+');  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  String[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('+');  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	String[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('+');  }	  Field[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iConstant++)    {    builder.append('+');    }    	non-compiled	[CE]  ')'  expected	98	None	replace
380	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=  null?  null  :  fieldValue.toString());  builder.append(fieldValue!=  null?  null  :  fieldValue.toString());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue!=    null?    null    :    fieldValue.toString());    builder.append(fieldValue!=  null?  null  :  fieldValue.toString());	  	compilable	  [FE]  AssertionFailedError  	122	4	add
381	[BUG]  [BUGGY]  builder.append(fieldValue!=  null?  null  :  fieldValue.toString());  builder.append(fieldValue!=  null?  null  :  fieldValue.toString());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=  null?  null  :  fieldValue.toString());  builder.append(fieldValue!=  null?  null  :  fieldValue.toString());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=    null?    null    :    fieldValue.toString());    builder.append(fieldValue!=  null?  null  :  fieldValue.toString());	  	compilable	  [FE]  AssertionFailedError  	122	4	add
382	[BUG]  [BUGGY]  builder.append(fieldValue!=  null?  null  :  fieldValue.toString());  if(fieldValue!=  null?  null  :  fieldValue.toString())  {  builder.append(fieldValue!=  null?  null  :  fieldValue.toString());  }  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=  null?  null  :  fieldValue.toString());  if(fieldValue!=  null?  null  :  fieldValue.toString())  {  builder.append(fieldValue!=  null?  null  :  fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=    null?    null    :    fieldValue.toString());    if(fieldValue!=  null?  null  :  fieldValue.toString())  {  builder.append(fieldValue!=  null?  null  :  fieldValue.toString());  }	  	non-compiled	[CE]  incompatible  types	122	None	add
383	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=  null?  null  :  fieldValue.toString());  builder.append(fieldValue  ==  null?  null  :  fieldValue.toString());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue!=    null?    null    :    fieldValue.toString());    builder.append(fieldValue  ==  null?  null  :  fieldValue.toString());	  	compilable	  [FE]  AssertionFailedError  	122	4	add
384	[BUG]  [BUGGY]  builder.append(fieldValue!=  null?  null  :  fieldValue.toString());  builder.append(fieldValue  ==  null?  null  :  fieldValue.toString());  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=  null?  null  :  fieldValue.toString());  builder.append(fieldValue  ==  null?  null  :  fieldValue.toString());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=    null?    null    :    fieldValue.toString());    builder.append(fieldValue  ==  null?  null  :  fieldValue.toString());	  	compilable	  [FE]  AssertionFailedError  	122	4	add
385	[BUG]  [BUGGY]  builder.append(fieldValue!=  null?  null  :  fieldValue.toString());  if(fieldValue!=  null?  null  :  fieldValue.toString());  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=  null?  null  :  fieldValue.toString());  if(fieldValue!=  null?  null  :  fieldValue.toString());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=    null?    null    :    fieldValue.toString());    if(fieldValue!=  null?  null  :  fieldValue.toString());	  	non-compiled	[CE]  incompatible  types	122	None	add
386	[BUG]  [BUGGY]  builder.append(fieldValue!=  null?  null  :  fieldValue.toString());  if(fieldValue!=  null?  null  :  fieldValue.toString())  {  builder.append(fieldValue  ==  null?  null  :  fieldValue.toString());  }  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=  null?  null  :  fieldValue.toString());  if(fieldValue!=  null?  null  :  fieldValue.toString())  {  builder.append(fieldValue  ==  null?  null  :  fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=    null?    null    :    fieldValue.toString());    if(fieldValue!=  null?  null  :  fieldValue.toString())  {  builder.append(fieldValue  ==  null?  null  :  fieldValue.toString());  }	  	non-compiled	[CE]  incompatible  types	122	None	add
387	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }  if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }  if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        if(fieldValue.getClass()!=    null)    {    builder.append(fieldValue.getClass());    }    if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }	  	non-compiled	[CE]  'catch'  without  'try'	35	None	add
388	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }  builder.append(fieldValue.getClass());  if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.getClass());        if(fieldValue.getClass()!=    null)    {    builder.append(fieldValue.getClass());    }    builder.append(fieldValue.getClass());  if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }	  	compilable	  [FE]  AssertionFailedError  	35	4	add
389	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }  builder.append(fieldValue.getClass());  if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }  builder.append(fieldValue.getClass());  if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        if(fieldValue.getClass()!=    null)    {    builder.append(fieldValue.getClass());    }    builder.append(fieldValue.getClass());  if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }	  	compilable	  [FE]  AssertionFailedError  	35	4	add
390	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }  [CE]  'catch'  without  'try'  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        if(fieldValue.getClass()!=    null)    {    builder.append(fieldValue.getClass());    }    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }	  	non-compiled	[CE]  'catch'  without  'try'	35	None	add
391	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }  if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.getClass());        if(fieldValue.getClass()!=    null)    {    builder.append(fieldValue.getClass());    }    if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }  }	  	compilable	  [FE]  AssertionFailedError  	35	4	add
392	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }  if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }  if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        if(fieldValue.getClass()!=    null)    {    builder.append(fieldValue.getClass());    }    if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }  }	  	compilable	  [FE]  AssertionFailedError  	35	4	add
393	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }  [CE]  'catch'  without  'try'  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        if(fieldValue.getClass()!=    null)    {    builder.append(fieldValue.getClass());    }    if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }	  	non-compiled	[CE]  'catch'  without  'try'	35	None	add
394	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }  if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }  if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue.toString()!=    null)    {    builder.append(fieldValue.toString());    }    if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }	  	non-compiled	[CE]  'catch'  without  'try'	80	None	add
395	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }  if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.toString());        if(fieldValue.toString()!=    null)    {    builder.append(fieldValue.toString());    }    if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }  }	  	compilable	  [FE]  AssertionFailedError  	80	4	add
396	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }  if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }  if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue.toString()!=    null)    {    builder.append(fieldValue.toString());    }    if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }  }	  	compilable	  [FE]  AssertionFailedError  	80	4	add
397	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }  builder.append(fieldValue.toString());  if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.toString());        if(fieldValue.toString()!=    null)    {    builder.append(fieldValue.toString());    }    builder.append(fieldValue.toString());  if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }	  	compilable	  [FE]  AssertionFailedError  	80	4	add
398	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }  builder.append(fieldValue.toString());  if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }  builder.append(fieldValue.toString());  if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue.toString()!=    null)    {    builder.append(fieldValue.toString());    }    builder.append(fieldValue.toString());  if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }	  	compilable	  [FE]  AssertionFailedError  	80	4	add
399	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }  [CE]  'catch'  without  'try'  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue.toString()!=    null)    {    builder.append(fieldValue.toString());    }    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }	  	non-compiled	[CE]  'catch'  without  'try'	80	None	add
400	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }  if(fieldValue  ==  null)  {  builder.append(fieldValue.toString());  if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }  [CE]  'catch'  without  'try'  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }  if(fieldValue  ==  null)  {  builder.append(fieldValue.toString());  if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue.toString()!=    null)    {    builder.append(fieldValue.toString());    }    if(fieldValue  ==  null)  {  builder.append(fieldValue.toString());  if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }	  	non-compiled	[CE]  'catch'  without  'try'	80	None	add
401	[BUG]  [BUGGY]  Builder.append(fieldValue).append('n');  [CE]  cannot  find  symbol  Builder  [FE]        AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  Builder.append(fieldValue).append('n');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Builder.append(fieldValue).append('n');	  builder.append(fieldValue).append('n');    Builder.append(fieldValue).append('n');    	non-compiled	[CE]  cannot  find  symbol  Builder	113	None	replace
402	[BUG]  [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append('n');  Builder.append(fieldValue).append('n');  }  [CE]  cannot  find  symbol  Builder  [FE]          AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append('n');  Builder.append(fieldValue).append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append('n');  Builder.append(fieldValue).append('n');  }	  builder.append(fieldValue).append('n');    Builder.append(fieldValue).append('n');    	non-compiled	[CE]  cannot  find  symbol  Builder	113	None	replace
403	[BUG]  [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append('n');  Builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  Builder  [FE]            AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append('n');  Builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append('n');  Builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(fieldValue).append('n');    Builder.append(fieldValue).append('n');    	non-compiled	[CE]  cannot  find  symbol  Builder	113	None	replace
404	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }	  	compilable	  [FE]  AssertionFailedError  	1	4	add
405	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }	  	compilable	  [FE]  AssertionFailedError  	1	4	add
406	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  }	  	compilable	  [FE]  AssertionFailedError  	1	4	add
407	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  }	  	compilable	  [FE]  AssertionFailedError  	1	4	add
408	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  If(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  If(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    If(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }	  	non-compiled	[CE]  ';'  expected	1	None	add
409	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_').append('_');  builder.append(fieldValue).append('_').append('_');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('_').append('_');    builder.append(fieldValue).append('_').append('_');	  	compilable	  [FE]  AssertionFailedError  	149	4	add
410	[BUG]  [BUGGY]  builder.append(fieldValue).append('_').append('_');  builder.append(fieldValue).append('_').append('_');  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_').append('_');  builder.append(fieldValue).append('_').append('_');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_').append('_');    builder.append(fieldValue).append('_').append('_');	  	compilable	  [FE]  AssertionFailedError  	149	4	add
411	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_').append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_').append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('_').append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_').append('_');  }	  	compilable	  [FE]  AssertionFailedError  	149	4	add
412	[BUG]  [BUGGY]  builder.append(fieldValue).append('_').append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_').append('_');  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_').append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_').append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_').append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_').append('_');  }	  	compilable	  [FE]  AssertionFailedError  	149	4	add
413	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_').append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_').append('_');  }  else  {  builder.append(fieldValue).append('_').append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('_').append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_').append('_');  }  else  {  builder.append(fieldValue).append('_').append('_');  }	  	compilable	  [FE]  AssertionFailedError  	149	4	add
414	[BUG]  [BUGGY]  builder.append(fieldValue).append('_').append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_').append('_');  }  else  {  builder.append(fieldValue).append('_').append('_');  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_').append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_').append('_');  }  else  {  builder.append(fieldValue).append('_').append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_').append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_').append('_');  }  else  {  builder.append(fieldValue).append('_').append('_');  }	  	compilable	  [FE]  AssertionFailedError  	149	4	add
415	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_').append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_').append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('_').append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_').append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	compilable	  [FE]  AssertionFailedError  	149	4	add
416	[BUG]  [BUGGY]  builder.append(fieldValue).append('_').append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_').append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_').append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_').append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_').append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_').append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	compilable	  [FE]  AssertionFailedError  	149	4	add
417	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(fieldValue).append('n');    if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	30	4	replace
418	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(fieldValue).append('n');    if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	30	4	replace
419	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('_');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	71	4	add
420	[BUG]  [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	71	4	add
421	[BUG]  [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( "  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( "	  	non-compiled	[CE]  unclosed  string  literal	71	None	add
422	[BUG]  [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'catch'  without  'try'  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  'catch'  without  'try'	71	None	add
423	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('_');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	71	4	add
424	[BUG]  [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	71	4	add
425	[BUG]  [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  [CE]  'catch'  without  'try'  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }	  	non-compiled	[CE]  'catch'  without  'try'	71	None	add
426	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue!=        null?        null        :        fieldValue);        builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	16	4	add
427	[BUG]  [BUGGY]  builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=        null?        null        :        fieldValue);        builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	16	4	add
428	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue!=        null?        null        :        fieldValue);        builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	16	4	add
429	[BUG]  [BUGGY]  builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=        null?        null        :        fieldValue);        builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	16	4	add
430	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue!=        null?        null        :        fieldValue);        builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	16	4	add
431	[BUG]  [BUGGY]  builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=        null?        null        :        fieldValue);        builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	16	4	add
432	[BUG]  [BUGGY]  builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  if(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  if(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=        null?        null        :        fieldValue);        builder.append(fieldValue!=    null?    null    :    fieldValue);    if(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);	  	non-compiled	[CE]  incompatible  types	16	None	add
433	[BUG]  [BUGGY]  builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  Builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  [CE]  cannot  find  symbol  Builder  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  Builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=        null?        null        :        fieldValue);        builder.append(fieldValue!=    null?    null    :    fieldValue);    Builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);	  	non-compiled	[CE]  cannot  find  symbol  Builder	16	None	add
434	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=  null?   "null "  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue!=  null?   "null "  :  fieldValue);	  builder.append(fieldValue    ==    null?   "null   "    :    fieldValue);    	compilable	  [FE]  AssertionFailedError  	181	4	replace
435	[BUG]  [BUGGY]  builder.append(fieldValue!=  null?   "null "  :  fieldValue);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=  null?   "null "  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=  null?   "null "  :  fieldValue);	  builder.append(fieldValue    ==    null?   "null   "    :    fieldValue);    	compilable	  [FE]  AssertionFailedError  	181	4	replace
436	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('n');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	compilable	  [FE]  AssertionFailedError  	27	4	add
437	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	compilable	  [FE]  AssertionFailedError  	27	4	add
438	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "	  	non-compiled	[CE]  unclosed  string  literal	27	None	add
439	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError(  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError(  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError(	  	non-compiled	[CE]  ')'  expected	27	None	add
440	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  Il  [CE]  unclosed  string  literal  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  Il  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  Il	  	non-compiled	[CE]  unclosed  string  literal	27	None	add
441	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [CE]  'catch'  without  'try'  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	non-compiled	[CE]  'catch'  without  'try'	27	None	add
442	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=  null?   "null   "  :  fieldValue.getClass());  builder.append(fieldValue!=  null?   "null   "  :  fieldValue.getClass());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue!=    null?   "null   "    :    fieldValue.getClass());    builder.append(fieldValue!=  null?   "null   "  :  fieldValue.getClass());	  	compilable	  [FE]  AssertionFailedError  	133	4	add
443	[BUG]  [BUGGY]  builder.append(fieldValue!=  null?   "null   "  :  fieldValue.getClass());  builder.append(fieldValue!=  null?   "null   "  :  fieldValue.getClass());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=  null?   "null   "  :  fieldValue.getClass());  builder.append(fieldValue!=  null?   "null   "  :  fieldValue.getClass());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=    null?   "null   "    :    fieldValue.getClass());    builder.append(fieldValue!=  null?   "null   "  :  fieldValue.getClass());	  	compilable	  [FE]  AssertionFailedError  	133	4	add
444	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=  null?   "null   "  :  fieldValue.getClass());  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue.getClass());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue!=    null?   "null   "    :    fieldValue.getClass());    builder.append(fieldValue  ==  null?   "null   "  :  fieldValue.getClass());	  	compilable	  [FE]  AssertionFailedError  	133	4	add
445	[BUG]  [BUGGY]  builder.append(fieldValue!=  null?   "null   "  :  fieldValue.getClass());  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue.getClass());  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=  null?   "null   "  :  fieldValue.getClass());  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue.getClass());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=    null?   "null   "    :    fieldValue.getClass());    builder.append(fieldValue  ==  null?   "null   "  :  fieldValue.getClass());	  	compilable	  [FE]  AssertionFailedError  	133	4	add
446	[BUG]  [BUGGY]  builder.append(fieldValue!=  null?   "null   "  :  fieldValue.getClass());  if(fieldValue!=  null?   "null   "  :  fieldValue.getClass());  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=  null?   "null   "  :  fieldValue.getClass());  if(fieldValue!=  null?   "null   "  :  fieldValue.getClass());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=    null?   "null   "    :    fieldValue.getClass());    if(fieldValue!=  null?   "null   "  :  fieldValue.getClass());	  	non-compiled	[CE]  incompatible  types	133	None	add
447	[BUG]  [BUGGY]  builder.append(fieldValue!=  null?   "null   "  :  fieldValue.getClass());  builder.append(fieldValue!=  null?   "null ",  :  fieldValue.getClass());  [CE]  :  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=  null?   "null   "  :  fieldValue.getClass());  builder.append(fieldValue!=  null?   "null ",  :  fieldValue.getClass());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=    null?   "null   "    :    fieldValue.getClass());    builder.append(fieldValue!=  null?   "null ",  :  fieldValue.getClass());	  	non-compiled	[CE]  :  expected	133	None	add
448	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  builder.append('$');    if(fieldValue!=    null)    {    builder.append('$');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    	compilable	  [FE]  AssertionFailedError  	60	4	replace
449	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  builder.append('$');    if(fieldValue!=    null)    {    builder.append('$');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    	compilable	  [FE]  AssertionFailedError  	60	4	replace
450	[BUG]  [BUGGY]  [FE]  InternalError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  builder.append('$');    if(fieldValue!=    null)    {    builder.append('$');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    	compilable	  [FE]  InternalError  	60	4	replace
451	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [FE]  InternalError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  builder.append('$');    if(fieldValue!=    null)    {    builder.append('$');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    	compilable	  [FE]  InternalError  	60	4	replace
452	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  builder.append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append('$');  builder.append('$');  }	  builder.append('$');    builder.append('$');    	compilable	  [FE]  AssertionFailedError  	54	4	replace
453	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  builder.append('$');  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  builder.append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append('$');  builder.append('$');  }	  builder.append('$');    builder.append('$');    	compilable	  [FE]  AssertionFailedError  	54	4	replace
454	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append('$');  builder.append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  ==  null)  {  builder.append('$');  builder.append('$');  }	  builder.append('$');    builder.append('$');    	compilable	  [FE]  AssertionFailedError  	54	4	replace
455	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  builder.append('$');  builder.append('$');  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append('$');  builder.append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null)  {  builder.append('$');  builder.append('$');  }	  builder.append('$');    builder.append('$');    	compilable	  [FE]  AssertionFailedError  	54	4	replace
456	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append('$');  builder.append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  instanceof  String)  {  builder.append('$');  builder.append('$');  }	  builder.append('$');    builder.append('$');    	compilable	  [FE]  AssertionFailedError  	54	4	replace
457	[BUG]  [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append('$');  builder.append('$');  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append('$');  builder.append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  String)  {  builder.append('$');  builder.append('$');  }	  builder.append('$');    builder.append('$');    	compilable	  [FE]  AssertionFailedError  	54	4	replace
458	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  builder.append('$');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append('$');  builder.append('$');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append('$');    builder.append('$');    	compilable	  [FE]  AssertionFailedError  	54	4	replace
459	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  builder.append('$');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  builder.append('$');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append('$');  builder.append('$');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append('$');    builder.append('$');    	compilable	  [FE]  AssertionFailedError  	54	4	replace
460	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());  builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue    ==    null?    null    :    fieldValue.getClass());    builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());	  	compilable	  [FE]  AssertionFailedError  	105	4	add
461	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());  builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());  builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue    ==    null?    null    :    fieldValue.getClass());    builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());	  	compilable	  [FE]  AssertionFailedError  	105	4	add
462	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());  builder.append(fieldValue!=  null?  null  :  fieldValue.getClass());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue    ==    null?    null    :    fieldValue.getClass());    builder.append(fieldValue!=  null?  null  :  fieldValue.getClass());	  	compilable	  [FE]  AssertionFailedError  	105	4	add
463	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());  builder.append(fieldValue!=  null?  null  :  fieldValue.getClass());  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());  builder.append(fieldValue!=  null?  null  :  fieldValue.getClass());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue    ==    null?    null    :    fieldValue.getClass());    builder.append(fieldValue!=  null?  null  :  fieldValue.getClass());	  	compilable	  [FE]  AssertionFailedError  	105	4	add
464	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());  if(fieldValue  ==  null?  null  :  fieldValue.getClass());  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());  if(fieldValue  ==  null?  null  :  fieldValue.getClass());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue    ==    null?    null    :    fieldValue.getClass());    if(fieldValue  ==  null?  null  :  fieldValue.getClass());	  	non-compiled	[CE]  incompatible  types	105	None	add
465	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());  Builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());  [CE]  cannot  find  symbol  Builder  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());  Builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue    ==    null?    null    :    fieldValue.getClass());    Builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());	  	non-compiled	[CE]  cannot  find  symbol  Builder	105	None	add
466	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());  if(fieldValue!=  null?  null  :  fieldValue.getClass());  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());  if(fieldValue!=  null?  null  :  fieldValue.getClass());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue    ==    null?    null    :    fieldValue.getClass());    if(fieldValue!=  null?  null  :  fieldValue.getClass());	  	non-compiled	[CE]  incompatible  types	105	None	add
467	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append(   ",n   ");  builder.append(fieldValue).append( ",n   ");  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append(   ",n   ");    builder.append(fieldValue).append( ",n   ");	  	compilable	  [FE]  AssertionFailedError  	87	4	add
468	[BUG]  [BUGGY]  builder.append(fieldValue).append(   ",n   ");  builder.append(fieldValue).append( ",n   ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append(   ",n   ");  builder.append(fieldValue).append( ",n   ");  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append(   ",n   ");    builder.append(fieldValue).append( ",n   ");	  	compilable	  [FE]  AssertionFailedError  	87	4	add
469	[BUG]  [BUGGY]  builder.append(fieldValue).append(   ",n   ");  builder.append(fieldValue).append(',n');  [CE]  unclosed  character  literal  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append(   ",n   ");  builder.append(fieldValue).append(',n');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append(   ",n   ");    builder.append(fieldValue).append(',n');	  	non-compiled	[CE]  unclosed  character  literal	87	None	add
470	[BUG]  [BUGGY]  Builder.append('$');  [CE]  cannot  find  symbol  Builder  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  Builder.append('$');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Builder.append('$');	  if(fieldValue!=    null)    {    builder.append('$');    }    	non-compiled	[CE]  cannot  find  symbol  Builder	14	None	replace
471	[BUG]  [BUGGY]  Builder.append(fieldValue);  [CE]  cannot  find  symbol  Builder  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  Builder.append(fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Builder.append(fieldValue);	  if(fieldValue!=    null)    {    builder.append('$');    }    	non-compiled	[CE]  cannot  find  symbol  Builder	14	None	replace
472	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append('n');  }	  builder.append(fieldValue.toString());    builder.append(fieldValue.toString());    	compilable	  [FE]  AssertionFailedError  	77	4	replace
473	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append('n');  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append('n');  }	  builder.append(fieldValue.toString());    builder.append(fieldValue.toString());    	compilable	  [FE]  AssertionFailedError  	77	4	replace
474	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  fieldValue.getName())&&  (field.getName().indexOf('$')  ==  -1)  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  fieldValue.getName())&&  (field.getName().indexOf('$')  ==  -1)  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  fieldValue.getName())&&  (field.getName().indexOf('$')  ==  -1)	  builder.append('$');    if(fieldValue!=    null)    {    if(!ArrayUtils.contains(excludeFields,    fieldValue.getName())&&    (field.getName().indexOf('$')    ==    -1)&&    useTransients    ||!    	non-compiled	[CE]  ')'  expected	145	None	replace
475	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  builder.append('$');  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  fieldValue.getName())&&  (field.getName().indexOf('$')  ==  -1)  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append('$');  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  fieldValue.getName())&&  (field.getName().indexOf('$')  ==  -1)  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null)  {  builder.append('$');  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  fieldValue.getName())&&  (field.getName().indexOf('$')  ==  -1)	  builder.append('$');    if(fieldValue!=    null)    {    if(!ArrayUtils.contains(excludeFields,    fieldValue.getName())&&    (field.getName().indexOf('$')    ==    -1)&&    useTransients    ||!    	non-compiled	[CE]  ')'  expected	145	None	replace
476	[BUG]  [BUGGY]  builder.append('$');  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  fieldValue.getName())&&  (field.getName().indexOf('$')  ==  -1)  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  fieldValue.getName())&&  (field.getName().indexOf('$')  ==  -1)  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  fieldValue.getName())&&  (field.getName().indexOf('$')  ==  -1)	  builder.append('$');    if(fieldValue!=    null)    {    if(!ArrayUtils.contains(excludeFields,    fieldValue.getName())&&    (field.getName().indexOf('$')    ==    -1)&&    useTransients    ||!    	non-compiled	[CE]  ')'  expected	145	None	replace
477	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  fieldValue.getName())&&  (field.getName().indexOf(  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  fieldValue.getName())&&  (field.getName().indexOf(  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  fieldValue.getName())&&  (field.getName().indexOf(	  builder.append('$');    if(fieldValue!=    null)    {    if(!ArrayUtils.contains(excludeFields,    fieldValue.getName())&&    (field.getName().indexOf('$')    ==    -1)&&    useTransients    ||!    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
478	[BUG]  [BUGGY]  ||  fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  ||  fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	||  fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }	  if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
479	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$').append(fieldValue);  builder.append('$').append(fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('$').append(fieldValue);    builder.append('$').append(fieldValue);	  	compilable	  [FE]  AssertionFailedError  	146	4	add
480	[BUG]  [BUGGY]  builder.append('$').append(fieldValue);  builder.append('$').append(fieldValue);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$').append(fieldValue);  builder.append('$').append(fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$').append(fieldValue);    builder.append('$').append(fieldValue);	  	compilable	  [FE]  AssertionFailedError  	146	4	add
481	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$').append(fieldValue);  if(fieldValue!=  null)  {  builder.append('$').append(fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('$').append(fieldValue);    if(fieldValue!=  null)  {  builder.append('$').append(fieldValue);  }	  	compilable	  [FE]  AssertionFailedError  	146	4	add
482	[BUG]  [BUGGY]  builder.append('$').append(fieldValue);  if(fieldValue!=  null)  {  builder.append('$').append(fieldValue);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$').append(fieldValue);  if(fieldValue!=  null)  {  builder.append('$').append(fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$').append(fieldValue);    if(fieldValue!=  null)  {  builder.append('$').append(fieldValue);  }	  	compilable	  [FE]  AssertionFailedError  	146	4	add
483	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$').append(fieldValue);  if(fieldValue  ==  null)  {  builder.append('$').append(fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('$').append(fieldValue);    if(fieldValue  ==  null)  {  builder.append('$').append(fieldValue);  }	  	compilable	  [FE]  AssertionFailedError  	146	4	add
484	[BUG]  [BUGGY]  builder.append('$').append(fieldValue);  if(fieldValue  ==  null)  {  builder.append('$').append(fieldValue);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$').append(fieldValue);  if(fieldValue  ==  null)  {  builder.append('$').append(fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$').append(fieldValue);    if(fieldValue  ==  null)  {  builder.append('$').append(fieldValue);  }	  	compilable	  [FE]  AssertionFailedError  	146	4	add
485	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$').append(fieldValue);  if(fieldValue!=  null)  {  builder.append('$').append(fieldValue);  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('$').append(fieldValue);    if(fieldValue!=  null)  {  builder.append('$').append(fieldValue);  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	compilable	  [FE]  AssertionFailedError  	146	4	add
486	[BUG]  [BUGGY]  builder.append('$').append(fieldValue);  if(fieldValue!=  null)  {  builder.append('$').append(fieldValue);  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$').append(fieldValue);  if(fieldValue!=  null)  {  builder.append('$').append(fieldValue);  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$').append(fieldValue);    if(fieldValue!=  null)  {  builder.append('$').append(fieldValue);  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	compilable	  [FE]  AssertionFailedError  	146	4	add
487	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$').append(fieldValue);  if(fieldValue  instanceof  Field)  {  builder.append('$').append(fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('$').append(fieldValue);    if(fieldValue  instanceof  Field)  {  builder.append('$').append(fieldValue);  }	  	compilable	  [FE]  AssertionFailedError  	146	4	add
488	[BUG]  [BUGGY]  builder.append('$').append(fieldValue);  if(fieldValue  instanceof  Field)  {  builder.append('$').append(fieldValue);  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$').append(fieldValue);  if(fieldValue  instanceof  Field)  {  builder.append('$').append(fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$').append(fieldValue);    if(fieldValue  instanceof  Field)  {  builder.append('$').append(fieldValue);  }	  	compilable	  [FE]  AssertionFailedError  	146	4	add
489	[BUG]  [BUGGY]  Builder.append(fieldValue  ==  null?  null  :  fieldValue);  [CE]  cannot  find  symbol  Builder  [FE]              AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  Builder.append(fieldValue  ==  null?  null  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Builder.append(fieldValue  ==  null?  null  :  fieldValue);	  builder.append(fieldValue    ==    null?    null    :    fieldValue);    Builder.append(fieldValue    ==    null?    null    :    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  Builder	94	None	replace
490	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue);  Builder.append(fieldValue!=  null?  null  :  fieldValue);  [CE]  cannot  find  symbol  Builder  [FE]                AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue);  Builder.append(fieldValue!=  null?  null  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue  ==  null?  null  :  fieldValue);  Builder.append(fieldValue!=  null?  null  :  fieldValue);	  builder.append(fieldValue    ==    null?    null    :    fieldValue);    Builder.append(fieldValue    ==    null?    null    :    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  Builder	94	None	replace
491	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('_');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	compilable	  [FE]  AssertionFailedError  	69	4	add
492	[BUG]  [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	compilable	  [FE]  AssertionFailedError  	69	4	add
493	[BUG]  [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError(  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError(  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError(	  	non-compiled	[CE]  ')'  expected	69	None	add
494	[BUG]  [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "	  	non-compiled	[CE]  unclosed  string  literal	69	None	add
495	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('_');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	compilable	  [FE]  AssertionFailedError  	69	4	add
496	[BUG]  [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	compilable	  [FE]  AssertionFailedError  	69	4	add
497	[BUG]  [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  [CE]  'catch'  without  'try'  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }	  	non-compiled	[CE]  'catch'  without  'try'	69	None	add
498	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    builder.append('$');  builder.append('$');  builder.append('$');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('$');        builder.append('$');    builder.append('$');  builder.append('$');	  	compilable	  [FE]  AssertionFailedError  	53	4	add
499	[BUG]  [BUGGY]  builder.append('$');    builder.append('$');  builder.append('$');  builder.append('$');  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    builder.append('$');  builder.append('$');  builder.append('$');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');        builder.append('$');    builder.append('$');  builder.append('$');	  	compilable	  [FE]  AssertionFailedError  	53	4	add
500	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  builder.append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('$');        builder.append('$');    if(fieldValue!=  null)  {  builder.append('$');  builder.append('$');  }	  	compilable	  [FE]  AssertionFailedError  	53	4	add
501	[BUG]  [BUGGY]  builder.append('$');    builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  builder.append('$');  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  builder.append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');        builder.append('$');    if(fieldValue!=  null)  {  builder.append('$');  builder.append('$');  }	  	compilable	  [FE]  AssertionFailedError  	53	4	add
502	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  builder.append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('$');        builder.append('$');    if(fieldValue  ==  null)  {  builder.append('$');  builder.append('$');  }	  	compilable	  [FE]  AssertionFailedError  	53	4	add
503	[BUG]  [BUGGY]  builder.append('$');    builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  builder.append('$');  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  builder.append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');        builder.append('$');    if(fieldValue  ==  null)  {  builder.append('$');  builder.append('$');  }	  	compilable	  [FE]  AssertionFailedError  	53	4	add
504	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    builder.append('$');  if(fieldValue  instanceof  String)  {  builder.append('$');  builder.append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('$');        builder.append('$');    if(fieldValue  instanceof  String)  {  builder.append('$');  builder.append('$');  }	  	compilable	  [FE]  AssertionFailedError  	53	4	add
505	[BUG]  [BUGGY]  builder.append('$');    builder.append('$');  if(fieldValue  instanceof  String)  {  builder.append('$');  builder.append('$');  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    builder.append('$');  if(fieldValue  instanceof  String)  {  builder.append('$');  builder.append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');        builder.append('$');    if(fieldValue  instanceof  String)  {  builder.append('$');  builder.append('$');  }	  	compilable	  [FE]  AssertionFailedError  	53	4	add
506	[BUG]  [BUGGY]  builder.append('$');    builder.append('$');  Builder.append('$');  builder.append('$');  [CE]  cannot  find  symbol  Builder  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    builder.append('$');  Builder.append('$');  builder.append('$');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');        builder.append('$');    Builder.append('$');  builder.append('$');	  	non-compiled	[CE]  cannot  find  symbol  Builder	53	None	add
507	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('n');        builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');	  	compilable	  [FE]  AssertionFailedError  	23	4	add
508	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');        builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');	  	compilable	  [FE]  AssertionFailedError  	23	4	add
509	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('n');        builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  }	  	compilable	  [FE]  AssertionFailedError  	23	4	add
510	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');        builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  }	  	compilable	  [FE]  AssertionFailedError  	23	4	add
511	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('n');        builder.append(fieldValue).append('n');    if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  }	  	compilable	  [FE]  AssertionFailedError  	23	4	add
512	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');        builder.append(fieldValue).append('n');    if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  }	  	compilable	  [FE]  AssertionFailedError  	23	4	add
513	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');  if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('n');        builder.append(fieldValue).append('n');    if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  }	  	compilable	  [FE]  AssertionFailedError  	23	4	add
514	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');  if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');  if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');        builder.append(fieldValue).append('n');    if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  }	  	compilable	  [FE]  AssertionFailedError  	23	4	add
515	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');  Builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  [CE]  cannot  find  symbol  Builder  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');  Builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');        builder.append(fieldValue).append('n');    Builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');	  	non-compiled	[CE]  cannot  find  symbol  Builder	23	None	add
516	[BUG]  [BUGGY]  int[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('+');  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  int[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('+');  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	int[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('+');  }	  Integer[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iConstant++)    {    builder.append('+');    }    	non-compiled	[CE]  ')'  expected	100	None	replace
517	[BUG]  [BUGGY]  Field[]  excludeFields  =  field.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  Field[]  excludeFields  =  field.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Field[]  excludeFields  =  field.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]	  if(fieldValue!=    null)    {    String[]    excludeFields    =    field.getexcludeFields();    for(int    i    =    0;    i    <    excludeFields.length;    i++)    {    builder.append(excludeFields[i]    	non-compiled	[CE]  ')'  expected	168	None	replace
518	[BUG]  [BUGGY]  String[]  excludeFields  =  field.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  String[]  excludeFields  =  field.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	String[]  excludeFields  =  field.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]	  if(fieldValue!=    null)    {    String[]    excludeFields    =    field.getexcludeFields();    for(int    i    =    0;    i    <    excludeFields.length;    i++)    {    builder.append(excludeFields[i]    	non-compiled	[CE]  ')'  expected	168	None	replace
519	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  String[]  excludeFields  =  field.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  String[]  excludeFields  =  field.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  String[]  excludeFields  =  field.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]  }	  if(fieldValue!=    null)    {    String[]    excludeFields    =    field.getexcludeFields();    for(int    i    =    0;    i    <    excludeFields.length;    i++)    {    builder.append(excludeFields[i]    	non-compiled	[CE]  ')'  expected	168	None	replace
520	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }	  	compilable	  [FE]  AssertionFailedError  	7	4	add
521	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }	  	compilable	  [FE]  AssertionFailedError  	7	4	add
522	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  }	  	compilable	  [FE]  AssertionFailedError  	7	4	add
523	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  }	  	compilable	  [FE]  AssertionFailedError  	7	4	add
524	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  If(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  If(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    If(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }	  	non-compiled	[CE]  ';'  expected	7	None	add
525	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  builder.append(fieldValue).append('n');    if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    	compilable	  [FE]  AssertionFailedError  	28	4	replace
526	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  builder.append(fieldValue).append('n');    if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    	compilable	  [FE]  AssertionFailedError  	28	4	replace
527	[BUG]  [BUGGY]  [FE]  InternalError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  builder.append(fieldValue).append('n');    if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    	compilable	  [FE]  InternalError  	28	4	replace
528	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [FE]  InternalError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  builder.append(fieldValue).append('n');    if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    	compilable	  [FE]  InternalError  	28	4	replace
529	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalAccessException( " ");  }	  builder.append(fieldValue).append('n');    if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    IllegalAccessException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	32	4	replace
530	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalAccessException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalAccessException( " ");  }	  builder.append(fieldValue).append('n');    if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    IllegalAccessException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	32	4	replace
531	[BUG]  [BUGGY]  [FE]  InternalError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalAccessException( " ");  }	  builder.append(fieldValue).append('n');    if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    IllegalAccessException(   "   ");    }    	compilable	  [FE]  InternalError  	32	4	replace
532	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalAccessException( " ");  }  [FE]  InternalError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalAccessException( " ");  }	  builder.append(fieldValue).append('n');    if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    IllegalAccessException(   "   ");    }    	compilable	  [FE]  InternalError  	32	4	replace
533	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  fieldValue.getName())&&  (fieldValue.getName().indexOf('$')  ==  -1)  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  fieldValue.getName())&&  (fieldValue.getName().indexOf('$')  ==  -1)  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  fieldValue.getName())&&  (fieldValue.getName().indexOf('$')  ==  -1)	  builder.append('$');    if(fieldValue!=    null)    {    if(!ArrayUtils.contains(excludeFields,    fieldValue.getName())&&    (fieldValue.getName().indexOf('$')    ==    -1)&&    useTransients    ||!    	non-compiled	[CE]  ')'  expected	142	None	replace
534	[BUG]  [BUGGY]  builder.append('$');  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  fieldValue.getName())&&  (fieldValue.getName().indexOf('$')  ==  -1)  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  fieldValue.getName())&&  (fieldValue.getName().indexOf('$')  ==  -1)  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  fieldValue.getName())&&  (fieldValue.getName().indexOf('$')  ==  -1)	  builder.append('$');    if(fieldValue!=    null)    {    if(!ArrayUtils.contains(excludeFields,    fieldValue.getName())&&    (fieldValue.getName().indexOf('$')    ==    -1)&&    useTransients    ||!    	non-compiled	[CE]  ')'  expected	142	None	replace
535	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  fieldValue.getName())&&  (fieldValue.getName().indexOf(  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  fieldValue.getName())&&  (fieldValue.getName().indexOf(  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  fieldValue.getName())&&  (fieldValue.getName().indexOf(	  builder.append('$');    if(fieldValue!=    null)    {    if(!ArrayUtils.contains(excludeFields,    fieldValue.getName())&&    (fieldValue.getName().indexOf('$')    ==    -1)&&    useTransients    ||!    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
536	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  builder.append('$');  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  fieldValue.getName())&&  (fieldValue.getName().indexOf('$')  ==  -1)  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append('$');  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  fieldValue.getName())&&  (fieldValue.getName().indexOf('$')  ==  -1)  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null)  {  builder.append('$');  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  fieldValue.getName())&&  (fieldValue.getName().indexOf('$')  ==  -1)	  builder.append('$');    if(fieldValue!=    null)    {    if(!ArrayUtils.contains(excludeFields,    fieldValue.getName())&&    (fieldValue.getName().indexOf('$')    ==    -1)&&    useTransients    ||!    	non-compiled	[CE]  ')'  expected	142	None	replace
537	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=  null?  null  :  fieldValue.getClass());  builder.append(fieldValue!=  null?  null  :  fieldValue.getClass());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue!=    null?    null    :    fieldValue.getClass());    builder.append(fieldValue!=  null?  null  :  fieldValue.getClass());	  	compilable	  [FE]  AssertionFailedError  	107	4	add
538	[BUG]  [BUGGY]  builder.append(fieldValue!=  null?  null  :  fieldValue.getClass());  builder.append(fieldValue!=  null?  null  :  fieldValue.getClass());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=  null?  null  :  fieldValue.getClass());  builder.append(fieldValue!=  null?  null  :  fieldValue.getClass());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=    null?    null    :    fieldValue.getClass());    builder.append(fieldValue!=  null?  null  :  fieldValue.getClass());	  	compilable	  [FE]  AssertionFailedError  	107	4	add
539	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=  null?  null  :  fieldValue.getClass());  builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue!=    null?    null    :    fieldValue.getClass());    builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());	  	compilable	  [FE]  AssertionFailedError  	107	4	add
540	[BUG]  [BUGGY]  builder.append(fieldValue!=  null?  null  :  fieldValue.getClass());  builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=  null?  null  :  fieldValue.getClass());  builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=    null?    null    :    fieldValue.getClass());    builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());	  	compilable	  [FE]  AssertionFailedError  	107	4	add
541	[BUG]  [BUGGY]  builder.append(fieldValue!=  null?  null  :  fieldValue.getClass());  if(fieldValue!=  null?  null  :  fieldValue.getClass());  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=  null?  null  :  fieldValue.getClass());  if(fieldValue!=  null?  null  :  fieldValue.getClass());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=    null?    null    :    fieldValue.getClass());    if(fieldValue!=  null?  null  :  fieldValue.getClass());	  	non-compiled	[CE]  incompatible  types	107	None	add
542	[BUG]  [BUGGY]  builder.append(fieldValue!=  null?  null  :  fieldValue.getClass());  Builder.append(fieldValue!=  null?  null  :  fieldValue.getClass());  [CE]  cannot  find  symbol  Builder  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=  null?  null  :  fieldValue.getClass());  Builder.append(fieldValue!=  null?  null  :  fieldValue.getClass());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=    null?    null    :    fieldValue.getClass());    Builder.append(fieldValue!=  null?  null  :  fieldValue.getClass());	  	non-compiled	[CE]  cannot  find  symbol  Builder	107	None	add
543	[BUG]  [BUGGY]  builder.append(fieldValue!=  null?  null  :  fieldValue.getClass());  builder.append(fieldValue  >>  null?  null  :  fieldValue.getClass());  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=  null?  null  :  fieldValue.getClass());  builder.append(fieldValue  >>  null?  null  :  fieldValue.getClass());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=    null?    null    :    fieldValue.getClass());    builder.append(fieldValue  >>  null?  null  :  fieldValue.getClass());	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	107	None	add
544	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue.toString());  builder.append(fieldValue  ==  null?  null  :  fieldValue.toString());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue    ==    null?    null    :    fieldValue.toString());    builder.append(fieldValue  ==  null?  null  :  fieldValue.toString());	  	compilable	  [FE]  AssertionFailedError  	120	4	add
545	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue.toString());  builder.append(fieldValue  ==  null?  null  :  fieldValue.toString());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue.toString());  builder.append(fieldValue  ==  null?  null  :  fieldValue.toString());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue    ==    null?    null    :    fieldValue.toString());    builder.append(fieldValue  ==  null?  null  :  fieldValue.toString());	  	compilable	  [FE]  AssertionFailedError  	120	4	add
546	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue.toString());  if(fieldValue  ==  null?  null  :  fieldValue.toString())  {  builder.append(fieldValue  ==  null?  null  :  fieldValue.toString());  }  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue.toString());  if(fieldValue  ==  null?  null  :  fieldValue.toString())  {  builder.append(fieldValue  ==  null?  null  :  fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue    ==    null?    null    :    fieldValue.toString());    if(fieldValue  ==  null?  null  :  fieldValue.toString())  {  builder.append(fieldValue  ==  null?  null  :  fieldValue.toString());  }	  	non-compiled	[CE]  incompatible  types	120	None	add
547	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue.toString());  builder.append(fieldValue!=  null?  null  :  fieldValue.toString());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue    ==    null?    null    :    fieldValue.toString());    builder.append(fieldValue!=  null?  null  :  fieldValue.toString());	  	compilable	  [FE]  AssertionFailedError  	120	4	add
548	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue.toString());  builder.append(fieldValue!=  null?  null  :  fieldValue.toString());  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue.toString());  builder.append(fieldValue!=  null?  null  :  fieldValue.toString());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue    ==    null?    null    :    fieldValue.toString());    builder.append(fieldValue!=  null?  null  :  fieldValue.toString());	  	compilable	  [FE]  AssertionFailedError  	120	4	add
549	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue.toString());  if(fieldValue  ==  null?  null  :  fieldValue.toString());  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue.toString());  if(fieldValue  ==  null?  null  :  fieldValue.toString());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue    ==    null?    null    :    fieldValue.toString());    if(fieldValue  ==  null?  null  :  fieldValue.toString());	  	non-compiled	[CE]  incompatible  types	120	None	add
550	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue.toString());  if(fieldValue  ==  null?  null  :  fieldValue.toString())  {  builder.append(fieldValue!=  null?  null  :  fieldValue.toString());  }  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue.toString());  if(fieldValue  ==  null?  null  :  fieldValue.toString())  {  builder.append(fieldValue!=  null?  null  :  fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue    ==    null?    null    :    fieldValue.toString());    if(fieldValue  ==  null?  null  :  fieldValue.toString())  {  builder.append(fieldValue!=  null?  null  :  fieldValue.toString());  }	  	non-compiled	[CE]  incompatible  types	120	None	add
551	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue!=  null?  null  :  fieldValue);  }  else  {  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue!=  null?  null  :  fieldValue);  }  else  {  builder.append(fieldValue.toString());  }	  builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue!=    null?    null    :    fieldValue);    	compilable	  [FE]  AssertionFailedError  	17	4	replace
552	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue!=  null?  null  :  fieldValue);  }  else  {  builder.append(fieldValue.toString());  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue!=  null?  null  :  fieldValue);  }  else  {  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue!=  null?  null  :  fieldValue);  }  else  {  builder.append(fieldValue.toString());  }	  builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue!=    null?    null    :    fieldValue);    	compilable	  [FE]  AssertionFailedError  	17	4	replace
553	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?  fieldValue.toString()  : "null ");  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue  ==  null?  fieldValue.toString()  : "null ");	  builder.append(fieldValue!=    null?    fieldValue.toString()    :   "null   ");    	compilable	  [FE]  AssertionFailedError  	178	4	replace
554	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?  fieldValue.toString()  : "null ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?  fieldValue.toString()  : "null ");  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue  ==  null?  fieldValue.toString()  : "null ");	  builder.append(fieldValue!=    null?    fieldValue.toString()    :   "null   ");    	compilable	  [FE]  AssertionFailedError  	178	4	replace
555	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	compilable	  [FE]  AssertionFailedError  	182	4	add
556	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	compilable	  [FE]  AssertionFailedError  	182	4	add
557	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException. ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException. ");  }	  	compilable	  [FE]  AssertionFailedError  	182	4	add
558	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException. ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException. ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException. ");  }	  	compilable	  [FE]  AssertionFailedError  	182	4	add
559	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(excludeFields[0].getName());  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(excludeFields[0].getName());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(excludeFields[0].getName());  }	  builder.append(fieldValue.toString());    if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    builder.append(excludeFields[0].getName());    }    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
560	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  Field[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Field[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('  }	  if(fieldValue    ==    null)    {    String[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iConstant++)    {    builder.append('    }    	non-compiled	[CE]  ')'  expected	47	None	replace
561	[BUG]  [BUGGY]  String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('  }	  if(fieldValue    ==    null)    {    String[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iConstant++)    {    builder.append('    }    	non-compiled	[CE]  ')'  expected	47	None	replace
562	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(excludeFields[0].getName());  }  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(excludeFields[0].getName());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(excludeFields[0].getName());  }	  builder.append(fieldValue.getClass());    if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    builder.append(excludeFields[0].getName());    }    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
563	[BUG]  [BUGGY]  Builder.append(fieldValue.getClass());  [CE]  cannot  find  symbol  Builder  [FE]          AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  Builder.append(fieldValue.getClass());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Builder.append(fieldValue.getClass());	  builder.append(fieldValue.getClass());    if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    builder.append(excludeFields[0].getName());    }    	non-compiled	[CE]  cannot  find  symbol  Builder	136	None	replace
564	[BUG]  [BUGGY]  Field[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  Field[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Field[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('  }	  Field[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iConstant++)    {    builder.append('    	non-compiled	[CE]  ')'  expected	46	None	replace
565	[BUG]  [BUGGY]  Field[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  Field[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Field[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('	  Field[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iConstant++)    {    builder.append('    	non-compiled	[CE]  ')'  expected	46	None	replace
566	[BUG]  [BUGGY]  Field[]  fields  =  object.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  Field[]  fields  =  object.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Field[]  fields  =  object.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('  }	  Field[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iConstant++)    {    builder.append('    	non-compiled	[CE]  ')'  expected	46	None	replace
567	[BUG]  [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append('_');  Builder.append(fieldValue).append('_');  }  [CE]  cannot  find  symbol  Builder  [FE]        AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append('_');  Builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append('_');  Builder.append(fieldValue).append('_');  }	  builder.append(fieldValue).append('_');    Builder.append(fieldValue).append('_');    	non-compiled	[CE]  cannot  find  symbol  Builder	154	None	replace
568	[BUG]  [BUGGY]  Builder.append(fieldValue).append('_');  [CE]  cannot  find  symbol  Builder  [FE]          AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  Builder.append(fieldValue).append('_');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Builder.append(fieldValue).append('_');	  builder.append(fieldValue).append('_');    Builder.append(fieldValue).append('_');    	non-compiled	[CE]  cannot  find  symbol  Builder	154	None	replace
569	[BUG]  [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append('_');  Builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  Builder  [FE]            AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append('_');  Builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append('_');  Builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(fieldValue).append('_');    Builder.append(fieldValue).append('_');    	non-compiled	[CE]  cannot  find  symbol  Builder	154	None	replace
570	[BUG]  [BUGGY]  builder.append(fieldValue,  field.getName());  [CE]  no  suitable  method  found  for  append(Object,String)  [FE]          AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue,  field.getName());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue,  field.getName());	  builder.append(fieldValue.getName());    	non-compiled	[CE]  no  suitable  method  found  for  append(Object,String)	86	None	replace
571	[BUG]  [BUGGY]  builder.append(fieldValue.getName(),  field.getName());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getName(),  field.getName());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getName(),  field.getName());	  builder.append(fieldValue.getName());    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
572	[BUG]  [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  	  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');    if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&    (useTransients    ||!    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
573	[BUG]  [BUGGY]  ||  fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  ||  fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	||  fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }	  if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
574	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(fieldValue.getClass());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(fieldValue.getClass());  }	  builder.append(fieldValue.getClass());    builder.append(fieldValue.getClass());    	compilable	  [FE]  AssertionFailedError  	34	4	replace
575	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(fieldValue.getClass());  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(fieldValue.getClass());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(fieldValue.getClass());  }	  builder.append(fieldValue.getClass());    builder.append(fieldValue.getClass());    	compilable	  [FE]  AssertionFailedError  	34	4	replace
576	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append('[');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append('[');  }	  builder.append(fieldValue.getClass());    builder.append(fieldValue.getClass());    	compilable	  [FE]  AssertionFailedError  	34	4	replace
577	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append('[');  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append('[');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append('[');  }	  builder.append(fieldValue.getClass());    builder.append(fieldValue.getClass());    	compilable	  [FE]  AssertionFailedError  	34	4	replace
578	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	4	4	replace
579	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	4	4	replace
580	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  builder.append(fieldValue.getClass());    if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    	compilable	  [FE]  AssertionFailedError  	42	4	replace
581	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  builder.append(fieldValue.getClass());    if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    	compilable	  [FE]  AssertionFailedError  	42	4	replace
582	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  [CE]  'catch'  without  'try'  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }	  builder.append(fieldValue.getClass());    if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    	non-compiled	[CE]  'catch'  without  'try'	42	None	replace
583	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue).append('$');  }	  builder.append(fieldValue).append('$');    	compilable	  [FE]  AssertionFailedError  	140	4	replace
584	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('$');  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue).append('$');  }	  builder.append(fieldValue).append('$');    	compilable	  [FE]  AssertionFailedError  	140	4	replace
585	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append('$');  }	  builder.append(fieldValue).append('$');    	compilable	  [FE]  AssertionFailedError  	140	4	replace
586	[BUG]  [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append('$');  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append('$');  }	  builder.append(fieldValue).append('$');    	compilable	  [FE]  AssertionFailedError  	140	4	replace
587	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('$');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue).append('$');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(fieldValue).append('$');    	compilable	  [FE]  AssertionFailedError  	140	4	replace
588	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('$');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('$');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue).append('$');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(fieldValue).append('$');    	compilable	  [FE]  AssertionFailedError  	140	4	replace
589	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append(     ",     ");    builder.append(fieldValue).append(     ",     ");  builder.append(fieldValue).append( ",   ");  builder.append(fieldValue).append( ",   ");  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append(       ",       ");        builder.append(fieldValue).append(       ",       ");    builder.append(fieldValue).append( ",   ");  builder.append(fieldValue).append( ",   ");	  	compilable	  [FE]  AssertionFailedError  	101	4	add
590	[BUG]  [BUGGY]  builder.append(fieldValue).append(     ",     ");    builder.append(fieldValue).append(     ",     ");  builder.append(fieldValue).append( ",   ");  builder.append(fieldValue).append( ",   ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append(     ",     ");    builder.append(fieldValue).append(     ",     ");  builder.append(fieldValue).append( ",   ");  builder.append(fieldValue).append( ",   ");  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append(       ",       ");        builder.append(fieldValue).append(       ",       ");    builder.append(fieldValue).append( ",   ");  builder.append(fieldValue).append( ",   ");	  	compilable	  [FE]  AssertionFailedError  	101	4	add
591	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append(     ",     ");    builder.append(fieldValue).append(     ",     ");  builder.append(fieldValue).append( ",   ");  builder.append(fieldValue).append(',');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append(       ",       ");        builder.append(fieldValue).append(       ",       ");    builder.append(fieldValue).append( ",   ");  builder.append(fieldValue).append(',');	  	compilable	  [FE]  AssertionFailedError  	101	4	add
592	[BUG]  [BUGGY]  builder.append(fieldValue).append(     ",     ");    builder.append(fieldValue).append(     ",     ");  builder.append(fieldValue).append( ",   ");  builder.append(fieldValue).append(',');  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append(     ",     ");    builder.append(fieldValue).append(     ",     ");  builder.append(fieldValue).append( ",   ");  builder.append(fieldValue).append(',');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append(       ",       ");        builder.append(fieldValue).append(       ",       ");    builder.append(fieldValue).append( ",   ");  builder.append(fieldValue).append(',');	  	compilable	  [FE]  AssertionFailedError  	101	4	add
593	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append( ", ");  }  else  {  builder.append(fieldValue).append( ", ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append( ", ");  }  else  {  builder.append(fieldValue).append( ", ");  }	  builder.append(fieldValue).append(       ",       ");    builder.append(fieldValue).append(',');    	compilable	  [FE]  AssertionFailedError  	174	4	replace
594	[BUG]  [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append( ", ");  }  else  {  builder.append(fieldValue).append( ", ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append( ", ");  }  else  {  builder.append(fieldValue).append( ", ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append( ", ");  }  else  {  builder.append(fieldValue).append( ", ");  }	  builder.append(fieldValue).append(       ",       ");    builder.append(fieldValue).append(',');    	compilable	  [FE]  AssertionFailedError  	174	4	replace
595	[BUG]  [BUGGY]  builder.append('$');    if(fieldValue!=  null)  {  builder.append('$');  }  if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    if(fieldValue!=  null)  {  builder.append('$');  }  if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');        if(fieldValue!=    null)    {    builder.append('$');    }    if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  }	  	non-compiled	[CE]  'catch'  without  'try'	55	None	add
596	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    if(fieldValue!=  null)  {  builder.append('$');  }  if(fieldValue!=  null)  {  builder.append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('$');        if(fieldValue!=    null)    {    builder.append('$');    }    if(fieldValue!=  null)  {  builder.append('$');  }	  	compilable	  [FE]  AssertionFailedError  	55	4	add
597	[BUG]  [BUGGY]  builder.append('$');    if(fieldValue!=  null)  {  builder.append('$');  }  if(fieldValue!=  null)  {  builder.append('$');  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    if(fieldValue!=  null)  {  builder.append('$');  }  if(fieldValue!=  null)  {  builder.append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');        if(fieldValue!=    null)    {    builder.append('$');    }    if(fieldValue!=  null)  {  builder.append('$');  }	  	compilable	  [FE]  AssertionFailedError  	55	4	add
598	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    if(fieldValue!=  null)  {  builder.append('$');  }  builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('$');        if(fieldValue!=    null)    {    builder.append('$');    }    builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  }	  	compilable	  [FE]  AssertionFailedError  	55	4	add
599	[BUG]  [BUGGY]  builder.append('$');    if(fieldValue!=  null)  {  builder.append('$');  }  builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    if(fieldValue!=  null)  {  builder.append('$');  }  builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');        if(fieldValue!=    null)    {    builder.append('$');    }    builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  }	  	compilable	  [FE]  AssertionFailedError  	55	4	add
600	[BUG]  [BUGGY]  builder.append('$');    if(fieldValue!=  null)  {  builder.append('$');  }  if(fieldValue  ==  null)  {  builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  }  [CE]  'catch'  without  'try'  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    if(fieldValue!=  null)  {  builder.append('$');  }  if(fieldValue  ==  null)  {  builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');        if(fieldValue!=    null)    {    builder.append('$');    }    if(fieldValue  ==  null)  {  builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  }	  	non-compiled	[CE]  'catch'  without  'try'	55	None	add
601	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    if(fieldValue!=  null)  {  builder.append('$');  }  if(fieldValue  ==  null)  {  builder.append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('$');        if(fieldValue!=    null)    {    builder.append('$');    }    if(fieldValue  ==  null)  {  builder.append('$');  }	  	compilable	  [FE]  AssertionFailedError  	55	4	add
602	[BUG]  [BUGGY]  builder.append('$');    if(fieldValue!=  null)  {  builder.append('$');  }  if(fieldValue  ==  null)  {  builder.append('$');  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    if(fieldValue!=  null)  {  builder.append('$');  }  if(fieldValue  ==  null)  {  builder.append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');        if(fieldValue!=    null)    {    builder.append('$');    }    if(fieldValue  ==  null)  {  builder.append('$');  }	  	compilable	  [FE]  AssertionFailedError  	55	4	add
603	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue  ==  null?  null  :  fieldValue);  }  else  {  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue  ==  null?  null  :  fieldValue);  }  else  {  builder.append(fieldValue.toString());  }	  builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue!=    null?    null    :    fieldValue);    	compilable	  [FE]  AssertionFailedError  	92	1	replace
604	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue  ==  null?  null  :  fieldValue);  }  else  {  builder.append(fieldValue.toString());  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue  ==  null?  null  :  fieldValue);  }  else  {  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue  ==  null?  null  :  fieldValue);  }  else  {  builder.append(fieldValue.toString());  }	  builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue!=    null?    null    :    fieldValue);    	compilable	  [FE]  AssertionFailedError  	92	1	replace
605	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue  ==  null?  null  :  fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue  ==  null?  null  :  fieldValue);  }	  builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue!=    null?    null    :    fieldValue);    	compilable	  [FE]  AssertionFailedError  	92	1	replace
606	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue  ==  null?  null  :  fieldValue);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue  ==  null?  null  :  fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue  ==  null?  null  :  fieldValue);  }	  builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue!=    null?    null    :    fieldValue);    	compilable	  [FE]  AssertionFailedError  	92	1	replace
607	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue.getClass());  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue.getClass());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue    ==    null?   "null   "    :    fieldValue.getClass());    builder.append(fieldValue  ==  null?   "null   "  :  fieldValue.getClass());	  	compilable	  [FE]  AssertionFailedError  	131	4	add
608	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue.getClass());  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue.getClass());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue.getClass());  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue.getClass());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue    ==    null?   "null   "    :    fieldValue.getClass());    builder.append(fieldValue  ==  null?   "null   "  :  fieldValue.getClass());	  	compilable	  [FE]  AssertionFailedError  	131	4	add
609	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue.getClass());  builder.append(fieldValue!=  null?   "null   "  :  fieldValue.getClass());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue    ==    null?   "null   "    :    fieldValue.getClass());    builder.append(fieldValue!=  null?   "null   "  :  fieldValue.getClass());	  	compilable	  [FE]  AssertionFailedError  	131	4	add
610	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue.getClass());  builder.append(fieldValue!=  null?   "null   "  :  fieldValue.getClass());  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue.getClass());  builder.append(fieldValue!=  null?   "null   "  :  fieldValue.getClass());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue    ==    null?   "null   "    :    fieldValue.getClass());    builder.append(fieldValue!=  null?   "null   "  :  fieldValue.getClass());	  	compilable	  [FE]  AssertionFailedError  	131	4	add
611	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue.getClass());  if(fieldValue  ==  null?   "null   "  :  fieldValue.getClass());  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue.getClass());  if(fieldValue  ==  null?   "null   "  :  fieldValue.getClass());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue    ==    null?   "null   "    :    fieldValue.getClass());    if(fieldValue  ==  null?   "null   "  :  fieldValue.getClass());	  	non-compiled	[CE]  incompatible  types	131	None	add
612	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue.getClass());  builder.append(fieldValue  ==  null?   "null ",  :  fieldValue.getClass());  [CE]  :  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue.getClass());  builder.append(fieldValue  ==  null?   "null ",  :  fieldValue.getClass());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue    ==    null?   "null   "    :    fieldValue.getClass());    builder.append(fieldValue  ==  null?   "null ",  :  fieldValue.getClass());	  	non-compiled	[CE]  :  expected	131	None	add
613	[BUG]  [BUGGY]  &&  fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  &&  fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	&&  fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)	  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');    if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||    	non-compiled	[CE]  illegal  start  of  expression	167	None	replace
614	[BUG]  [BUGGY]  !ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  !ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||	  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');    if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||    	non-compiled	[CE]  illegal  start  of  expression	167	None	replace
615	[BUG]  [BUGGY]  !ArrayUtils.contains(excludeFields,  field.getName())&&(fieldValue.getName().indexOf('$')  ==  -1)&&(useTransients  ||  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  !ArrayUtils.contains(excludeFields,  field.getName())&&(fieldValue.getName().indexOf('$')  ==  -1)&&(useTransients  ||  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	!ArrayUtils.contains(excludeFields,  field.getName())&&(fieldValue.getName().indexOf('$')  ==  -1)&&(useTransients  ||	  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');    if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||    	non-compiled	[CE]  illegal  start  of  expression	167	None	replace
616	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append( ",null ");  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append( ",null ");	  builder.append(fieldValue).append(   ",n   ");    	compilable	  [FE]  AssertionFailedError  	88	4	replace
617	[BUG]  [BUGGY]  builder.append(fieldValue).append( ",null ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append( ",null ");  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append( ",null ");	  builder.append(fieldValue).append(   ",n   ");    	compilable	  [FE]  AssertionFailedError  	88	4	replace
618	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append( ",transients: ");  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append( ",transients: ");	  builder.append(fieldValue).append(   ",n   ");    	compilable	  [FE]  AssertionFailedError  	88	4	replace
619	[BUG]  [BUGGY]  builder.append(fieldValue).append( ",transients: ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append( ",transients: ");  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append( ",transients: ");	  builder.append(fieldValue).append(   ",n   ");    	compilable	  [FE]  AssertionFailedError  	88	4	replace
620	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue        ==        null?        null        :        fieldValue);        builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	91	4	add
621	[BUG]  [BUGGY]  builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue        ==        null?        null        :        fieldValue);        builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	91	4	add
622	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue        ==        null?        null        :        fieldValue);        builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	91	4	add
623	[BUG]  [BUGGY]  builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue        ==        null?        null        :        fieldValue);        builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	91	4	add
624	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue        ==        null?        null        :        fieldValue);        builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	91	4	add
625	[BUG]  [BUGGY]  builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue        ==        null?        null        :        fieldValue);        builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	91	4	add
626	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue        ==        null?        null        :        fieldValue);        builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	91	4	add
627	[BUG]  [BUGGY]  builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue        ==        null?        null        :        fieldValue);        builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	91	4	add
628	[BUG]  [BUGGY]  builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  if(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  if(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue        ==        null?        null        :        fieldValue);        builder.append(fieldValue!=    null?    null    :    fieldValue);    if(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);	  	non-compiled	[CE]  incompatible  types	91	None	add
629	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.   ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.   ");  }	  builder.append(fieldValue.toString());    if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException.   ");    }    	compilable	  [FE]  AssertionFailedError  	170	4	replace
630	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.   ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.   ");  }	  builder.append(fieldValue.toString());    if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException.   ");    }    	compilable	  [FE]  AssertionFailedError  	170	4	replace
631	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=  null?  fieldValue.toString()  :   "null   ");  builder.append(fieldValue!=  null?  fieldValue.toString()  :   "null ");  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue!=    null?    fieldValue.toString()    :   "null   ");    builder.append(fieldValue!=  null?  fieldValue.toString()  :   "null ");	  	compilable	  [FE]  AssertionFailedError  	177	4	add
632	[BUG]  [BUGGY]  builder.append(fieldValue!=  null?  fieldValue.toString()  :   "null   ");  builder.append(fieldValue!=  null?  fieldValue.toString()  :   "null ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=  null?  fieldValue.toString()  :   "null   ");  builder.append(fieldValue!=  null?  fieldValue.toString()  :   "null ");  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=    null?    fieldValue.toString()    :   "null   ");    builder.append(fieldValue!=  null?  fieldValue.toString()  :   "null ");	  	compilable	  [FE]  AssertionFailedError  	177	4	add
633	[BUG]  [BUGGY]  builder.append(fieldValue!=  null?  fieldValue.toString()  :   "null   ");  if(fieldValue!=  null?  fieldValue.toString()  :   "null ");  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=  null?  fieldValue.toString()  :   "null   ");  if(fieldValue!=  null?  fieldValue.toString()  :   "null ");  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=    null?    fieldValue.toString()    :   "null   ");    if(fieldValue!=  null?  fieldValue.toString()  :   "null ");	  	non-compiled	[CE]  incompatible  types	177	None	add
634	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null  ||  fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null  ||  fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }	  builder.append(fieldValue.toString());    if(fieldValue.toString()!=    null)    {    builder.append(fieldValue.toString());    }    	compilable	  [FE]  AssertionFailedError  	81	4	replace
635	[BUG]  [BUGGY]  if(fieldValue!=  null  ||  fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null  ||  fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null  ||  fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }	  builder.append(fieldValue.toString());    if(fieldValue.toString()!=    null)    {    builder.append(fieldValue.toString());    }    	compilable	  [FE]  AssertionFailedError  	81	4	replace
636	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null  ||  fieldValue.toString()  ==  null)  {  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null  ||  fieldValue.toString()  ==  null)  {  builder.append(fieldValue.toString());  }	  builder.append(fieldValue.toString());    if(fieldValue.toString()!=    null)    {    builder.append(fieldValue.toString());    }    	compilable	  [FE]  AssertionFailedError  	81	4	replace
637	[BUG]  [BUGGY]  if(fieldValue!=  null  ||  fieldValue.toString()  ==  null)  {  builder.append(fieldValue.toString());  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null  ||  fieldValue.toString()  ==  null)  {  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null  ||  fieldValue.toString()  ==  null)  {  builder.append(fieldValue.toString());  }	  builder.append(fieldValue.toString());    if(fieldValue.toString()!=    null)    {    builder.append(fieldValue.toString());    }    	compilable	  [FE]  AssertionFailedError  	81	4	replace
638	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }	  	non-compiled	[CE]  'catch'  without  'try'	37	None	add
639	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.getClass());        if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }	  	compilable	  [FE]  AssertionFailedError  	37	4	add
640	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }	  	compilable	  [FE]  AssertionFailedError  	37	4	add
641	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  [CE]  'catch'  without  'try'  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }	  	non-compiled	[CE]  'catch'  without  'try'	37	None	add
642	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  Builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  [CE]  cannot  find  symbol  Builder  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  Builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    Builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }	  	non-compiled	[CE]  cannot  find  symbol  Builder	37	None	add
643	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  [CE]  'catch'  without  'try'  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }	  	non-compiled	[CE]  'catch'  without  'try'	37	None	add
644	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||	  if(fieldValue!=    null)    {    if(!ArrayUtils.contains(excludeFields,    field.getName())    &&    (field.getName().indexOf('$')    ==    -1)    &&    useTransients    ||!    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
645	[BUG]  [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }	  	non-compiled	[CE]  'catch'  without  'try'	65	None	add
646	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('_');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }	  	compilable	  [FE]  AssertionFailedError  	65	4	add
647	[BUG]  [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }	  	compilable	  [FE]  AssertionFailedError  	65	4	add
648	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('_');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }	  	compilable	  [FE]  AssertionFailedError  	65	4	add
649	[BUG]  [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }	  	compilable	  [FE]  AssertionFailedError  	65	4	add
650	[BUG]  [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  [CE]  'catch'  without  'try'  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }	  	non-compiled	[CE]  'catch'  without  'try'	65	None	add
651	[BUG]  [BUGGY]  Field[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append( ",   ");  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  Field[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append( ",   ");  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Field[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append( ",   ");  }	  Field[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iTotal++)    {    builder.append(   ",       ");    }    	non-compiled	[CE]  	135	None	replace
652	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(excludeFields[0]);  }  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(excludeFields[0]);  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(excludeFields[0]);  }  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(excludeFields[0]);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    builder.append(excludeFields[0]);    }    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(excludeFields[0]);  }	  	non-compiled	[CE]  'catch'  without  'try'	137	None	add
653	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(excludeFields[0]);  }  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(excludeFields[0]  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(excludeFields[0]);  }  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(excludeFields[0]  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    builder.append(excludeFields[0]);    }    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(excludeFields[0]	  	non-compiled	[CE]  ')'  expected	137	None	add
654	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(excludeFields[0]);  }  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  [CE]  'catch'  without  'try'  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(excludeFields[0]);  }  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    builder.append(excludeFields[0]);    }    builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }	  	non-compiled	[CE]  'catch'  without  'try'	137	None	add
655	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(excludeFields[0]);  }  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  [CE]  'catch'  without  'try'  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(excludeFields[0]);  }  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    builder.append(excludeFields[0]);    }    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }	  	non-compiled	[CE]  'catch'  without  'try'	137	None	add
656	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(excludeFields[0]);  }  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(excludeFields[0]);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.getClass());        if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    builder.append(excludeFields[0]);    }    builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(excludeFields[0]);  }	  	compilable	  [FE]  AssertionFailedError  	137	4	add
657	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(excludeFields[0]);  }  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(excludeFields[0]);  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(excludeFields[0]);  }  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(excludeFields[0]);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    builder.append(excludeFields[0]);    }    builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(excludeFields[0]);  }	  	compilable	  [FE]  AssertionFailedError  	137	4	add
658	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  Field[]  excludeFields  =  field.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }  [CE]  'catch'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  Field[]  excludeFields  =  field.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null)  {  Field[]  excludeFields  =  field.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }	  if(fieldValue!=    null)    {    Field[]    excludeFields    =    field.getexcludeFields();    for(int    i    =    0;    i    <    excludeFields.length;    i++)    {    builder.append(excludeFields[i]);    }    	non-compiled	[CE]  'catch'  without  'try'	157	None	replace
659	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  Field[]  excludeFields  =  field.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  Field[]  excludeFields  =  field.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  Field[]  excludeFields  =  field.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]	  if(fieldValue!=    null)    {    Field[]    excludeFields    =    field.getexcludeFields();    for(int    i    =    0;    i    <    excludeFields.length;    i++)    {    builder.append(excludeFields[i]);    }    	non-compiled	[CE]  ')'  expected	157	None	replace
660	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  AssertionFailedError  	3	4	add
661	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  AssertionFailedError  	3	4	add
662	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	3	4	add
663	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	3	4	add
664	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    builder.append(fieldValue).append(   "._   ");  builder.append(fieldValue).append('_');  builder.append(fieldValue).append( "._   ");  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('_');        builder.append(fieldValue).append(   "._   ");    builder.append(fieldValue).append('_');  builder.append(fieldValue).append( "._   ");	  	compilable	  [FE]  AssertionFailedError  	155	4	add
665	[BUG]  [BUGGY]  builder.append(fieldValue).append('_');    builder.append(fieldValue).append(   "._   ");  builder.append(fieldValue).append('_');  builder.append(fieldValue).append( "._   ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    builder.append(fieldValue).append(   "._   ");  builder.append(fieldValue).append('_');  builder.append(fieldValue).append( "._   ");  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_');        builder.append(fieldValue).append(   "._   ");    builder.append(fieldValue).append('_');  builder.append(fieldValue).append( "._   ");	  	compilable	  [FE]  AssertionFailedError  	155	4	add
666	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('n');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	29	4	add
667	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	29	4	add
668	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'catch'  without  'try'  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  'catch'  without  'try'	29	None	add
669	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException( "  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException( "	  	non-compiled	[CE]  unclosed  string  literal	29	None	add
670	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'catch'  without  'try'  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(fieldValue  ==  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  'catch'  without  'try'	29	None	add
671	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('n');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	29	4	add
672	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	29	4	add
673	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append(',');  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  Field[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append(',');  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Field[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append(',');  }	  if(fieldValue!=    null)    {    String[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iTotal++)    {    builder.append(',');    }    	non-compiled	[CE]  ')'  expected	52	None	replace
674	[BUG]  [BUGGY]  String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append(',');  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append(',');  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append(',');  }	  if(fieldValue!=    null)    {    String[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iTotal++)    {    builder.append(',');    }    	non-compiled	[CE]  ')'  expected	52	None	replace
675	[BUG]  [BUGGY]  Integer[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append(',');  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  Integer[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append(',');  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Integer[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append(',');  }	  if(fieldValue!=    null)    {    String[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iTotal++)    {    builder.append(',');    }    	non-compiled	[CE]  ')'  expected	52	None	replace
676	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?   "   "  :  fieldValue);  builder.append(fieldValue  ==  null?   "   "  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue    ==    null?   "   "    :    fieldValue);    builder.append(fieldValue  ==  null?   "   "  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	163	4	add
677	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?   "   "  :  fieldValue);  builder.append(fieldValue  ==  null?   "   "  :  fieldValue);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?   "   "  :  fieldValue);  builder.append(fieldValue  ==  null?   "   "  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue    ==    null?   "   "    :    fieldValue);    builder.append(fieldValue  ==  null?   "   "  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	163	4	add
678	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?   "   "  :  fieldValue);  builder.append(fieldValue!=  null?   "   "  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue    ==    null?   "   "    :    fieldValue);    builder.append(fieldValue!=  null?   "   "  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	163	4	add
679	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?   "   "  :  fieldValue);  builder.append(fieldValue!=  null?   "   "  :  fieldValue);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?   "   "  :  fieldValue);  builder.append(fieldValue!=  null?   "   "  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue    ==    null?   "   "    :    fieldValue);    builder.append(fieldValue!=  null?   "   "  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	163	4	add
680	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?   "   "  :  fieldValue);  if(fieldValue  ==  null?   "   "  :  fieldValue);  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?   "   "  :  fieldValue);  if(fieldValue  ==  null?   "   "  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue    ==    null?   "   "    :    fieldValue);    if(fieldValue  ==  null?   "   "  :  fieldValue);	  	non-compiled	[CE]  incompatible  types	163	None	add
681	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?   "   "  :  fieldValue);  if(fieldValue!=  null?   "   "  :  fieldValue);  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?   "   "  :  fieldValue);  if(fieldValue!=  null?   "   "  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue    ==    null?   "   "    :    fieldValue);    if(fieldValue!=  null?   "   "  :  fieldValue);	  	non-compiled	[CE]  incompatible  types	163	None	add
682	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append('_');  }	  builder.append(fieldValue).append('_');    if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    	compilable	  [FE]  AssertionFailedError  	66	4	replace
683	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append('_');  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append('_');  }	  builder.append(fieldValue).append('_');    if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    	compilable	  [FE]  AssertionFailedError  	66	4	replace
684	[BUG]  [BUGGY]  if(fieldValue!=  null?  null  :  fieldValue);  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null?  null  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null?  null  :  fieldValue);	  builder.append(fieldValue!=    null?    null    :    fieldValue);    if(fieldValue!=    null?    null    :    fieldValue);    	non-compiled	[CE]  incompatible  types	21	None	replace
685	[BUG]  [BUGGY]  if(fieldValue!=  null?  null  :  fieldValue.toString())  {  builder.append(fieldValue!=  null?  null  :  fieldValue);  }  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null?  null  :  fieldValue.toString())  {  builder.append(fieldValue!=  null?  null  :  fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null?  null  :  fieldValue.toString())  {  builder.append(fieldValue!=  null?  null  :  fieldValue);  }	  builder.append(fieldValue!=    null?    null    :    fieldValue);    if(fieldValue!=    null?    null    :    fieldValue);    	non-compiled	[CE]  incompatible  types	21	None	replace
686	[BUG]  [BUGGY]  if(fieldValue!=  null?  null  :  fieldValue.getClass())  {  builder.append(fieldValue!=  null?  null  :  fieldValue);  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null?  null  :  fieldValue.getClass())  {  builder.append(fieldValue!=  null?  null  :  fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null?  null  :  fieldValue.getClass())  {  builder.append(fieldValue!=  null?  null  :  fieldValue);  }	  builder.append(fieldValue!=    null?    null    :    fieldValue);    if(fieldValue!=    null?    null    :    fieldValue);    	non-compiled	[CE]  incompatible  types	21	None	replace
687	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iTotal;  iTotal++)  {  builder.append( ",   ");  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  Field[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iTotal;  iTotal++)  {  builder.append( ",   ");  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Field[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iTotal;  iTotal++)  {  builder.append( ",   ");  }	  if(fieldValue!=    null)    {    String[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iTotal;    iTotal++)    {    builder.append(   ",       ");    }    	non-compiled	[CE]  	51	None	replace
688	[BUG]  [BUGGY]  Object[]  excludeFields  =  field.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }  [CE]  variable  excludeFields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                    AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  Object[]  excludeFields  =  field.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Object[]  excludeFields  =  field.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }	  String[]    excludeFields    =    field.getexcludeFields();    for(int    i    =    0;    i    <    excludeFields.length;    i++)    {    builder.append(excludeFields[i]);    }    	non-compiled	[CE]  variable  excludeFields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	75	None	replace
689	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('r');  builder.append(fieldValue).append('n');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('n');        builder.append(fieldValue).append('r');    builder.append(fieldValue).append('n');	  	compilable	  [FE]  AssertionFailedError  	114	4	add
690	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('r');  builder.append(fieldValue).append('n');  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('r');  builder.append(fieldValue).append('n');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');        builder.append(fieldValue).append('r');    builder.append(fieldValue).append('n');	  	compilable	  [FE]  AssertionFailedError  	114	4	add
691	[BUG]  [BUGGY]  builder.append('$');    if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [CE]  'catch'  without  'try'  [FE]    InternalError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');        if(fieldValue    ==    null)    {    builder.append('$');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	non-compiled	[CE]  'catch'  without  'try'	61	None	add
692	[BUG]  [BUGGY]  builder.append('$');    if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue  ==  null)  {  builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [CE]  'catch'  without  'try'  [FE]      InternalError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue  ==  null)  {  builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');        if(fieldValue    ==    null)    {    builder.append('$');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    if(fieldValue  ==  null)  {  builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	non-compiled	[CE]  'catch'  without  'try'	61	None	add
693	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(fieldValue).append('n');    if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'catch'  without  'try'	30	None	replace
694	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$').append(fieldValue).toString();  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('$').append(fieldValue).toString();	  builder.append('$').append(fieldValue);    	compilable	  [FE]  AssertionFailedError  	147	4	replace
695	[BUG]  [BUGGY]  builder.append('$').append(fieldValue).toString();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$').append(fieldValue).toString();  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$').append(fieldValue).toString();	  builder.append('$').append(fieldValue);    	compilable	  [FE]  AssertionFailedError  	147	4	replace
696	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$').append(fieldValue).append( "n ");  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('$').append(fieldValue).append( "n ");	  builder.append('$').append(fieldValue);    	compilable	  [FE]  AssertionFailedError  	147	4	replace
697	[BUG]  [BUGGY]  builder.append('$').append(fieldValue).append( "n ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$').append(fieldValue).append( "n ");  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$').append(fieldValue).append( "n ");	  builder.append('$').append(fieldValue);    	compilable	  [FE]  AssertionFailedError  	147	4	replace
698	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  Integer[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('+');  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  Integer[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('+');  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  Integer[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('+');  }	  Integer[]    fields    =    fieldValue.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iConstant++)    {    builder.append('+');    }    	non-compiled	[CE]  ')'  expected	117	None	replace
699	[BUG]  [BUGGY]  Object[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('+');  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  Object[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('+');  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Object[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('+');  }	  Integer[]    fields    =    fieldValue.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iConstant++)    {    builder.append('+');    }    	non-compiled	[CE]  ')'  expected	117	None	replace
700	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append('n');  builder.append(fieldValue).append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  instanceof  String)  {  builder.append('n');  builder.append(fieldValue).append('n');  }	  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');    	compilable	  [FE]  AssertionFailedError  	24	4	replace
701	[BUG]  [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append('n');  builder.append(fieldValue).append('n');  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append('n');  builder.append(fieldValue).append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  String)  {  builder.append('n');  builder.append(fieldValue).append('n');  }	  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');    	compilable	  [FE]  AssertionFailedError  	24	4	replace
702	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  }	  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');    	compilable	  [FE]  AssertionFailedError  	24	4	replace
703	[BUG]  [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  }	  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');    	compilable	  [FE]  AssertionFailedError  	24	4	replace
704	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	compilable	  [FE]  AssertionFailedError  	83	4	add
705	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	compilable	  [FE]  AssertionFailedError  	83	4	add
706	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  builder.append(fieldValue.getClass());  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  builder.append(fieldValue.getClass());  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        if(fieldValue    ==    null)    {    builder.append(fieldValue.getClass());    }    builder.append(fieldValue.getClass());  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }	  	non-compiled	[CE]  'catch'  without  'try'	39	None	add
707	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.getClass());        if(fieldValue    ==    null)    {    builder.append(fieldValue.getClass());    }    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  }	  	compilable	  [FE]  AssertionFailedError  	39	4	add
708	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        if(fieldValue    ==    null)    {    builder.append(fieldValue.getClass());    }    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  }	  	compilable	  [FE]  AssertionFailedError  	39	4	add
709	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.	  builder.append(fieldValue.getClass());    if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException.   ");    }    	non-compiled	[CE]  unclosed  string  literal	161	None	replace
710	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }	  builder.append(fieldValue).append('_');    if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    	non-compiled	[CE]  'catch'  without  'try'	70	None	replace
711	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  Il  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  Il  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  Il	  builder.append(fieldValue).append('_');    if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    	non-compiled	[CE]  unclosed  string  literal	70	None	replace
712	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  builder.append(fieldValue).append('_');    if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    	compilable	  [FE]  AssertionFailedError  	70	4	replace
713	[BUG]  [BUGGY]  builder.append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  builder.append(fieldValue).append('_');    if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    	compilable	  [FE]  AssertionFailedError  	70	4	replace
714	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue);  builder.append(fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  instanceof  String)  {  builder.append(fieldValue);  builder.append(fieldValue);  }	  builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue    ==    null?    null    :    fieldValue);    	compilable	  [FE]  AssertionFailedError  	90	4	replace
715	[BUG]  [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue);  builder.append(fieldValue);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue);  builder.append(fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  String)  {  builder.append(fieldValue);  builder.append(fieldValue);  }	  builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue    ==    null?    null    :    fieldValue);    	compilable	  [FE]  AssertionFailedError  	90	4	replace
716	[BUG]  [BUGGY]  builder.append(fieldValue.getName(),  fieldValue);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getName(),  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getName(),  fieldValue);	  builder.append(fieldValue.getName());    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
717	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    if(fieldValue  ==  null)  {  builder.append('$');  }  if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('$');        if(fieldValue    ==    null)    {    builder.append('$');    }    if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }  }	  	compilable	  [FE]  AssertionFailedError  	57	4	add
718	[BUG]  [BUGGY]  builder.append('$');    if(fieldValue  ==  null)  {  builder.append('$');  }  if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    if(fieldValue  ==  null)  {  builder.append('$');  }  if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');        if(fieldValue    ==    null)    {    builder.append('$');    }    if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }  }	  	compilable	  [FE]  AssertionFailedError  	57	4	add
719	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    if(fieldValue  ==  null)  {  builder.append('$');  }  if(fieldValue  ==  null)  {  builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('$');        if(fieldValue    ==    null)    {    builder.append('$');    }    if(fieldValue  ==  null)  {  builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }  }	  	compilable	  [FE]  AssertionFailedError  	57	4	add
720	[BUG]  [BUGGY]  builder.append('$');    if(fieldValue  ==  null)  {  builder.append('$');  }  if(fieldValue  ==  null)  {  builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    if(fieldValue  ==  null)  {  builder.append('$');  }  if(fieldValue  ==  null)  {  builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');        if(fieldValue    ==    null)    {    builder.append('$');    }    if(fieldValue  ==  null)  {  builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }  }	  	compilable	  [FE]  AssertionFailedError  	57	4	add
721	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  Field[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  Field[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  Field[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('  }	  if(fieldValue!=    null)    {    String[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iConstant++)    {    builder.append('    }    	non-compiled	[CE]  ')'  expected	45	None	replace
722	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append(     ",     ");    builder.append(fieldValue).append(',');  builder.append(fieldValue).append( ",   ");  builder.append(fieldValue).append( ".,   ");  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append(       ",       ");        builder.append(fieldValue).append(',');    builder.append(fieldValue).append( ",   ");  builder.append(fieldValue).append( ".,   ");	  	compilable	  [FE]  AssertionFailedError  	173	4	add
723	[BUG]  [BUGGY]  builder.append(fieldValue).append(     ",     ");    builder.append(fieldValue).append(',');  builder.append(fieldValue).append( ",   ");  builder.append(fieldValue).append( ".,   ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append(     ",     ");    builder.append(fieldValue).append(',');  builder.append(fieldValue).append( ",   ");  builder.append(fieldValue).append( ".,   ");  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append(       ",       ");        builder.append(fieldValue).append(',');    builder.append(fieldValue).append( ",   ");  builder.append(fieldValue).append( ".,   ");	  	compilable	  [FE]  AssertionFailedError  	173	4	add
724	[BUG]  [BUGGY]  builder.append(excludeFields[0].getName());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(excludeFields[0].getName());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(excludeFields[0].getName());	  builder.append(fieldValue.getClass());    if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    builder.append(excludeFields[0].getName());    }    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
725	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException.   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException.   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException.   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }	  	non-compiled	[CE]  'catch'  without  'try'	160	None	add
726	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException.   ");  }  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  [CE]  'catch'  without  'try'  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException.   ");  }  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException.   ");    }    builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }	  	non-compiled	[CE]  'catch'  without  'try'	160	None	add
727	[BUG]  [BUGGY]  Field[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append(',');  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  Field[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append(',');  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Field[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append(',');  }	  Field[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iTotal++)    {    builder.append(   ",       ");    }    	non-compiled	[CE]  ')'  expected	135	None	replace
728	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('n');        builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');	  	compilable	  [FE]  AssertionFailedError  	23	4	add
729	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');        builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');	  	compilable	  [FE]  AssertionFailedError  	23	4	add
730	[BUG]  [BUGGY]  Field[]  fields  =  object.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  Field[]  fields  =  object.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Field[]  fields  =  object.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('	  Field[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iConstant++)    {    builder.append('    	non-compiled	[CE]  ')'  expected	46	None	replace
731	[BUG]  [BUGGY]  Field[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('>');  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  Field[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('>');  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Field[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('>');  }	  Field[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iConstant++)    {    builder.append('    	non-compiled	[CE]  ')'  expected	46	None	replace
732	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append( "._ ");  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append( "._ ");  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  AssertionFailedError  	3	4	add
733	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append( "._ ");  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append( "._ ");  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append( "._ ");  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  AssertionFailedError  	3	4	add
734	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$').append(fieldValue);  if(fieldValue!=  null)  {  builder.append('$').append(fieldValue);  }  else  {  builder.append('[').append(fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('$').append(fieldValue);    if(fieldValue!=  null)  {  builder.append('$').append(fieldValue);  }  else  {  builder.append('[').append(fieldValue);  }	  	compilable	  [FE]  AssertionFailedError  	146	4	add
735	[BUG]  [BUGGY]  builder.append('$').append(fieldValue);  if(fieldValue!=  null)  {  builder.append('$').append(fieldValue);  }  else  {  builder.append('[').append(fieldValue);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$').append(fieldValue);  if(fieldValue!=  null)  {  builder.append('$').append(fieldValue);  }  else  {  builder.append('[').append(fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$').append(fieldValue);    if(fieldValue!=  null)  {  builder.append('$').append(fieldValue);  }  else  {  builder.append('[').append(fieldValue);  }	  	compilable	  [FE]  AssertionFailedError  	146	4	add
736	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$').append(fieldValue);  if(fieldValue!=  null)  {  builder.append('$').append(fieldValue);  }  else  {  builder.append('#').append(fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('$').append(fieldValue);    if(fieldValue!=  null)  {  builder.append('$').append(fieldValue);  }  else  {  builder.append('#').append(fieldValue);  }	  	compilable	  [FE]  AssertionFailedError  	146	4	add
737	[BUG]  [BUGGY]  builder.append('$').append(fieldValue);  if(fieldValue!=  null)  {  builder.append('$').append(fieldValue);  }  else  {  builder.append('#').append(fieldValue);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$').append(fieldValue);  if(fieldValue!=  null)  {  builder.append('$').append(fieldValue);  }  else  {  builder.append('#').append(fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$').append(fieldValue);    if(fieldValue!=  null)  {  builder.append('$').append(fieldValue);  }  else  {  builder.append('#').append(fieldValue);  }	  	compilable	  [FE]  AssertionFailedError  	146	4	add
738	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$').append(fieldValue);  if(fieldValue!=  null)  {  builder.append('$').append(fieldValue);  }  else  {  builder.append('_').append(fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('$').append(fieldValue);    if(fieldValue!=  null)  {  builder.append('$').append(fieldValue);  }  else  {  builder.append('_').append(fieldValue);  }	  	compilable	  [FE]  AssertionFailedError  	146	4	add
739	[BUG]  [BUGGY]  builder.append('$').append(fieldValue);  if(fieldValue!=  null)  {  builder.append('$').append(fieldValue);  }  else  {  builder.append('_').append(fieldValue);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$').append(fieldValue);  if(fieldValue!=  null)  {  builder.append('$').append(fieldValue);  }  else  {  builder.append('_').append(fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$').append(fieldValue);    if(fieldValue!=  null)  {  builder.append('$').append(fieldValue);  }  else  {  builder.append('_').append(fieldValue);  }	  	compilable	  [FE]  AssertionFailedError  	146	4	add
740	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('  [CE]  illegal  line  end  in  character  literal  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('	  	non-compiled	[CE]  illegal  line  end  in  character  literal	27	None	add
741	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  [CE]  'catch'  without  'try'  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }	  	non-compiled	[CE]  'catch'  without  'try'	27	None	add
742	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }  builder.append(fieldValue.toString());  if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }  builder.append(fieldValue.toString());  if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue.toString()!=    null)    {    builder.append(fieldValue.toString());    }    builder.append(fieldValue.toString());  if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());	  	non-compiled	[CE]  'catch'  without  'try'	80	None	add
743	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }  if(fieldValue!=  null)  {  builder.append(excludeFields[0].toString());  if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }  [CE]  'catch'  without  'try'  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }  if(fieldValue!=  null)  {  builder.append(excludeFields[0].toString());  if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue.toString()!=    null)    {    builder.append(fieldValue.toString());    }    if(fieldValue!=  null)  {  builder.append(excludeFields[0].toString());  if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }	  	non-compiled	[CE]  'catch'  without  'try'	80	None	add
744	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }  if(fieldValue!=  null)  {  builder.append(excludeFields[iConstant]);  if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }  [CE]  'catch'  without  'try'  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }  if(fieldValue!=  null)  {  builder.append(excludeFields[iConstant]);  if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue.toString()!=    null)    {    builder.append(fieldValue.toString());    }    if(fieldValue!=  null)  {  builder.append(excludeFields[iConstant]);  if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }	  	non-compiled	[CE]  'catch'  without  'try'	80	None	add
745	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  builder.append('$');  builder.append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('$');        builder.append('$');    if(fieldValue!=  null)  {  builder.append('$');  builder.append('$');  builder.append('$');  }	  	compilable	  [FE]  AssertionFailedError  	53	4	add
746	[BUG]  [BUGGY]  builder.append('$');    builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  builder.append('$');  builder.append('$');  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  builder.append('$');  builder.append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');        builder.append('$');    if(fieldValue!=  null)  {  builder.append('$');  builder.append('$');  builder.append('$');  }	  	compilable	  [FE]  AssertionFailedError  	53	4	add
747	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  builder.append('$');  builder.append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('$');        builder.append('$');    if(fieldValue  ==  null)  {  builder.append('$');  builder.append('$');  builder.append('$');  }	  	compilable	  [FE]  AssertionFailedError  	53	4	add
748	[BUG]  [BUGGY]  builder.append('$');    builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  builder.append('$');  builder.append('$');  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  builder.append('$');  builder.append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');        builder.append('$');    if(fieldValue  ==  null)  {  builder.append('$');  builder.append('$');  builder.append('$');  }	  	compilable	  [FE]  AssertionFailedError  	53	4	add
749	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    builder.append('$');  if(fieldValue!=  null)  {  builder.append( ", ");  builder.append('$');  builder.append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('$');        builder.append('$');    if(fieldValue!=  null)  {  builder.append( ", ");  builder.append('$');  builder.append('$');  }	  	compilable	  [FE]  AssertionFailedError  	53	4	add
750	[BUG]  [BUGGY]  builder.append('$');    builder.append('$');  if(fieldValue!=  null)  {  builder.append( ", ");  builder.append('$');  builder.append('$');  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    builder.append('$');  if(fieldValue!=  null)  {  builder.append( ", ");  builder.append('$');  builder.append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');        builder.append('$');    if(fieldValue!=  null)  {  builder.append( ", ");  builder.append('$');  builder.append('$');  }	  	compilable	  [FE]  AssertionFailedError  	53	4	add
751	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }	  builder.append(fieldValue.toString());    if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    builder.append(fieldValue.toString());    }    	non-compiled	[CE]  'catch'  without  'try'	129	None	replace
752	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue);  if(fieldValue!=  null?  null  :  fieldValue);  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue);  if(fieldValue!=  null?  null  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue  ==  null?  null  :  fieldValue);  if(fieldValue!=  null?  null  :  fieldValue);	  builder.append(fieldValue    ==    null?    null    :    fieldValue);    if(fieldValue    ==    null?    null    :    fieldValue);    	non-compiled	[CE]  incompatible  types	93	None	replace
753	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  ==  null)  {  builder.append(fieldValue);  }	  builder.append(fieldValue    ==    null?    null    :    fieldValue);    if(fieldValue    ==    null?    null    :    fieldValue);    	compilable	  [FE]  AssertionFailedError  	93	4	replace
754	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue);  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null)  {  builder.append(fieldValue);  }	  builder.append(fieldValue    ==    null?    null    :    fieldValue);    if(fieldValue    ==    null?    null    :    fieldValue);    	compilable	  [FE]  AssertionFailedError  	93	4	replace
755	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append( ", ");  }  else  {  builder.append( ", ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append( ", ");  }  else  {  builder.append( ", ");  }	  builder.append(fieldValue).append(       ",       ");    builder.append(fieldValue).append(       ",       ");    	compilable	  [FE]  AssertionFailedError  	102	4	replace
756	[BUG]  [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append( ", ");  }  else  {  builder.append( ", ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append( ", ");  }  else  {  builder.append( ", ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append( ", ");  }  else  {  builder.append( ", ");  }	  builder.append(fieldValue).append(       ",       ");    builder.append(fieldValue).append(       ",       ");    	compilable	  [FE]  AssertionFailedError  	102	4	replace
757	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append( ", ");  }  else  {  builder.append( ", ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append( ", ");  }  else  {  builder.append( ", ");  }	  builder.append(fieldValue).append(       ",       ");    builder.append(fieldValue).append(       ",       ");    	compilable	  [FE]  AssertionFailedError  	102	4	replace
758	[BUG]  [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append( ", ");  }  else  {  builder.append( ", ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append( ", ");  }  else  {  builder.append( ", ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  Field)  {  builder.append(fieldValue).append( ", ");  }  else  {  builder.append( ", ");  }	  builder.append(fieldValue).append(       ",       ");    builder.append(fieldValue).append(       ",       ");    	compilable	  [FE]  AssertionFailedError  	102	4	replace
759	[BUG]  [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  Builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  [CE]  cannot  find  symbol  Builder  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  Builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    Builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }	  	non-compiled	[CE]  cannot  find  symbol  Builder	65	None	add
760	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('_');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  }	  	compilable	  [FE]  AssertionFailedError  	65	4	add
761	[BUG]  [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  }	  	compilable	  [FE]  AssertionFailedError  	65	4	add
762	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue        ==        null?        null        :        fieldValue);        builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	91	4	add
763	[BUG]  [BUGGY]  builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue        ==        null?        null        :        fieldValue);        builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	91	4	add
764	[BUG]  [BUGGY]  builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue  >>  null?  null  :  fieldValue);  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue  >>  null?  null  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue        ==        null?        null        :        fieldValue);        builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue  >>  null?  null  :  fieldValue);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	91	None	add
765	[BUG]  [BUGGY]  if(fieldValue  instanceof  Enum)  {  builder.append('$');  builder.append( ".s.IFJDCS ".charAt(fieldValue.length()  -  1))  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [CE]  [FE]          AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  Enum)  {  builder.append('$');  builder.append( ".s.IFJDCS ".charAt(fieldValue.length()  -  1))  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  Enum)  {  builder.append('$');  builder.append( ".s.IFJDCS ".charAt(fieldValue.length()  -  1))  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  builder.append('$');    builder.append(   ".s.IFJDCS   ".charAt(fieldValue.length()    -    1))    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    	non-compiled	[CE]  	159	None	replace
766	[BUG]  [BUGGY]  builder.append(fieldValue).append('$',  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('$',  iConstant);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('$',  iConstant);	  builder.append(fieldValue).append('$');    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	140	None	replace
767	[BUG]  [BUGGY]  builder.append(fieldValue).append('$')+  1;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('$')+  1;  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('$')+  1;	  builder.append(fieldValue).append('$');    	non-compiled	[CE]  not  a  statement	140	None	replace
768	[BUG]  [BUGGY]  builder.append(fieldValue).append('$'  +  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('$'  +  iConstant);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('$'  +  iConstant);	  builder.append(fieldValue).append('$');    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	140	None	replace
769	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue        ==        null?        null        :        fieldValue);        builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	89	4	add
770	[BUG]  [BUGGY]  builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue        ==        null?        null        :        fieldValue);        builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	89	4	add
771	[BUG]  [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append('$');  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  fieldValue.getName())&&  (fieldValue.getName().indexOf('$')  ==  -1)  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append('$');  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  fieldValue.getName())&&  (fieldValue.getName().indexOf('$')  ==  -1)  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  String)  {  builder.append('$');  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  fieldValue.getName())&&  (fieldValue.getName().indexOf('$')  ==  -1)	  builder.append('$');    if(fieldValue!=    null)    {    if(!ArrayUtils.contains(excludeFields,    fieldValue.getName())&&    (fieldValue.getName().indexOf('$')    ==    -1)&&    useTransients    ||!    	non-compiled	[CE]  ')'  expected	142	None	replace
772	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(fieldValue).append('_');    if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'catch'  without  'try'	72	None	replace
773	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_').append('_').append('_');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('_').append('_').append('_');	  builder.append(fieldValue).append('_').append('_');    	compilable	  [FE]  AssertionFailedError  	150	4	replace
774	[BUG]  [BUGGY]  builder.append(fieldValue).append('_').append('_').append('_');  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_').append('_').append('_');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_').append('_').append('_');	  builder.append(fieldValue).append('_').append('_');    	compilable	  [FE]  AssertionFailedError  	150	4	replace
775	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_').append('_').append('-');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('_').append('_').append('-');	  builder.append(fieldValue).append('_').append('_');    	compilable	  [FE]  AssertionFailedError  	150	4	replace
776	[BUG]  [BUGGY]  builder.append(fieldValue).append('_').append('_').append('-');  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_').append('_').append('-');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_').append('_').append('-');	  builder.append(fieldValue).append('_').append('_');    	compilable	  [FE]  AssertionFailedError  	150	4	replace
777	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_').append('_').append('/');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('_').append('_').append('/');	  builder.append(fieldValue).append('_').append('_');    	compilable	  [FE]  AssertionFailedError  	150	4	replace
778	[BUG]  [BUGGY]  builder.append(fieldValue).append('_').append('_').append('/');  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_').append('_').append('/');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_').append('_').append('/');	  builder.append(fieldValue).append('_').append('_');    	compilable	  [FE]  AssertionFailedError  	150	4	replace
779	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  instanceof  String)  {  builder.append(fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  }	  builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue    ==    null?    null    :    fieldValue);    	compilable	  [FE]  AssertionFailedError  	19	4	replace
780	[BUG]  [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  String)  {  builder.append(fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  }	  builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue    ==    null?    null    :    fieldValue);    	compilable	  [FE]  AssertionFailedError  	19	4	replace
781	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  }	  builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue    ==    null?    null    :    fieldValue);    	compilable	  [FE]  AssertionFailedError  	19	4	replace
782	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  }	  builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue    ==    null?    null    :    fieldValue);    	compilable	  [FE]  AssertionFailedError  	19	4	replace
783	[BUG]  [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append('$');  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  fieldValue.getName())&&  (field.getName().indexOf('$')  ==  -1)  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append('$');  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  fieldValue.getName())&&  (field.getName().indexOf('$')  ==  -1)  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  String)  {  builder.append('$');  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  fieldValue.getName())&&  (field.getName().indexOf('$')  ==  -1)	  builder.append('$');    if(fieldValue!=    null)    {    if(!ArrayUtils.contains(excludeFields,    fieldValue.getName())&&    (field.getName().indexOf('$')    ==    -1)&&    useTransients    ||!    	non-compiled	[CE]  ')'  expected	145	None	replace
784	[BUG]  [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  Il  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  Il  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  Il	  	non-compiled	[CE]  unclosed  string  literal	69	None	add
785	[BUG]  [BUGGY]  builder.append('$',  fieldValue,  exprNonZeroOddNumber);  [CE]  cannot  find  symbol  exprNonZeroOddNumber  [FE]          AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$',  fieldValue,  exprNonZeroOddNumber);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$',  fieldValue,  exprNonZeroOddNumber);	  builder.append('$',    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  exprNonZeroOddNumber	15	None	replace
786	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    builder.append(fieldValue).append(   "._   ");  builder.append(fieldValue).append('_');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('_');        builder.append(fieldValue).append(   "._   ");    builder.append(fieldValue).append('_');	  	compilable	  [FE]  AssertionFailedError  	155	4	add
787	[BUG]  [BUGGY]  builder.append(fieldValue).append('_');    builder.append(fieldValue).append(   "._   ");  builder.append(fieldValue).append('_');  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    builder.append(fieldValue).append(   "._   ");  builder.append(fieldValue).append('_');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_');        builder.append(fieldValue).append(   "._   ");    builder.append(fieldValue).append('_');	  	compilable	  [FE]  AssertionFailedError  	155	4	add
788	[BUG]  [BUGGY]  Field[]  fields  =  fieldValue.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  Field[]  fields  =  fieldValue.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Field[]  fields  =  fieldValue.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }	  Field[]    excludeFields    =    field.getexcludeFields();    for(int    i    =    0;    i    <    excludeFields.length;    i++)    {    builder.append(excludeFields[i]);    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	73	None	replace
789	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append('n');  builder.append(fieldValue).append('r');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  instanceof  String)  {  builder.append('n');  builder.append(fieldValue).append('r');  }	  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('r');    	compilable	  [FE]  AssertionFailedError  	115	4	replace
790	[BUG]  [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append('n');  builder.append(fieldValue).append('r');  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append('n');  builder.append(fieldValue).append('r');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  String)  {  builder.append('n');  builder.append(fieldValue).append('r');  }	  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('r');    	compilable	  [FE]  AssertionFailedError  	115	4	replace
791	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append('n');  builder.append(fieldValue).append('r');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  instanceof  Field)  {  builder.append('n');  builder.append(fieldValue).append('r');  }	  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('r');    	compilable	  [FE]  AssertionFailedError  	115	4	replace
792	[BUG]  [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append('n');  builder.append(fieldValue).append('r');  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append('n');  builder.append(fieldValue).append('r');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  Field)  {  builder.append('n');  builder.append(fieldValue).append('r');  }	  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('r');    	compilable	  [FE]  AssertionFailedError  	115	4	replace
793	[BUG]  [BUGGY]  builder.append(fieldValue!=  null?   "null   "  :  fieldValue.toString());  builder.append(fieldValue!=  null?   "null ")  :  fieldValue.toString());  [CE]  :  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=  null?   "null   "  :  fieldValue.toString());  builder.append(fieldValue!=  null?   "null ")  :  fieldValue.toString());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=    null?   "null   "    :    fieldValue.toString());    builder.append(fieldValue!=  null?   "null ")  :  fieldValue.toString());	  	non-compiled	[CE]  :  expected	126	None	add
794	[BUG]  [BUGGY]  builder.append(fieldValue!=  null?   "null   "  :  fieldValue.toString());  builder.append(fieldValue!=  null?   "null ".  :  fieldValue.toString());  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=  null?   "null   "  :  fieldValue.toString());  builder.append(fieldValue!=  null?   "null ".  :  fieldValue.toString());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=    null?   "null   "    :    fieldValue.toString());    builder.append(fieldValue!=  null?   "null ".  :  fieldValue.toString());	  	non-compiled	[CE]  <identifier>  expected	126	None	add
795	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue.getClass());  builder.append(fieldValue  ==  null?   "null ")  :  fieldValue.getClass());  [CE]  :  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue.getClass());  builder.append(fieldValue  ==  null?   "null ")  :  fieldValue.getClass());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue    ==    null?   "null   "    :    fieldValue.getClass());    builder.append(fieldValue  ==  null?   "null ")  :  fieldValue.getClass());	  	non-compiled	[CE]  :  expected	131	None	add
796	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue.getClass());  builder.append(fieldValue  ==  null?   "null ".  :  fieldValue.getClass());  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue.getClass());  builder.append(fieldValue  ==  null?   "null ".  :  fieldValue.getClass());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue    ==    null?   "null   "    :    fieldValue.getClass());    builder.append(fieldValue  ==  null?   "null ".  :  fieldValue.getClass());	  	non-compiled	[CE]  <identifier>  expected	131	None	add
797	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  }  else  {  Class  <?>  fieldValue  =  fieldValue.getComponentType();  builder.append(clazz.getName());  }  [CE]  variable  fieldValue  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]        AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  }  else  {  Class  <?>  fieldValue  =  fieldValue.getComponentType();  builder.append(clazz.getName());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append('$');  }  else  {  Class  <?>  fieldValue  =  fieldValue.getComponentType();  builder.append(clazz.getName());  }	  builder.append('$');    if(fieldValue!=    null)    {    builder.append('$');    }    else    {    Class    <?>    clazz    =    fieldValue.getComponentType();    builder.append(clazz.getName());    }    	non-compiled	[CE]  variable  fieldValue  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	158	None	replace
798	[BUG]  [BUGGY]  [FE]  InternalError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append('$');  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  instanceof  String)  {  builder.append('$');  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  builder.append('$');    builder.append('$');    	compilable	  [FE]  InternalError  	54	4	replace
799	[BUG]  [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append('$');  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [FE]  InternalError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append('$');  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  String)  {  builder.append('$');  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  builder.append('$');    builder.append('$');    	compilable	  [FE]  InternalError  	54	4	replace
800	[BUG]  [BUGGY]  builder.append(fieldValue,  fieldValue.toString());  [CE]  no  suitable  method  found  for  append(Object,String)  [FE]              AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue,  fieldValue.toString());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue,  fieldValue.toString());	  builder.append(fieldValue.toString());    if(fieldValue.isArray())    {    builder.append(fieldValue.toString());    }    	non-compiled	[CE]  no  suitable  method  found  for  append(Object,String)	82	None	replace
801	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }	  	non-compiled	[CE]  'catch'  without  'try'	37	None	add
802	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder	  	non-compiled	[CE]  ';'  expected	37	None	add
803	[BUG]  [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  String)  {  builder.append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }	  builder.append(fieldValue).append('_');    if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    	non-compiled	[CE]  'catch'  without  'try'	66	None	replace
804	[BUG]  [BUGGY]  builder.append(fieldValue!=  null?   "null   "  :  fieldValue.getClass());  builder.append(fieldValue!=  null?   "null ")  :  fieldValue.getClass());  [CE]  :  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=  null?   "null   "  :  fieldValue.getClass());  builder.append(fieldValue!=  null?   "null ")  :  fieldValue.getClass());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=    null?   "null   "    :    fieldValue.getClass());    builder.append(fieldValue!=  null?   "null ")  :  fieldValue.getClass());	  	non-compiled	[CE]  :  expected	133	None	add
805	[BUG]  [BUGGY]  builder.append(fieldValue!=  null?   "null   "  :  fieldValue.getClass());  builder.append(fieldValue!=  null?   "null ".  :  fieldValue.getClass());  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=  null?   "null   "  :  fieldValue.getClass());  builder.append(fieldValue!=  null?   "null ".  :  fieldValue.getClass());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=    null?   "null   "    :    fieldValue.getClass());    builder.append(fieldValue!=  null?   "null ".  :  fieldValue.getClass());	  	non-compiled	[CE]  <identifier>  expected	133	None	add
806	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append(',');  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append(',');  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null)  {  String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append(',');  }	  if(fieldValue!=    null)    {    String[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iTotal++)    {    builder.append(',');    }    	non-compiled	[CE]  ')'  expected	52	None	replace
807	[BUG]  [BUGGY]  Integer[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append(',');  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  Integer[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append(',');  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Integer[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append(',');  }	  if(fieldValue!=    null)    {    String[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iTotal++)    {    builder.append(',');    }    	non-compiled	[CE]  ')'  expected	52	None	replace
808	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.getClass());        builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	compilable	  [FE]  AssertionFailedError  	33	4	add
809	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	compilable	  [FE]  AssertionFailedError  	33	4	add
810	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?   "   "  :  fieldValue);  builder.append(fieldValue  ==  null?   " ".  :  fieldValue);  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?   "   "  :  fieldValue);  builder.append(fieldValue  ==  null?   " ".  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue    ==    null?   "   "    :    fieldValue);    builder.append(fieldValue  ==  null?   " ".  :  fieldValue);	  	non-compiled	[CE]  <identifier>  expected	163	None	add
811	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?   "   "  :  fieldValue);  builder.append(fieldValue  ==  null?   " ",  :  fieldValue);  [CE]  :  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?   "   "  :  fieldValue);  builder.append(fieldValue  ==  null?   " ",  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue    ==    null?   "   "    :    fieldValue);    builder.append(fieldValue  ==  null?   " ",  :  fieldValue);	  	non-compiled	[CE]  :  expected	163	None	add
812	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append( ", ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append( ", ");  }	  builder.append(fieldValue.toString());    builder.append(fieldValue.toString());    	compilable	  [FE]  AssertionFailedError  	77	4	replace
813	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append( ", ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append( ", ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append( ", ");  }	  builder.append(fieldValue.toString());    builder.append(fieldValue.toString());    	compilable	  [FE]  AssertionFailedError  	77	4	replace
814	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append( "n ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append( "n ");  }	  builder.append(fieldValue.toString());    builder.append(fieldValue.toString());    	compilable	  [FE]  AssertionFailedError  	77	4	replace
815	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append( "n ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append( "n ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append( "n ");  }	  builder.append(fieldValue.toString());    builder.append(fieldValue.toString());    	compilable	  [FE]  AssertionFailedError  	77	4	replace
816	[BUG]  [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append('n');  builder.append(fieldValue).append('n');  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append('n');  builder.append(fieldValue).append('n');  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  String)  {  builder.append('n');  builder.append(fieldValue).append('n');  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)	  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');    if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&    useTransients    ||!    	non-compiled	[CE]  ')'  expected	166	None	replace
817	[BUG]  [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(fieldValue.getName().indexOf('$')  ==  -1)&&  useTransients  ||!  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(fieldValue.getName().indexOf('$')  ==  -1)&&  useTransients  ||!  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(!ArrayUtils.contains(excludeFields,  field.getName())&&(fieldValue.getName().indexOf('$')  ==  -1)&&  useTransients  ||!	  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');    if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&    useTransients    ||!    	non-compiled	[CE]  illegal  start  of  expression	166	None	replace
818	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException.   ");  }  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.   ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException.   ");    }    builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.   ");  }	  	compilable	  [FE]  AssertionFailedError  	169	4	add
819	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException.   ");  }  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException.   ");  }  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.   ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException.   ");    }    builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.   ");  }	  	compilable	  [FE]  AssertionFailedError  	169	4	add
820	[BUG]  [BUGGY]  Builder  builder  =  new  HashCodeBuilder(fieldValue);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  Builder  builder  =  new  HashCodeBuilder(fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Builder  builder  =  new  HashCodeBuilder(fieldValue);	  if(fieldValue!=    null)    {    builder.append('$');    }    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
821	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  Builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  [CE]  cannot  find  symbol  Builder  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  Builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    Builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }	  	non-compiled	[CE]  cannot  find  symbol  Builder	25	None	add
822	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(excludeFields[0].toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(excludeFields[0].toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(fieldValue!=  null)  {  builder.append(excludeFields[0].toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }	  	non-compiled	[CE]  'catch'  without  'try'	171	None	add
823	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }	  	compilable	  [FE]  AssertionFailedError  	171	4	add
824	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }	  	compilable	  [FE]  AssertionFailedError  	171	4	add
825	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  [CE]  'catch'  without  'try'  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }	  	non-compiled	[CE]  'catch'  without  'try'	171	None	add
826	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  builder.append(fieldValue).append('_');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('_');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    builder.append(fieldValue).append('_');	  	compilable	  [FE]  AssertionFailedError  	71	4	add
827	[BUG]  [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  builder.append(fieldValue).append('_');  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  builder.append(fieldValue).append('_');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    builder.append(fieldValue).append('_');	  	compilable	  [FE]  AssertionFailedError  	71	4	add
828	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('_');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }	  	compilable	  [FE]  AssertionFailedError  	71	4	add
829	[BUG]  [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }	  	compilable	  [FE]  AssertionFailedError  	71	4	add
830	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError(   "Unexpected  field  value:   "  +  fieldValue);  }  if(fieldValue!=  null)  {  builder.append(fieldValue);  }  else  {  throw  new  InternalError( "Unexpected  field  value:   "  +  fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    InternalError(   "Unexpected    field    value:   "    +    fieldValue);    }    if(fieldValue!=  null)  {  builder.append(fieldValue);  }  else  {  throw  new  InternalError( "Unexpected  field  value:   "  +  fieldValue);  }	  	compilable	  [FE]  AssertionFailedError  	11	4	add
831	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError(   "Unexpected  field  value:   "  +  fieldValue);  }  if(fieldValue!=  null)  {  builder.append(fieldValue);  }  else  {  throw  new  InternalError( "Unexpected  field  value:   "  +  fieldValue);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError(   "Unexpected  field  value:   "  +  fieldValue);  }  if(fieldValue!=  null)  {  builder.append(fieldValue);  }  else  {  throw  new  InternalError( "Unexpected  field  value:   "  +  fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    InternalError(   "Unexpected    field    value:   "    +    fieldValue);    }    if(fieldValue!=  null)  {  builder.append(fieldValue);  }  else  {  throw  new  InternalError( "Unexpected  field  value:   "  +  fieldValue);  }	  	compilable	  [FE]  AssertionFailedError  	11	4	add
832	[BUG]  [BUGGY]  builder.append(fieldValue.toString(),  FieldUtils.safeMultiply(fieldValue.toString()));  [CE]  cannot  find  symbol  FieldUtils  [FE]        AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString(),  FieldUtils.safeMultiply(fieldValue.toString()));  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString(),  FieldUtils.safeMultiply(fieldValue.toString()));	  builder.append(fieldValue.toString(),    fieldValue.toString());    	non-compiled	[CE]  cannot  find  symbol  FieldUtils	85	None	replace
833	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue!=        null?        null        :        fieldValue);        builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	18	4	add
834	[BUG]  [BUGGY]  builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=        null?        null        :        fieldValue);        builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	18	4	add
835	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }	  	non-compiled	[CE]  'catch'  without  'try'	78	None	add
836	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  [CE]  'catch'  without  'try'  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());	  	non-compiled	[CE]  'catch'  without  'try'	78	None	add
837	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalAccessException( " ");  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalAccessException( " ");  }	  builder.append(fieldValue).append('n');    if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  'catch'  without  'try'	32	None	replace
838	[BUG]  [BUGGY]  builder.append(fieldValue!=  null?  fieldValue.toString()  :   "null   ");  builder.append(fieldValue!=  null?  fieldValue.toString()  :   "null ",  fieldValue);  [CE]  no  suitable  method  found  for  append(String,Object)  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=  null?  fieldValue.toString()  :   "null   ");  builder.append(fieldValue!=  null?  fieldValue.toString()  :   "null ",  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=    null?    fieldValue.toString()    :   "null   ");    builder.append(fieldValue!=  null?  fieldValue.toString()  :   "null ",  fieldValue);	  	non-compiled	[CE]  no  suitable  method  found  for  append(String,Object)	177	None	add
839	[BUG]  [BUGGY]  Field[]  fields  =  object.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  Field[]  fields  =  object.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Field[]  fields  =  object.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('	  Field[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iTotal++)    {    builder.append('    	non-compiled	[CE]  ')'  expected	111	None	replace
840	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalAccessException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalAccessException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    IllegalAccessException(   "   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }	  	non-compiled	[CE]  'catch'  without  'try'	31	None	add
841	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalAccessException(   "   ");  }  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('n');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    IllegalAccessException(   "   ");    }    builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }	  	compilable	  [FE]  AssertionFailedError  	31	4	add
842	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalAccessException(   "   ");  }  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalAccessException(   "   ");  }  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    IllegalAccessException(   "   ");    }    builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }	  	compilable	  [FE]  AssertionFailedError  	31	4	add
843	[BUG]  [BUGGY]  builder.append('$');  if(fieldValue  instanceof  String)  {  String[]  excludeFields  =(String[])fieldValue;  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(exclude  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');  if(fieldValue  instanceof  String)  {  String[]  excludeFields  =(String[])fieldValue;  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(exclude  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');  if(fieldValue  instanceof  String)  {  String[]  excludeFields  =(String[])fieldValue;  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(exclude	  builder.append('$');    if(fieldValue    instanceof    String)    {    String[]    excludeFields    =(String[])fieldValue;    for(int    i    =    0;    i    <    excludeFields.length;    i++)    {    builder.append(excludeFields[i]    	non-compiled	[CE]  ')'  expected	144	None	replace
844	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue  instanceof  String)  {  String[]  excludeFields  =(String[])fieldValue;  for(int  i  =  0;  i  <  excludeFields.length  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue  instanceof  String)  {  String[]  excludeFields  =(String[])fieldValue;  for(int  i  =  0;  i  <  excludeFields.length  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue  instanceof  String)  {  String[]  excludeFields  =(String[])fieldValue;  for(int  i  =  0;  i  <  excludeFields.length	  builder.append('$');    if(fieldValue    instanceof    String)    {    String[]    excludeFields    =(String[])fieldValue;    for(int    i    =    0;    i    <    excludeFields.length;    i++)    {    builder.append(excludeFields[i]    	non-compiled	[CE]  ';'  expected	144	None	replace
845	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }	  	non-compiled	[CE]  'catch'  without  'try'	29	None	add
846	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('  [CE]  illegal  line  end  in  character  literal  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('	  	non-compiled	[CE]  illegal  line  end  in  character  literal	29	None	add
847	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('n');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }	  	compilable	  [FE]  AssertionFailedError  	29	4	add
848	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }	  	compilable	  [FE]  AssertionFailedError  	29	4	add
849	[BUG]  [BUGGY]  builder.append(fieldValue).append('/');  Builder.append(fieldValue).append('/');  [CE]  cannot  find  symbol  Builder  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('/');  Builder.append(fieldValue).append('/');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('/');    Builder.append(fieldValue).append('/');	  	non-compiled	[CE]  cannot  find  symbol  Builder	175	None	add
850	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('/');  builder.append(fieldValue).append(':');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('/');    builder.append(fieldValue).append(':');	  	compilable	  [FE]  AssertionFailedError  	175	4	add
851	[BUG]  [BUGGY]  builder.append(fieldValue).append('/');  builder.append(fieldValue).append(':');  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('/');  builder.append(fieldValue).append(':');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('/');    builder.append(fieldValue).append(':');	  	compilable	  [FE]  AssertionFailedError  	175	4	add
852	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.toString());  }  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    builder.append(fieldValue.toString());    }    builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }	  	compilable	  [FE]  AssertionFailedError  	128	4	add
853	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.toString());  }  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.toString());  }  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    builder.append(fieldValue.toString());    }    builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }	  	compilable	  [FE]  AssertionFailedError  	128	4	add
854	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.toString());  }  if(fieldValue!=  null)  {  builder.append(excludeFields[0].toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  [CE]  'catch'  without  'try'  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.toString());  }  if(fieldValue!=  null)  {  builder.append(excludeFields[0].toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    builder.append(fieldValue.toString());    }    if(fieldValue!=  null)  {  builder.append(excludeFields[0].toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }	  	non-compiled	[CE]  'catch'  without  'try'	128	None	add
855	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.toString());  }  if(fieldValue!=  null)  {  builder.append(excludeFields[iConstant]);  }  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.toString());  }  if(fieldValue!=  null)  {  builder.append(excludeFields[iConstant]);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    builder.append(fieldValue.toString());    }    if(fieldValue!=  null)  {  builder.append(excludeFields[iConstant]);  }	  	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	128	None	add
856	[BUG]  [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue);  builder.append('n');  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue);  builder.append('n');  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  String)  {  builder.append(fieldValue);  builder.append('n');  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)	  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');    if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&    (useTransients    ||!    	non-compiled	[CE]  ')'  expected	165	None	replace
857	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  Field[]  fields  =  clazz.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Field[]  fields  =  clazz.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('  }	  Field[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iTotal++)    {    builder.append('    }    	non-compiled	[CE]  ')'  expected	112	None	replace
858	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  String[]  excludeFields  =  field.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  String[]  excludeFields  =  field.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null)  {  String[]  excludeFields  =  field.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]	  if(fieldValue!=    null)    {    String[]    excludeFields    =    field.getexcludeFields();    for(int    i    =    0;    i    <    excludeFields.length;    i++)    {    builder.append(excludeFields[i]    	non-compiled	[CE]  ')'  expected	168	None	replace
859	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  Il  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  Il  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  Il	  builder.append(fieldValue).append('n');    if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    	non-compiled	[CE]  unclosed  string  literal	28	None	replace
860	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  builder.append(fieldValue).append('n');    if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    	compilable	  [FE]  AssertionFailedError  	28	4	replace
861	[BUG]  [BUGGY]  builder.append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  builder.append(fieldValue).append('n');    if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    	compilable	  [FE]  AssertionFailedError  	28	4	replace
862	[BUG]  [BUGGY]  builder.append(fieldValue).append('_').append('_');  builder.append(fieldValue).append( ".append('_').append('_');  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_').append('_');  builder.append(fieldValue).append( ".append('_').append('_');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_').append('_');    builder.append(fieldValue).append( ".append('_').append('_');	  	non-compiled	[CE]  unclosed  string  literal	149	None	add
863	[BUG]  [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    builder.append(fieldValue).append('_');    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }	  	non-compiled	[CE]  'catch'  without  'try'	67	None	add
864	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  builder.append(fieldValue).append('_');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('_');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    builder.append(fieldValue).append('_');    }    builder.append(fieldValue).append('_');	  	compilable	  [FE]  AssertionFailedError  	67	4	add
865	[BUG]  [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  builder.append(fieldValue).append('_');  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  builder.append(fieldValue).append('_');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    builder.append(fieldValue).append('_');    }    builder.append(fieldValue).append('_');	  	compilable	  [FE]  AssertionFailedError  	67	4	add
866	[BUG]  [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  [CE]  'catch'  without  'try'  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    builder.append(fieldValue).append('_');    }    if(fieldValue  ==  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }	  	non-compiled	[CE]  'catch'  without  'try'	67	None	add
867	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  iConstant  =  0;  iConstant  <  field.length;  ++iConstant;  iTotal++)  {  builder.append('  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  for(int  iConstant  =  0;  iConstant  <  field.length;  ++iConstant;  iTotal++)  {  builder.append('  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  for(int  iConstant  =  0;  iConstant  <  field.length;  ++iConstant;  iTotal++)  {  builder.append('  }	  if(fieldValue!=    null)    {    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iTotal++)    {    builder.append('    }    	non-compiled	[CE]  ')'  expected	184	None	replace
868	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append( "  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append( "  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append( "  }	  if(fieldValue!=    null)    {    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iTotal++)    {    builder.append('    }    	non-compiled	[CE]  	184	None	replace
869	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue.toString());  builder.append(fieldValue  ==  null?   "null ".  :  fieldValue.toString());  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue.toString());  builder.append(fieldValue  ==  null?   "null ".  :  fieldValue.toString());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue    ==    null?   "null   "    :    fieldValue.toString());    builder.append(fieldValue  ==  null?   "null ".  :  fieldValue.toString());	  	non-compiled	[CE]  <identifier>  expected	124	None	add
870	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue.toString());  builder.append(fieldValue  ==  null?   "null ")  :  fieldValue.toString());  [CE]  :  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue.toString());  builder.append(fieldValue  ==  null?   "null ")  :  fieldValue.toString());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue    ==    null?   "null   "    :    fieldValue.toString());    builder.append(fieldValue  ==  null?   "null ")  :  fieldValue.toString());	  	non-compiled	[CE]  :  expected	124	None	add
871	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('_').append(fieldValue).append('_');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('_').append(fieldValue).append('_');	  builder.append(fieldValue).append('_');    Builder.append(fieldValue).append('_');    	compilable	  [FE]  AssertionFailedError  	154	4	replace
872	[BUG]  [BUGGY]  builder.append('_').append(fieldValue).append('_');  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('_').append(fieldValue).append('_');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('_').append(fieldValue).append('_');	  builder.append(fieldValue).append('_');    Builder.append(fieldValue).append('_');    	compilable	  [FE]  AssertionFailedError  	154	4	replace
873	[BUG]  [BUGGY]  builder.append('_');  Builder.append(fieldValue).append('_');  [CE]  cannot  find  symbol  Builder  [FE]          AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('_');  Builder.append(fieldValue).append('_');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('_');  Builder.append(fieldValue).append('_');	  builder.append(fieldValue).append('_');    Builder.append(fieldValue).append('_');    	non-compiled	[CE]  cannot  find  symbol  Builder	154	None	replace
874	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }	  	non-compiled	[CE]  'catch'  without  'try'	41	None	add
875	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append('n');  }	  builder.append(fieldValue.getClass());    builder.append(fieldValue.getClass());    	compilable	  [FE]  AssertionFailedError  	34	4	replace
876	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append('n');  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append('n');  }	  builder.append(fieldValue.getClass());    builder.append(fieldValue.getClass());    	compilable	  [FE]  AssertionFailedError  	34	4	replace
877	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append( ", ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append( ", ");  }	  builder.append(fieldValue.getClass());    builder.append(fieldValue.getClass());    	compilable	  [FE]  AssertionFailedError  	34	4	replace
878	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append( ", ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append( ", ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append( ", ");  }	  builder.append(fieldValue.getClass());    builder.append(fieldValue.getClass());    	compilable	  [FE]  AssertionFailedError  	34	4	replace
879	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue);  builder.append(fieldValue  ==  null?   "null ",  fieldValue);  [CE]  :  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue);  builder.append(fieldValue  ==  null?   "null ",  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue    ==    null?   "null   "    :    fieldValue);    builder.append(fieldValue  ==  null?   "null ",  fieldValue);	  	non-compiled	[CE]  :  expected	180	None	add
880	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue);  builder.append(fieldValue  ==  null?   "null ")  :  fieldValue);  [CE]  :  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?   "null   "  :  fieldValue);  builder.append(fieldValue  ==  null?   "null ")  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue    ==    null?   "null   "    :    fieldValue);    builder.append(fieldValue  ==  null?   "null ")  :  fieldValue);	  	non-compiled	[CE]  :  expected	180	None	add
881	[BUG]  [BUGGY]  Field[]  fields  =  object.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('+');  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  Field[]  fields  =  object.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('+');  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Field[]  fields  =  object.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('+');  }	  Field[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iConstant++)    {    builder.append('+');    }    	non-compiled	[CE]  ')'  expected	98	None	replace
882	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('+');  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  Field[]  fields  =  clazz.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('+');  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Field[]  fields  =  clazz.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('+');  }	  Field[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iConstant++)    {    builder.append('+');    }    	non-compiled	[CE]  ')'  expected	98	None	replace
883	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append(     ",     ");    builder.append(fieldValue).append(   ".,     ");  builder.append(fieldValue).append( ".,   ");  builder.append(fieldValue).append( ".,   ");  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append(       ",       ");        builder.append(fieldValue).append(   ".,       ");    builder.append(fieldValue).append( ".,   ");  builder.append(fieldValue).append( ".,   ");	  	compilable	  [FE]  AssertionFailedError  	103	4	add
884	[BUG]  [BUGGY]  builder.append(fieldValue).append(     ",     ");    builder.append(fieldValue).append(   ".,     ");  builder.append(fieldValue).append( ".,   ");  builder.append(fieldValue).append( ".,   ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append(     ",     ");    builder.append(fieldValue).append(   ".,     ");  builder.append(fieldValue).append( ".,   ");  builder.append(fieldValue).append( ".,   ");  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append(       ",       ");        builder.append(fieldValue).append(   ".,       ");    builder.append(fieldValue).append( ".,   ");  builder.append(fieldValue).append( ".,   ");	  	compilable	  [FE]  AssertionFailedError  	103	4	add
885	[BUG]  [BUGGY]  builder.append(fieldValue).append('/'  +  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('/'  +  iConstant);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('/'  +  iConstant);	  builder.append(fieldValue).append('/');    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	176	None	replace
886	[BUG]  [BUGGY]  builder.append(fieldValue).append('/',  fieldValue);  [CE]  no  suitable  method  found  for  append(char,Object)  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('/',  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('/',  fieldValue);	  builder.append(fieldValue).append('/');    	non-compiled	[CE]  no  suitable  method  found  for  append(char,Object)	176	None	replace
887	[BUG]  [BUGGY]  builder.append(fieldValue).append('/')+  1;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('/')+  1;  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('/')+  1;	  builder.append(fieldValue).append('/');    	non-compiled	[CE]  not  a  statement	176	None	replace
888	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue!=        null?        null        :        fieldValue);        builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	16	4	add
889	[BUG]  [BUGGY]  builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=        null?        null        :        fieldValue);        builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	16	4	add
890	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append( ", ");  builder.append(fieldValue).append(',');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append( ", ");  builder.append(fieldValue).append(',');  }	  builder.append(fieldValue).append(       ",       ");    builder.append(fieldValue).append(',');    	compilable	  [FE]  AssertionFailedError  	174	4	replace
891	[BUG]  [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append( ", ");  builder.append(fieldValue).append(',');  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append( ", ");  builder.append(fieldValue).append(',');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append( ", ");  builder.append(fieldValue).append(',');  }	  builder.append(fieldValue).append(       ",       ");    builder.append(fieldValue).append(',');    	compilable	  [FE]  AssertionFailedError  	174	4	replace
892	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append(',');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append(',');	  builder.append(fieldValue).append(       ",       ");    builder.append(fieldValue).append(',');    	compilable	  [FE]  AssertionFailedError  	174	4	replace
893	[BUG]  [BUGGY]  builder.append(fieldValue).append(',');  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append(',');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append(',');	  builder.append(fieldValue).append(       ",       ");    builder.append(fieldValue).append(',');    	compilable	  [FE]  AssertionFailedError  	174	4	replace
894	[BUG]  [BUGGY]  [FE]  InternalError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append( ", ");  builder.append(fieldValue).append(',');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append( ", ");  builder.append(fieldValue).append(',');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  builder.append(fieldValue).append(       ",       ");    builder.append(fieldValue).append(',');    	compilable	  [FE]  InternalError  	174	4	replace
895	[BUG]  [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append( ", ");  builder.append(fieldValue).append(',');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [FE]  InternalError  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append( ", ");  builder.append(fieldValue).append(',');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append( ", ");  builder.append(fieldValue).append(',');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  builder.append(fieldValue).append(       ",       ");    builder.append(fieldValue).append(',');    	compilable	  [FE]  InternalError  	174	4	replace
896	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }  builder.append(fieldValue.getClass());  if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }  builder.append(fieldValue.getClass());  if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        if(fieldValue.getClass()!=    null)    {    builder.append(fieldValue.getClass());    }    builder.append(fieldValue.getClass());  if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());	  	non-compiled	[CE]  'catch'  without  'try'	35	None	add
897	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }  builder.append(fieldValue.getClass());  if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue.getClass()!=  null)  {  builder.append(fieldVal  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }  builder.append(fieldValue.getClass());  if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue.getClass()!=  null)  {  builder.append(fieldVal  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        if(fieldValue.getClass()!=    null)    {    builder.append(fieldValue.getClass());    }    builder.append(fieldValue.getClass());  if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue.getClass()!=  null)  {  builder.append(fieldVal	  	non-compiled	[CE]  ')'  expected	35	None	add
898	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append(     ",     ");    builder.append(fieldValue).append(     ",     ");  builder.append(fieldValue).append( ".,   ");  builder.append(fieldValue).append( ",   ");  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append(       ",       ");        builder.append(fieldValue).append(       ",       ");    builder.append(fieldValue).append( ".,   ");  builder.append(fieldValue).append( ",   ");	  	compilable	  [FE]  AssertionFailedError  	101	4	add
899	[BUG]  [BUGGY]  builder.append(fieldValue).append(     ",     ");    builder.append(fieldValue).append(     ",     ");  builder.append(fieldValue).append( ".,   ");  builder.append(fieldValue).append( ",   ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append(     ",     ");    builder.append(fieldValue).append(     ",     ");  builder.append(fieldValue).append( ".,   ");  builder.append(fieldValue).append( ",   ");  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append(       ",       ");        builder.append(fieldValue).append(       ",       ");    builder.append(fieldValue).append( ".,   ");  builder.append(fieldValue).append( ",   ");	  	compilable	  [FE]  AssertionFailedError  	101	4	add
900	[BUG]  [BUGGY]  builder.append('_').append(fieldValue).append('_')+  1;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('_').append(fieldValue).append('_')+  1;  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('_').append(fieldValue).append('_')+  1;	  builder.append(fieldValue).append('_')+    1;    	non-compiled	[CE]  not  a  statement	152	None	replace
901	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    if(fieldValue!=  null)  {  builder.append('$');  }  if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  }  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('$');        if(fieldValue!=    null)    {    builder.append('$');    }    if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  }  }	  	compilable	  [FE]  AssertionFailedError  	55	4	add
902	[BUG]  [BUGGY]  builder.append('$');    if(fieldValue!=  null)  {  builder.append('$');  }  if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  }  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    if(fieldValue!=  null)  {  builder.append('$');  }  if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  }  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');        if(fieldValue!=    null)    {    builder.append('$');    }    if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  }  }	  	compilable	  [FE]  AssertionFailedError  	55	4	add
903	[BUG]  [BUGGY]  builder.append('$');    if(fieldValue!=  null)  {  builder.append('$');  }  if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }  [CE]  'catch'  without  'try'  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    if(fieldValue!=  null)  {  builder.append('$');  }  if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');        if(fieldValue!=    null)    {    builder.append('$');    }    if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }	  	non-compiled	[CE]  'catch'  without  'try'	55	None	add
904	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append(   "_   ");  builder.append(fieldValue).append( ",_   ");  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append(   "_   ");    builder.append(fieldValue).append( ",_   ");	  	compilable	  [FE]  AssertionFailedError  	5	4	add
905	[BUG]  [BUGGY]  builder.append(fieldValue).append(   "_   ");  builder.append(fieldValue).append( ",_   ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append(   "_   ");  builder.append(fieldValue).append( ",_   ");  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append(   "_   ");    builder.append(fieldValue).append( ",_   ");	  	compilable	  [FE]  AssertionFailedError  	5	4	add
906	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }	  builder.append(fieldValue).append('_');    if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    builder.append(fieldValue).append('_');    }    	non-compiled	[CE]  'catch'  without  'try'	68	None	replace
907	[BUG]  [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append('_');  if(fieldValue!=  null)  {  builder.append('_');  }  [CE]  'catch'  without  'try'  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append('_');  if(fieldValue!=  null)  {  builder.append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  String)  {  builder.append('_');  if(fieldValue!=  null)  {  builder.append('_');  }	  builder.append(fieldValue).append('_');    if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    builder.append(fieldValue).append('_');    }    	non-compiled	[CE]  'catch'  without  'try'	68	None	replace
908	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());  if(fieldValue  ==  null?  null  :  fieldValue.getClass())  {  builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());  }  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());  if(fieldValue  ==  null?  null  :  fieldValue.getClass())  {  builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue    ==    null?    null    :    fieldValue.getClass());    if(fieldValue  ==  null?  null  :  fieldValue.getClass())  {  builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());  }	  	non-compiled	[CE]  incompatible  types	105	None	add
909	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());  if(fieldValue  ==  null?  null  :  fieldValue.getClass())  {  builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());  }  else  {  builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());  }  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());  if(fieldValue  ==  null?  null  :  fieldValue.getClass())  {  builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());  }  else  {  builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue    ==    null?    null    :    fieldValue.getClass());    if(fieldValue  ==  null?  null  :  fieldValue.getClass())  {  builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());  }  else  {  builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());  }	  	non-compiled	[CE]  incompatible  types	105	None	add
910	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());  if(fieldValue  ==  null?  null  :  fieldValue.getClass())  {  builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());  }  else  {  builder.append(fieldValue  ==  null?  null  :  fieldVal  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());  if(fieldValue  ==  null?  null  :  fieldValue.getClass())  {  builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());  }  else  {  builder.append(fieldValue  ==  null?  null  :  fieldVal  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue    ==    null?    null    :    fieldValue.getClass());    if(fieldValue  ==  null?  null  :  fieldValue.getClass())  {  builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());  }  else  {  builder.append(fieldValue  ==  null?  null  :  fieldVal	  	non-compiled	[CE]  ')'  expected	105	None	add
911	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());  if(fieldValue  ==  null?  null  :  fieldValue.getClass())  {  builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());  }  catch(IllegalAccessException  e)  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());  if(fieldValue  ==  null?  null  :  fieldValue.getClass())  {  builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());  }  catch(IllegalAccessException  e)  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue    ==    null?    null    :    fieldValue.getClass());    if(fieldValue  ==  null?  null  :  fieldValue.getClass())  {  builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());  }  catch(IllegalAccessException  e)  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	non-compiled	[CE]  	105	None	add
912	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    builder.append(fieldValue).append('_');  builder.append(fieldValue).append('_');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('_');        builder.append(fieldValue).append('_');    builder.append(fieldValue).append('_');	  	compilable	  [FE]  AssertionFailedError  	63	4	add
913	[BUG]  [BUGGY]  builder.append(fieldValue).append('_');    builder.append(fieldValue).append('_');  builder.append(fieldValue).append('_');  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    builder.append(fieldValue).append('_');  builder.append(fieldValue).append('_');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_');        builder.append(fieldValue).append('_');    builder.append(fieldValue).append('_');	  	compilable	  [FE]  AssertionFailedError  	63	4	add
914	[BUG]  [BUGGY]  if(fieldValue  instanceof  Field)  {  String[]  excludeFields  =(String[])fieldValue;  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }  [CE]  'catch'  without  'try'  [FE]          AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  Field)  {  String[]  excludeFields  =(String[])fieldValue;  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  Field)  {  String[]  excludeFields  =(String[])fieldValue;  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }	  builder.append('$');    if(fieldValue    instanceof    String)    {    String[]    excludeFields    =(String[])fieldValue;    for(int    i    =    0;    i    <    excludeFields.length;    i++)    {    builder.append(excludeFields[i]);    }    	non-compiled	[CE]  'catch'  without  'try'	143	None	replace
915	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue  instanceof  String)  {  String[]  excludeFields  =(String[])fieldValue;  for(int  i  =  0;  i  <  excludeFields.length;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue  instanceof  String)  {  String[]  excludeFields  =(String[])fieldValue;  for(int  i  =  0;  i  <  excludeFields.length;  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue  instanceof  String)  {  String[]  excludeFields  =(String[])fieldValue;  for(int  i  =  0;  i  <  excludeFields.length;	  builder.append('$');    if(fieldValue    instanceof    String)    {    String[]    excludeFields    =(String[])fieldValue;    for(int    i    =    0;    i    <    excludeFields.length;    i++)    {    builder.append(excludeFields[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
916	[BUG]  [BUGGY]  builder.append(fieldValue).append('$');  Builder.append(fieldValue).append('$');  [CE]  cannot  find  symbol  Builder  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('$');  Builder.append(fieldValue).append('$');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('$');    Builder.append(fieldValue).append('$');	  	non-compiled	[CE]  cannot  find  symbol  Builder	139	None	add
917	[BUG]  [BUGGY]  [FE]  InternalError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('_');  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('_');  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  builder.append(fieldValue).append('_');    builder.append(fieldValue).append('_');    	compilable	  [FE]  InternalError  	64	4	replace
918	[BUG]  [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('_');  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [FE]  InternalError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('_');  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append('_');  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  builder.append(fieldValue).append('_');    builder.append(fieldValue).append('_');    	compilable	  [FE]  InternalError  	64	4	replace
919	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append('_');  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  instanceof  String)  {  builder.append('_');  builder.append(fieldValue).append('_');  }	  builder.append(fieldValue).append('_');    builder.append(fieldValue).append('_');    	compilable	  [FE]  AssertionFailedError  	64	4	replace
920	[BUG]  [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append('_');  builder.append(fieldValue).append('_');  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append('_');  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  String)  {  builder.append('_');  builder.append(fieldValue).append('_');  }	  builder.append(fieldValue).append('_');    builder.append(fieldValue).append('_');    	compilable	  [FE]  AssertionFailedError  	64	4	replace
921	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    builder.append(fieldValue.toString());  builder.append(fieldValue.toString());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.toString());        builder.append(fieldValue.toString());    builder.append(fieldValue.toString());	  	compilable	  [FE]  AssertionFailedError  	76	4	add
922	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    builder.append(fieldValue.toString());  builder.append(fieldValue.toString());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    builder.append(fieldValue.toString());  builder.append(fieldValue.toString());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        builder.append(fieldValue.toString());    builder.append(fieldValue.toString());	  	compilable	  [FE]  AssertionFailedError  	76	4	add
923	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(excludeFields[0].toString());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(excludeFields[0].toString());	  builder.append(fieldValue.toString());    if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    builder.append(excludeFields[0].getName());    }    	compilable	  [FE]  NullPointerException  	130	4	replace
924	[BUG]  [BUGGY]  builder.append(excludeFields[0].toString());  [FE]  NullPointerException  [FE]          AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(excludeFields[0].toString());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(excludeFields[0].toString());	  builder.append(fieldValue.toString());    if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    builder.append(excludeFields[0].getName());    }    	compilable	  [FE]  NullPointerException  	130	4	replace
925	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue.toString());  Builder.append(fieldValue  ==  null?  null  :  fieldValue.toString());  [CE]  cannot  find  symbol  Builder  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue.toString());  Builder.append(fieldValue  ==  null?  null  :  fieldValue.toString());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue    ==    null?    null    :    fieldValue.toString());    Builder.append(fieldValue  ==  null?  null  :  fieldValue.toString());	  	non-compiled	[CE]  cannot  find  symbol  Builder	120	None	add
926	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('  }	  if(fieldValue    ==    null)    {    String[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iConstant++)    {    builder.append('    }    	non-compiled	[CE]  ')'  expected	47	None	replace
927	[BUG]  [BUGGY]  builder.append('n');  Builder.append(fieldValue).append('n');  [CE]  cannot  find  symbol  Builder  [FE]        AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('n');  Builder.append(fieldValue).append('n');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('n');  Builder.append(fieldValue).append('n');	  builder.append(fieldValue).append('n');    Builder.append(fieldValue).append('n');    	non-compiled	[CE]  cannot  find  symbol  Builder	113	None	replace
928	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('n').append(fieldValue).append('n');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('n').append(fieldValue).append('n');	  builder.append(fieldValue).append('n');    Builder.append(fieldValue).append('n');    	compilable	  [FE]  AssertionFailedError  	113	4	replace
929	[BUG]  [BUGGY]  builder.append('n').append(fieldValue).append('n');  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('n').append(fieldValue).append('n');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('n').append(fieldValue).append('n');	  builder.append(fieldValue).append('n');    Builder.append(fieldValue).append('n');    	compilable	  [FE]  AssertionFailedError  	113	4	replace
930	[BUG]  [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  String)  {  builder.append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }	  builder.append(fieldValue).append('n');    if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    	non-compiled	[CE]  'catch'  without  'try'	26	None	replace
931	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue);  }	  builder.append(fieldValue!=    null?    null    :    fieldValue);    if(fieldValue!=    null?    null    :    fieldValue);    	compilable	  [FE]  AssertionFailedError  	21	1	replace
932	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue);  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue);  }	  builder.append(fieldValue!=    null?    null    :    fieldValue);    if(fieldValue!=    null?    null    :    fieldValue);    	compilable	  [FE]  AssertionFailedError  	21	1	replace
933	[BUG]  [BUGGY]  [FE]  InternalError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.   ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.   ");  }	  builder.append(fieldValue.getClass());    if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException.   ");    }    	compilable	  [FE]  InternalError  	161	4	replace
934	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.   ");  }  [FE]  InternalError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.   ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.   ");  }	  builder.append(fieldValue.getClass());    if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException.   ");    }    	compilable	  [FE]  InternalError  	161	4	replace
935	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  Builder.append(fieldValue.getClass());  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  [CE]  cannot  find  symbol  Builder  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  Builder.append(fieldValue.getClass());  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        if(fieldValue    ==    null)    {    builder.append(fieldValue.getClass());    }    Builder.append(fieldValue.getClass());  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }	  	non-compiled	[CE]  cannot  find  symbol  Builder	39	None	add
936	[BUG]  [BUGGY]  builder.append(fieldValue).append('_').append(methodValue);  [CE]  cannot  find  symbol  methodValue  [FE]          AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_').append(methodValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_').append(methodValue);	  builder.append(fieldValue).append('_').append(iConstant);    	non-compiled	[CE]  cannot  find  symbol  methodValue	151	None	replace
937	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)	  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');    if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||    	non-compiled	[CE]  ')'  expected	167	None	replace
938	[BUG]  [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append('n');  builder.append(fieldValue).append('n');  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append('n');  builder.append(fieldValue).append('n');  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  Field)  {  builder.append('n');  builder.append(fieldValue).append('n');  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)	  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');    if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||    	non-compiled	[CE]  ')'  expected	167	None	replace
939	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  	  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');    if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||    	non-compiled	[CE]  illegal  start  of  expression	167	None	replace
940	[BUG]  [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||	  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');    if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||    	non-compiled	[CE]  illegal  start  of  expression	167	None	replace
941	[BUG]  [BUGGY]  builder.append(fieldValue!=  null?  fieldValue.toString()  :   "null   ");  builder.append(fieldValue!=  null?  fieldValue.toString()  :   "null "));  [CE]  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=  null?  fieldValue.toString()  :   "null   ");  builder.append(fieldValue!=  null?  fieldValue.toString()  :   "null "));  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=    null?    fieldValue.toString()    :   "null   ");    builder.append(fieldValue!=  null?  fieldValue.toString()  :   "null "));	  	non-compiled	[CE]  	177	None	add
942	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  if(!ArrayUtils.contains(excludeFields,  field.getName())  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  if(!ArrayUtils.contains(excludeFields,  field.getName())  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  if(!ArrayUtils.contains(excludeFields,  field.getName())	  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');    if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&    (useTransients    ||!    	non-compiled	[CE]  ')'  expected	165	None	replace
943	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append('$');  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  builder.append('$');    builder.append('$');    	compilable	  [FE]  AssertionFailedError  	54	4	replace
944	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append('$');  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  builder.append('$');    builder.append('$');    	compilable	  [FE]  AssertionFailedError  	54	4	replace
945	[BUG]  [BUGGY]  Integer[]  fields  =  object.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('+');  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  Integer[]  fields  =  object.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('+');  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Integer[]  fields  =  object.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('+');  }	  Integer[]    fields    =    fieldValue.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iConstant++)    {    builder.append('+');    }    	non-compiled	[CE]  ')'  expected	117	None	replace
946	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append( " ");  }	  builder.append(fieldValue.toString());    if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    	compilable	  [FE]  AssertionFailedError  	79	4	replace
947	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append( " ");  }	  builder.append(fieldValue.toString());    if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    	compilable	  [FE]  AssertionFailedError  	79	4	replace
948	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue).append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  builder.append(fieldValue).append('$');    	compilable	  [FE]  AssertionFailedError  	140	4	replace
949	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue).append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  builder.append(fieldValue).append('$');    	compilable	  [FE]  AssertionFailedError  	140	4	replace
950	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append('n');  builder.append(fieldValue).append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append('n');  builder.append(fieldValue).append('n');  }	  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');    	compilable	  [FE]  AssertionFailedError  	24	4	replace
951	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append('n');  builder.append(fieldValue).append('n');  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append('n');  builder.append(fieldValue).append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append('n');  builder.append(fieldValue).append('n');  }	  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');    	compilable	  [FE]  AssertionFailedError  	24	4	replace
952	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  ==  null)  {  builder.append('n');  }	  builder.append(fieldValue).append('n');    if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    	compilable	  [FE]  AssertionFailedError  	26	4	replace
953	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  builder.append('n');  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null)  {  builder.append('n');  }	  builder.append(fieldValue).append('n');    if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    	compilable	  [FE]  AssertionFailedError  	26	4	replace
954	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    builder.append(fieldValue).append(   "._   ");  builder.append(fieldValue).append('_');  builder.append(fieldValue).append( ",._   ");  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('_');        builder.append(fieldValue).append(   "._   ");    builder.append(fieldValue).append('_');  builder.append(fieldValue).append( ",._   ");	  	compilable	  [FE]  AssertionFailedError  	155	4	add
955	[BUG]  [BUGGY]  builder.append(fieldValue).append('_');    builder.append(fieldValue).append(   "._   ");  builder.append(fieldValue).append('_');  builder.append(fieldValue).append( ",._   ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    builder.append(fieldValue).append(   "._   ");  builder.append(fieldValue).append('_');  builder.append(fieldValue).append( ",._   ");  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_');        builder.append(fieldValue).append(   "._   ");    builder.append(fieldValue).append('_');  builder.append(fieldValue).append( ",._   ");	  	compilable	  [FE]  AssertionFailedError  	155	4	add
956	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.getName());  }  else  {  Class  <?>[]  fields  =  fieldValue.getFields();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  [CE]  'catch'  without  'try'  [FE]          AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.getName());  }  else  {  Class  <?>[]  fields  =  fieldValue.getFields();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue.getName());  }  else  {  Class  <?>[]  fields  =  fieldValue.getFields();  for(int  i  =  0;  i  <  fields.length;  ++i)  {	  builder.append(fieldValue.getClass());    if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    Class    <?>[]    fields    =    fieldValue.getFields();    for(int    i    =    0;    i    <    fields.length;    ++i)    {    	non-compiled	[CE]  'catch'  without  'try'	162	None	replace
957	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iTotal;  iTotal++)  {  builder.append('  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  Field[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iTotal;  iTotal++)  {  builder.append('  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Field[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iTotal;  iTotal++)  {  builder.append('  }	  Field[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iTotal++)    {    builder.append('    	non-compiled	[CE]  ')'  expected	111	None	replace
958	[BUG]  [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append('$');  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  fieldValue.getName())&&  (field.getName().indexOf('$')  ==  -1)  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append('$');  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  fieldValue.getName())&&  (field.getName().indexOf('$')  ==  -1)  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  Field)  {  builder.append('$');  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  fieldValue.getName())&&  (field.getName().indexOf('$')  ==  -1)	  builder.append('$');    if(fieldValue!=    null)    {    if(!ArrayUtils.contains(excludeFields,    fieldValue.getName())&&    (field.getName().indexOf('$')    ==    -1)&&    useTransients    ||!    	non-compiled	[CE]  ')'  expected	145	None	replace
959	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append( ", ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append( ", ");  }	  builder.append(fieldValue.toString());    if(fieldValue.toString()!=    null)    {    builder.append(fieldValue.toString());    }    	compilable	  [FE]  AssertionFailedError  	81	4	replace
960	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append( ", ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append( ", ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append( ", ");  }	  builder.append(fieldValue.toString());    if(fieldValue.toString()!=    null)    {    builder.append(fieldValue.toString());    }    	compilable	  [FE]  AssertionFailedError  	81	4	replace
961	[BUG]  [BUGGY]  Integer[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  Integer[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Integer[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('  }	  if(fieldValue    ==    null)    {    String[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iTotal++)    {    builder.append('    }    	non-compiled	[CE]  ')'  expected	110	None	replace
962	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null  &&  fieldValue  instanceof  String)  {  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null  &&  fieldValue  instanceof  String)  {  builder.append(fieldValue).append('_');  }	  if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    	compilable	  [FE]  AssertionFailedError  	2	4	replace
963	[BUG]  [BUGGY]  if(fieldValue!=  null  &&  fieldValue  instanceof  String)  {  builder.append(fieldValue).append('_');  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null  &&  fieldValue  instanceof  String)  {  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null  &&  fieldValue  instanceof  String)  {  builder.append(fieldValue).append('_');  }	  if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    	compilable	  [FE]  AssertionFailedError  	2	4	replace
964	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null  &&  fieldValue  instanceof  Field)  {  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null  &&  fieldValue  instanceof  Field)  {  builder.append(fieldValue).append('_');  }	  if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    	compilable	  [FE]  AssertionFailedError  	2	4	replace
965	[BUG]  [BUGGY]  if(fieldValue!=  null  &&  fieldValue  instanceof  Field)  {  builder.append(fieldValue).append('_');  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null  &&  fieldValue  instanceof  Field)  {  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null  &&  fieldValue  instanceof  Field)  {  builder.append(fieldValue).append('_');  }	  if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    	compilable	  [FE]  AssertionFailedError  	2	4	replace
966	[BUG]  [BUGGY]  if(fieldValue  ==  null?  null  :  fieldValue.toString())  {  builder.append(fieldValue);  }  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null?  null  :  fieldValue.toString())  {  builder.append(fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null?  null  :  fieldValue.toString())  {  builder.append(fieldValue);  }	  builder.append(fieldValue    ==    null?    null    :    fieldValue);    if(fieldValue    ==    null?    null    :    fieldValue);    	non-compiled	[CE]  incompatible  types	93	None	replace
967	[BUG]  [BUGGY]  builder.append(fieldValue).append('_')/  2;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_')/  2;  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_')/  2;	  builder.append(fieldValue).append('_')+    1;    	non-compiled	[CE]  not  a  statement	152	None	replace
968	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException.   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.   ");  }  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.getClass());        if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException.   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.   ");  }  }	  	compilable	  [FE]  AssertionFailedError  	160	4	add
969	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException.   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.   ");  }  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException.   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.   ");  }  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException.   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.   ");  }  }	  	compilable	  [FE]  AssertionFailedError  	160	4	add
970	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException.   ");  }  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError(  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException.   ");  }  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError(  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException.   ");    }    builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError(	  	non-compiled	[CE]  ')'  expected	160	None	add
971	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append( "_ ").append('_');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append( "_ ").append('_');	  builder.append(fieldValue).append('_').append('_');    	compilable	  [FE]  AssertionFailedError  	150	4	replace
972	[BUG]  [BUGGY]  builder.append(fieldValue).append( "_ ").append('_');  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append( "_ ").append('_');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append( "_ ").append('_');	  builder.append(fieldValue).append('_').append('_');    	compilable	  [FE]  AssertionFailedError  	150	4	replace
973	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_').append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue).append('_').append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  builder.append(fieldValue).append('_').append('_');    	compilable	  [FE]  AssertionFailedError  	150	4	replace
974	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_').append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_').append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue).append('_').append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  builder.append(fieldValue).append('_').append('_');    	compilable	  [FE]  AssertionFailedError  	150	4	replace
975	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue!=        null?        null        :        fieldValue);        builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	18	4	add
976	[BUG]  [BUGGY]  builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=        null?        null        :        fieldValue);        builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	18	4	add
977	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append( "_ ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue).append( "_ ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	4	4	replace
978	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append( "_ ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append( "_ ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue).append( "_ ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	4	4	replace
979	[BUG]  [BUGGY]  if(fieldValue  instanceof  String)  {  String[]  excludeFields  =(String[])fieldValue;  for(int  i  =  0;  i  <  excludedFields.length;  i++)  {  builder.append(excludeFields[i]  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  String[]  excludeFields  =(String[])fieldValue;  for(int  i  =  0;  i  <  excludedFields.length;  i++)  {  builder.append(excludeFields[i]  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  String)  {  String[]  excludeFields  =(String[])fieldValue;  for(int  i  =  0;  i  <  excludedFields.length;  i++)  {  builder.append(excludeFields[i]	  builder.append('$');    if(fieldValue    instanceof    String)    {    String[]    excludeFields    =(String[])fieldValue;    for(int    i    =    0;    i    <    excludeFields.length;    i++)    {    builder.append(excludeFields[i]    	non-compiled	[CE]  ')'  expected	144	None	replace
980	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue  instanceof  String)  {  builder.append('[');  }  [CE]  'catch'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue  instanceof  String)  {  builder.append('[');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append('$');  if(fieldValue  instanceof  String)  {  builder.append('[');  }	  builder.append('$');    if(fieldValue    instanceof    String)    {    String[]    excludeFields    =(String[])fieldValue;    for(int    i    =    0;    i    <    excludeFields.length;    i++)    {    builder.append(excludeFields[i]    	non-compiled	[CE]  'catch'  without  'try'	144	None	replace
981	[BUG]  [BUGGY]  builder.append(fieldValue.getName(),  object);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getName(),  object);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getName(),  object);	  builder.append(fieldValue.getName());    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
982	[BUG]  [BUGGY]  builder.append('$');    if(fieldValue  ==  null)  {  builder.append('$');  }  Builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }  [CE]  cannot  find  symbol  Builder  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    if(fieldValue  ==  null)  {  builder.append('$');  }  Builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');        if(fieldValue    ==    null)    {    builder.append('$');    }    Builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }	  	non-compiled	[CE]  cannot  find  symbol  Builder	57	None	add
983	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  Builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  [CE]  cannot  find  symbol  Builder  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  Builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    Builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }	  	non-compiled	[CE]  cannot  find  symbol  Builder	78	None	add
984	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append(   ",n   ");  builder.append(fieldValue).append( ".,n   ");  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append(   ",n   ");    builder.append(fieldValue).append( ".,n   ");	  	compilable	  [FE]  AssertionFailedError  	87	4	add
985	[BUG]  [BUGGY]  builder.append(fieldValue).append(   ",n   ");  builder.append(fieldValue).append( ".,n   ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append(   ",n   ");  builder.append(fieldValue).append( ".,n   ");  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append(   ",n   ");    builder.append(fieldValue).append( ".,n   ");	  	compilable	  [FE]  AssertionFailedError  	87	4	add
986	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append( ".   ");  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append( ".   ");  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  AssertionFailedError  	9	4	add
987	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append( ".   ");  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append( ".   ");  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append( ".   ");  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  AssertionFailedError  	9	4	add
988	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$').append(fieldValue);  if(fieldValue!=  null)  {  builder.append('$').append(fieldValue);  }  else  {  builder.append('$').append(fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('$').append(fieldValue);    if(fieldValue!=  null)  {  builder.append('$').append(fieldValue);  }  else  {  builder.append('$').append(fieldValue);  }	  	compilable	  [FE]  AssertionFailedError  	146	4	add
989	[BUG]  [BUGGY]  builder.append('$').append(fieldValue);  if(fieldValue!=  null)  {  builder.append('$').append(fieldValue);  }  else  {  builder.append('$').append(fieldValue);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$').append(fieldValue);  if(fieldValue!=  null)  {  builder.append('$').append(fieldValue);  }  else  {  builder.append('$').append(fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$').append(fieldValue);    if(fieldValue!=  null)  {  builder.append('$').append(fieldValue);  }  else  {  builder.append('$').append(fieldValue);  }	  	compilable	  [FE]  AssertionFailedError  	146	4	add
990	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  if(fieldValue!=  null)  {  builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue        ==        null?        null        :        fieldValue);        builder.append(fieldValue    ==    null?    null    :    fieldValue);    if(fieldValue!=  null)  {  builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  }	  	compilable	  [FE]  AssertionFailedError  	89	4	add
991	[BUG]  [BUGGY]  builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  if(fieldValue!=  null)  {  builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);  if(fieldValue!=  null)  {  builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue        ==        null?        null        :        fieldValue);        builder.append(fieldValue    ==    null?    null    :    fieldValue);    if(fieldValue!=  null)  {  builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  }	  	compilable	  [FE]  AssertionFailedError  	89	4	add
992	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException. ");  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException. ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException. ");  }	  	non-compiled	[CE]  'catch'  without  'try'	83	None	add
993	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$').append(fieldValue).append( ";n ");  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('$').append(fieldValue).append( ";n ");	  builder.append('$').append(fieldValue);    	compilable	  [FE]  AssertionFailedError  	147	4	replace
994	[BUG]  [BUGGY]  builder.append('$').append(fieldValue).append( ";n ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$').append(fieldValue).append( ";n ");  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$').append(fieldValue).append( ";n ");	  builder.append('$').append(fieldValue);    	compilable	  [FE]  AssertionFailedError  	147	4	replace
995	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$').append(fieldValue).append('_');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('$').append(fieldValue).append('_');	  builder.append('$').append(fieldValue);    	compilable	  [FE]  AssertionFailedError  	147	4	replace
996	[BUG]  [BUGGY]  builder.append('$').append(fieldValue).append('_');  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$').append(fieldValue).append('_');  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$').append(fieldValue).append('_');	  builder.append('$').append(fieldValue);    	compilable	  [FE]  AssertionFailedError  	147	4	replace
997	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append('[');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append('[');  }	  builder.append(fieldValue.toString());    if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    builder.append(fieldValue.toString());    }    	compilable	  [FE]  AssertionFailedError  	129	4	replace
998	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append('[');  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append('[');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append('[');  }	  builder.append(fieldValue.toString());    if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    builder.append(fieldValue.toString());    }    	compilable	  [FE]  AssertionFailedError  	129	4	replace
999	[BUG]  [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	non-compiled	[CE]  'catch'  without  'try'	69	None	add
1000	[BUG]  [BUGGY]  [FE]  InternalError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  builder.append(fieldValue.getClass());    if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    	compilable	  [FE]  InternalError  	42	4	replace
1001	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [FE]  InternalError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  builder.append(fieldValue.getClass());    if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    	compilable	  [FE]  InternalError  	42	4	replace
1002	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.getClass());        if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  }	  	compilable	  [FE]  AssertionFailedError  	37	4	add
1003	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  }	  	compilable	  [FE]  AssertionFailedError  	37	4	add
1004	[BUG]  [BUGGY]  Object[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('+');  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  Object[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('+');  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Object[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('+');  }	  Field[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iConstant++)    {    builder.append('+');    }    	non-compiled	[CE]  ')'  expected	98	None	replace
1005	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.getClass());        if(fieldValue.getClass()!=    null)    {    builder.append(fieldValue.getClass());    }    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }  }	  	compilable	  [FE]  AssertionFailedError  	35	4	add
1006	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        if(fieldValue.getClass()!=    null)    {    builder.append(fieldValue.getClass());    }    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }  }	  	compilable	  [FE]  AssertionFailedError  	35	4	add
1007	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  builder.append(fieldValue.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.getClass());        builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  builder.append(fieldValue.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	33	4	add
1008	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  builder.append(fieldValue.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  builder.append(fieldValue.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  builder.append(fieldValue.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	33	4	add
1009	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  builder.append( ".IFJDCS ".charAt(fieldValue.length()  -  1))  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [CE]  [FE]          AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  builder.append( ".IFJDCS ".charAt(fieldValue.length()  -  1))  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append('$');  builder.append( ".IFJDCS ".charAt(fieldValue.length()  -  1))  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  builder.append('$');    builder.append(   ".s.IFJDCS   ".charAt(fieldValue.length()    -    1))    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    	non-compiled	[CE]  	159	None	replace
1010	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException.   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.   "  [CE]  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException.   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.   "  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException.   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException.   "	  	non-compiled	[CE]  	169	None	add
1011	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(fieldValue).append('_');    if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	72	1	replace
1012	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(fieldValue).append('_');    if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	72	1	replace
1013	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException. ");  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException. ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException. ");  }	  	non-compiled	[CE]  'catch'  without  'try'	41	None	add
1014	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('/');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue).append('/');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  builder.append(fieldValue).append('/');    	compilable	  [FE]  AssertionFailedError  	176	4	replace
1015	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('/');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('/');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue).append('/');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  builder.append(fieldValue).append('/');    	compilable	  [FE]  AssertionFailedError  	176	4	replace
1016	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append(',');  }  else  {  builder.append( ", ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append(',');  }  else  {  builder.append( ", ");  }	  builder.append(fieldValue).append(       ",       ");    builder.append(fieldValue).append(',');    	compilable	  [FE]  AssertionFailedError  	174	4	replace
1017	[BUG]  [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append(',');  }  else  {  builder.append( ", ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append(',');  }  else  {  builder.append( ", ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append(',');  }  else  {  builder.append( ", ");  }	  builder.append(fieldValue).append(       ",       ");    builder.append(fieldValue).append(',');    	compilable	  [FE]  AssertionFailedError  	174	4	replace
1018	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append( ".   ");  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append( ".   ");  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  AssertionFailedError  	3	4	add
1019	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append( ".   ");  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append( ".   ");  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append( ".   ");  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  AssertionFailedError  	3	4	add
1020	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append( "   ");  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append( "   ");  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  AssertionFailedError  	3	4	add
1021	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append( "   ");  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append( "   ");  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append( "   ");  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  AssertionFailedError  	3	4	add
1022	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=  null?  fieldValue.toString()  : "  <  null> ");  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue!=  null?  fieldValue.toString()  : "  <  null> ");	  builder.append(fieldValue!=    null?    fieldValue.toString()    :   "null   ");    	compilable	  [FE]  AssertionFailedError  	178	4	replace
1023	[BUG]  [BUGGY]  builder.append(fieldValue!=  null?  fieldValue.toString()  : "  <  null> ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=  null?  fieldValue.toString()  : "  <  null> ");  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=  null?  fieldValue.toString()  : "  <  null> ");	  builder.append(fieldValue!=    null?    fieldValue.toString()    :   "null   ");    	compilable	  [FE]  AssertionFailedError  	178	4	replace
1024	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.toString());  }  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.toString()  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.toString());  }  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.toString()  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    builder.append(fieldValue.toString());    }    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.toString()	  	non-compiled	[CE]  ')'  expected	128	None	add
1025	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.toString());  }  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    builder.append(fieldValue.toString());    }    builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.toString());  }	  	compilable	  [FE]  AssertionFailedError  	128	4	add
1026	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.toString());  }  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.toString());  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.toString());  }  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.toString());  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    builder.append(fieldValue.toString());    }    builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.toString());  }	  	compilable	  [FE]  AssertionFailedError  	128	4	add
1027	[BUG]  [BUGGY]  Builder.append(fieldValue,  object.getClass());  [CE]  cannot  find  symbol  Builder  [FE]        AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  Builder.append(fieldValue,  object.getClass());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Builder.append(fieldValue,  object.getClass());	  builder.append(fieldValue.getClass());    if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    builder.append(excludeFields[0].getName());    }    	non-compiled	[CE]  cannot  find  symbol  Builder	136	None	replace
1028	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  |||!  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  |||!  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  |||!	  if(fieldValue    ==    null)    {    if(!ArrayUtils.contains(excludeFields,    field.getName())    &&(field.getName().indexOf('$')    ==    -1)    &&    (useTransients    ||!    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
1029	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('n');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	compilable	  [FE]  AssertionFailedError  	27	4	add
1030	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	compilable	  [FE]  AssertionFailedError  	27	4	add
1031	[BUG]  [BUGGY]  if(fieldValue!=  null?  null  :  fieldValue.toString())  {  builder.append(fieldValue);  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null?  null  :  fieldValue.toString())  {  builder.append(fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null?  null  :  fieldValue.toString())  {  builder.append(fieldValue);  }	  builder.append(fieldValue!=    null?    null    :    fieldValue);    if(fieldValue!=    null?    null    :    fieldValue);    	non-compiled	[CE]  incompatible  types	21	None	replace
1032	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=  null?   " "  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue!=  null?   " "  :  fieldValue);	  builder.append(fieldValue    ==    null?   "   "    :    fieldValue);    	compilable	  [FE]  AssertionFailedError  	164	4	replace
1033	[BUG]  [BUGGY]  builder.append(fieldValue!=  null?   " "  :  fieldValue);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=  null?   " "  :  fieldValue);  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=  null?   " "  :  fieldValue);	  builder.append(fieldValue    ==    null?   "   "    :    fieldValue);    	compilable	  [FE]  AssertionFailedError  	164	4	replace
1034	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue);  }	  builder.append(fieldValue).append('_');    if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    builder.append(fieldValue).append('_');    }    	compilable	  [FE]  AssertionFailedError  	68	4	replace
1035	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue);  }	  builder.append(fieldValue).append('_');    if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    builder.append(fieldValue).append('_');    }    	compilable	  [FE]  AssertionFailedError  	68	4	replace
1036	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  (useTransients  |||  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  (useTransients  |||  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  (useTransients  |||	  if(fieldValue!=    null)    {    if(!ArrayUtils.contains(excludeFields,    field.getName())    &&(field.getName().indexOf('$')    ==    -1)    &&    (useTransients    ||!    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
1037	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('_');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    builder.append(fieldValue).append('_');    }    builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }	  	compilable	  [FE]  AssertionFailedError  	67	4	add
1038	[BUG]  [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    builder.append(fieldValue).append('_');    }    builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }	  	compilable	  [FE]  AssertionFailedError  	67	4	add
1039	[BUG]  [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_  [CE]  unclosed  character  literal  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    builder.append(fieldValue).append('_');    }    builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_	  	non-compiled	[CE]  unclosed  character  literal	67	None	add
1040	[BUG]  [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValu  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValu  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_');        if(fieldValue!=    null)    {    builder.append(fieldValue).append('_');    }    else    {    builder.append(fieldValue).append('_');    }    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValu	  	non-compiled	[CE]  ')'  expected	67	None	add
1041	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  Field[]  excludedFields  =  field.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }  [CE]  'catch'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  Field[]  excludedFields  =  field.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  Field[]  excludedFields  =  field.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }	  if(fieldValue!=    null)    {    Field[]    excludeFields    =    field.getexcludeFields();    for(int    i    =    0;    i    <    excludeFields.length;    i++)    {    builder.append(excludeFields[i]);    }    	non-compiled	[CE]  'catch'  without  'try'	157	None	replace
1042	[BUG]  [BUGGY]  builder.append(fieldValue!=  null?  null  :  fieldValue.toString());  Builder.append(fieldValue!=  null?  null  :  fieldValue.toString());  [CE]  cannot  find  symbol  Builder  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue!=  null?  null  :  fieldValue.toString());  Builder.append(fieldValue!=  null?  null  :  fieldValue.toString());  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=    null?    null    :    fieldValue.toString());    Builder.append(fieldValue!=  null?  null  :  fieldValue.toString());	  	non-compiled	[CE]  cannot  find  symbol  Builder	122	None	add
1043	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null  &&  fieldValue.equals( " "))  {  builder.append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null  &&  fieldValue.equals( " "))  {  builder.append('$');  }	  if(fieldValue!=    null)    {    builder.append('$');    }    	compilable	  [FE]  AssertionFailedError  	14	4	replace
1044	[BUG]  [BUGGY]  if(fieldValue!=  null  &&  fieldValue.equals( " "))  {  builder.append('$');  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null  &&  fieldValue.equals( " "))  {  builder.append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null  &&  fieldValue.equals( " "))  {  builder.append('$');  }	  if(fieldValue!=    null)    {    builder.append('$');    }    	compilable	  [FE]  AssertionFailedError  	14	4	replace
1045	[BUG]  [BUGGY]  String[]  excludeFields  =  object.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }  [CE]  variable  excludeFields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                    AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  String[]  excludeFields  =  object.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	String[]  excludeFields  =  object.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }	  String[]    excludeFields    =    field.getexcludeFields();    for(int    i    =    0;    i    <    excludeFields.length;    i++)    {    builder.append(excludeFields[i]);    }    	non-compiled	[CE]  variable  excludeFields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	75	None	replace
1046	[BUG]  [BUGGY]  String[]  fieldValue  =  field.getexcludeFields();  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append(fieldValue[i]);  }  [CE]  variable  fieldValue  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                      AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  String[]  fieldValue  =  field.getexcludeFields();  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append(fieldValue[i]);  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	String[]  fieldValue  =  field.getexcludeFields();  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append(fieldValue[i]);  }	  String[]    excludeFields    =    field.getexcludeFields();    for(int    i    =    0;    i    <    excludeFields.length;    i++)    {    builder.append(excludeFields[i]);    }    	non-compiled	[CE]  variable  fieldValue  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	75	None	replace
1047	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append('n');  builder.append(fieldValue).append('r');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append('n');  builder.append(fieldValue).append('r');  }	  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('r');    	compilable	  [FE]  AssertionFailedError  	115	4	replace
1048	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append('n');  builder.append(fieldValue).append('r');  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append('n');  builder.append(fieldValue).append('r');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append('n');  builder.append(fieldValue).append('r');  }	  builder.append(fieldValue).append('n');    builder.append(fieldValue).append('r');    	compilable	  [FE]  AssertionFailedError  	115	4	replace
1049	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	171	4	add
1050	[BUG]  [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());        if(fieldValue!=    null)    {    builder.append(fieldValue.toString());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	171	4	add
1051	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append('_');  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  instanceof  Field)  {  builder.append('_');  builder.append(fieldValue).append('_');  }	  builder.append(fieldValue).append('_');    builder.append(fieldValue).append('_');    	compilable	  [FE]  AssertionFailedError  	64	4	replace
1052	[BUG]  [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append('_');  builder.append(fieldValue).append('_');  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append('_');  builder.append(fieldValue).append('_');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  Field)  {  builder.append('_');  builder.append(fieldValue).append('_');  }	  builder.append(fieldValue).append('_');    builder.append(fieldValue).append('_');    	compilable	  [FE]  AssertionFailedError  	64	4	replace
1053	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append('_');  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  instanceof  String)  {  builder.append('_');  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(fieldValue).append('_');    builder.append(fieldValue).append('_');    	compilable	  [FE]  IllegalArgumentException  	64	4	replace
1054	[BUG]  [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append('_');  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append('_');  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  String)  {  builder.append('_');  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(fieldValue).append('_');    builder.append(fieldValue).append('_');    	compilable	  [FE]  IllegalArgumentException  	64	4	replace
1055	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append( ", ");  }  else  {  builder.append(fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue).append( ", ");  }  else  {  builder.append(fieldValue);  }	  builder.append(fieldValue).append(       ",       ");    builder.append(fieldValue).append(       ",       ");    	compilable	  [FE]  AssertionFailedError  	102	4	replace
1056	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append( ", ");  }  else  {  builder.append(fieldValue);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append( ", ");  }  else  {  builder.append(fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue).append( ", ");  }  else  {  builder.append(fieldValue);  }	  builder.append(fieldValue).append(       ",       ");    builder.append(fieldValue).append(       ",       ");    	compilable	  [FE]  AssertionFailedError  	102	4	replace
1057	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append( ", ");  }  else  {  builder.append(fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append( ", ");  }  else  {  builder.append(fieldValue);  }	  builder.append(fieldValue).append(       ",       ");    builder.append(fieldValue).append(       ",       ");    	compilable	  [FE]  AssertionFailedError  	102	1	replace
1058	[BUG]  [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append( ", ");  }  else  {  builder.append(fieldValue);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append( ", ");  }  else  {  builder.append(fieldValue);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  String)  {  builder.append(fieldValue).append( ", ");  }  else  {  builder.append(fieldValue);  }	  builder.append(fieldValue).append(       ",       ");    builder.append(fieldValue).append(       ",       ");    	compilable	  [FE]  AssertionFailedError  	102	1	replace
1059	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  Field[]  fields  =  field.getFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Field[]  fields  =  field.getFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }	  Field[]    excludeFields    =    field.getexcludeFields();    for(int    i    =    0;    i    <    excludeFields.length;    i++)    {    builder.append(excludeFields[i]);    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	73	None	replace
1060	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(fieldValue);  }  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                  AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  Field[]  fields  =  field.getFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(fieldValue);  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Field[]  fields  =  field.getFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(fieldValue);  }	  Field[]    excludeFields    =    field.getexcludeFields();    for(int    i    =    0;    i    <    excludeFields.length;    i++)    {    builder.append(excludeFields[i]);    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	73	None	replace
1061	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append('_');  builder.append(fieldValue).append( "._ ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  instanceof  Field)  {  builder.append('_');  builder.append(fieldValue).append( "._ ");  }	  builder.append(fieldValue).append('_');    builder.append(fieldValue).append(   "._   ");    	compilable	  [FE]  AssertionFailedError  	156	4	replace
1062	[BUG]  [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append('_');  builder.append(fieldValue).append( "._ ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append('_');  builder.append(fieldValue).append( "._ ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  Field)  {  builder.append('_');  builder.append(fieldValue).append( "._ ");  }	  builder.append(fieldValue).append('_');    builder.append(fieldValue).append(   "._   ");    	compilable	  [FE]  AssertionFailedError  	156	4	replace
1063	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append('_');  builder.append(fieldValue).append( "._ ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue  instanceof  String)  {  builder.append('_');  builder.append(fieldValue).append( "._ ");  }	  builder.append(fieldValue).append('_');    builder.append(fieldValue).append(   "._   ");    	compilable	  [FE]  AssertionFailedError  	156	4	replace
1064	[BUG]  [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append('_');  builder.append(fieldValue).append( "._ ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  String)  {  builder.append('_');  builder.append(fieldValue).append( "._ ");  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  String)  {  builder.append('_');  builder.append(fieldValue).append( "._ ");  }	  builder.append(fieldValue).append('_');    builder.append(fieldValue).append(   "._   ");    	compilable	  [FE]  AssertionFailedError  	156	4	replace
1065	[BUG]  [BUGGY]  builder.append(fieldValue).append('/');  builder.append(fieldValue).append('/');  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  (useTransients  ||!  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('/');  builder.append(fieldValue).append('/');  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  (useTransients  ||!  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('/');    builder.append(fieldValue).append('/');  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  (useTransients  ||!	  	non-compiled	[CE]  ')'  expected	175	None	add
1066	[BUG]  [BUGGY]  builder.append(fieldValue).append('/');  builder.append(fieldValue).append('/');  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue).append('/');  builder.append(fieldValue).append('/');  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('/');    builder.append(fieldValue).append('/');  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!	  	non-compiled	[CE]  ')'  expected	175	None	add
1067	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(excludeFields[0]);  }  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(excludeFields[0]);  }  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    builder.append(excludeFields[0]);    }    builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {	  	non-compiled	[CE]  'catch'  without  'try'	137	None	add
1068	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(excludeFields[0]);  }  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(excludeFields[0]);  }  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());        if(fieldValue!=    null)    {    builder.append(fieldValue.getClass());    }    else    {    builder.append(excludeFields[0]);    }    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder	  	non-compiled	[CE]  ';'  expected	137	None	add
1069	[BUG]  [BUGGY]  int[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('+');  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  int[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('+');  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	int[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('+');  }	  Integer[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iConstant++)    {    builder.append('+');    }    	non-compiled	[CE]  ')'  expected	100	None	replace
1070	[BUG]  [BUGGY]  builder.append('$');    if(fieldValue!=  null)  {  builder.append('$');  }  Builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  }  [CE]  cannot  find  symbol  Builder  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  builder.append('$');    if(fieldValue!=  null)  {  builder.append('$');  }  Builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');        if(fieldValue!=    null)    {    builder.append('$');    }    Builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  }	  	non-compiled	[CE]  cannot  find  symbol  Builder	55	None	add
1071	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iTotal;  iTotal++)  {  builder.append('  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null)  {  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iTotal;  iTotal++)  {  builder.append('  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iTotal;  iTotal++)  {  builder.append('  }	  if(fieldValue!=    null)    {    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iTotal++)    {    builder.append('    }    	non-compiled	[CE]  ')'  expected	184	None	replace
1072	[BUG]  [BUGGY]  if(fieldValue!=  null  &&  fieldValue  instanceof  String)  {  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null  &&  fieldValue  instanceof  String)  {  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('  }  [BUGGY]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null  &&  fieldValue  instanceof  String)  {  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('  }	  if(fieldValue!=    null)    {    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iTotal++)    {    builder.append('    }    	non-compiled	[CE]  ')'  expected	184	None	replace
1073	[BUG]  [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append('$');  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }  [CE]  'catch'  without  'try'  [FE]          AssertionFailedError      [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue  instanceof  Field)  {  builder.append('$');  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  instanceof  Field)  {  builder.append('$');  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }	  builder.append('$');    if(fieldValue    instanceof    String)    {    String[]    excludeFields    =(String[])fieldValue;    for(int    i    =    0;    i    <    excludeFields.length;    i++)    {    builder.append(excludeFields[i]);    }    	non-compiled	[CE]  'catch'  without  'try'	143	None	replace
1074	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null  &&  fieldValue  instanceof  String)  {  builder.append(fieldValue).append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null  &&  fieldValue  instanceof  String)  {  builder.append(fieldValue).append('n');  }	  if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    	compilable	  [FE]  AssertionFailedError  	8	4	replace
1075	[BUG]  [BUGGY]  if(fieldValue!=  null  &&  fieldValue  instanceof  String)  {  builder.append(fieldValue).append('n');  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);      [BUGGY]  if(fieldValue!=  null  &&  fieldValue  instanceof  String)  {  builder.append(fieldValue).append('n');  }  [BUGGY]      }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null  &&  fieldValue  instanceof  String)  {  builder.append(fieldValue).append('n');  }	  if(fieldValue!=    null)    {    builder.append(fieldValue).append('n');    }    	compilable	  [FE]  AssertionFailedError  	8	4	replace
