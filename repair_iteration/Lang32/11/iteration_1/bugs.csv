bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers()))  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError  [CONTEXT]  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  [BUGGY]    if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers()))  [BUGGY]  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	    if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers()))		non-compiled	[CE]  'catch'  without  'try'	22	None	add
2	[BUG]  [BUGGY]    if(fieldValue  ==  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers()))  [CE]  'catch'  without  'try'  [FE]      AssertionFailedError  [CONTEXT]  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  [BUGGY]    if(fieldValue  ==  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers()))  [BUGGY]  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	    if(fieldValue  ==  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers()))		non-compiled	[CE]  'catch'  without  'try'	22	None	add
3	[BUG]  [BUGGY]    if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers())  [CE]  ')'  expected  [FE]        AssertionFailedError  [CONTEXT]  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  [BUGGY]    if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers())  [BUGGY]  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	    if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers())		non-compiled	[CE]  ')'  expected	22	None	add
4	[BUG]  [BUGGY]    if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers()))  continue;  [CE]  'catch'  without  'try'  [FE]          AssertionFailedError  [CONTEXT]  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  [BUGGY]    if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers()))  continue;  [BUGGY]  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	    if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers()))  continue;		non-compiled	[CE]  'catch'  without  'try'	22	None	add
5	[BUG]  [BUGGY]    if(fieldValue  ==  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers())  [CE]  ')'  expected  [FE]            AssertionFailedError  [CONTEXT]  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  [BUGGY]    if(fieldValue  ==  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers())  [BUGGY]  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	    if(fieldValue  ==  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers())		non-compiled	[CE]  ')'  expected	22	None	add
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  [BUGGY]  builder.append(fieldValue.toString());  [BUGGY]  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.toString());	builder.append(fieldValue);  	compilable	  [FE]  AssertionFailedError  	21	4	replace
7	[BUG]  [BUGGY]  builder.append(fieldValue.toString());  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  [BUGGY]  builder.append(fieldValue.toString());  [BUGGY]  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());	builder.append(fieldValue);  	compilable	  [FE]  AssertionFailedError  	21	4	replace
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  [BUGGY]  builder.append('$');  [BUGGY]  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('$');	builder.append(fieldValue);  	compilable	  [FE]  AssertionFailedError  	21	4	replace
9	[BUG]  [BUGGY]  builder.append('$');  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  [BUGGY]  builder.append('$');  [BUGGY]  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');	builder.append(fieldValue);  	compilable	  [FE]  AssertionFailedError  	21	4	replace
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  [BUGGY]  builder.append(fieldValue.getClass());  [BUGGY]  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.getClass());	builder.append(fieldValue);  	compilable	  [FE]  AssertionFailedError  	21	4	replace
11	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  [BUGGY]  builder.append(fieldValue.getClass());  [BUGGY]  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());	builder.append(fieldValue);  	compilable	  [FE]  AssertionFailedError  	21	4	replace
12	[BUG]  [BUGGY]    if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.  [CE]  ')'  expected  [FE]    AssertionFailedError  [CONTEXT]  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  [BUGGY]    if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.  [BUGGY]  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	    if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.		non-compiled	[CE]  ')'  expected	22	None	add
13	[BUG]  [BUGGY]    if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  (useTransients  ||!Modifier.isTransient(field.getModifiers()))  [CE]  ')'  expected  [FE]      AssertionFailedError  [CONTEXT]  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  [BUGGY]    if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  (useTransients  ||!Modifier.isTransient(field.getModifiers()))  [BUGGY]  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	    if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  (useTransients  ||!Modifier.isTransient(field.getModifiers()))		non-compiled	[CE]  ')'  expected	22	None	add
14	[BUG]  [BUGGY]    if(fieldValue!=  null)  {  String[]  excludeFields  =  field.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }  [CE]  'catch'  without  'try'  [FE]        AssertionFailedError  [CONTEXT]  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  [BUGGY]    if(fieldValue!=  null)  {  String[]  excludeFields  =  field.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }  [BUGGY]  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	    if(fieldValue!=  null)  {  String[]  excludeFields  =  field.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }		non-compiled	[CE]  'catch'  without  'try'	22	None	add
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue);  [BUGGY]  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue  ==  null?  null  :  fieldValue);	builder.append(fieldValue);  	compilable	  [FE]  AssertionFailedError  	21	1	replace
16	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue);  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue);  [BUGGY]  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue  ==  null?  null  :  fieldValue);	builder.append(fieldValue);  	compilable	  [FE]  AssertionFailedError  	21	1	replace
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  [BUGGY]  builder.append(fieldValue!=  null?  null  :  fieldValue);  [BUGGY]  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue!=  null?  null  :  fieldValue);	builder.append(fieldValue);  	compilable	  [FE]  AssertionFailedError  	21	4	replace
18	[BUG]  [BUGGY]  builder.append(fieldValue!=  null?  null  :  fieldValue);  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  [BUGGY]  builder.append(fieldValue!=  null?  null  :  fieldValue);  [BUGGY]  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=  null?  null  :  fieldValue);	builder.append(fieldValue);  	compilable	  [FE]  AssertionFailedError  	21	4	replace
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  [BUGGY]  builder.append(fieldValue).append( ", ");  [BUGGY]  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append( ", ");	builder.append(fieldValue);  	compilable	  [FE]  AssertionFailedError  	21	4	replace
20	[BUG]  [BUGGY]  builder.append(fieldValue).append( ", ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  [BUGGY]  builder.append(fieldValue).append( ", ");  [BUGGY]  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append( ", ");	builder.append(fieldValue);  	compilable	  [FE]  AssertionFailedError  	21	4	replace
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  [BUGGY]  builder.append(fieldValue).append('n');  [BUGGY]  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('n');	builder.append(fieldValue);  	compilable	  [FE]  AssertionFailedError  	21	4	replace
22	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  [BUGGY]  builder.append(fieldValue).append('n');  [BUGGY]  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');	builder.append(fieldValue);  	compilable	  [FE]  AssertionFailedError  	21	4	replace
23	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  [BUGGY]  builder.append(fieldValue).append('_');  [BUGGY]  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('_');	builder.append(fieldValue);  	compilable	  [FE]  AssertionFailedError  	21	4	replace
24	[BUG]  [BUGGY]  builder.append(fieldValue).append('_');  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  [BUGGY]  builder.append(fieldValue).append('_');  [BUGGY]  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_');	builder.append(fieldValue);  	compilable	  [FE]  AssertionFailedError  	21	4	replace
25	[BUG]  [BUGGY]    if(fieldValue!=  null)  {  String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append( ", ");  }  [CE]  [FE]    AssertionFailedError  [CONTEXT]  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  [BUGGY]    if(fieldValue!=  null)  {  String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append( ", ");  }  [BUGGY]  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	    if(fieldValue!=  null)  {  String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append( ", ");  }		non-compiled	[CE]  	22	None	add
26	[BUG]  [BUGGY]    if(fieldValue!=  null)  {  String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('  [CE]  ')'  expected  [FE]      AssertionFailedError  [CONTEXT]  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  [BUGGY]    if(fieldValue!=  null)  {  String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('  [BUGGY]  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	    if(fieldValue!=  null)  {  String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('		non-compiled	[CE]  ')'  expected	22	None	add
27	[BUG]  [BUGGY]    if(fieldValue!=  null)  {  String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append( ", ");  }  [CE]  [FE]        AssertionFailedError  [CONTEXT]  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  [BUGGY]    if(fieldValue!=  null)  {  String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append( ", ");  }  [BUGGY]  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	    if(fieldValue!=  null)  {  String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append( ", ");  }		non-compiled	[CE]  	22	None	add
28	[BUG]  [BUGGY]    if(fieldValue!=  null)  {  String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('+');  }  [CE]  ')'  expected  [FE]          AssertionFailedError  [CONTEXT]  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  [BUGGY]    if(fieldValue!=  null)  {  String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('+');  }  [BUGGY]  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	    if(fieldValue!=  null)  {  String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('+');  }		non-compiled	[CE]  ')'  expected	22	None	add
29	[BUG]  [BUGGY]    if(fieldValue!=  null)  {  String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('  [CE]  ')'  expected  [FE]            AssertionFailedError  [CONTEXT]  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  [BUGGY]    if(fieldValue!=  null)  {  String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('  [BUGGY]  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	    if(fieldValue!=  null)  {  String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('		non-compiled	[CE]  ')'  expected	22	None	add
