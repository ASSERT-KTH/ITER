bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }	  builder.append(fieldValue).append('_');    	compilable	  [FE]  AssertionFailedError  	24	4	replace
2	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }	  builder.append(fieldValue).append('_');    	compilable	  [FE]  AssertionFailedError  	24	4	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(fieldValue).append('_');    	compilable	  [FE]  AssertionFailedError  	24	4	replace
4	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(fieldValue).append('_');    	compilable	  [FE]  AssertionFailedError  	24	4	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue).append( "_ ");  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append( "_ ");	  builder.append(fieldValue).append('_');    	compilable	  [FE]  AssertionFailedError  	24	4	replace
6	[BUG]  [BUGGY]  builder.append(fieldValue).append( "_ ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue).append( "_ ");  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append( "_ ");	  builder.append(fieldValue).append('_');    	compilable	  [FE]  AssertionFailedError  	24	4	replace
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }	  builder.append(fieldValue).append('n');    	compilable	  [FE]  AssertionFailedError  	22	4	replace
8	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }	  builder.append(fieldValue).append('n');    	compilable	  [FE]  AssertionFailedError  	22	4	replace
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(fieldValue).append('n');    	compilable	  [FE]  AssertionFailedError  	22	4	replace
10	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(fieldValue).append('n');    	compilable	  [FE]  AssertionFailedError  	22	4	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  field  value: "  +  fieldValue);  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  field  value: "  +  fieldValue);  }	  builder.append(fieldValue).append('n');    	compilable	  [FE]  AssertionFailedError  	22	4	replace
12	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  field  value: "  +  fieldValue);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  field  value: "  +  fieldValue);  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  field  value: "  +  fieldValue);  }	  builder.append(fieldValue).append('n');    	compilable	  [FE]  AssertionFailedError  	22	4	replace
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append('$');  }	  builder.append('$');    	compilable	  [FE]  AssertionFailedError  	9	4	replace
14	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  if(fieldValue!=  null)  {  builder.append('$');  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append('$');  }	  builder.append('$');    	compilable	  [FE]  AssertionFailedError  	9	4	replace
15	[BUG]  [BUGGY]  builder.append('$',  fieldValue);  [CE]  no  suitable  method  found  for  append(char,Object)  [FE]      AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append('$',  fieldValue);  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$',  fieldValue);	  builder.append('$');    	non-compiled	[CE]  no  suitable  method  found  for  append(char,Object)	9	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	17	4	add
17	[BUG]  [BUGGY]  builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	17	4	add
18	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	17	4	add
19	[BUG]  [BUGGY]  builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	17	4	add
20	[BUG]  [BUGGY]  builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  >>  null?  null  :  fieldValue);  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]        AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  >>  null?  null  :  fieldValue);  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue  >>  null?  null  :  fieldValue);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	17	None	add
21	[BUG]  [BUGGY]  builder.append(fieldValue!=  null?  null  :  fieldValue);  if(fieldValue!=  null?  null  :  fieldValue);  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue!=  null?  null  :  fieldValue);  if(fieldValue!=  null?  null  :  fieldValue);  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=    null?    null    :    fieldValue);    if(fieldValue!=  null?  null  :  fieldValue);	  	non-compiled	[CE]  incompatible  types	17	None	add
22	[BUG]  [BUGGY]  builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  >=  null?  null  :  fieldValue);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue!=  null?  null  :  fieldValue);  builder.append(fieldValue  >=  null?  null  :  fieldValue);  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=    null?    null    :    fieldValue);    builder.append(fieldValue  >=  null?  null  :  fieldValue);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	17	None	add
23	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');	  	compilable	  [FE]  AssertionFailedError  	21	4	add
24	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');	  	compilable	  [FE]  AssertionFailedError  	21	4	add
25	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }	  	compilable	  [FE]  AssertionFailedError  	21	4	add
26	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }	  	compilable	  [FE]  AssertionFailedError  	21	4	add
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	compilable	  [FE]  AssertionFailedError  	21	4	add
28	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	compilable	  [FE]  AssertionFailedError  	21	4	add
29	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	21	4	add
30	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	21	4	add
31	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalAccessException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	21	4	add
32	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalAccessException( " ");  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue).append('n');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('n');  }  else  {  throw  new  IllegalAccessException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	21	4	add
33	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue.getClass());  builder.append(fieldValue.getClass());  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.getClass());    builder.append(fieldValue.getClass());	  	compilable	  [FE]  AssertionFailedError  	10	4	add
34	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());  builder.append(fieldValue.getClass());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue.getClass());  builder.append(fieldValue.getClass());  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());    builder.append(fieldValue.getClass());	  	compilable	  [FE]  AssertionFailedError  	10	4	add
35	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue.getClass());  if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.getClass());    if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }	  	compilable	  [FE]  AssertionFailedError  	10	4	add
36	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());  if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue.getClass());  if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());    if(fieldValue.getClass()!=  null)  {  builder.append(fieldValue.getClass());  }	  	compilable	  [FE]  AssertionFailedError  	10	4	add
37	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }	  	compilable	  [FE]  AssertionFailedError  	10	4	add
38	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }	  	compilable	  [FE]  AssertionFailedError  	10	4	add
39	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue.getClass());  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.getClass());    if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }	  	compilable	  [FE]  AssertionFailedError  	10	4	add
40	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue.getClass());  if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());    if(fieldValue  ==  null)  {  builder.append(fieldValue.getClass());  }	  	compilable	  [FE]  AssertionFailedError  	10	4	add
41	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	compilable	  [FE]  AssertionFailedError  	10	4	add
42	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	compilable	  [FE]  AssertionFailedError  	10	4	add
43	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append( ",   ");  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  Field[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append( ",   ");  }  [BUGGY]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Field[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append( ",   ");  }	      if(fieldValue!=    null)    {    String[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iConstant++)    {    builder.append(   ",   ");    }    	non-compiled	[CE]  	25	None	replace
44	[BUG]  [BUGGY]  Integer[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append( ",   ");  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  Integer[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append( ",   ");  }  [BUGGY]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Integer[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append( ",   ");  }	      if(fieldValue!=    null)    {    String[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iConstant++)    {    builder.append(   ",   ");    }    	non-compiled	[CE]  	25	None	replace
45	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('  }  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  if(fieldValue!=  null)  {  String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('  }  [BUGGY]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('  }	      if(fieldValue!=    null)    {    String[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iConstant++)    {    builder.append('    	non-compiled	[CE]  ')'  expected	26	None	replace
46	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  Field[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('  [BUGGY]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Field[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('	      if(fieldValue!=    null)    {    String[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iConstant++)    {    builder.append('    	non-compiled	[CE]  ')'  expected	26	None	replace
47	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  if(fieldValue  ==  null)  {  String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('  }  [BUGGY]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null)  {  String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('  }	      if(fieldValue!=    null)    {    String[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iConstant++)    {    builder.append('    	non-compiled	[CE]  ')'  expected	26	None	replace
48	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  useTransients  ||!  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  useTransients  ||!  [BUGGY]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  useTransients  ||!	      if(fieldValue    ==    null)    {    if(!ArrayUtils.contains(excludeFields,    field.getName())&&    (field.getName().indexOf('$')    ==    -1)&&    useTransients    ||!Modifier.isTransient(field.getModifiers())    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
49	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  useTransients  ||!  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  if(fieldValue  ==  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  useTransients  ||!  [BUGGY]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  useTransients  ||!	      if(fieldValue    ==    null)    {    if(!ArrayUtils.contains(excludeFields,    field.getName())&&    (field.getName().indexOf('$')    ==    -1)&&    useTransients    ||!Modifier.isTransient(field.getModifiers())    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
50	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  useTransients  ||!Modifier.  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  if(fieldValue  ==  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  useTransients  ||!Modifier.  [BUGGY]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  useTransients  ||!Modifier.	      if(fieldValue!=    null)    {    if(!ArrayUtils.contains(excludeFields,    field.getName())&&    (field.getName().indexOf('$')    ==    -1)&&    useTransients    ||!Modifier.    	non-compiled	[CE]  <identifier>  expected	12	None	replace
51	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iTotal;  iTotal++)  {  builder.append( ",   ");  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  if(fieldValue!=  null)  {  String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iTotal;  iTotal++)  {  builder.append( ",   ");  }  [BUGGY]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iTotal;  iTotal++)  {  builder.append( ",   ");  }	      if(fieldValue!=    null)    {    String[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iTotal++)    {    builder.append(   ",   ");    }    	non-compiled	[CE]  	27	None	replace
52	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append(',');  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  if(fieldValue!=  null)  {  String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append(',');  }  [BUGGY]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append(',');  }	      if(fieldValue!=    null)    {    String[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iTotal++)    {    builder.append(   ",   ");    }    	non-compiled	[CE]  ')'  expected	27	None	replace
53	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append('$');  builder.append('$');  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('$');    builder.append('$');	  	compilable	  [FE]  AssertionFailedError  	8	4	add
54	[BUG]  [BUGGY]  builder.append('$');  builder.append('$');  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append('$');  builder.append('$');  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');    builder.append('$');	  	compilable	  [FE]  AssertionFailedError  	8	4	add
55	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('$');    if(fieldValue!=  null)  {  builder.append('$');  }	  	compilable	  [FE]  AssertionFailedError  	8	4	add
56	[BUG]  [BUGGY]  builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');    if(fieldValue!=  null)  {  builder.append('$');  }	  	compilable	  [FE]  AssertionFailedError  	8	4	add
57	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('$');    if(fieldValue  ==  null)  {  builder.append('$');  }	  	compilable	  [FE]  AssertionFailedError  	8	4	add
58	[BUG]  [BUGGY]  builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');    if(fieldValue  ==  null)  {  builder.append('$');  }	  	compilable	  [FE]  AssertionFailedError  	8	4	add
59	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('$');    if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	compilable	  [FE]  AssertionFailedError  	8	4	add
60	[BUG]  [BUGGY]  builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');    if(fieldValue!=  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	compilable	  [FE]  AssertionFailedError  	8	4	add
61	[BUG]  [BUGGY]  [FE]  InternalError  [FE]            AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('$');    if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	compilable	  [FE]  InternalError  	8	4	add
62	[BUG]  [BUGGY]  builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [FE]  InternalError  [FE]            AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append('$');  if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');    if(fieldValue  ==  null)  {  builder.append('$');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	compilable	  [FE]  InternalError  	8	4	add
63	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue).append('_');  builder.append(fieldValue).append('_');  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('_');    builder.append(fieldValue).append('_');	  	compilable	  [FE]  AssertionFailedError  	23	4	add
64	[BUG]  [BUGGY]  builder.append(fieldValue).append('_');  builder.append(fieldValue).append('_');  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue).append('_');  builder.append(fieldValue).append('_');  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_');    builder.append(fieldValue).append('_');	  	compilable	  [FE]  AssertionFailedError  	23	4	add
65	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }	  	compilable	  [FE]  AssertionFailedError  	23	4	add
66	[BUG]  [BUGGY]  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }	  	compilable	  [FE]  AssertionFailedError  	23	4	add
67	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }	  	compilable	  [FE]  AssertionFailedError  	23	4	add
68	[BUG]  [BUGGY]  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  builder.append(fieldValue).append('_');  }	  	compilable	  [FE]  AssertionFailedError  	23	4	add
69	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	compilable	  [FE]  AssertionFailedError  	23	4	add
70	[BUG]  [BUGGY]  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	compilable	  [FE]  AssertionFailedError  	23	4	add
71	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	23	4	add
72	[BUG]  [BUGGY]  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue).append('_');  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_');    if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	23	4	add
73	[BUG]  [BUGGY]  Field[]  excludeFields  =  field.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }  [CE]  variable  excludeFields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]            AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  Field[]  excludeFields  =  field.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }  [BUGGY]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Field[]  excludeFields  =  field.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }	      if(fieldValue!=    null)    {    String[]    excludeFields    =    field.getexcludeFields();    for(int    i    =    0;    i    <    excludeFields.length;    i++)    {    builder.append(excludeFields[i]);    }    	non-compiled	[CE]  variable  excludeFields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	14	None	replace
74	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  String[]  excludeFields  =  field.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }  [CE]  'catch'  without  'try'  [FE]              AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  if(fieldValue  ==  null)  {  String[]  excludeFields  =  field.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }  [BUGGY]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null)  {  String[]  excludeFields  =  field.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }	      if(fieldValue!=    null)    {    String[]    excludeFields    =    field.getexcludeFields();    for(int    i    =    0;    i    <    excludeFields.length;    i++)    {    builder.append(excludeFields[i]);    }    	non-compiled	[CE]  'catch'  without  'try'	14	None	replace
75	[BUG]  [BUGGY]  String[]  excludeFields  =  field.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }  [CE]  variable  excludeFields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  String[]  excludeFields  =  field.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }  [BUGGY]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	String[]  excludeFields  =  field.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }	      if(fieldValue!=    null)    {    String[]    excludeFields    =    field.getexcludeFields();    for(int    i    =    0;    i    <    excludeFields.length;    i++)    {    builder.append(excludeFields[i]);    }    	non-compiled	[CE]  variable  excludeFields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	14	None	replace
76	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue.toString());  builder.append(fieldValue.toString());  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.toString());    builder.append(fieldValue.toString());	  	compilable	  [FE]  AssertionFailedError  	6	4	add
77	[BUG]  [BUGGY]  builder.append(fieldValue.toString());  builder.append(fieldValue.toString());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue.toString());  builder.append(fieldValue.toString());  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());    builder.append(fieldValue.toString());	  	compilable	  [FE]  AssertionFailedError  	6	4	add
78	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }	  	compilable	  [FE]  AssertionFailedError  	6	4	add
79	[BUG]  [BUGGY]  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }	  	compilable	  [FE]  AssertionFailedError  	6	4	add
80	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue.toString());  if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.toString());    if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }	  	compilable	  [FE]  AssertionFailedError  	6	4	add
81	[BUG]  [BUGGY]  builder.append(fieldValue.toString());  if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue.toString());  if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());    if(fieldValue.toString()!=  null)  {  builder.append(fieldValue.toString());  }	  	compilable	  [FE]  AssertionFailedError  	6	4	add
82	[BUG]  [BUGGY]  builder.append(fieldValue.toString());  if(fieldValue.isArray())  {  builder.append(fieldValue.toString());  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue.toString());  if(fieldValue.isArray())  {  builder.append(fieldValue.toString());  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());    if(fieldValue.isArray())  {  builder.append(fieldValue.toString());  }	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
83	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	compilable	  [FE]  AssertionFailedError  	6	4	add
84	[BUG]  [BUGGY]  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	compilable	  [FE]  AssertionFailedError  	6	4	add
85	[BUG]  [BUGGY]  builder.append(fieldValue.toString(),  fieldValue.toString());  [CE]  no  suitable  method  found  for  append(String,String)  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue.toString(),  fieldValue.toString());  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString(),  fieldValue.toString());	  builder.append(fieldValue.toString());    	non-compiled	[CE]  no  suitable  method  found  for  append(String,String)	7	None	replace
86	[BUG]  [BUGGY]  builder.append(fieldValue.getName());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue.getName());  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getName());	  builder.append(fieldValue.toString());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
87	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue).append( ",n ");  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append( ",n ");	  builder.append(fieldValue).append(   ",   ");    	compilable	  [FE]  AssertionFailedError  	20	4	replace
88	[BUG]  [BUGGY]  builder.append(fieldValue).append( ",n ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue).append( ",n ");  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append( ",n ");	  builder.append(fieldValue).append(   ",   ");    	compilable	  [FE]  AssertionFailedError  	20	4	replace
89	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	15	4	add
90	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue  ==  null?  null  :  fieldValue);  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue  ==  null?  null  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	15	4	add
91	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	15	4	add
92	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue);  builder.append(fieldValue!=  null?  null  :  fieldValue);  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue    ==    null?    null    :    fieldValue);    builder.append(fieldValue!=  null?  null  :  fieldValue);	  	compilable	  [FE]  AssertionFailedError  	15	4	add
93	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue);  if(fieldValue  ==  null?  null  :  fieldValue);  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue);  if(fieldValue  ==  null?  null  :  fieldValue);  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue    ==    null?    null    :    fieldValue);    if(fieldValue  ==  null?  null  :  fieldValue);	  	non-compiled	[CE]  incompatible  types	15	None	add
94	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue);  Builder.append(fieldValue  ==  null?  null  :  fieldValue);  [CE]  cannot  find  symbol  Builder  [FE]          AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue);  Builder.append(fieldValue  ==  null?  null  :  fieldValue);  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue    ==    null?    null    :    fieldValue);    Builder.append(fieldValue  ==  null?  null  :  fieldValue);	  	non-compiled	[CE]  cannot  find  symbol  Builder	15	None	add
95	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())  &&(field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||!  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())  &&(field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||!  [BUGGY]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())  &&(field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||!	      if(fieldValue!=    null)    {    if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&    (useTransients    ||!Modifier.isTransient(field.getModifiers()))    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
96	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())  &&(field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||!Modifier.isTransient(field.getModifiers())  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())  &&(field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||!Modifier.isTransient(field.getModifiers())  [BUGGY]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())  &&(field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||!Modifier.isTransient(field.getModifiers())	      if(fieldValue!=    null)    {    if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&    (useTransients    ||!Modifier.isTransient(field.getModifiers()))    	non-compiled	[CE]  ')'  expected	13	None	replace
97	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())  &&(field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||!  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  if(fieldValue  ==  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())  &&(field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||!  [BUGGY]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())  &&(field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||!	      if(fieldValue!=    null)    {    if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&    (useTransients    ||!Modifier.isTransient(field.getModifiers()))    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
98	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('+');  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  Field[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('+');  }  [BUGGY]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Field[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('+');  }	      if(fieldValue!=    null)    {    String[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iConstant++)    {    builder.append('+');    }    	non-compiled	[CE]  ')'  expected	28	None	replace
99	[BUG]  [BUGGY]  String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('+');  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('+');  }  [BUGGY]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('+');  }	      if(fieldValue!=    null)    {    String[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iConstant++)    {    builder.append('+');    }    	non-compiled	[CE]  ')'  expected	28	None	replace
100	[BUG]  [BUGGY]  Integer[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('+');  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  Integer[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('+');  }  [BUGGY]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Integer[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('+');  }	      if(fieldValue!=    null)    {    String[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iConstant++)    {    builder.append('+');    }    	non-compiled	[CE]  ')'  expected	28	None	replace
101	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue).append(   ",   ");  builder.append(fieldValue).append(   ",   ");  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append(   ",   ");    builder.append(fieldValue).append(   ",   ");	  	compilable	  [FE]  AssertionFailedError  	19	4	add
102	[BUG]  [BUGGY]  builder.append(fieldValue).append(   ",   ");  builder.append(fieldValue).append(   ",   ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue).append(   ",   ");  builder.append(fieldValue).append(   ",   ");  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append(   ",   ");    builder.append(fieldValue).append(   ",   ");	  	compilable	  [FE]  AssertionFailedError  	19	4	add
103	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue).append(   ",   ");  builder.append(fieldValue).append( ".,   ");  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append(   ",   ");    builder.append(fieldValue).append( ".,   ");	  	compilable	  [FE]  AssertionFailedError  	19	4	add
104	[BUG]  [BUGGY]  builder.append(fieldValue).append(   ",   ");  builder.append(fieldValue).append( ".,   ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue).append(   ",   ");  builder.append(fieldValue).append( ".,   ");  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append(   ",   ");    builder.append(fieldValue).append( ".,   ");	  	compilable	  [FE]  AssertionFailedError  	19	4	add
105	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());	  builder.append(fieldValue.getClass());    	compilable	  [FE]  AssertionFailedError  	11	4	replace
106	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue  ==  null?  null  :  fieldValue.getClass());	  builder.append(fieldValue.getClass());    	compilable	  [FE]  AssertionFailedError  	11	4	replace
107	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue!=  null?  null  :  fieldValue.getClass());  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue!=  null?  null  :  fieldValue.getClass());	  builder.append(fieldValue.getClass());    	compilable	  [FE]  AssertionFailedError  	11	4	replace
108	[BUG]  [BUGGY]  builder.append(fieldValue!=  null?  null  :  fieldValue.getClass());  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue!=  null?  null  :  fieldValue.getClass());  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=  null?  null  :  fieldValue.getClass());	  builder.append(fieldValue.getClass());    	compilable	  [FE]  AssertionFailedError  	11	4	replace
109	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  if(fieldValue!=  null)  {  String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('  }  [BUGGY]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('  }	      if(fieldValue!=    null)    {    String[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iTotal++)    {    builder.append('    	non-compiled	[CE]  ')'  expected	29	None	replace
110	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  if(fieldValue  ==  null)  {  String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('  }  [BUGGY]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null)  {  String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('  }	      if(fieldValue!=    null)    {    String[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iTotal++)    {    builder.append('    	non-compiled	[CE]  ')'  expected	29	None	replace
111	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  Field[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('  [BUGGY]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Field[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('	      if(fieldValue!=    null)    {    String[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iTotal++)    {    builder.append('    	non-compiled	[CE]  ')'  expected	29	None	replace
112	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('  }  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  Field[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('  }  [BUGGY]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Field[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('  }	      if(fieldValue!=    null)    {    String[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iTotal++)    {    builder.append('    	non-compiled	[CE]  ')'  expected	29	None	replace
113	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');  Builder.append(fieldValue).append('n');  [CE]  cannot  find  symbol  Builder  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue).append('n');  Builder.append(fieldValue).append('n');  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');    Builder.append(fieldValue).append('n');	  	non-compiled	[CE]  cannot  find  symbol  Builder	21	None	add
114	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('r');  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('n');    builder.append(fieldValue).append('r');	  	compilable	  [FE]  AssertionFailedError  	21	4	add
115	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('r');  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('r');  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');    builder.append(fieldValue).append('r');	  	compilable	  [FE]  AssertionFailedError  	21	4	add
116	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('+');  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  if(fieldValue  ==  null)  {  String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('+');  }  [BUGGY]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null)  {  String[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('+');  }	      if(fieldValue!=    null)    {    String[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iConstant++)    {    builder.append('+');    }    	non-compiled	[CE]  ')'  expected	28	None	replace
117	[BUG]  [BUGGY]  Integer[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('+');  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  Integer[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('+');  }  [BUGGY]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Integer[]  fields  =  fieldValue.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iConstant++)  {  builder.append('+');  }	      if(fieldValue!=    null)    {    String[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iConstant++)    {    builder.append('+');    }    	non-compiled	[CE]  ')'  expected	28	None	replace
118	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  (useTransients  ||!Modifier.  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  (useTransients  ||!Modifier.  [BUGGY]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  (useTransients  ||!Modifier.	      if(fieldValue!=    null)    {    if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&    (useTransients    ||!Modifier.isTransient(field.getModifiers()))    	non-compiled	[CE]  <identifier>  expected	13	None	replace
119	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  (useTransients  ||!Modifier.  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  if(fieldValue  ==  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  (useTransients  ||!Modifier.  [BUGGY]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue  ==  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  (useTransients  ||!Modifier.	      if(fieldValue!=    null)    {    if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&    (useTransients    ||!Modifier.isTransient(field.getModifiers()))    	non-compiled	[CE]  <identifier>  expected	13	None	replace
120	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue.toString());  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue  ==  null?  null  :  fieldValue.toString());	  builder.append(fieldValue.toString());    	compilable	  [FE]  AssertionFailedError  	7	4	replace
121	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue.toString());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue  ==  null?  null  :  fieldValue.toString());  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue  ==  null?  null  :  fieldValue.toString());	  builder.append(fieldValue.toString());    	compilable	  [FE]  AssertionFailedError  	7	4	replace
122	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue!=  null?  null  :  fieldValue.toString());  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue!=  null?  null  :  fieldValue.toString());	  builder.append(fieldValue.toString());    	compilable	  [FE]  AssertionFailedError  	7	4	replace
123	[BUG]  [BUGGY]  builder.append(fieldValue!=  null?  null  :  fieldValue.toString());  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue!=  null?  null  :  fieldValue.toString());  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=  null?  null  :  fieldValue.toString());	  builder.append(fieldValue.toString());    	compilable	  [FE]  AssertionFailedError  	7	4	replace
124	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue  ==  null? "null "  :  fieldValue.toString());  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue  ==  null? "null "  :  fieldValue.toString());	  builder.append(fieldValue.toString());    	compilable	  [FE]  AssertionFailedError  	7	4	replace
125	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null? "null "  :  fieldValue.toString());  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue  ==  null? "null "  :  fieldValue.toString());  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue  ==  null? "null "  :  fieldValue.toString());	  builder.append(fieldValue.toString());    	compilable	  [FE]  AssertionFailedError  	7	4	replace
126	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue!=  null? "null "  :  fieldValue.toString());  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue!=  null? "null "  :  fieldValue.toString());	  builder.append(fieldValue.toString());    	compilable	  [FE]  AssertionFailedError  	7	4	replace
127	[BUG]  [BUGGY]  builder.append(fieldValue!=  null? "null "  :  fieldValue.toString());  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue!=  null? "null "  :  fieldValue.toString());  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=  null? "null "  :  fieldValue.toString());	  builder.append(fieldValue.toString());    	compilable	  [FE]  AssertionFailedError  	7	4	replace
128	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.toString());  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.toString());  }	  	compilable	  [FE]  AssertionFailedError  	6	4	add
129	[BUG]  [BUGGY]  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.toString());  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.toString());  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(fieldValue.toString());  }	  	compilable	  [FE]  AssertionFailedError  	6	4	add
130	[BUG]  [BUGGY]  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(excludeFields[0].getName());  }  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(excludeFields[0].getName());  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  builder.append(excludeFields[0].getName());  }	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
131	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue  ==  null? "null "  :  fieldValue.getClass());  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue  ==  null? "null "  :  fieldValue.getClass());	  builder.append(fieldValue.getClass());    	compilable	  [FE]  AssertionFailedError  	11	4	replace
132	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null? "null "  :  fieldValue.getClass());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue  ==  null? "null "  :  fieldValue.getClass());  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue  ==  null? "null "  :  fieldValue.getClass());	  builder.append(fieldValue.getClass());    	compilable	  [FE]  AssertionFailedError  	11	4	replace
133	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue!=  null? "null "  :  fieldValue.getClass());  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue!=  null? "null "  :  fieldValue.getClass());	  builder.append(fieldValue.getClass());    	compilable	  [FE]  AssertionFailedError  	11	4	replace
134	[BUG]  [BUGGY]  builder.append(fieldValue!=  null? "null "  :  fieldValue.getClass());  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue!=  null? "null "  :  fieldValue.getClass());  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=  null? "null "  :  fieldValue.getClass());	  builder.append(fieldValue.getClass());    	compilable	  [FE]  AssertionFailedError  	11	4	replace
135	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append( ",   ");  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  Field[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append( ",   ");  }  [BUGGY]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	Field[]  fields  =  field.getFields();  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append( ",   ");  }	      if(fieldValue!=    null)    {    String[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iTotal++)    {    builder.append(   ",   ");    }    	non-compiled	[CE]  	27	None	replace
136	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(excludeFields[0].getName());  }  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(excludeFields[0].getName());  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(excludeFields[0].getName());  }	  	non-compiled	[CE]  cannot  find  symbol	10	None	add
137	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(excludeFields[0]);  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(excludeFields[0]);  }	  	compilable	  [FE]  AssertionFailedError  	10	4	add
138	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(excludeFields[0]);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(excludeFields[0]);  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  builder.append(excludeFields[0]);  }	  	compilable	  [FE]  AssertionFailedError  	10	4	add
139	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue).append('$');  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('$');	  builder.append(fieldValue).append('n');    	compilable	  [FE]  AssertionFailedError  	22	4	replace
140	[BUG]  [BUGGY]  builder.append(fieldValue).append('$');  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue).append('$');  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('$');	  builder.append(fieldValue).append('n');    	compilable	  [FE]  AssertionFailedError  	22	4	replace
141	[BUG]  [BUGGY]  builder.append(fieldValue).append('n')+  1;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue).append('n')+  1;  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n')+  1;	  builder.append(fieldValue).append('n');    	non-compiled	[CE]  not  a  statement	22	None	replace
142	[BUG]  [BUGGY]  builder.append('$');  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  fieldValue.getName())&&  (fieldValue.getName().indexOf('$')  ==  -1)&&  useTransients  ||!  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append('$');  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  fieldValue.getName())&&  (fieldValue.getName().indexOf('$')  ==  -1)&&  useTransients  ||!  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');    if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  fieldValue.getName())&&  (fieldValue.getName().indexOf('$')  ==  -1)&&  useTransients  ||!	  	non-compiled	[CE]  ')'  expected	8	None	add
143	[BUG]  [BUGGY]  builder.append('$');  if(fieldValue  instanceof  String)  {  String[]  excludeFields  =(String[])fieldValue;  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }  [CE]  'catch'  without  'try'  [FE]      AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append('$');  if(fieldValue  instanceof  String)  {  String[]  excludeFields  =(String[])fieldValue;  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');    if(fieldValue  instanceof  String)  {  String[]  excludeFields  =(String[])fieldValue;  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }	  	non-compiled	[CE]  'catch'  without  'try'	8	None	add
144	[BUG]  [BUGGY]  builder.append('$');  if(fieldValue  instanceof  String)  {  String[]  excludeFields  =(String[])fieldValue;  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append('$');  if(fieldValue  instanceof  String)  {  String[]  excludeFields  =(String[])fieldValue;  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');    if(fieldValue  instanceof  String)  {  String[]  excludeFields  =(String[])fieldValue;  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]	  	non-compiled	[CE]  ')'  expected	8	None	add
145	[BUG]  [BUGGY]  builder.append('$');  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  fieldValue.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append('$');  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  fieldValue.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');    if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  fieldValue.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!	  	non-compiled	[CE]  ')'  expected	8	None	add
146	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append('$').append(fieldValue);  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append('$').append(fieldValue);	  builder.append('$');    	compilable	  [FE]  AssertionFailedError  	9	4	replace
147	[BUG]  [BUGGY]  builder.append('$').append(fieldValue);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append('$').append(fieldValue);  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$').append(fieldValue);	  builder.append('$');    	compilable	  [FE]  AssertionFailedError  	9	4	replace
148	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isStatic(field  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isStatic(field  [BUGGY]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isStatic(field	      if(fieldValue!=    null)    {    if(!ArrayUtils.contains(excludeFields,    field.getName())&&    (field.getName().indexOf('$')    ==    -1)&&    useTransients    ||!Modifier.isTransient(field.getModifiers()))    	non-compiled	[CE]  ')'  expected	1	None	replace
149	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue).append('_').append('_');  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('_').append('_');	  builder.append(fieldValue).append('_');    	compilable	  [FE]  AssertionFailedError  	24	4	replace
150	[BUG]  [BUGGY]  builder.append(fieldValue).append('_').append('_');  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue).append('_').append('_');  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_').append('_');	  builder.append(fieldValue).append('_');    	compilable	  [FE]  AssertionFailedError  	24	4	replace
151	[BUG]  [BUGGY]  builder.append(fieldValue).append('_').append(iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]      AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue).append('_').append(iConstant);  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_').append(iConstant);	  builder.append(fieldValue).append('_');    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	24	None	replace
152	[BUG]  [BUGGY]  builder.append(fieldValue).append('_')+  1;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue).append('_')+  1;  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_')+  1;	  builder.append(fieldValue).append('_');    	non-compiled	[CE]  not  a  statement	24	None	replace
153	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isStatic(field.getModifiers())  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isStatic(field.getModifiers())  [BUGGY]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isStatic(field.getModifiers())	      if(fieldValue    ==    null)    {    if(!ArrayUtils.contains(excludeFields,    field.getName())&&    (field.getName().indexOf('$')    ==    -1)&&    useTransients    ||!Modifier.isTransient(field.getModifiers()))    	non-compiled	[CE]  ')'  expected	2	None	replace
154	[BUG]  [BUGGY]  builder.append(fieldValue).append('_');  Builder.append(fieldValue).append('_');  [CE]  cannot  find  symbol  Builder  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue).append('_');  Builder.append(fieldValue).append('_');  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_');    Builder.append(fieldValue).append('_');	  	non-compiled	[CE]  cannot  find  symbol  Builder	23	None	add
155	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue).append('_');  builder.append(fieldValue).append( "._ ");  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('_');    builder.append(fieldValue).append( "._ ");	  	compilable	  [FE]  AssertionFailedError  	23	4	add
156	[BUG]  [BUGGY]  builder.append(fieldValue).append('_');  builder.append(fieldValue).append( "._ ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue).append('_');  builder.append(fieldValue).append( "._ ");  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('_');    builder.append(fieldValue).append( "._ ");	  	compilable	  [FE]  AssertionFailedError  	23	4	add
157	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  Field[]  excludeFields  =  field.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }  [CE]  'catch'  without  'try'  [FE]            AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  if(fieldValue!=  null)  {  Field[]  excludeFields  =  field.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }  [BUGGY]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  Field[]  excludeFields  =  field.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]);  }	      if(fieldValue!=    null)    {    String[]    excludeFields    =    field.getexcludeFields();    for(int    i    =    0;    i    <    excludeFields.length;    i++)    {    builder.append(excludeFields[i]);    }    	non-compiled	[CE]  'catch'  without  'try'	14	None	replace
158	[BUG]  [BUGGY]  builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  }  else  {  Class  <?>  clazz  =  fieldValue.getComponentType();  builder.append(clazz.getName());  }  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append('$');  if(fieldValue!=  null)  {  builder.append('$');  }  else  {  Class  <?>  clazz  =  fieldValue.getComponentType();  builder.append(clazz.getName());  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');    if(fieldValue!=  null)  {  builder.append('$');  }  else  {  Class  <?>  clazz  =  fieldValue.getComponentType();  builder.append(clazz.getName());  }	  	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	8	None	add
159	[BUG]  [BUGGY]  builder.append('$');  builder.append( ".s.IFJDCS ".charAt(fieldValue.length()  -  1))  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [CE]  [FE]      AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append('$');  builder.append( ".s.IFJDCS ".charAt(fieldValue.length()  -  1))  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append('$');    builder.append( ".s.IFJDCS ".charAt(fieldValue.length()  -  1))  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  	non-compiled	[CE]  	8	None	add
160	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException. ");  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException. ");  }	  	compilable	  [FE]  AssertionFailedError  	10	4	add
161	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException. ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException. ");  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException. ");  }	  	compilable	  [FE]  AssertionFailedError  	10	4	add
162	[BUG]  [BUGGY]  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  Class  <?>[]  fields  =  fieldValue.getFields();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  [CE]  'catch'  without  'try'  [FE]      AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue.getClass());  if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  Class  <?>[]  fields  =  fieldValue.getFields();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.getClass());    if(fieldValue!=  null)  {  builder.append(fieldValue.getClass());  }  else  {  Class  <?>[]  fields  =  fieldValue.getFields();  for(int  i  =  0;  i  <  fields.length;  ++i)  {	  	non-compiled	[CE]  'catch'  without  'try'	10	None	add
163	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue  ==  null? " "  :  fieldValue);  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue  ==  null? " "  :  fieldValue);	  builder.append(fieldValue    ==    null?    null    :    fieldValue);    	compilable	  [FE]  AssertionFailedError  	16	1	replace
164	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null? " "  :  fieldValue);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue  ==  null? " "  :  fieldValue);  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue  ==  null? " "  :  fieldValue);	  builder.append(fieldValue    ==    null?    null    :    fieldValue);    	compilable	  [FE]  AssertionFailedError  	16	1	replace
165	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  (useTransients  ||!  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  (useTransients  ||!  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  (useTransients  ||!	  	non-compiled	[CE]  ')'  expected	21	None	add
166	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!	  	non-compiled	[CE]  ')'  expected	21	None	add
167	[BUG]  [BUGGY]  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue).append('n');  builder.append(fieldValue).append('n');  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('n');    builder.append(fieldValue).append('n');  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||	  	non-compiled	[CE]  ')'  expected	21	None	add
168	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  String[]  excludeFields  =  field.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  if(fieldValue!=  null)  {  String[]  excludeFields  =  field.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]  [BUGGY]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  String[]  excludeFields  =  field.getexcludeFields();  for(int  i  =  0;  i  <  excludeFields.length;  i++)  {  builder.append(excludeFields[i]	      if(fieldValue!=    null)    {    String[]    excludeFields    =    field.getexcludeFields();    for(int    i    =    0;    i    <    excludeFields.length;    i++)    {    builder.append(excludeFields[i]);    }    	non-compiled	[CE]  ')'  expected	14	None	replace
169	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException. ");  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException. ");  }	  	compilable	  [FE]  AssertionFailedError  	6	4	add
170	[BUG]  [BUGGY]  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException. ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException. ");  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException. ");  }	  	compilable	  [FE]  AssertionFailedError  	6	4	add
171	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	6	4	add
172	[BUG]  [BUGGY]  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue.toString());  if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue.toString());    if(fieldValue!=  null)  {  builder.append(fieldValue.toString());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	6	4	add
173	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue).append(   ",   ");  builder.append(fieldValue).append(',');  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append(   ",   ");    builder.append(fieldValue).append(',');	  	compilable	  [FE]  AssertionFailedError  	19	4	add
174	[BUG]  [BUGGY]  builder.append(fieldValue).append(   ",   ");  builder.append(fieldValue).append(',');  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue).append(   ",   ");  builder.append(fieldValue).append(',');  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append(   ",   ");    builder.append(fieldValue).append(',');	  	compilable	  [FE]  AssertionFailedError  	19	4	add
175	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue).append('/');  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue).append('/');	  builder.append(fieldValue).append('n');    	compilable	  [FE]  AssertionFailedError  	22	4	replace
176	[BUG]  [BUGGY]  builder.append(fieldValue).append('/');  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue).append('/');  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue).append('/');	  builder.append(fieldValue).append('n');    	compilable	  [FE]  AssertionFailedError  	22	4	replace
177	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue!=  null?  fieldValue.toString()  : "null ");  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue!=  null?  fieldValue.toString()  : "null ");	  builder.append(fieldValue.getClass());    	compilable	  [FE]  AssertionFailedError  	11	4	replace
178	[BUG]  [BUGGY]  builder.append(fieldValue!=  null?  fieldValue.toString()  : "null ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue!=  null?  fieldValue.toString()  : "null ");  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue!=  null?  fieldValue.toString()  : "null ");	  builder.append(fieldValue.getClass());    	compilable	  [FE]  AssertionFailedError  	11	4	replace
179	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())  &&(field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||!Modifier.isStatic(field.getModifiers())  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())  &&(field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||!Modifier.isStatic(field.getModifiers())  [BUGGY]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())  &&(field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||!Modifier.isStatic(field.getModifiers())	      if(fieldValue!=    null)    {    if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&    (useTransients    ||!Modifier.isTransient(field.getModifiers()))    	non-compiled	[CE]  ')'  expected	13	None	replace
180	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue  ==  null? "null "  :  fieldValue);  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	builder.append(fieldValue  ==  null? "null "  :  fieldValue);	  builder.append(fieldValue!=    null?    null    :    fieldValue);    	compilable	  [FE]  AssertionFailedError  	18	1	replace
181	[BUG]  [BUGGY]  builder.append(fieldValue  ==  null? "null "  :  fieldValue);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  builder.append(fieldValue  ==  null? "null "  :  fieldValue);  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	builder.append(fieldValue  ==  null? "null "  :  fieldValue);	  builder.append(fieldValue!=    null?    null    :    fieldValue);    	compilable	  [FE]  AssertionFailedError  	18	1	replace
182	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	add	if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  builder.append(fieldValue).append('_');    	compilable	  [FE]  AssertionFailedError  	24	4	replace
183	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]    }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue).append('_');  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  builder.append(fieldValue).append('_');    	compilable	  [FE]  AssertionFailedError  	24	4	replace
184	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);    [BUGGY]  if(fieldValue!=  null)  {  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('  }  [BUGGY]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	187	187	1	replace	if(fieldValue!=  null)  {  for(int  iConstant  =  0;  iConstant  <  fields.length;  ++iConstant;  iTotal++)  {  builder.append('  }	      if(fieldValue!=    null)    {    String[]    fields    =    field.getFields();    for(int    iConstant    =    0;    iConstant    <    fields.length;    ++iConstant;    iTotal++)    {    builder.append('    	non-compiled	[CE]  ')'  expected	29	None	replace
