bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  true);  [CE]  'try'  without  'catch'  or  'finally'  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);    [BUGGY]  AccessibleObject.setAccessible(fields,  true);  [BUGGY]    for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	180	180	1	replace	AccessibleObject.setAccessible(fields,  true);	      String[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(fields,    true);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	3	None	replace
2	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true);  [CE]  'try'  without  'catch'  or  'finally'  [FE]              AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);    [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true);  [BUGGY]    for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	180	180	1	replace	AccessibleObject.setAccessible(excludeFields,  true);	      String[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(fields,    true);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	3	None	replace
3	[BUG]  [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  false);  [CE]  'try'  without  'catch'  or  'finally'  [FE]              AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);    [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  false);  [BUGGY]    for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	180	180	1	replace	Object[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  false);	      Object[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(fields,    true);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	4	None	replace
4	[BUG]  [BUGGY]  for(Field  field  :  excludeFields.toArray(new  String[fields.size()  ]))  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);    [BUGGY]  for(Field  field  :  excludeFields.toArray(new  String[fields.size()  ]))  {  [BUGGY]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	180	180	1	replace	for(Field  field  :  excludeFields.toArray(new  String[fields.size()  ]))  {	  for(Field    field    :    fields.toArray(new    String[fields.size()    ]))    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
5	[BUG]  [BUGGY]  For(Field  field  :  fields.toArray(new  String[fields.size()  ]))  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);    [BUGGY]  For(Field  field  :  fields.toArray(new  String[fields.size()  ]))  {  [BUGGY]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	180	180	1	replace	For(Field  field  :  fields.toArray(new  String[fields.size()  ]))  {	  for(Field    field    :    fields.toArray(new    String[fields.size()    ]))    {    	non-compiled	[CE]  ')'  expected	12	None	replace
6	[BUG]  [BUGGY]  for(Field  field  :  excludeFields.length,  fields.length)  {  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);    [BUGGY]  for(Field  field  :  excludeFields.length,  fields.length)  {  [BUGGY]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	180	180	1	replace	for(Field  field  :  excludeFields.length,  fields.length)  {	  for(Field    field    :    excludeFields.length)    {    	non-compiled	[CE]  ')'  expected	10	None	replace
7	[BUG]  [BUGGY]  for(Field  field  :  excludeFields,  fields.length)  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);    [BUGGY]  for(Field  field  :  excludeFields,  fields.length)  {  [BUGGY]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	180	180	1	replace	for(Field  field  :  excludeFields,  fields.length)  {	  for(Field    field    :    excludeFields.length)    {    	non-compiled	[CE]  ')'  expected	10	None	replace
8	[BUG]  [BUGGY]  for(Field  field  :  excludeFields.keySet())  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);    [BUGGY]  for(Field  field  :  excludeFields.keySet())  {  [BUGGY]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	180	180	1	replace	for(Field  field  :  excludeFields.keySet())  {	  for(Field    field    :    excludeFields)    {    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
9	[BUG]  [BUGGY]  for(Field  field  :  excludeFields.clone())  {  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);    [BUGGY]  for(Field  field  :  excludeFields.clone())  {  [BUGGY]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	180	180	1	replace	for(Field  field  :  excludeFields.clone())  {	  for(Field    field    :    excludeFields)    {    	non-compiled	[CE]  incompatible  types	5	None	replace
10	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  false);  [CE]  'try'  without  'catch'  or  'finally'  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);    [BUGGY]  AccessibleObject.setAccessible(fields,  false);  [BUGGY]    for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	180	180	1	replace	AccessibleObject.setAccessible(fields,  false);	      Field[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(fields,    false);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	2	None	replace
11	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  false);  [CE]  'try'  without  'catch'  or  'finally'  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  false);  [BUGGY]    for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	180	180	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  false);	      Field[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(fields,    false);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	2	None	replace
12	[BUG]  [BUGGY]  for(Field  field  :  excludeFields,  fields.toArray(new  Field[fields.size()  ]))  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);    [BUGGY]  for(Field  field  :  excludeFields,  fields.toArray(new  Field[fields.size()  ]))  {  [BUGGY]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	180	180	1	replace	for(Field  field  :  excludeFields,  fields.toArray(new  Field[fields.size()  ]))  {	  for(Field    field    :    excludeFields.toArray(new    Field[fields.size()    ]))    {    	non-compiled	[CE]  ')'  expected	13	None	replace
13	[BUG]  [BUGGY]  for(Field  field  :  excludedFields.toArray(new  Field[fields.size()  ]))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);    [BUGGY]  for(Field  field  :  excludedFields.toArray(new  Field[fields.size()  ]))  {  [BUGGY]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	180	180	1	replace	for(Field  field  :  excludedFields.toArray(new  Field[fields.size()  ]))  {	  for(Field    field    :    excludeFields.toArray(new    Field[fields.size()    ]))    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
14	[BUG]  [BUGGY]  for(Field  field  :  fields.length,  useTransients)  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);    [BUGGY]  for(Field  field  :  fields.length,  useTransients)  {  [BUGGY]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	180	180	1	replace	for(Field  field  :  fields.length,  useTransients)  {	  for(Field    field    :    fields.length)    {    	non-compiled	[CE]  ')'  expected	6	None	replace
15	[BUG]  [BUGGY]  For(Field  field  :  fields.toArray(new  Field[fields.size()  ]))  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);    [BUGGY]  For(Field  field  :  fields.toArray(new  Field[fields.size()  ]))  {  [BUGGY]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	180	180	1	replace	For(Field  field  :  fields.toArray(new  Field[fields.size()  ]))  {	  for(Field    field    :    fields.toArray(new    Field[fields.size()    ]))    {    	non-compiled	[CE]  ')'  expected	7	None	replace
16	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclassFields();  [CE]  'try'  without  'catch'  or  'finally'  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);    [BUGGY]  Field[]  fields  =  clazz.getSuperclassFields();  [BUGGY]    for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	180	180	1	replace	Field[]  fields  =  clazz.getSuperclassFields();	      Field[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	9	None	replace
17	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getAccessibleFields();  [CE]  'try'  without  'catch'  or  'finally'  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);    [BUGGY]  Field[]  fields  =  clazz.getAccessibleFields();  [BUGGY]    for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	180	180	1	replace	Field[]  fields  =  clazz.getAccessibleFields();	      Field[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	9	None	replace
18	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclasses();  [CE]  'try'  without  'catch'  or  'finally'  [FE]              AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);    [BUGGY]  Field[]  fields  =  clazz.getSuperclasses();  [BUGGY]    for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	180	180	1	replace	Field[]  fields  =  clazz.getSuperclasses();	      Field[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	9	None	replace
19	[BUG]  [BUGGY]  accessibleObject.setAccessible(fields,  true);  [CE]  'try'  without  'catch'  or  'finally'  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);    [BUGGY]  accessibleObject.setAccessible(fields,  true);  [BUGGY]    for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	180	180	1	replace	accessibleObject.setAccessible(fields,  true);	      Field[]    fields    =    clazz.getDeclaredFields();    accessibleObject.setAccessible(fields,    true);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	8	None	replace
20	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  accessibleObject.setAccessible(fields,  false);  [CE]  'try'  without  'catch'  or  'finally'  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  accessibleObject.setAccessible(fields,  false);  [BUGGY]    for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	180	180	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  accessibleObject.setAccessible(fields,  false);	      Field[]    fields    =    clazz.getDeclaredFields();    accessibleObject.setAccessible(fields,    true);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	8	None	replace
21	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  accessibleObject.setAccessible(excludeFields,  false);  [CE]  'try'  without  'catch'  or  'finally'  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  accessibleObject.setAccessible(excludeFields,  false);  [BUGGY]    for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	180	180	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  accessibleObject.setAccessible(excludeFields,  false);	      Field[]    fields    =    clazz.getDeclaredFields();    accessibleObject.setAccessible(fields,    true);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	8	None	replace
22	[BUG]  [BUGGY]  for(Field  field  :  excludeFields.toArray(new  Field[fields.length]))  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);    [BUGGY]  for(Field  field  :  excludeFields.toArray(new  Field[fields.length]))  {  [BUGGY]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	180	180	1	replace	for(Field  field  :  excludeFields.toArray(new  Field[fields.length]))  {	  for(Field    field    :    excludeFields.length)    {    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
23	[BUG]  [BUGGY]  For(Field  field  :  excludeFields.toArray(new  Field[fields.size()  ]))  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);    [BUGGY]  For(Field  field  :  excludeFields.toArray(new  Field[fields.size()  ]))  {  [BUGGY]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	180	180	1	replace	For(Field  field  :  excludeFields.toArray(new  Field[fields.size()  ]))  {	  for(Field    field    :    fields.toArray(new    Field[fields.size()    ]))    {    	non-compiled	[CE]  ')'  expected	7	None	replace
24	[BUG]  [BUGGY]  for(Field  field  :  excludedFields.length)  {  [CE]  cannot  find  symbol  excludedFields  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);    [BUGGY]  for(Field  field  :  excludedFields.length)  {  [BUGGY]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	180	180	1	replace	for(Field  field  :  excludedFields.length)  {	  for(Field    field    :    fields.length)    {    	non-compiled	[CE]  cannot  find  symbol  excludedFields	6	None	replace
25	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  false);  [CE]  'try'  without  'catch'  or  'finally'  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);    [BUGGY]  AccessibleObject.setAccessible(excludeFields,  false);  [BUGGY]    for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	180	180	1	replace	AccessibleObject.setAccessible(excludeFields,  false);	      Field[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(fields,    false);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	2	None	replace
26	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  true);  [CE]  'try'  without  'catch'  or  'finally'  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  true);  [BUGGY]    for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	180	180	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  true);	      Field[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(fields,    true);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	1	None	replace
27	[BUG]  [BUGGY]  for(Field  field  :  excludedFields.toArray(new  String[fields.size()  ]))  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);    [BUGGY]  for(Field  field  :  excludedFields.toArray(new  String[fields.size()  ]))  {  [BUGGY]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	180	180	1	replace	for(Field  field  :  excludedFields.toArray(new  String[fields.size()  ]))  {	  for(Field    field    :    fields.toArray(new    String[fields.size()    ]))    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
28	[BUG]  [BUGGY]  For(Field  field  :  excludeFields.toArray(new  String[fields.size()  ]))  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);    [BUGGY]  For(Field  field  :  excludeFields.toArray(new  String[fields.size()  ]))  {  [BUGGY]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	180	180	1	replace	For(Field  field  :  excludeFields.toArray(new  String[fields.size()  ]))  {	  for(Field    field    :    fields.toArray(new    String[fields.size()    ]))    {    	non-compiled	[CE]  ')'  expected	12	None	replace
29	[BUG]  [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  true);  [CE]  'try'  without  'catch'  or  'finally'  [FE]              AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);    [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  true);  [BUGGY]    for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	180	180	1	replace	Object[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  true);	      Object[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(fields,    true);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	4	None	replace
30	[BUG]  [BUGGY]  for(Field  field  :  excludeFields,  builder.toArray(new  Field[fields.size()  ]))  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);    [BUGGY]  for(Field  field  :  excludeFields,  builder.toArray(new  Field[fields.size()  ]))  {  [BUGGY]    if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	180	180	1	replace	for(Field  field  :  excludeFields,  builder.toArray(new  Field[fields.size()  ]))  {	  for(Field    field    :    excludeFields.toArray(new    Field[fields.size()    ]))    {    	non-compiled	[CE]  ')'  expected	13	None	replace
31	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields);  [CE]  'try'  without  'catch'  or  'finally'  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields);  [BUGGY]    for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	180	180	1	replace	Field[]  fields  =  clazz.getDeclaredFields(excludeFields);	      Field[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	9	None	replace
