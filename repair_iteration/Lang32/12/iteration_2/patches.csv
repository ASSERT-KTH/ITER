bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  throw  new  InternalError( "Unexpected  IllegalAccessException ",  e,  fieldValue);  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  throw  new  InternalError( "Unexpected  IllegalAccessException ",  e,  fieldValue);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  InternalError( "Unexpected  IllegalAccessException ",  e,  fieldValue);	  throw    new    InternalError(   "Unexpected    IllegalAccessException   ",    e);    	non-compiled	[CE]  'finally'  without  'try'	4	None	replace
2	[BUG]  [BUGGY]  ||  fieldValue!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  ||  fieldValue!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	||  fieldValue!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  ||    fieldValue    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
3	[BUG]  [BUGGY]  ||  fieldValue  >=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  ||  fieldValue  >=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	||  fieldValue  >=  null)  {  throw  new  IllegalArgumentException( " ");  }	  ||    fieldValue    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
4	[BUG]  [BUGGY]  ||  object  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  ||  object  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	||  object  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  ||    fieldValue    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
5	[BUG]  [BUGGY]  Builder.append(excludeFields,  fieldValue);  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  Builder.append(excludeFields,  fieldValue);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Builder.append(excludeFields,  fieldValue);	  Field[]    fields    =    clazz.getFields();    builder.append(excludeFields,    fieldValue);    	non-compiled	[CE]  'finally'  without  'try'	58	None	replace
6	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclasses();  builder.append(excludeFields,  fieldValue);  [CE]  'finally'  without  'try'  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  Field[]  fields  =  clazz.getSuperclasses();  builder.append(excludeFields,  fieldValue);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Field[]  fields  =  clazz.getSuperclasses();  builder.append(excludeFields,  fieldValue);	  Field[]    fields    =    clazz.getFields();    builder.append(excludeFields,    fieldValue);    	non-compiled	[CE]  'finally'  without  'try'	58	None	replace
7	[BUG]  [BUGGY]  String[]  fields  =  clazz.getFields();  builder.append(excludeFields[fieldValue].toString());  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  String[]  fields  =  clazz.getFields();  builder.append(excludeFields[fieldValue].toString());  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	String[]  fields  =  clazz.getFields();  builder.append(excludeFields[fieldValue].toString());	  Field[]    fields    =    clazz.getFields();    builder.append(excludeFields[fieldValue].toString());    	non-compiled	[CE]  'finally'  without  'try'	49	None	replace
8	[BUG]  [BUGGY]  Builder.append(excludeFields[fieldValue].toString());  [CE]  'finally'  without  'try'  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  Builder.append(excludeFields[fieldValue].toString());  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Builder.append(excludeFields[fieldValue].toString());	  Field[]    fields    =    clazz.getFields();    builder.append(excludeFields[fieldValue].toString());    	non-compiled	[CE]  'finally'  without  'try'	49	None	replace
9	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  field.length();  i++)  {  builder.append('n');  }  [CE]  'finally'  without  'try'  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  field.length();  i++)  {  builder.append('n');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  field.length();  i++)  {  builder.append('n');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fields.length();    i++)    {    builder.append('n');    }    	non-compiled	[CE]  'finally'  without  'try'	25	None	replace
10	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  field.length();  i++)  {  builder.append('n');  }  [CE]  'finally'  without  'try'  [FE]                      AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  field.length();  i++)  {  builder.append('n');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  field.length();  i++)  {  builder.append('n');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fields.length();    i++)    {    builder.append('n');    }    	non-compiled	[CE]  'finally'  without  'try'	25	None	replace
11	[BUG]  [BUGGY]  if(fieldValue!=  null  ||  excludeFields.contains(fieldValue))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'finally'  without  'try'  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue!=  null  ||  excludeFields.contains(fieldValue))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null  ||  excludeFields.contains(fieldValue))  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldValue    ==    null    ||    excludeFields.contains(fieldValue))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	79	None	replace
12	[BUG]  [BUGGY]  ||  excludeFields.contains(fieldValue))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  ||  excludeFields.contains(fieldValue))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	||  excludeFields.contains(fieldValue))  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldValue    ==    null    ||    excludeFields.contains(fieldValue))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
13	[BUG]  [BUGGY]  if(excludeFields  ==  null  ||  excludeFields.contains(fieldValue))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'finally'  without  'try'  [FE]                        AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(excludeFields  ==  null  ||  excludeFields.contains(fieldValue))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(excludeFields  ==  null  ||  excludeFields.contains(fieldValue))  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldValue    ==    null    ||    excludeFields.contains(fieldValue))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	79	None	replace
14	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append( ", ");  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  For(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append( ", ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	For(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append( ", ");  }	  if(fieldValue    ==    null)    {    for(int    i    =    0;    i    <    fields.length;    i++)    {    builder.append(   ",   ");    }    	non-compiled	[CE]  	77	None	replace
15	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  field.getName().indexOf('$')!=  -1)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null  ||  field.getName().indexOf('$')!=  -1)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  field.getName().indexOf('$')!=  -1)  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldValue    ==    null)    {    if(field.getName().indexOf('$')!=    -1)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	68	None	replace
16	[BUG]  [BUGGY]  builder.append(object,  clazz.getDeclaredFields());  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  builder.append(object,  clazz.getDeclaredFields());  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	builder.append(object,  clazz.getDeclaredFields());	  builder.append(fieldValue,    clazz.getDeclaredFields());    	non-compiled	[CE]  'finally'  without  'try'	33	None	replace
17	[BUG]  [BUGGY]  builder.append(fieldValue,  clazz.getDeclaredFields(),  e);  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  builder.append(fieldValue,  clazz.getDeclaredFields(),  e);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	builder.append(fieldValue,  clazz.getDeclaredFields(),  e);	  builder.append(fieldValue,    clazz.getDeclaredFields());    	non-compiled	[CE]  'finally'  without  'try'	33	None	replace
18	[BUG]  [BUGGY]  builder.append(fieldValue,  field.getDeclaredFields());  [CE]  'finally'  without  'try'  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  builder.append(fieldValue,  field.getDeclaredFields());  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	builder.append(fieldValue,  field.getDeclaredFields());	  builder.append(fieldValue,    clazz.getDeclaredFields());    	non-compiled	[CE]  'finally'  without  'try'	33	None	replace
19	[BUG]  [BUGGY]  builder.append(fieldValue,  clazz.getReturnType());  [CE]  'finally'  without  'try'  [FE]                      AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  builder.append(fieldValue,  clazz.getReturnType());  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	builder.append(fieldValue,  clazz.getReturnType());	  builder.append(fieldValue,    clazz.getDeclaredFields());    	non-compiled	[CE]  'finally'  without  'try'	33	None	replace
20	[BUG]  [BUGGY]  ||(fieldValue!=  null  &&  fieldValue.equals(object)))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  ||(fieldValue!=  null  &&  fieldValue.equals(object)))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	||(fieldValue!=  null  &&  fieldValue.equals(object)))  {  throw  new  IllegalStateException( " ");  }	  if(fieldValue!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
21	[BUG]  [BUGGY]  ||(fieldValue!=  null  &&  fieldValue.getClass().isArray()))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  ||(fieldValue!=  null  &&  fieldValue.getClass().isArray()))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	||(fieldValue!=  null  &&  fieldValue.getClass().isArray()))  {  throw  new  IllegalStateException( " ");  }	  if(fieldValue!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
22	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  field.size();  i++)  {  builder.append('[');  }  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  field.size();  i++)  {  builder.append('[');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  field.size();  i++)  {  builder.append('[');  }	  if(fieldValue    ==    null)    {    for(int    i    =    0;    i    <    fields.size();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	70	None	replace
23	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Field[]  fields  =  clazz.getDeclaredFields();	  Field[]    fields    =    clazz.getFields();    	non-compiled	[CE]  'finally'  without  'try'	71	None	replace
24	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclasses();  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  Field[]  fields  =  clazz.getSuperclasses();  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Field[]  fields  =  clazz.getSuperclasses();	  Field[]    fields    =    clazz.getFields();    	non-compiled	[CE]  'finally'  without  'try'	71	None	replace
25	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclassFields();  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  Field[]  fields  =  clazz.getSuperclassFields();  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Field[]  fields  =  clazz.getSuperclassFields();	  Field[]    fields    =    clazz.getFields();    	non-compiled	[CE]  'finally'  without  'try'	71	None	replace
26	[BUG]  [BUGGY]  if(fieldValue!=  null  ||  fieldValue.length()  >  0)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('[');  }  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue!=  null  ||  fieldValue.length()  >  0)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('[');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null  ||  fieldValue.length()  >  0)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('[');  }	  if(fieldValue!=    null    &&    fieldValue.length()    >    0)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	86	None	replace
27	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('[');  }  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('[');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('[');  }	  if(fieldValue!=    null    &&    fieldValue.length()    >    0)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	86	None	replace
28	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  throw  new  InternalError( "Unexpected  IllegalAccessException. ");  }  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null)  {  throw  new  InternalError( "Unexpected  IllegalAccessException. ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null)  {  throw  new  InternalError( "Unexpected  IllegalAccessException. ");  }	  throw    new    InternalError(e,   "Unexpected    IllegalAccessException.   ");    	non-compiled	[CE]  'finally'  without  'try'	83	None	replace
29	[BUG]  [BUGGY]  ||(fieldValue!=  null  &&  fieldValue.getClass().isArray()))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  ||(fieldValue!=  null  &&  fieldValue.getClass().isArray()))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	||(fieldValue!=  null  &&  fieldValue.getClass().isArray()))  {  throw  new  IllegalArgumentException( " ");  }	  ||(fieldValue    ==    null    &&    fieldValue.getClass().isArray()))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
30	[BUG]  [BUGGY]  ||(fieldValue!=  null  &&  fieldValue.getClass().isAssignableFrom(object)))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  ||(fieldValue!=  null  &&  fieldValue.getClass().isAssignableFrom(object)))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	||(fieldValue!=  null  &&  fieldValue.getClass().isAssignableFrom(object)))  {  throw  new  IllegalArgumentException( " ");  }	  ||(fieldValue    ==    null    &&    fieldValue.getClass().isArray()))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
31	[BUG]  [BUGGY]  ||(fieldValue  ==  null  &&  fieldValue.getClass().isAssignableFrom(object)))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  ||(fieldValue  ==  null  &&  fieldValue.getClass().isAssignableFrom(object)))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	||(fieldValue  ==  null  &&  fieldValue.getClass().isAssignableFrom(object)))  {  throw  new  IllegalArgumentException( " ");  }	  ||(fieldValue    ==    null    &&    fieldValue.getClass().isArray()))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
32	[BUG]  [BUGGY]  if(fieldValue!=  null  ||  field.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalAccessException( " ");  }  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue!=  null  ||  field.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null  ||  field.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalAccessException( " ");  }	  if(fieldValue    ==    null    ||    field.getName().indexOf('$')    ==    -1)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	87	None	replace
33	[BUG]  [BUGGY]  ||  field.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalAccessException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  ||  field.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	||  field.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalAccessException( " ");  }	  if(fieldValue    ==    null    ||    field.getName().indexOf('$')    ==    -1)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
34	[BUG]  [BUGGY]  ||  fieldValue.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalAccessException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  ||  fieldValue.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	||  fieldValue.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalAccessException( " ");  }	  if(fieldValue    ==    null    ||    field.getName().indexOf('$')    ==    -1)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
35	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  field.length();  i++)  {  builder.append('[');  }  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  field.length();  i++)  {  builder.append('[');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  field.length();  i++)  {  builder.append('[');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fields.length();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	19	None	replace
36	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  field.length();  i++)  {  builder.append('[');  }  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  field.length();  i++)  {  builder.append('[');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  field.length();  i++)  {  builder.append('[');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fields.length();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	19	None	replace
37	[BUG]  [BUGGY]  if(fieldValue!=  null  ||  fieldValue.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalAccessException( " ");  }  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue!=  null  ||  fieldValue.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null  ||  fieldValue.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalAccessException( " ");  }	  if(fieldValue    ==    null    ||    fieldValue.getName().indexOf('$')    ==    -1)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	30	None	replace
38	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  fieldValue.getClass().indexOf('$')  ==  -1)  {  throw  new  IllegalAccessException( " ");  }  [CE]  'finally'  without  'try'  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null  ||  fieldValue.getClass().indexOf('$')  ==  -1)  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  fieldValue.getClass().indexOf('$')  ==  -1)  {  throw  new  IllegalAccessException( " ");  }	  if(fieldValue    ==    null    ||    fieldValue.getName().indexOf('$')    ==    -1)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	30	None	replace
39	[BUG]  [BUGGY]  Builder.append(fieldValue,  clazz.getDeclaredFields(),  e);  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  Builder.append(fieldValue,  clazz.getDeclaredFields(),  e);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Builder.append(fieldValue,  clazz.getDeclaredFields(),  e);	  Builder.append(fieldValue,    clazz.getDeclaredFields());    	non-compiled	[CE]  'finally'  without  'try'	32	None	replace
40	[BUG]  [BUGGY]  Builder.append(fieldValue,  builder.getDeclaredFields());  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  Builder.append(fieldValue,  builder.getDeclaredFields());  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Builder.append(fieldValue,  builder.getDeclaredFields());	  Builder.append(fieldValue,    clazz.getDeclaredFields());    	non-compiled	[CE]  'finally'  without  'try'	32	None	replace
41	[BUG]  [BUGGY]  Builder.append(object,  clazz.getDeclaredFields());  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  Builder.append(object,  clazz.getDeclaredFields());  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Builder.append(object,  clazz.getDeclaredFields());	  Builder.append(fieldValue,    clazz.getDeclaredFields());    	non-compiled	[CE]  'finally'  without  'try'	32	None	replace
42	[BUG]  [BUGGY]  Builder.append(fieldValue,  builder.toString());  [CE]  'finally'  without  'try'  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  Builder.append(fieldValue,  builder.toString());  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Builder.append(fieldValue,  builder.toString());	  Builder.append(fieldValue,    clazz.getDeclaredFields());    	non-compiled	[CE]  'finally'  without  'try'	32	None	replace
43	[BUG]  [BUGGY]  if(fieldValue!=  null  ||  field.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue!=  null  ||  field.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null  ||  field.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldValue    ==    null    ||    field.getName().indexOf('$')    ==    -1)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	43	None	replace
44	[BUG]  [BUGGY]  ||  field.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  ||  field.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	||  field.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldValue    ==    null    ||    field.getName().indexOf('$')    ==    -1)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
45	[BUG]  [BUGGY]  ||  fieldValue.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  ||  fieldValue.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	||  fieldValue.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldValue    ==    null    ||    field.getName().indexOf('$')    ==    -1)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
46	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclasses();  builder.append(fieldValue,  excludedFields);  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  Field[]  fields  =  clazz.getSuperclasses();  builder.append(fieldValue,  excludedFields);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Field[]  fields  =  clazz.getSuperclasses();  builder.append(fieldValue,  excludedFields);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fieldValue,    excludedFields);    	non-compiled	[CE]  'finally'  without  'try'	88	None	replace
47	[BUG]  [BUGGY]  throw  new  InternalError( "Unexpected  field  value  ' "  +  fieldValue.getClass().getName()  + "'  without  'try'.   ");  [CE]  'finally'  without  'try'  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  throw  new  InternalError( "Unexpected  field  value  ' "  +  fieldValue.getClass().getName()  + "'  without  'try'.   ");  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  InternalError( "Unexpected  field  value  ' "  +  fieldValue.getClass().getName()  + "'  without  'try'.   ");	  throw    new    InternalError(   "Unexpected    field    value    '   "    +    object.getClass().getName()    +   "'    without    'try'.   ");    	non-compiled	[CE]  'finally'  without  'try'	62	None	replace
48	[BUG]  [BUGGY]  throw  new  InternalError( "Unexpected  field  value  ' "  +  field.getClass().getName()  + "'  without  'try'.   ");  [CE]  'finally'  without  'try'  [FE]                      AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  throw  new  InternalError( "Unexpected  field  value  ' "  +  field.getClass().getName()  + "'  without  'try'.   ");  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  InternalError( "Unexpected  field  value  ' "  +  field.getClass().getName()  + "'  without  'try'.   ");	  throw    new    InternalError(   "Unexpected    field    value    '   "    +    object.getClass().getName()    +   "'    without    'try'.   ");    	non-compiled	[CE]  'finally'  without  'try'	62	None	replace
49	[BUG]  [BUGGY]  throw  new  InternalError( "Unexpected  IllegalAccessException.  Did  you  know? ",  e);  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  throw  new  InternalError( "Unexpected  IllegalAccessException.  Did  you  know? ",  e);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  InternalError( "Unexpected  IllegalAccessException.  Did  you  know? ",  e);	  throw    new    InternalError(   "Unexpected    IllegalAccessException.    Did    you    know?   ");    	non-compiled	[CE]  'finally'  without  'try'	84	None	replace
50	[BUG]  [BUGGY]  ||  fieldValue  ==  null)  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  ||  fieldValue  ==  null)  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	||  fieldValue  ==  null)  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  if(fieldValue    ==    null)    {    e.printStackTrace();    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
51	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [CE]  'finally'  without  'try'  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue!=  null)  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null)  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  if(fieldValue    ==    null)    {    e.printStackTrace();    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    	non-compiled	[CE]  'finally'  without  'try'	10	None	replace
52	[BUG]  [BUGGY]  throw  new  InternalError( "Unexpected  IllegalAccessException: "  +  e);  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  throw  new  InternalError( "Unexpected  IllegalAccessException: "  +  e);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  InternalError( "Unexpected  IllegalAccessException: "  +  e);	  throw    new    InternalError(   "Unexpected    IllegalAccessException:   ");    	non-compiled	[CE]  'finally'  without  'try'	7	None	replace
53	[BUG]  [BUGGY]  throw  new  InternalError( "Unexpected  IllegalAccessException: ",  e);  [CE]  'finally'  without  'try'  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  throw  new  InternalError( "Unexpected  IllegalAccessException: ",  e);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  InternalError( "Unexpected  IllegalAccessException: ",  e);	  throw    new    InternalError(   "Unexpected    IllegalAccessException:   ");    	non-compiled	[CE]  'finally'  without  'try'	7	None	replace
54	[BUG]  [BUGGY]  if(fieldValue!=  null  ||  field.getName().indexOf('$')  ==  -1)  {  return;  }  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue!=  null  ||  field.getName().indexOf('$')  ==  -1)  {  return;  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null  ||  field.getName().indexOf('$')  ==  -1)  {  return;  }	  if(fieldValue    ==    null    ||    field.getName().indexOf('$')    ==    -1)    {    return;    }    	non-compiled	[CE]  'finally'  without  'try'	2	None	replace
55	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  field.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalStateException( " ");  }  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null  ||  field.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  field.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalStateException( " ");  }	  if(fieldValue    ==    null    ||    field.getName().indexOf('$')    ==    -1)    {    return;    }    	non-compiled	[CE]  'finally'  without  'try'	2	None	replace
56	[BUG]  [BUGGY]  String[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[fieldValue].toString());  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  String[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[fieldValue].toString());  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	String[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[fieldValue].toString());	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(excludeFields[fieldValue].toString());    	non-compiled	[CE]  'finally'  without  'try'	40	None	replace
57	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclasses();  builder.append(excludeFields[fieldValue].toString());  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  Field[]  fields  =  clazz.getSuperclasses();  builder.append(excludeFields[fieldValue].toString());  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Field[]  fields  =  clazz.getSuperclasses();  builder.append(excludeFields[fieldValue].toString());	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(excludeFields[fieldValue].toString());    	non-compiled	[CE]  'finally'  without  'try'	40	None	replace
58	[BUG]  [BUGGY]  ||  fieldValue  ==  null)  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  ||  fieldValue  ==  null)  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	||  fieldValue  ==  null)  {  throw  new  IllegalArgumentException( " ".getMessage());  }	  if(fieldValue    ==    null)    {    throw    new    IllegalArgumentException(   "   ".getMessage());    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
59	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  throw  new  IllegalArgumentException( " ").getMessage();  }  [CE]  'finally'  without  'try'  [FE]                      AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null)  {  throw  new  IllegalArgumentException( " ").getMessage();  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null)  {  throw  new  IllegalArgumentException( " ").getMessage();  }	  if(fieldValue    ==    null)    {    throw    new    IllegalArgumentException(   "   ".getMessage());    }    	non-compiled	[CE]  'finally'  without  'try'	52	None	replace
60	[BUG]  [BUGGY]  if(excludeFields  ==  null  ||  fieldValue.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(excludeFields  ==  null  ||  fieldValue.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(excludeFields  ==  null  ||  fieldValue.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldValue    ==    null    ||    excludeFields.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	78	None	replace
61	[BUG]  [BUGGY]  ||  excludeFields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  ||  excludeFields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	||  excludeFields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldValue    ==    null    ||    excludeFields.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
62	[BUG]  [BUGGY]  if(excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'finally'  without  'try'  [FE]                      AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldValue    ==    null    ||    excludeFields.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	78	None	replace
63	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclasses();  builder.append(excludeFields[fieldValue]);  [CE]  'finally'  without  'try'  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  Field[]  fields  =  clazz.getSuperclasses();  builder.append(excludeFields[fieldValue]);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Field[]  fields  =  clazz.getSuperclasses();  builder.append(excludeFields[fieldValue]);	  Field[]    fields    =    clazz.getFields();    builder.append(excludeFields[fieldValue]);    	non-compiled	[CE]  'finally'  without  'try'	50	None	replace
64	[BUG]  [BUGGY]  String[]  fields  =  clazz.getFields();  builder.append(excludeFields[fieldValue]);  [CE]  'finally'  without  'try'  [FE]                      AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  String[]  fields  =  clazz.getFields();  builder.append(excludeFields[fieldValue]);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	String[]  fields  =  clazz.getFields();  builder.append(excludeFields[fieldValue]);	  Field[]    fields    =    clazz.getFields();    builder.append(excludeFields[fieldValue]);    	non-compiled	[CE]  'finally'  without  'try'	50	None	replace
65	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  field.getName().indexOf('$')!=  -1)  {  throw  new  IllegalAccessException( " ");  }  [CE]  'finally'  without  'try'  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null  ||  field.getName().indexOf('$')!=  -1)  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  field.getName().indexOf('$')!=  -1)  {  throw  new  IllegalAccessException( " ");  }	  if(fieldValue    ==    null)    {    if(field.getName().indexOf('$')!=    -1)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	31	None	replace
66	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Unexpected  IllegalAccessException: "  +  e.getMessage());  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  throw  new  IllegalStateException( "Unexpected  IllegalAccessException: "  +  e.getMessage());  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  IllegalStateException( "Unexpected  IllegalAccessException: "  +  e.getMessage());	  throw    new    IllegalStateException(   "Unexpected    IllegalAccessException   ");    	non-compiled	[CE]  'finally'  without  'try'	74	None	replace
67	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  throw  new  IllegalStateException( "Unexpected  IllegalAccessException ");  }  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null)  {  throw  new  IllegalStateException( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null)  {  throw  new  IllegalStateException( "Unexpected  IllegalAccessException ");  }	  throw    new    IllegalStateException(   "Unexpected    IllegalAccessException   ");    	non-compiled	[CE]  'finally'  without  'try'	74	None	replace
68	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Unexpected  IllegalAccessException ",  e);  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  throw  new  IllegalStateException( "Unexpected  IllegalAccessException ",  e);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  IllegalStateException( "Unexpected  IllegalAccessException ",  e);	  throw    new    IllegalStateException(   "Unexpected    IllegalAccessException   ");    	non-compiled	[CE]  'finally'  without  'try'	74	None	replace
69	[BUG]  [BUGGY]  if(fieldValue!=  null  ||  fieldValue.getName().indexOf('$')  ==  -1)  {  return;  }  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue!=  null  ||  fieldValue.getName().indexOf('$')  ==  -1)  {  return;  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null  ||  fieldValue.getName().indexOf('$')  ==  -1)  {  return;  }	  if(fieldValue    ==    null    ||    fieldValue.getName().indexOf('$')    ==    -1)    {    return;    }    	non-compiled	[CE]  'finally'  without  'try'	3	None	replace
70	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  fieldValue.getClass().indexOf('$')  ==  -1)  {  return;  }  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null  ||  fieldValue.getClass().indexOf('$')  ==  -1)  {  return;  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  fieldValue.getClass().indexOf('$')  ==  -1)  {  return;  }	  if(fieldValue    ==    null    ||    fieldValue.getName().indexOf('$')    ==    -1)    {    return;    }    	non-compiled	[CE]  'finally'  without  'try'	3	None	replace
71	[BUG]  [BUGGY]  ||(fieldValue!=  null  &&  fieldValue.equals(object)))  {  throw  new  IllegalAccessException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  ||(fieldValue!=  null  &&  fieldValue.equals(object)))  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	||(fieldValue!=  null  &&  fieldValue.equals(object)))  {  throw  new  IllegalAccessException( " ");  }	  ||(fieldValue    ==    null    &&    fieldValue.equals(object)))    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
72	[BUG]  [BUGGY]  ||(fieldValue  ==  null  &&  object.equals(fieldValue)))  {  throw  new  IllegalAccessException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  ||(fieldValue  ==  null  &&  object.equals(fieldValue)))  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	||(fieldValue  ==  null  &&  object.equals(fieldValue)))  {  throw  new  IllegalAccessException( " ");  }	  ||(fieldValue    ==    null    &&    fieldValue.equals(object)))    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
73	[BUG]  [BUGGY]  ||(object!=  null  &&  fieldValue.equals(object)))  {  throw  new  IllegalAccessException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  ||(object!=  null  &&  fieldValue.equals(object)))  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	||(object!=  null  &&  fieldValue.equals(object)))  {  throw  new  IllegalAccessException( " ");  }	  ||(fieldValue    ==    null    &&    fieldValue.equals(object)))    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
74	[BUG]  [BUGGY]  ||  fieldValue!=  null)  {  throw  new  IllegalAccessException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  ||  fieldValue!=  null)  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	||  fieldValue!=  null)  {  throw  new  IllegalAccessException( " ");  }	  ||    fieldValue    ==    null)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
75	[BUG]  [BUGGY]  ||  fieldValue  >=  null)  {  throw  new  IllegalAccessException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  ||  fieldValue  >=  null)  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	||  fieldValue  >=  null)  {  throw  new  IllegalAccessException( " ");  }	  ||    fieldValue    ==    null)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
76	[BUG]  [BUGGY]  throw  new  InternalError(e.getMessage(),  e);  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  throw  new  InternalError(e.getMessage(),  e);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  InternalError(e.getMessage(),  e);	  throw    new    InternalError(e.getMessage());    	non-compiled	[CE]  'finally'  without  'try'	53	None	replace
77	[BUG]  [BUGGY]  throw  new  InternalError(e.getMessage(),  fieldValue);  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  throw  new  InternalError(e.getMessage(),  fieldValue);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  InternalError(e.getMessage(),  fieldValue);	  throw    new    InternalError(e.getMessage());    	non-compiled	[CE]  'finally'  without  'try'	53	None	replace
78	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  if(field.getName().indexOf('$')  >=  -1)  {  throw  new  IllegalAccessException( " ");  }  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue!=  null)  {  if(field.getName().indexOf('$')  >=  -1)  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null)  {  if(field.getName().indexOf('$')  >=  -1)  {  throw  new  IllegalAccessException( " ");  }	  if(fieldValue    ==    null)    {    if(field.getName().indexOf('$')    >=    -1)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	61	None	replace
79	[BUG]  [BUGGY]  String[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue);  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  String[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	String[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(object);    	non-compiled	[CE]  'finally'  without  'try'	92	None	replace
80	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[0]);  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[0]);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[0]);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(object);    	non-compiled	[CE]  'finally'  without  'try'	92	None	replace
81	[BUG]  [BUGGY]  throw  new  InternalError( "Unexpected  field  value  ' "  +  fieldValue.getClass().getName()  + "'  without  'try' ");  [CE]  'finally'  without  'try'  [FE]                      AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  throw  new  InternalError( "Unexpected  field  value  ' "  +  fieldValue.getClass().getName()  + "'  without  'try' ");  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  InternalError( "Unexpected  field  value  ' "  +  fieldValue.getClass().getName()  + "'  without  'try' ");	  throw    new    InternalError(   "Unexpected    field    value    '   "    +    object.getClass().getName()    +   "'    without    'try'   ");    	non-compiled	[CE]  'finally'  without  'try'	63	None	replace
82	[BUG]  [BUGGY]  throw  new  InternalError( "Unexpected  field  value  ' "  +  field.getClass().getName()  + "'  without  'try' ");  [CE]  'finally'  without  'try'  [FE]                        AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  throw  new  InternalError( "Unexpected  field  value  ' "  +  field.getClass().getName()  + "'  without  'try' ");  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  InternalError( "Unexpected  field  value  ' "  +  field.getClass().getName()  + "'  without  'try' ");	  throw    new    InternalError(   "Unexpected    field    value    '   "    +    object.getClass().getName()    +   "'    without    'try'   ");    	non-compiled	[CE]  'finally'  without  'try'	63	None	replace
83	[BUG]  [BUGGY]  throw  new  InternalError( "Unexpected  field  value  ' "  +  object.getClass().getName()  + "'  without  'try' ",  e);  [CE]  'finally'  without  'try'  [FE]                          AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  throw  new  InternalError( "Unexpected  field  value  ' "  +  object.getClass().getName()  + "'  without  'try' ",  e);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  InternalError( "Unexpected  field  value  ' "  +  object.getClass().getName()  + "'  without  'try' ",  e);	  throw    new    InternalError(   "Unexpected    field    value    '   "    +    object.getClass().getName()    +   "'    without    'try'   ");    	non-compiled	[CE]  'finally'  without  'try'	63	None	replace
84	[BUG]  [BUGGY]  if(fieldValue!=  null  ||  fieldValue.length()  >  0)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('n');  }  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue!=  null  ||  fieldValue.length()  >  0)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('n');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null  ||  fieldValue.length()  >  0)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('n');  }	  if(fieldValue!=    null    &&    fieldValue.length()    >    0)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    builder.append('n');    }    	non-compiled	[CE]  'finally'  without  'try'	85	None	replace
85	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('n');  }  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('n');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('n');  }	  if(fieldValue!=    null    &&    fieldValue.length()    >    0)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    builder.append('n');    }    	non-compiled	[CE]  'finally'  without  'try'	85	None	replace
86	[BUG]  [BUGGY]  if(fieldValue!=  null  ||  fieldValue.isEmpty())  {  for(int  i  =  0;  i  <  fieldValue.size();  i++)  {  builder.append('[');  }  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue!=  null  ||  fieldValue.isEmpty())  {  for(int  i  =  0;  i  <  fieldValue.size();  i++)  {  builder.append('[');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null  ||  fieldValue.isEmpty())  {  for(int  i  =  0;  i  <  fieldValue.size();  i++)  {  builder.append('[');  }	  if(fieldValue!=    null    &&    fieldValue.isEmpty())    {    for(int    i    =    0;    i    <    fieldValue.size();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	89	None	replace
87	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldValue.size();  i++)  {  builder.append('[');  }  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  for(int  i  =  0;  i  <  fieldValue.size();  i++)  {  builder.append('[');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	for(int  i  =  0;  i  <  fieldValue.size();  i++)  {  builder.append('[');  }	  if(fieldValue!=    null    &&    fieldValue.isEmpty())    {    for(int    i    =    0;    i    <    fieldValue.size();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	89	None	replace
88	[BUG]  [BUGGY]  if(fieldValue!=  null  &&  fieldValue.getClass().isArray())  {  for(int  i  =  0;  i  <  fieldValue.size();  i++)  {  builder.append('[');  }  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue!=  null  &&  fieldValue.getClass().isArray())  {  for(int  i  =  0;  i  <  fieldValue.size();  i++)  {  builder.append('[');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null  &&  fieldValue.getClass().isArray())  {  for(int  i  =  0;  i  <  fieldValue.size();  i++)  {  builder.append('[');  }	  if(fieldValue!=    null    &&    fieldValue.isEmpty())    {    for(int    i    =    0;    i    <    fieldValue.size();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	89	None	replace
89	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue,  useTransients);  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue,  useTransients);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue,  useTransients);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fieldValue,    excludeFields);    	non-compiled	[CE]  'finally'  without  'try'	34	None	replace
90	[BUG]  [BUGGY]  Builder.append(fieldValue,  excludeFields);  [CE]  'finally'  without  'try'  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  Builder.append(fieldValue,  excludeFields);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Builder.append(fieldValue,  excludeFields);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fieldValue,    excludeFields);    	non-compiled	[CE]  'finally'  without  'try'	34	None	replace
91	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue,  object);  [CE]  'finally'  without  'try'  [FE]                      AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue,  object);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue,  object);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fieldValue,    excludeFields);    	non-compiled	[CE]  'finally'  without  'try'	34	None	replace
92	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclasses();  builder.append(fieldValue,  excludeFields);  [CE]  'finally'  without  'try'  [FE]                        AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  Field[]  fields  =  clazz.getSuperclasses();  builder.append(fieldValue,  excludeFields);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Field[]  fields  =  clazz.getSuperclasses();  builder.append(fieldValue,  excludeFields);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fieldValue,    excludeFields);    	non-compiled	[CE]  'finally'  without  'try'	34	None	replace
93	[BUG]  [BUGGY]  throw  new  InternalError( "Unexpected  IllegalAccessException: "  +  fieldValue.getMessage());  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  throw  new  InternalError( "Unexpected  IllegalAccessException: "  +  fieldValue.getMessage());  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  InternalError( "Unexpected  IllegalAccessException: "  +  fieldValue.getMessage());	  throw    new    InternalError(   "Unexpected    IllegalAccessException:   "    +    e.getMessage());    	non-compiled	[CE]  'finally'  without  'try'	5	None	replace
94	[BUG]  [BUGGY]  throw  new  InternalError( "Unexpected  IllegalAccessException: "  +  e.toString());  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  throw  new  InternalError( "Unexpected  IllegalAccessException: "  +  e.toString());  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  InternalError( "Unexpected  IllegalAccessException: "  +  e.toString());	  throw    new    InternalError(   "Unexpected    IllegalAccessException:   "    +    e.getMessage());    	non-compiled	[CE]  'finally'  without  'try'	5	None	replace
95	[BUG]  [BUGGY]  throw  new  InternalError( "Unexpected  IllegalAccessException: "  +  e.getMessage(),  e);  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  throw  new  InternalError( "Unexpected  IllegalAccessException: "  +  e.getMessage(),  e);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  InternalError( "Unexpected  IllegalAccessException: "  +  e.getMessage(),  e);	  throw    new    InternalError(   "Unexpected    IllegalAccessException:   "    +    e.getMessage());    	non-compiled	[CE]  'finally'  without  'try'	5	None	replace
96	[BUG]  [BUGGY]  ||(fieldValue  ==  null  &&  fieldValue.equals(object)))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  ||(fieldValue  ==  null  &&  fieldValue.equals(object)))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	||(fieldValue  ==  null  &&  fieldValue.equals(object)))  {  throw  new  IllegalArgumentException( " ");  }	  ||(fieldValue!=    null    &&    fieldValue.equals(object)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
97	[BUG]  [BUGGY]  ||(fieldValue!=  null  &&  object.equals(fieldValue)))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  ||(fieldValue!=  null  &&  object.equals(fieldValue)))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	||(fieldValue!=  null  &&  object.equals(fieldValue)))  {  throw  new  IllegalArgumentException( " ");  }	  ||(fieldValue!=    null    &&    fieldValue.equals(object)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
98	[BUG]  [BUGGY]  ||(object!=  null  &&  fieldValue.equals(object)))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  ||(object!=  null  &&  fieldValue.equals(object)))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	||(object!=  null  &&  fieldValue.equals(object)))  {  throw  new  IllegalArgumentException( " ");  }	  ||(fieldValue!=    null    &&    fieldValue.equals(object)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
99	[BUG]  [BUGGY]  throw  new  InternalError( "Unexpected  field  value  ' "  +  fieldValue  + "'  without  'try'.  If(fieldValue  ==  null)  {  throw  new  InternalError( "Unexpected  field  value  ' "  +  fieldValue  + "'. ");  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  throw  new  InternalError( "Unexpected  field  value  ' "  +  fieldValue  + "'  without  'try'.  If(fieldValue  ==  null)  {  throw  new  InternalError( "Unexpected  field  value  ' "  +  fieldValue  + "'. ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  InternalError( "Unexpected  field  value  ' "  +  fieldValue  + "'  without  'try'.  If(fieldValue  ==  null)  {  throw  new  InternalError( "Unexpected  field  value  ' "  +  fieldValue  + "'. ");  }	  throw    new    InternalError(   "Unexpected    field    value    '   "    +    fieldValue    +   "'    without    'try'.   ");    	non-compiled	[CE]  	20	None	replace
100	[BUG]  [BUGGY]  throw  new  InternalError( "Unexpected  field  value  ' "  +  fieldValue  + "'  without  'try'.  If(fieldValue!=  null)  {  throw  new  InternalError( "Unexpected  field  value  ' "  +  fieldValue  + "'. ");  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  throw  new  InternalError( "Unexpected  field  value  ' "  +  fieldValue  + "'  without  'try'.  If(fieldValue!=  null)  {  throw  new  InternalError( "Unexpected  field  value  ' "  +  fieldValue  + "'. ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  InternalError( "Unexpected  field  value  ' "  +  fieldValue  + "'  without  'try'.  If(fieldValue!=  null)  {  throw  new  InternalError( "Unexpected  field  value  ' "  +  fieldValue  + "'. ");  }	  throw    new    InternalError(   "Unexpected    field    value    '   "    +    fieldValue    +   "'    without    'try'.   ");    	non-compiled	[CE]  	20	None	replace
101	[BUG]  [BUGGY]  throw  new  InternalError( "Unexpected  field  value  ' "  +  fieldValue  + "'  without  'try'.  If(!useTransients)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unclosed  string  literal  [FE]                        AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  throw  new  InternalError( "Unexpected  field  value  ' "  +  fieldValue  + "'  without  'try'.  If(!useTransients)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  InternalError( "Unexpected  field  value  ' "  +  fieldValue  + "'  without  'try'.  If(!useTransients)  {  throw  new  IllegalArgumentException( " ");  }	  throw    new    InternalError(   "Unexpected    field    value    '   "    +    fieldValue    +   "'    without    'try'.   ");    	non-compiled	[CE]  unclosed  string  literal	20	None	replace
102	[BUG]  [BUGGY]  Builder.append(builder,  fieldValue);  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  Builder.append(builder,  fieldValue);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Builder.append(builder,  fieldValue);	  Builder.append(fieldValue);    	non-compiled	[CE]  'finally'  without  'try'	41	None	replace
103	[BUG]  [BUGGY]  Builder.append(object,  fieldValue);  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  Builder.append(object,  fieldValue);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Builder.append(object,  fieldValue);	  Builder.append(fieldValue);    	non-compiled	[CE]  'finally'  without  'try'	41	None	replace
104	[BUG]  [BUGGY]  Builder.append(fieldValue,  builder);  [CE]  'finally'  without  'try'  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  Builder.append(fieldValue,  builder);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Builder.append(fieldValue,  builder);	  Builder.append(fieldValue);    	non-compiled	[CE]  'finally'  without  'try'	41	None	replace
105	[BUG]  [BUGGY]  Builder.append(object);  [CE]  'finally'  without  'try'  [FE]                      AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  Builder.append(object);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Builder.append(object);	  Builder.append(fieldValue);    	non-compiled	[CE]  'finally'  without  'try'	41	None	replace
106	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Unexpected  IllegalAccessException: "  +  e);  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  throw  new  IllegalStateException( "Unexpected  IllegalAccessException: "  +  e);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  IllegalStateException( "Unexpected  IllegalAccessException: "  +  e);	  throw    new    IllegalStateException(   "Unexpected    IllegalAccessException:   ");    	non-compiled	[CE]  'finally'  without  'try'	75	None	replace
107	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  throw  new  IllegalStateException( "Unexpected  IllegalAccessException: ");  }  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null)  {  throw  new  IllegalStateException( "Unexpected  IllegalAccessException: ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null)  {  throw  new  IllegalStateException( "Unexpected  IllegalAccessException: ");  }	  throw    new    IllegalStateException(   "Unexpected    IllegalAccessException:   ");    	non-compiled	[CE]  'finally'  without  'try'	75	None	replace
108	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(fieldValue,  useTransients);  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(fieldValue,  useTransients);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Field[]  fields  =  clazz.getFields();  builder.append(fieldValue,  useTransients);	  Field[]    fields    =    clazz.getFields();    builder.append(fieldValue,    excludeFields);    	non-compiled	[CE]  'finally'  without  'try'	48	None	replace
109	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  fieldValue.length()  ==  0)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('[');  }  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null  ||  fieldValue.length()  ==  0)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('[');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  fieldValue.length()  ==  0)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('[');  }	  if(fieldValue!=    null    ||    fieldValue.length()    ==    0)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	18	None	replace
110	[BUG]  [BUGGY]  ||  fieldValue  ==  null)  {  throw  new  IllegalStateException( " ".getMessage());  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  ||  fieldValue  ==  null)  {  throw  new  IllegalStateException( " ".getMessage());  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	||  fieldValue  ==  null)  {  throw  new  IllegalStateException( " ".getMessage());  }	  if(fieldValue    ==    null)    {    throw    new    IllegalStateException(   "   ".getMessage());    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
111	[BUG]  [BUGGY]  ||(fieldValue  ==  null  &&  fieldValue.getClass().isArray()))  {  throw  new  IllegalStateException( " ".getMessage());  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  ||(fieldValue  ==  null  &&  fieldValue.getClass().isArray()))  {  throw  new  IllegalStateException( " ".getMessage());  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	||(fieldValue  ==  null  &&  fieldValue.getClass().isArray()))  {  throw  new  IllegalStateException( " ".getMessage());  }	  if(fieldValue    ==    null)    {    throw    new    IllegalStateException(   "   ".getMessage());    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
112	[BUG]  [BUGGY]  ||  fieldValue  ==  null)  {  throw  new  IllegalStateException( " ").getMessage();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  ||  fieldValue  ==  null)  {  throw  new  IllegalStateException( " ").getMessage();  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	||  fieldValue  ==  null)  {  throw  new  IllegalStateException( " ").getMessage();  }	  if(fieldValue    ==    null)    {    throw    new    IllegalStateException(   "   ".getMessage());    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
113	[BUG]  [BUGGY]  ||  fieldValue  ==  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  ||  fieldValue  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	||  fieldValue  ==  null)  {  throw  new  IllegalStateException( " ");  }	  if(fieldValue    ==    null)    {    throw    new    IllegalStateException(   "   ".getMessage());    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
114	[BUG]  [BUGGY]  if(fieldValue!=  null  ||  fieldValue.getClass()!=  null)  {  if(field.getName().indexOf('$')  ==  -1)  {  return;  }  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue!=  null  ||  fieldValue.getClass()!=  null)  {  if(field.getName().indexOf('$')  ==  -1)  {  return;  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null  ||  fieldValue.getClass()!=  null)  {  if(field.getName().indexOf('$')  ==  -1)  {  return;  }	  if(fieldValue    ==    null    ||    fieldValue.getClass()!=    null)    {    if(field.getName().indexOf('$')    ==    -1)    {    return;    }    	non-compiled	[CE]  'finally'  without  'try'	66	None	replace
115	[BUG]  [BUGGY]  ||  fieldValue.getClass()!=  null)  {  if(field.getName().indexOf('$')  ==  -1)  {  return;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  ||  fieldValue.getClass()!=  null)  {  if(field.getName().indexOf('$')  ==  -1)  {  return;  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	||  fieldValue.getClass()!=  null)  {  if(field.getName().indexOf('$')  ==  -1)  {  return;  }	  if(fieldValue    ==    null    ||    fieldValue.getClass()!=    null)    {    if(field.getName().indexOf('$')    ==    -1)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
116	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue,  excludeFields[fieldValue]);  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue,  excludeFields[fieldValue]);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue,  excludeFields[fieldValue]);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(excludeFields[fieldValue]);    	non-compiled	[CE]  'finally'  without  'try'	39	None	replace
117	[BUG]  [BUGGY]  String[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[fieldValue]);  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  String[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[fieldValue]);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	String[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[fieldValue]);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(excludeFields[fieldValue]);    	non-compiled	[CE]  'finally'  without  'try'	39	None	replace
118	[BUG]  [BUGGY]  if(fieldValue!=  null  ||  excludeFields.contains(fieldValue))  {  throw  new  IllegalAccessException( " ");  }  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue!=  null  ||  excludeFields.contains(fieldValue))  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null  ||  excludeFields.contains(fieldValue))  {  throw  new  IllegalAccessException( " ");  }	  if(fieldValue    ==    null    ||    excludeFields.contains(fieldValue))    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	82	None	replace
119	[BUG]  [BUGGY]  ||  excludeFields.contains(fieldValue))  {  throw  new  IllegalAccessException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  ||  excludeFields.contains(fieldValue))  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	||  excludeFields.contains(fieldValue))  {  throw  new  IllegalAccessException( " ");  }	  if(fieldValue    ==    null    ||    excludeFields.contains(fieldValue))    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
120	[BUG]  [BUGGY]  if(excludeFields  ==  null  ||  excludeFields.contains(fieldValue))  {  throw  new  IllegalAccessException( " ");  }  [CE]  'finally'  without  'try'  [FE]                      AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(excludeFields  ==  null  ||  excludeFields.contains(fieldValue))  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(excludeFields  ==  null  ||  excludeFields.contains(fieldValue))  {  throw  new  IllegalAccessException( " ");  }	  if(fieldValue    ==    null    ||    excludeFields.contains(fieldValue))    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	82	None	replace
121	[BUG]  [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  field.length();  i++)  {  builder.append('n');  }  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  field.length();  i++)  {  builder.append('n');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(object!=  null)  {  for(int  i  =  0;  i  <  field.length();  i++)  {  builder.append('n');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    object.length();    i++)    {    builder.append('n');    }    	non-compiled	[CE]  'finally'  without  'try'	59	None	replace
122	[BUG]  [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('n');  }  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('n');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(object!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('n');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    object.length();    i++)    {    builder.append('n');    }    	non-compiled	[CE]  'finally'  without  'try'	59	None	replace
123	[BUG]  [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  builder.append('n');  }  [CE]  'finally'  without  'try'  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  builder.append('n');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(object!=  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  builder.append('n');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    object.length();    i++)    {    builder.append('n');    }    	non-compiled	[CE]  'finally'  without  'try'	59	None	replace
124	[BUG]  [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('n');  }  [CE]  'finally'  without  'try'  [FE]                      AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('n');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(object!=  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('n');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    object.length();    i++)    {    builder.append('n');    }    	non-compiled	[CE]  'finally'  without  'try'	59	None	replace
125	[BUG]  [BUGGY]  if(useTransients)  {  e.printStackTrace();  }  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(useTransients)  {  e.printStackTrace();  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(useTransients)  {  e.printStackTrace();  }	  if(!useTransients)    {    e.printStackTrace();    }    	non-compiled	[CE]  'finally'  without  'try'	80	None	replace
126	[BUG]  [BUGGY]  ||!useTransients)  {  e.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  ||!useTransients)  {  e.printStackTrace();  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	||!useTransients)  {  e.printStackTrace();  }	  if(!useTransients)    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
127	[BUG]  [BUGGY]  if(excludeFields  ==  null  ||  fieldValue.length()  ==  0)  {  throw  new  IllegalAccessException( " ");  }  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(excludeFields  ==  null  ||  fieldValue.length()  ==  0)  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(excludeFields  ==  null  ||  fieldValue.length()  ==  0)  {  throw  new  IllegalAccessException( " ");  }	  if(fieldValue    ==    null    ||    excludeFields.length    ==    0)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	81	None	replace
128	[BUG]  [BUGGY]  if(excludeFields!=  null  ||  fieldValue.length  ==  0)  {  throw  new  IllegalAccessException( " ");  }  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(excludeFields!=  null  ||  fieldValue.length  ==  0)  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(excludeFields!=  null  ||  fieldValue.length  ==  0)  {  throw  new  IllegalAccessException( " ");  }	  if(fieldValue    ==    null    ||    excludeFields.length    ==    0)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	81	None	replace
129	[BUG]  [BUGGY]  if(excludeFields  ==  null  ||  fieldValue.length  ==  0)  {  throw  new  IllegalAccessException( " ");  }  [CE]  'finally'  without  'try'  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(excludeFields  ==  null  ||  fieldValue.length  ==  0)  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(excludeFields  ==  null  ||  fieldValue.length  ==  0)  {  throw  new  IllegalAccessException( " ");  }	  if(fieldValue    ==    null    ||    excludeFields.length    ==    0)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	81	None	replace
130	[BUG]  [BUGGY]  ||(fieldValue!=  null  &&  fieldValue.getClass().isArray()))  {  throw  new  IllegalAccessException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  ||(fieldValue!=  null  &&  fieldValue.getClass().isArray()))  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	||(fieldValue!=  null  &&  fieldValue.getClass().isArray()))  {  throw  new  IllegalAccessException( " ");  }	  if(fieldValue!=    null)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
131	[BUG]  [BUGGY]  throw  new  InternalError( "Unexpected  field  value  ' "+fieldValue+ "'  for  object  ' "+object.getClass().getName()  + ",'  not  ' "+fieldValue+ "' ");  [CE]  'finally'  without  'try'  [FE]                        AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  throw  new  InternalError( "Unexpected  field  value  ' "+fieldValue+ "'  for  object  ' "+object.getClass().getName()  + ",'  not  ' "+fieldValue+ "' ");  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  InternalError( "Unexpected  field  value  ' "+fieldValue+ "'  for  object  ' "+object.getClass().getName()  + ",'  not  ' "+fieldValue+ "' ");	  throw    new    InternalError(   "Unexpected    field    value    '   "+fieldValue+   "'    for    object    '   "+object.getClass().getName()    +   "'    not    '   "+fieldValue+   "'   ");    	non-compiled	[CE]  'finally'  without  'try'	22	None	replace
132	[BUG]  [BUGGY]  throw  new  InternalError( "Unexpected  field  value  ' "+fieldValue+ "'  for  object  ' "+object.getClass().getName()  + "'  not  ' "+fieldValue+ "' ",  e);  [CE]  'finally'  without  'try'  [FE]                          AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  throw  new  InternalError( "Unexpected  field  value  ' "+fieldValue+ "'  for  object  ' "+object.getClass().getName()  + "'  not  ' "+fieldValue+ "' ",  e);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  InternalError( "Unexpected  field  value  ' "+fieldValue+ "'  for  object  ' "+object.getClass().getName()  + "'  not  ' "+fieldValue+ "' ",  e);	  throw    new    InternalError(   "Unexpected    field    value    '   "+fieldValue+   "'    for    object    '   "+object.getClass().getName()    +   "'    not    '   "+fieldValue+   "'   ");    	non-compiled	[CE]  'finally'  without  'try'	22	None	replace
133	[BUG]  [BUGGY]  throw  new  InternalError( "Unexpected  field  value  ' "+fieldValue+ "'  for  object  ' "+object.getClass().getName()  + "'  not  ' "+fieldValue+ "'. ");  [CE]  'finally'  without  'try'  [FE]                            AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  throw  new  InternalError( "Unexpected  field  value  ' "+fieldValue+ "'  for  object  ' "+object.getClass().getName()  + "'  not  ' "+fieldValue+ "'. ");  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  InternalError( "Unexpected  field  value  ' "+fieldValue+ "'  for  object  ' "+object.getClass().getName()  + "'  not  ' "+fieldValue+ "'. ");	  throw    new    InternalError(   "Unexpected    field    value    '   "+fieldValue+   "'    for    object    '   "+object.getClass().getName()    +   "'    not    '   "+fieldValue+   "'   ");    	non-compiled	[CE]  'finally'  without  'try'	22	None	replace
134	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  fields.size();  i++)  {  builder.append('[');  }  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  For(int  i  =  0;  i  <  fields.size();  i++)  {  builder.append('[');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	For(int  i  =  0;  i  <  fields.size();  i++)  {  builder.append('[');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fields.size();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  '.class'  expected	46	None	replace
135	[BUG]  [BUGGY]  String[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields,  fieldValue);  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  String[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields,  fieldValue);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	String[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields,  fieldValue);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(excludeFields,    fieldValue);    	non-compiled	[CE]  'finally'  without  'try'	54	None	replace
136	[BUG]  [BUGGY]  throw  new  InternalError( "Unexpected  field  value  ' "+fieldValue+ "'  for  class  ' "+clazz.getName()  + ",': "+e.getMessage());  [CE]  'finally'  without  'try'  [FE]                      AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  throw  new  InternalError( "Unexpected  field  value  ' "+fieldValue+ "'  for  class  ' "+clazz.getName()  + ",': "+e.getMessage());  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  InternalError( "Unexpected  field  value  ' "+fieldValue+ "'  for  class  ' "+clazz.getName()  + ",': "+e.getMessage());	  throw    new    InternalError(   "Unexpected    field    value    '   "+fieldValue+   "'    for    class    '   "+clazz.getName()    +   "':   "+e.getMessage());    	non-compiled	[CE]  'finally'  without  'try'	21	None	replace
137	[BUG]  [BUGGY]  throw  new  InternalError( "Unexpected  field  value  ' "+clazz.getName()  + "'  for  class  ' "+clazz.getName()  + "': "+e.getMessage());  [CE]  'finally'  without  'try'  [FE]                        AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  throw  new  InternalError( "Unexpected  field  value  ' "+clazz.getName()  + "'  for  class  ' "+clazz.getName()  + "': "+e.getMessage());  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  InternalError( "Unexpected  field  value  ' "+clazz.getName()  + "'  for  class  ' "+clazz.getName()  + "': "+e.getMessage());	  throw    new    InternalError(   "Unexpected    field    value    '   "+fieldValue+   "'    for    class    '   "+clazz.getName()    +   "':   "+e.getMessage());    	non-compiled	[CE]  'finally'  without  'try'	21	None	replace
138	[BUG]  [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  field.length();  i++)  {  builder.append('[');  }  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  field.length();  i++)  {  builder.append('[');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(object!=  null)  {  for(int  i  =  0;  i  <  field.length();  i++)  {  builder.append('[');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    object.length();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	56	None	replace
139	[BUG]  [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('[');  }  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('[');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(object!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('[');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    object.length();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	56	None	replace
140	[BUG]  [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  builder.append('[');  }  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  builder.append('[');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(object!=  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  builder.append('[');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    object.length();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	56	None	replace
141	[BUG]  [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('[');  }  [CE]  'finally'  without  'try'  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('[');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(object!=  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('[');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    object.length();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	56	None	replace
142	[BUG]  [BUGGY]  e.printStackTrace(fieldValue);  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  e.printStackTrace(fieldValue);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	e.printStackTrace(fieldValue);	  e.printStackTrace(builder);    	non-compiled	[CE]  'finally'  without  'try'	64	None	replace
143	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  e.printStackTrace(builder);  }  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null)  {  e.printStackTrace(builder);  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null)  {  e.printStackTrace(builder);  }	  e.printStackTrace(builder);    	non-compiled	[CE]  'finally'  without  'try'	64	None	replace
144	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  e.printStackTrace(builder);  }  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue!=  null)  {  e.printStackTrace(builder);  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null)  {  e.printStackTrace(builder);  }	  e.printStackTrace(builder);    	non-compiled	[CE]  'finally'  without  'try'	64	None	replace
145	[BUG]  [BUGGY]  e.printStackTrace(builder,  fieldValue);  [CE]  'finally'  without  'try'  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  e.printStackTrace(builder,  fieldValue);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	e.printStackTrace(builder,  fieldValue);	  e.printStackTrace(builder);    	non-compiled	[CE]  'finally'  without  'try'	64	None	replace
146	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclasses();  builder.append(object);  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  Field[]  fields  =  clazz.getSuperclasses();  builder.append(object);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Field[]  fields  =  clazz.getSuperclasses();  builder.append(object);	  Field[]    fields    =    clazz.getSuperclasses();    builder.append(fieldValue);    	non-compiled	[CE]  'finally'  without  'try'	91	None	replace
147	[BUG]  [BUGGY]  BuilderBuilder.append(fieldValue,  clazz.getDeclaredFields(),  e);  [CE]  'finally'  without  'try'  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  BuilderBuilder.append(fieldValue,  clazz.getDeclaredFields(),  e);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	BuilderBuilder.append(fieldValue,  clazz.getDeclaredFields(),  e);	  BuilderBuilder.append(fieldValue,    clazz.getDeclaredFields());    	non-compiled	[CE]  'finally'  without  'try'	35	None	replace
148	[BUG]  [BUGGY]  BuilderBuilder.append(object,  clazz.getDeclaredFields());  [CE]  'finally'  without  'try'  [FE]                      AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  BuilderBuilder.append(object,  clazz.getDeclaredFields());  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	BuilderBuilder.append(object,  clazz.getDeclaredFields());	  BuilderBuilder.append(fieldValue,    clazz.getDeclaredFields());    	non-compiled	[CE]  'finally'  without  'try'	35	None	replace
149	[BUG]  [BUGGY]  BuilderBuilder.append(fieldValue,  clazz.getRawClass());  [CE]  'finally'  without  'try'  [FE]                        AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  BuilderBuilder.append(fieldValue,  clazz.getRawClass());  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	BuilderBuilder.append(fieldValue,  clazz.getRawClass());	  BuilderBuilder.append(fieldValue,    clazz.getDeclaredFields());    	non-compiled	[CE]  'finally'  without  'try'	35	None	replace
150	[BUG]  [BUGGY]  BuilderBuilder.append(fieldValue,  clazz.getReturnType());  [CE]  'finally'  without  'try'  [FE]                          AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  BuilderBuilder.append(fieldValue,  clazz.getReturnType());  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	BuilderBuilder.append(fieldValue,  clazz.getReturnType());	  BuilderBuilder.append(fieldValue,    clazz.getDeclaredFields());    	non-compiled	[CE]  'finally'  without  'try'	35	None	replace
151	[BUG]  [BUGGY]  if(fieldValue!=  null  ||  fieldValue.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue!=  null  ||  fieldValue.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null  ||  fieldValue.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldValue    ==    null    ||    fieldValue.getName().indexOf('$')    ==    -1)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	44	None	replace
152	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  fieldValue.getClass().indexOf('$')  ==  -1)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'finally'  without  'try'  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null  ||  fieldValue.getClass().indexOf('$')  ==  -1)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  fieldValue.getClass().indexOf('$')  ==  -1)  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldValue    ==    null    ||    fieldValue.getName().indexOf('$')    ==    -1)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	44	None	replace
153	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fieldValue.size();  i++)  {  builder.append( "[ ");  }  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fieldValue.size();  i++)  {  builder.append( "[ ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fieldValue.size();  i++)  {  builder.append( "[ ");  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.size();    i++)    {    builder.append(   "[   ");    }    	non-compiled	[CE]  'finally'  without  'try'	90	None	replace
154	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  fieldValue.size();  i++)  {  builder.append( "[ ");  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  For(int  i  =  0;  i  <  fieldValue.size();  i++)  {  builder.append( "[ ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	For(int  i  =  0;  i  <  fieldValue.size();  i++)  {  builder.append( "[ ");  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.size();    i++)    {    builder.append(   "[   ");    }    	non-compiled	[CE]  	90	None	replace
155	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fieldValue.size();  i++)  {  builder.append( ".[ ");  }  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fieldValue.size();  i++)  {  builder.append( ".[ ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fieldValue.size();  i++)  {  builder.append( ".[ ");  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.size();    i++)    {    builder.append(   "[   ");    }    	non-compiled	[CE]  'finally'  without  'try'	90	None	replace
156	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append( "[ ");  }  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append( "[ ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append( "[ ");  }	  if(fieldValue    ==    null)    {    for(int    i    =    0;    i    <    fields.length;    i++)    {    builder.append(   "[   ");    }    	non-compiled	[CE]  'finally'  without  'try'	76	None	replace
157	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append( ".[ ");  }  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append( ".[ ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append( ".[ ");  }	  if(fieldValue    ==    null)    {    for(int    i    =    0;    i    <    fields.length;    i++)    {    builder.append(   "[   ");    }    	non-compiled	[CE]  'finally'  without  'try'	76	None	replace
158	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  fieldValue.length()  ==  0)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('n');  }  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null  ||  fieldValue.length()  ==  0)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('n');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  fieldValue.length()  ==  0)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('n');  }	  if(fieldValue!=    null    ||    fieldValue.length()    ==    0)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    builder.append('n');    }    	non-compiled	[CE]  'finally'  without  'try'	24	None	replace
159	[BUG]  [BUGGY]  ||(fieldValue!=  null  &&  fieldValue.equals(object)))  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  ||(fieldValue!=  null  &&  fieldValue.equals(object)))  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	||(fieldValue!=  null  &&  fieldValue.equals(object)))  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  if(fieldValue    ==    null)    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
160	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  if(field.getName().indexOf('$')  >=  -1)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue!=  null)  {  if(field.getName().indexOf('$')  >=  -1)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null)  {  if(field.getName().indexOf('$')  >=  -1)  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldValue    ==    null)    {    if(field.getName().indexOf('$')    >=    -1)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	69	None	replace
161	[BUG]  [BUGGY]  ||(fieldValue  ==  null  &&  fieldValue.equals(object)))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  ||(fieldValue  ==  null  &&  fieldValue.equals(object)))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	||(fieldValue  ==  null  &&  fieldValue.equals(object)))  {  throw  new  IllegalStateException( " ");  }	  if(fieldValue    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
162	[BUG]  [BUGGY]  ||(fieldValue!=  null  &&  fieldValue.equals( " ")))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  ||(fieldValue!=  null  &&  fieldValue.equals( " ")))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	||(fieldValue!=  null  &&  fieldValue.equals( " ")))  {  throw  new  IllegalStateException( " ");  }	  if(fieldValue    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
163	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  field.getName().indexOf('$')!=  -1)  {  return;  }  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null  ||  field.getName().indexOf('$')!=  -1)  {  return;  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  field.getName().indexOf('$')!=  -1)  {  return;  }	  if(fieldValue    ==    null)    {    if(field.getName().indexOf('$')!=    -1)    {    return;    }    	non-compiled	[CE]  'finally'  without  'try'	67	None	replace
164	[BUG]  [BUGGY]  throw  new  InternalError( "Unexpected  field  value  ' "  +  fieldValue  + "'  with  'try'. ");  [CE]  'finally'  without  'try'  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  throw  new  InternalError( "Unexpected  field  value  ' "  +  fieldValue  + "'  with  'try'. ");  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  InternalError( "Unexpected  field  value  ' "  +  fieldValue  + "'  with  'try'. ");	  throw    new    InternalError(   "Unexpected    field    value    '   "    +    fieldValue    +   "'    without    'try'.   ");    	non-compiled	[CE]  'finally'  without  'try'	20	None	replace
165	[BUG]  [BUGGY]  throw  new  InternalError( "Unexpected  field  value  ' "  +  fieldValue  + "'  without  'try'.  Try  again. ");  [CE]  'finally'  without  'try'  [FE]                      AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  throw  new  InternalError( "Unexpected  field  value  ' "  +  fieldValue  + "'  without  'try'.  Try  again. ");  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  InternalError( "Unexpected  field  value  ' "  +  fieldValue  + "'  without  'try'.  Try  again. ");	  throw    new    InternalError(   "Unexpected    field    value    '   "    +    fieldValue    +   "'    without    'try'.   ");    	non-compiled	[CE]  'finally'  without  'try'	20	None	replace
166	[BUG]  [BUGGY]  throw  new  InternalError( "Unexpected  field  value  ' "  +  fieldValue  + "'  without  'try'.  Try  again! ");  [CE]  'finally'  without  'try'  [FE]                        AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  throw  new  InternalError( "Unexpected  field  value  ' "  +  fieldValue  + "'  without  'try'.  Try  again! ");  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  InternalError( "Unexpected  field  value  ' "  +  fieldValue  + "'  without  'try'.  Try  again! ");	  throw    new    InternalError(   "Unexpected    field    value    '   "    +    fieldValue    +   "'    without    'try'.   ");    	non-compiled	[CE]  'finally'  without  'try'	20	None	replace
167	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclasses();  builder.append(excludeFields);  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  Field[]  fields  =  clazz.getSuperclasses();  builder.append(excludeFields);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Field[]  fields  =  clazz.getSuperclasses();  builder.append(excludeFields);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(excludeFields);    	non-compiled	[CE]  'finally'  without  'try'	65	None	replace
168	[BUG]  [BUGGY]  Builder.append(fieldValue,  clazz.getDeclaredFields(),  excludeFields);  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  Builder.append(fieldValue,  clazz.getDeclaredFields(),  excludeFields);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Builder.append(fieldValue,  clazz.getDeclaredFields(),  excludeFields);	  Builder.append(fieldValue,    clazz.getDeclaredFields());    	non-compiled	[CE]  'finally'  without  'try'	32	None	replace
169	[BUG]  [BUGGY]  Builder.append(fieldValue,  clazz.getName());  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  Builder.append(fieldValue,  clazz.getName());  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Builder.append(fieldValue,  clazz.getName());	  Builder.append(fieldValue,    clazz.getDeclaredFields());    	non-compiled	[CE]  'finally'  without  'try'	32	None	replace
170	[BUG]  [BUGGY]  Builder.append(fieldValue,  clazz.getRawClass());  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  Builder.append(fieldValue,  clazz.getRawClass());  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Builder.append(fieldValue,  clazz.getRawClass());	  Builder.append(fieldValue,    clazz.getDeclaredFields());    	non-compiled	[CE]  'finally'  without  'try'	32	None	replace
171	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append( "[ ");  }  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append( "[ ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append( "[ ");  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fields.length();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	19	None	replace
172	[BUG]  [BUGGY]  if(excludeFields  ==  null  ||  fieldValue.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(excludeFields  ==  null  ||  fieldValue.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(excludeFields  ==  null  ||  fieldValue.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldValue    ==    null    ||    excludeFields.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	78	None	replace
173	[BUG]  [BUGGY]  if(excludeFields!=  null  ||  fieldValue.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'finally'  without  'try'  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(excludeFields!=  null  ||  fieldValue.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(excludeFields!=  null  ||  fieldValue.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldValue    ==    null    ||    excludeFields.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	78	None	replace
174	[BUG]  [BUGGY]  &&(fieldValue  ==  null  ||  field.getName().indexOf('$')  ==  -1))  {  return;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  &&(fieldValue  ==  null  ||  field.getName().indexOf('$')  ==  -1))  {  return;  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	&&(fieldValue  ==  null  ||  field.getName().indexOf('$')  ==  -1))  {  return;  }	  if(fieldValue    ==    null    ||    field.getName().indexOf('$')    ==    -1)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
175	[BUG]  [BUGGY]  &&  fieldValue  ==  null  ||  field.getName().indexOf('$')  ==  -1)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  &&  fieldValue  ==  null  ||  field.getName().indexOf('$')  ==  -1)  {  return;  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	&&  fieldValue  ==  null  ||  field.getName().indexOf('$')  ==  -1)  {  return;  }	  if(fieldValue    ==    null    ||    field.getName().indexOf('$')    ==    -1)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
176	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  throw  new  IllegalStateException( " "));  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null)  {  throw  new  IllegalStateException( " "));  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null)  {  throw  new  IllegalStateException( " "));  }	  if(fieldValue    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	26	None	replace
177	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  throw  new  IllegalStateException( " "));  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue!=  null)  {  throw  new  IllegalStateException( " "));  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null)  {  throw  new  IllegalStateException( " "));  }	  if(fieldValue    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	26	None	replace
178	[BUG]  [BUGGY]  &&(fieldValue  ==  null  ||  field.getName().indexOf('$')  ==  -1))  {  throw  new  IllegalAccessException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  &&(fieldValue  ==  null  ||  field.getName().indexOf('$')  ==  -1))  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	&&(fieldValue  ==  null  ||  field.getName().indexOf('$')  ==  -1))  {  throw  new  IllegalAccessException( " ");  }	  if(fieldValue    ==    null    ||    field.getName().indexOf('$')    ==    -1)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
179	[BUG]  [BUGGY]  &&  fieldValue  ==  null  ||  field.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalAccessException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  &&  fieldValue  ==  null  ||  field.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	&&  fieldValue  ==  null  ||  field.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalAccessException( " ");  }	  if(fieldValue    ==    null    ||    field.getName().indexOf('$')    ==    -1)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
180	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('n',  object);  }  [CE]  'finally'  without  'try'  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('n',  object);  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('n',  object);  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fields.length();    i++)    {    builder.append('n');    }    	non-compiled	[CE]  'finally'  without  'try'	25	None	replace
181	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('N');  }  [CE]  'finally'  without  'try'  [FE]                      AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('N');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('N');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fields.length();    i++)    {    builder.append('n');    }    	non-compiled	[CE]  'finally'  without  'try'	25	None	replace
182	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  fieldValue.getName().indexOf('$')  >=  -1)  {  return;  }  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null  ||  fieldValue.getName().indexOf('$')  >=  -1)  {  return;  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  fieldValue.getName().indexOf('$')  >=  -1)  {  return;  }	  if(fieldValue    ==    null    ||    fieldValue.getName().indexOf('$')    ==    -1)    {    return;    }    	non-compiled	[CE]  'finally'  without  'try'	3	None	replace
183	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  fieldValue.getName().indexOf('$')!=  -1)  {  return;  }  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null  ||  fieldValue.getName().indexOf('$')!=  -1)  {  return;  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  fieldValue.getName().indexOf('$')!=  -1)  {  return;  }	  if(fieldValue    ==    null    ||    fieldValue.getName().indexOf('$')    ==    -1)    {    return;    }    	non-compiled	[CE]  'finally'  without  'try'	3	None	replace
184	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(object,  fieldValue);  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(object,  fieldValue);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Field[]  fields  =  clazz.getFields();  builder.append(object,  fieldValue);	  Field[]    fields    =    clazz.getFields();    builder.append(excludeFields,    fieldValue);    	non-compiled	[CE]  'finally'  without  'try'	58	None	replace
185	[BUG]  [BUGGY]  if(!useTransients  &&  excludeFields.length  >  0)  {  e.printStackTrace();  }  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(!useTransients  &&  excludeFields.length  >  0)  {  e.printStackTrace();  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(!useTransients  &&  excludeFields.length  >  0)  {  e.printStackTrace();  }	  if(!useTransients)    {    e.printStackTrace();    }    	non-compiled	[CE]  'finally'  without  'try'	80	None	replace
186	[BUG]  [BUGGY]  throw  new  InternalError( "Unexpected  field  value  ' "+clazz.getName()  + "'  for  class  ' "+fieldValue  + "': "+e.getMessage());  [CE]  'finally'  without  'try'  [FE]                      AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  throw  new  InternalError( "Unexpected  field  value  ' "+clazz.getName()  + "'  for  class  ' "+fieldValue  + "': "+e.getMessage());  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  InternalError( "Unexpected  field  value  ' "+clazz.getName()  + "'  for  class  ' "+fieldValue  + "': "+e.getMessage());	  throw    new    InternalError(   "Unexpected    field    value    '   "+fieldValue+   "'    for    class    '   "+clazz.getName()    +   "':   "+e.getMessage());    	non-compiled	[CE]  'finally'  without  'try'	21	None	replace
187	[BUG]  [BUGGY]  if(excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  throw  new  IllegalAccessException( " ");  }  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  throw  new  IllegalAccessException( " ");  }	  if(fieldValue    ==    null    ||    excludeFields.length    ==    0)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	81	None	replace
188	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  throw  new  IllegalStateException( " ").getMessage();  }  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null)  {  throw  new  IllegalStateException( " ").getMessage();  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null)  {  throw  new  IllegalStateException( " ").getMessage();  }	  if(fieldValue    ==    null)    {    throw    new    IllegalStateException(   "   ".getMessage());    }    	non-compiled	[CE]  'finally'  without  'try'	28	None	replace
189	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  throw  new  IllegalStateException( " ").getMessage();  }  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue!=  null)  {  throw  new  IllegalStateException( " ").getMessage();  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null)  {  throw  new  IllegalStateException( " ").getMessage();  }	  if(fieldValue    ==    null)    {    throw    new    IllegalStateException(   "   ".getMessage());    }    	non-compiled	[CE]  'finally'  without  'try'	28	None	replace
190	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  throw  new  InternalError( "Unexpected  IllegalAccessException. ");  }  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue!=  null)  {  throw  new  InternalError( "Unexpected  IllegalAccessException. ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null)  {  throw  new  InternalError( "Unexpected  IllegalAccessException. ");  }	  if(fieldValue    ==    null)    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    	non-compiled	[CE]  'finally'  without  'try'	6	None	replace
191	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue,  field);  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue,  field);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue,  field);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fieldValue,    excludeFields);    	non-compiled	[CE]  'finally'  without  'try'	34	None	replace
192	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  throw  new  IllegalArgumentException( " ").getMessage();  }  [CE]  'finally'  without  'try'  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue!=  null)  {  throw  new  IllegalArgumentException( " ").getMessage();  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null)  {  throw  new  IllegalArgumentException( " ").getMessage();  }	  if(fieldValue    ==    null)    {    throw    new    IllegalArgumentException(   "   ".getMessage());    }    	non-compiled	[CE]  'finally'  without  'try'	52	None	replace
193	[BUG]  [BUGGY]  &&(fieldValue  ==  null  ||  field.getName().indexOf('$')  ==  -1))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  &&(fieldValue  ==  null  ||  field.getName().indexOf('$')  ==  -1))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	&&(fieldValue  ==  null  ||  field.getName().indexOf('$')  ==  -1))  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldValue    ==    null    ||    field.getName().indexOf('$')    ==    -1)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
194	[BUG]  [BUGGY]  &&  fieldValue  ==  null  ||  field.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  &&  fieldValue  ==  null  ||  field.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	&&  fieldValue  ==  null  ||  field.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldValue    ==    null    ||    field.getName().indexOf('$')    ==    -1)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
195	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append( "[ ");  }  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append( "[ ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append( "[ ");  }	  if(fieldValue    ==    null)    {    for(int    i    =    0;    i    <    fields.length();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	55	None	replace
196	[BUG]  [BUGGY]  Builder.append('n');  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  Builder.append('n');  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Builder.append('n');	  Builder.append(fieldValue);    	non-compiled	[CE]  'finally'  without  'try'	41	None	replace
197	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append( ", ");  }  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append( ", ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append( ", ");  }	  if(fieldValue    ==    null)    {    for(int    i    =    0;    i    <    fields.length;    i++)    {    builder.append(   ",   ");    }    	non-compiled	[CE]  'finally'  without  'try'	77	None	replace
198	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append(',');  }  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append(',');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append(',');  }	  if(fieldValue    ==    null)    {    for(int    i    =    0;    i    <    fields.length;    i++)    {    builder.append(   ",   ");    }    	non-compiled	[CE]  'finally'  without  'try'	77	None	replace
199	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  if(field.getName().indexOf('$')!=  -1)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue!=  null)  {  if(field.getName().indexOf('$')!=  -1)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null)  {  if(field.getName().indexOf('$')!=  -1)  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldValue    ==    null)    {    if(field.getName().indexOf('$')!=    -1)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	68	None	replace
200	[BUG]  [BUGGY]  if(fieldValue!=  null  &&  fieldValue.length()  ==  0)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('[');  }  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue!=  null  &&  fieldValue.length()  ==  0)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('[');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null  &&  fieldValue.length()  ==  0)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('[');  }	  if(fieldValue!=    null    ||    fieldValue.length()    ==    0)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	18	None	replace
201	[BUG]  [BUGGY]  &&(fieldValue!=  null  ||  fieldValue.getName().indexOf('$')  ==  -1))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  &&(fieldValue!=  null  ||  fieldValue.getName().indexOf('$')  ==  -1))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	&&(fieldValue!=  null  ||  fieldValue.getName().indexOf('$')  ==  -1))  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldValue    ==    null    ||    fieldValue.getName().indexOf('$')    ==    -1)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
202	[BUG]  [BUGGY]  &&  fieldValue.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  &&  fieldValue.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	&&  fieldValue.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldValue    ==    null    ||    fieldValue.getName().indexOf('$')    ==    -1)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
203	[BUG]  [BUGGY]  BuilderBuilder.append(fieldValue,  clazz.getDeclaredFields(),  excludeFields);  [CE]  'finally'  without  'try'  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  BuilderBuilder.append(fieldValue,  clazz.getDeclaredFields(),  excludeFields);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	BuilderBuilder.append(fieldValue,  clazz.getDeclaredFields(),  excludeFields);	  BuilderBuilder.append(fieldValue,    clazz.getDeclaredFields());    	non-compiled	[CE]  'finally'  without  'try'	35	None	replace
204	[BUG]  [BUGGY]  BuilderBuilder.append(fieldValue,  clazz.getName());  [CE]  'finally'  without  'try'  [FE]                      AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  BuilderBuilder.append(fieldValue,  clazz.getName());  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	BuilderBuilder.append(fieldValue,  clazz.getName());	  BuilderBuilder.append(fieldValue,    clazz.getDeclaredFields());    	non-compiled	[CE]  'finally'  without  'try'	35	None	replace
205	[BUG]  [BUGGY]  builder.append(fieldValue,  clazz.getDeclaredFields(),  excludeFields);  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  builder.append(fieldValue,  clazz.getDeclaredFields(),  excludeFields);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	builder.append(fieldValue,  clazz.getDeclaredFields(),  excludeFields);	  builder.append(fieldValue,    clazz.getDeclaredFields());    	non-compiled	[CE]  'finally'  without  'try'	33	None	replace
206	[BUG]  [BUGGY]  builder.append(fieldValue,  clazz.getRawClass());  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  builder.append(fieldValue,  clazz.getRawClass());  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	builder.append(fieldValue,  clazz.getRawClass());	  builder.append(fieldValue,    clazz.getDeclaredFields());    	non-compiled	[CE]  'finally'  without  'try'	33	None	replace
207	[BUG]  [BUGGY]  &&  fieldValue  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  &&  fieldValue  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	&&  fieldValue  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  ||    fieldValue    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
208	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.size();  i++)  {  builder.append( "[ ");  }  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.size();  i++)  {  builder.append( "[ ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.size();  i++)  {  builder.append( "[ ");  }	  if(fieldValue    ==    null)    {    for(int    i    =    0;    i    <    fields.size();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	70	None	replace
209	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.size();  i++)  {  builder.append('[',  object);  }  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.size();  i++)  {  builder.append('[',  object);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.size();  i++)  {  builder.append('[',  object);  }	  if(fieldValue    ==    null)    {    for(int    i    =    0;    i    <    fields.size();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	70	None	replace
210	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(fieldValue,  excludeFields[fieldValue]);  [CE]  'finally'  without  'try'  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(fieldValue,  excludeFields[fieldValue]);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Field[]  fields  =  clazz.getFields();  builder.append(fieldValue,  excludeFields[fieldValue]);	  Field[]    fields    =    clazz.getFields();    builder.append(excludeFields[fieldValue]);    	non-compiled	[CE]  'finally'  without  'try'	50	None	replace
211	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue,  excludeFields[fieldValue].toString());  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue,  excludeFields[fieldValue].toString());  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue,  excludeFields[fieldValue].toString());	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(excludeFields[fieldValue].toString());    	non-compiled	[CE]  'finally'  without  'try'	40	None	replace
212	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(object,  fieldValue);  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(object,  fieldValue);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(object,  fieldValue);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(excludeFields,    fieldValue);    	non-compiled	[CE]  'finally'  without  'try'	54	None	replace
213	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  fieldValue.isEmpty())  {  for(int  i  =  0;  i  <  fieldValue.size();  i++)  {  builder.append('[');  }  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null  ||  fieldValue.isEmpty())  {  for(int  i  =  0;  i  <  fieldValue.size();  i++)  {  builder.append('[');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  fieldValue.isEmpty())  {  for(int  i  =  0;  i  <  fieldValue.size();  i++)  {  builder.append('[');  }	  if(fieldValue!=    null    &&    fieldValue.isEmpty())    {    for(int    i    =    0;    i    <    fieldValue.size();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	89	None	replace
214	[BUG]  [BUGGY]  if(fieldValue!=  null  &&  fieldValue.length()  >  0)  {  for(int  i  =  0;  i  <  fieldValue.size();  i++)  {  builder.append('[');  }  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue!=  null  &&  fieldValue.length()  >  0)  {  for(int  i  =  0;  i  <  fieldValue.size();  i++)  {  builder.append('[');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null  &&  fieldValue.length()  >  0)  {  for(int  i  =  0;  i  <  fieldValue.size();  i++)  {  builder.append('[');  }	  if(fieldValue!=    null    &&    fieldValue.isEmpty())    {    for(int    i    =    0;    i    <    fieldValue.size();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	89	None	replace
215	[BUG]  [BUGGY]  &&(fieldValue  ==  null  ||  fieldValue.getName().indexOf('$')  ==  -1))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  &&(fieldValue  ==  null  ||  fieldValue.getName().indexOf('$')  ==  -1))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	&&(fieldValue  ==  null  ||  fieldValue.getName().indexOf('$')  ==  -1))  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldValue!=    null)    {    if(field.getName().indexOf('$')    ==    -1)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
216	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  if(field.getName().indexOf('$')!=  -1)  {  throw  new  IllegalAccessException( " ");  }  [CE]  'finally'  without  'try'  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue!=  null)  {  if(field.getName().indexOf('$')!=  -1)  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null)  {  if(field.getName().indexOf('$')!=  -1)  {  throw  new  IllegalAccessException( " ");  }	  if(fieldValue    ==    null)    {    if(field.getName().indexOf('$')!=    -1)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	31	None	replace
217	[BUG]  [BUGGY]  ||(fieldValue!=  null  &&  fieldValue.getClass().isAssignableFrom(fieldValue.getClass())))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  ||(fieldValue!=  null  &&  fieldValue.getClass().isAssignableFrom(fieldValue.getClass())))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	||(fieldValue!=  null  &&  fieldValue.getClass().isAssignableFrom(fieldValue.getClass())))  {  throw  new  IllegalArgumentException( " ");  }	  ||(fieldValue    ==    null    &&    fieldValue.getClass().isArray()))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
218	[BUG]  [BUGGY]  &&(fieldValue!=  null  ||  fieldValue.getName().indexOf('$')  ==  -1))  {  throw  new  IllegalAccessException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  &&(fieldValue!=  null  ||  fieldValue.getName().indexOf('$')  ==  -1))  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	&&(fieldValue!=  null  ||  fieldValue.getName().indexOf('$')  ==  -1))  {  throw  new  IllegalAccessException( " ");  }	  if(fieldValue    ==    null    ||    fieldValue.getName().indexOf('$')    ==    -1)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
219	[BUG]  [BUGGY]  &&(fieldValue  ==  null  ||  fieldValue.getName().indexOf('$')  ==  -1))  {  throw  new  IllegalAccessException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  &&(fieldValue  ==  null  ||  fieldValue.getName().indexOf('$')  ==  -1))  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	&&(fieldValue  ==  null  ||  fieldValue.getName().indexOf('$')  ==  -1))  {  throw  new  IllegalAccessException( " ");  }	  if(fieldValue    ==    null    ||    fieldValue.getName().indexOf('$')    ==    -1)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
220	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  field.length;  i++)  {  builder.append( "[ ");  }  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  field.length;  i++)  {  builder.append( "[ ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  field.length;  i++)  {  builder.append( "[ ");  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    field.length;    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	12	None	replace
221	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  if(field.getName().indexOf('$')  >=  -1)  {  return;  }  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue!=  null)  {  if(field.getName().indexOf('$')  >=  -1)  {  return;  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null)  {  if(field.getName().indexOf('$')  >=  -1)  {  return;  }	  if(fieldValue    ==    null)    {    if(field.getName().indexOf('$')    >=    -1)    {    return;    }    	non-compiled	[CE]  'finally'  without  'try'	73	None	replace
222	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null)  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null)  {  throw  new  IllegalArgumentException( " "));  }	  if(fieldValue!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	51	None	replace
223	[BUG]  [BUGGY]  throw  new  InternalError(e.getMessage(),  iTotal);  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  throw  new  InternalError(e.getMessage(),  iTotal);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  InternalError(e.getMessage(),  iTotal);	  throw    new    InternalError(e.getMessage());    	non-compiled	[CE]  'finally'  without  'try'	53	None	replace
224	[BUG]  [BUGGY]  throw  new  InternalError(e.getMessage(),  clazz);  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  throw  new  InternalError(e.getMessage(),  clazz);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  InternalError(e.getMessage(),  clazz);	  throw    new    InternalError(e.getMessage());    	non-compiled	[CE]  'finally'  without  'try'	53	None	replace
225	[BUG]  [BUGGY]  throw  new  InternalError( "Unexpected  IllegalAccessException ",  e.getMessage());  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  throw  new  InternalError( "Unexpected  IllegalAccessException ",  e.getMessage());  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  InternalError( "Unexpected  IllegalAccessException ",  e.getMessage());	  throw    new    InternalError(   "Unexpected    IllegalAccessException   ",    e);    	non-compiled	[CE]  'finally'  without  'try'	4	None	replace
226	[BUG]  [BUGGY]  throw  new  InternalError(e,   "Unexpected  IllegalAccessException ",  e);  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  throw  new  InternalError(e,   "Unexpected  IllegalAccessException ",  e);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  InternalError(e,   "Unexpected  IllegalAccessException ",  e);	  throw    new    InternalError(e,   "Unexpected    IllegalAccessException   ");    	non-compiled	[CE]  'finally'  without  'try'	72	None	replace
227	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  object.size();  i++)  {  builder.append('[');  }  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  object.size();  i++)  {  builder.append('[');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  object.size();  i++)  {  builder.append('[');  }	  if(fieldValue    ==    null)    {    for(int    i    =    0;    i    <    fieldValue.size();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	45	None	replace
228	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  field.length;  i++)  {  builder.append( "[ ");  }  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  field.length;  i++)  {  builder.append( "[ ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  field.length;  i++)  {  builder.append( "[ ");  }	  if(fieldValue    ==    null)    {    for(int    i    =    0;    i    <    field.length;    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	13	None	replace
229	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(fieldValue,  object);  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(fieldValue,  object);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Field[]  fields  =  clazz.getFields();  builder.append(fieldValue,  object);	  Field[]    fields    =    clazz.getFields();    builder.append(fieldValue,    excludeFields);    	non-compiled	[CE]  'finally'  without  'try'	48	None	replace
230	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(fieldValue,  field);  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(fieldValue,  field);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Field[]  fields  =  clazz.getFields();  builder.append(fieldValue,  field);	  Field[]    fields    =    clazz.getFields();    builder.append(fieldValue,    excludeFields);    	non-compiled	[CE]  'finally'  without  'try'	48	None	replace
231	[BUG]  [BUGGY]  ||(fieldValue!=  null  &&  object.equals(fieldValue)))  {  throw  new  IllegalAccessException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  ||(fieldValue!=  null  &&  object.equals(fieldValue)))  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	||(fieldValue!=  null  &&  object.equals(fieldValue)))  {  throw  new  IllegalAccessException( " ");  }	  ||(fieldValue    ==    null    &&    fieldValue.equals(object)))    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
232	[BUG]  [BUGGY]  ||(object  ==  null  &&  fieldValue.equals(object)))  {  throw  new  IllegalAccessException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  ||(object  ==  null  &&  fieldValue.equals(object)))  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	||(object  ==  null  &&  fieldValue.equals(object)))  {  throw  new  IllegalAccessException( " ");  }	  ||(fieldValue    ==    null    &&    fieldValue.equals(object)))    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
233	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  e.printStackTrace();  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue!=  null)  {  e.printStackTrace();  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null)  {  e.printStackTrace();  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  if(fieldValue    ==    null)    {    e.printStackTrace();    }    else    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    	non-compiled	[CE]  'finally'  without  'try'	10	None	replace
234	[BUG]  [BUGGY]  throw  new  InternalError( "Unexpected  IllegalAccessException: ",  e.getMessage());  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  throw  new  InternalError( "Unexpected  IllegalAccessException: ",  e.getMessage());  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  InternalError( "Unexpected  IllegalAccessException: ",  e.getMessage());	  throw    new    InternalError(   "Unexpected    IllegalAccessException:   "    +    e.getMessage());    	non-compiled	[CE]  'finally'  without  'try'	5	None	replace
235	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludedFields,  fieldValue);  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludedFields,  fieldValue);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludedFields,  fieldValue);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fieldValue,    excludedFields);    	non-compiled	[CE]  'finally'  without  'try'	88	None	replace
236	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  fieldValue.length()!=  0)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('n');  }  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null  ||  fieldValue.length()!=  0)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('n');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  fieldValue.length()!=  0)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('n');  }	  if(fieldValue!=    null    ||    fieldValue.length()    ==    0)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    builder.append('n');    }    	non-compiled	[CE]  'finally'  without  'try'	24	None	replace
237	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  fieldValue.getClass()!=  null)  {  if(field.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalAccessException( " ");  }  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null  ||  fieldValue.getClass()!=  null)  {  if(field.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  fieldValue.getClass()!=  null)  {  if(field.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalAccessException( " ");  }	  if(fieldValue!=    null)    {    if(field.getName().indexOf('$')    ==    -1)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	29	None	replace
238	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  field.size();  i++)  {  builder.append( "[ ");  }  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  field.size();  i++)  {  builder.append( "[ ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  field.size();  i++)  {  builder.append( "[ ");  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    field.size();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	47	None	replace
239	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  field.size();  i++)  {  builder.append( ", ");  }  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  field.size();  i++)  {  builder.append( ", ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  field.size();  i++)  {  builder.append( ", ");  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    field.size();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	47	None	replace
240	[BUG]  [BUGGY]  if(excludeFields!=  null  ||  excludeFields.length  ==  0)  {  throw  new  IllegalAccessException( " ");  }  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(excludeFields!=  null  ||  excludeFields.length  ==  0)  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(excludeFields!=  null  ||  excludeFields.length  ==  0)  {  throw  new  IllegalAccessException( " ");  }	  if(fieldValue    ==    null    ||    excludeFields.length    ==    0)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	81	None	replace
241	[BUG]  [BUGGY]  if(fieldValue!=  null  &&  fieldValue.isEmpty())  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('n');  }  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue!=  null  &&  fieldValue.isEmpty())  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('n');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null  &&  fieldValue.isEmpty())  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('n');  }	  if(fieldValue!=    null    &&    fieldValue.length()    >    0)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    builder.append('n');    }    	non-compiled	[CE]  'finally'  without  'try'	85	None	replace
242	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  excludeFields.length  ==  0)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('[');  }  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null  ||  excludeFields.length  ==  0)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('[');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  excludeFields.length  ==  0)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('[');  }	  if(fieldValue    ==    null)    {    for(int    i    =    0;    i    <    fields.length();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	55	None	replace
243	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  excludeFields.length!=  0)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('[');  }  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null  ||  excludeFields.length!=  0)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('[');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  excludeFields.length!=  0)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('[');  }	  if(fieldValue    ==    null)    {    for(int    i    =    0;    i    <    fields.length();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	55	None	replace
244	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  [CE]  'finally'  without  'try'  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  IllegalArgumentException( " ");	  if(fieldValue    ==    null)    {    throw    new    IllegalArgumentException(   "   ".getMessage());    }    	non-compiled	[CE]  'finally'  without  'try'	52	None	replace
245	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( " ")));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  aught(new  IllegalArgumentException( " ")));  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	aught(new  IllegalArgumentException( " ")));	  if(fieldValue    ==    null)    {    throw    new    IllegalArgumentException(   "   ".getMessage());    }    	non-compiled	[CE]  	52	None	replace
246	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  excludeFields.length  ==  0)  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null  ||  excludeFields.length  ==  0)  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  excludeFields.length  ==  0)  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  if(fieldValue    ==    null)    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    	non-compiled	[CE]  'finally'  without  'try'	6	None	replace
247	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  excludeFields.contains(fieldValue))  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null  ||  excludeFields.contains(fieldValue))  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  excludeFields.contains(fieldValue))  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  if(fieldValue    ==    null)    {    throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    }    	non-compiled	[CE]  'finally'  without  'try'	6	None	replace
248	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(field);  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(field);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(field);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(excludeFields);    	non-compiled	[CE]  'finally'  without  'try'	65	None	replace
249	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  fieldValue.size()  ==  0)  {  for(int  i  =  0;  i  <  fieldValue.size();  i++)  {  builder.append('[');  }  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null  ||  fieldValue.size()  ==  0)  {  for(int  i  =  0;  i  <  fieldValue.size();  i++)  {  builder.append('[');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  fieldValue.size()  ==  0)  {  for(int  i  =  0;  i  <  fieldValue.size();  i++)  {  builder.append('[');  }	  if(fieldValue    ==    null)    {    for(int    i    =    0;    i    <    fieldValue.size();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	45	None	replace
250	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  field.getName().indexOf('$')  >=  -1)  {  throw  new  IllegalAccessException( " ");  }  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null  ||  field.getName().indexOf('$')  >=  -1)  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  field.getName().indexOf('$')  >=  -1)  {  throw  new  IllegalAccessException( " ");  }	  if(fieldValue    ==    null)    {    if(field.getName().indexOf('$')    >=    -1)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	61	None	replace
251	[BUG]  [BUGGY]  if(excludeFields!=  null  ||  excludeFields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(excludeFields!=  null  ||  excludeFields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(excludeFields!=  null  ||  excludeFields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldValue    ==    null    ||    excludeFields.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	78	None	replace
252	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue,  fieldValue);  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue,  fieldValue);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue,  fieldValue);	  Field[]    fields    =    clazz.getFields();    builder.append(fieldValue,    excludeFields);    	non-compiled	[CE]  'finally'  without  'try'	48	None	replace
253	[BUG]  [BUGGY]  ||(fieldValue!=  null  &&  field.getName().indexOf('$')  ==  -1))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  ||(fieldValue!=  null  &&  field.getName().indexOf('$')  ==  -1))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	||(fieldValue!=  null  &&  field.getName().indexOf('$')  ==  -1))  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldValue!=    null)    {    if(field.getName().indexOf('$')    ==    -1)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
254	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  excludeFields.length  ==  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null  ||  excludeFields.length  ==  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  excludeFields.length  ==  0)  {  throw  new  IllegalStateException( " ");  }	  if(fieldValue    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	26	None	replace
255	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  excludeFields.contains(fieldValue))  {  throw  new  IllegalStateException( " ");  }  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null  ||  excludeFields.contains(fieldValue))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  excludeFields.contains(fieldValue))  {  throw  new  IllegalStateException( " ");  }	  if(fieldValue    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	26	None	replace
256	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  excludeFields.length  ==  0)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('[');  }  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null  ||  excludeFields.length  ==  0)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('[');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  excludeFields.length  ==  0)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('[');  }	  if(fieldValue    ==    null)    {    for(int    i    =    0;    i    <    fields.length;    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	11	None	replace
257	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  excludeFields.length!=  0)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('[');  }  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null  ||  excludeFields.length!=  0)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('[');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  excludeFields.length!=  0)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('[');  }	  if(fieldValue    ==    null)    {    for(int    i    =    0;    i    <    fields.length;    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	11	None	replace
258	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(objectValue,  excludeFields[fieldValue]);  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(objectValue,  excludeFields[fieldValue]);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(objectValue,  excludeFields[fieldValue]);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(excludeFields[fieldValue]);    	non-compiled	[CE]  'finally'  without  'try'	39	None	replace
259	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  excludeFields.contains(fieldValue))  {  e.printStackTrace();  }  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null  ||  excludeFields.contains(fieldValue))  {  e.printStackTrace();  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  excludeFields.contains(fieldValue))  {  e.printStackTrace();  }	  if(fieldValue    ==    null)    {    e.printStackTrace();    }    	non-compiled	[CE]  'finally'  without  'try'	8	None	replace
260	[BUG]  [BUGGY]  aught(new  IllegalStateException( " ")));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  aught(new  IllegalStateException( " ")));  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	aught(new  IllegalStateException( " ")));	  if(fieldValue!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	27	None	replace
261	[BUG]  [BUGGY]  aught(new  IllegalStateException( " ")).initCause(e);  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  aught(new  IllegalStateException( " ")).initCause(e);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	aught(new  IllegalStateException( " ")).initCause(e);	  if(fieldValue!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	27	None	replace
262	[BUG]  [BUGGY]  if(fieldValue!=  null  &&  fieldValue.isEmpty())  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('[');  }  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue!=  null  &&  fieldValue.isEmpty())  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('[');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null  &&  fieldValue.isEmpty())  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('[');  }	  if(fieldValue!=    null    &&    fieldValue.length()    >    0)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	86	None	replace
263	[BUG]  [BUGGY]  ||  clazz  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  ||  clazz  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	||  clazz  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  ||    fieldValue    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
264	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  field.getName().indexOf('$')  >=  -1)  {  return;  }  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null  ||  field.getName().indexOf('$')  >=  -1)  {  return;  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  field.getName().indexOf('$')  >=  -1)  {  return;  }	  if(fieldValue    ==    null)    {    if(field.getName().indexOf('$')    >=    -1)    {    return;    }    	non-compiled	[CE]  'finally'  without  'try'	73	None	replace
265	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  fieldValue.getName().indexOf('$')  >=  -1)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null  ||  fieldValue.getName().indexOf('$')  >=  -1)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  fieldValue.getName().indexOf('$')  >=  -1)  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldValue    ==    null    ||    fieldValue.getName().indexOf('$')    ==    -1)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	44	None	replace
266	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  fieldValue.getName().indexOf('$')!=  -1)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'finally'  without  'try'  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null  ||  fieldValue.getName().indexOf('$')!=  -1)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  fieldValue.getName().indexOf('$')!=  -1)  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldValue    ==    null    ||    fieldValue.getName().indexOf('$')    ==    -1)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	44	None	replace
267	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( " ")).initCause(e);  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  aught(new  IllegalArgumentException( " ")).initCause(e);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	aught(new  IllegalArgumentException( " ")).initCause(e);	  if(fieldValue!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	51	None	replace
268	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  field.getName().indexOf('$')  >=  -1)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null  ||  field.getName().indexOf('$')  >=  -1)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  field.getName().indexOf('$')  >=  -1)  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldValue    ==    null    ||    field.getName().indexOf('$')    ==    -1)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	43	None	replace
269	[BUG]  [BUGGY]  if(fieldValue!=  null  &&  fieldValue.isEmpty())  {  for(int  i  =  0;  i  <  fieldValue.size();  i++)  {  builder.append( "[');  }  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue!=  null  &&  fieldValue.isEmpty())  {  for(int  i  =  0;  i  <  fieldValue.size();  i++)  {  builder.append( "[');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null  &&  fieldValue.isEmpty())  {  for(int  i  =  0;  i  <  fieldValue.size();  i++)  {  builder.append( "[');  }	  if(fieldValue!=    null    &&    fieldValue.isEmpty())    {    for(int    i    =    0;    i    <    fieldValue.size();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  unclosed  string  literal	89	None	replace
270	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  if(field.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalStateException( " ");  }  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null)  {  if(field.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null)  {  if(field.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalStateException( " ");  }	  if(fieldValue!=    null)    {    if(field.getName().indexOf('$')    ==    -1)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	29	None	replace
271	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  excludeFields.contains(fieldValue))  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('n');  }  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null  ||  excludeFields.contains(fieldValue))  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('n');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  excludeFields.contains(fieldValue))  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('n');  }	  if(fieldValue    ==    null)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    builder.append('n');    }    	non-compiled	[CE]  'finally'  without  'try'	23	None	replace
272	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  object.length;  i++)  {  builder.append('[');  }  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  object.length;  i++)  {  builder.append('[');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  object.length;  i++)  {  builder.append('[');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    field.length;    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	12	None	replace
273	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  excludeFields.length  ==  0)  {  for(int  i  =  0;  i  <  fields.size();  i++)  {  builder.append('[');  }  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null  ||  excludeFields.length  ==  0)  {  for(int  i  =  0;  i  <  fields.size();  i++)  {  builder.append('[');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  excludeFields.length  ==  0)  {  for(int  i  =  0;  i  <  fields.size();  i++)  {  builder.append('[');  }	  if(fieldValue    ==    null)    {    for(int    i    =    0;    i    <    fields.size();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	70	None	replace
274	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  excludeFields.contains(field))  {  for(int  i  =  0;  i  <  fields.size();  i++)  {  builder.append('[');  }  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null  ||  excludeFields.contains(field))  {  for(int  i  =  0;  i  <  fields.size();  i++)  {  builder.append('[');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  excludeFields.contains(field))  {  for(int  i  =  0;  i  <  fields.size();  i++)  {  builder.append('[');  }	  if(fieldValue    ==    null)    {    for(int    i    =    0;    i    <    fields.size();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	70	None	replace
275	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  builder.append('n');  }  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  builder.append('n');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  builder.append('n');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    object.length();    i++)    {    builder.append('n');    }    	non-compiled	[CE]  'finally'  without  'try'	59	None	replace
276	[BUG]  [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  objects.length();  i++)  {  builder.append('n');  }  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  objects.length();  i++)  {  builder.append('n');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(object!=  null)  {  for(int  i  =  0;  i  <  objects.length();  i++)  {  builder.append('n');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    object.length();    i++)    {    builder.append('n');    }    	non-compiled	[CE]  'finally'  without  'try'	59	None	replace
277	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  excludeFields.length  ==  0)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('n');  }  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null  ||  excludeFields.length  ==  0)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('n');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  excludeFields.length  ==  0)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('n');  }	  if(fieldValue    ==    null)    {    for(int    i    =    0;    i    <    fields.length();    i++)    {    builder.append('n');    }    	non-compiled	[CE]  'finally'  without  'try'	60	None	replace
278	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  excludeFields.length!=  0)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('n');  }  [CE]  'finally'  without  'try'  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null  ||  excludeFields.length!=  0)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('n');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  excludeFields.length!=  0)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('n');  }	  if(fieldValue    ==    null)    {    for(int    i    =    0;    i    <    fields.length();    i++)    {    builder.append('n');    }    	non-compiled	[CE]  'finally'  without  'try'	60	None	replace
279	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append( "[ ");  }  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append( "[ ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append( "[ ");  }	  if(fieldValue    ==    null)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	17	None	replace
280	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  if(field.getName().indexOf('$')!=  -1)  {  return;  }  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue!=  null)  {  if(field.getName().indexOf('$')!=  -1)  {  return;  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null)  {  if(field.getName().indexOf('$')!=  -1)  {  return;  }	  if(fieldValue    ==    null)    {    if(field.getName().indexOf('$')!=    -1)    {    return;    }    	non-compiled	[CE]  'finally'  without  'try'	67	None	replace
281	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  field.length()  ==  0)  {  for(int  i  =  0;  i  <  field.length;  i++)  {  builder.append('[');  }  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null  ||  field.length()  ==  0)  {  for(int  i  =  0;  i  <  field.length;  i++)  {  builder.append('[');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  field.length()  ==  0)  {  for(int  i  =  0;  i  <  field.length;  i++)  {  builder.append('[');  }	  if(fieldValue    ==    null)    {    for(int    i    =    0;    i    <    field.length;    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	13	None	replace
282	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  object.length;  i++)  {  builder.append('[');  }  [CE]  'finally'  without  'try'  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  object.length;  i++)  {  builder.append('[');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  object.length;  i++)  {  builder.append('[');  }	  if(fieldValue    ==    null)    {    for(int    i    =    0;    i    <    field.length;    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	13	None	replace
283	[BUG]  [BUGGY]  if(fieldValue!=  null  &&  fieldValue.length()  ==  0)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('n');  }  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue!=  null  &&  fieldValue.length()  ==  0)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('n');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null  &&  fieldValue.length()  ==  0)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('n');  }	  if(fieldValue!=    null    ||    fieldValue.length()    ==    0)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    builder.append('n');    }    	non-compiled	[CE]  'finally'  without  'try'	24	None	replace
284	[BUG]  [BUGGY]  throw  new  InternalError( "Unexpected  field  value  ' "  +  field.getName()  + "'  without  'try' ");  [CE]  'finally'  without  'try'  [FE]                      AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  throw  new  InternalError( "Unexpected  field  value  ' "  +  field.getName()  + "'  without  'try' ");  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  InternalError( "Unexpected  field  value  ' "  +  field.getName()  + "'  without  'try' ");	  throw    new    InternalError(   "Unexpected    field    value    '   "    +    object.getClass().getName()    +   "'    without    'try'   ");    	non-compiled	[CE]  'finally'  without  'try'	63	None	replace
285	[BUG]  [BUGGY]  if(excludeFields!=  null  ||  excludeFields.contains(fieldValue))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'finally'  without  'try'  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(excludeFields!=  null  ||  excludeFields.contains(fieldValue))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(excludeFields!=  null  ||  excludeFields.contains(fieldValue))  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldValue    ==    null    ||    excludeFields.contains(fieldValue))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	79	None	replace
286	[BUG]  [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  builder.append( "[ ");  }  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  builder.append( "[ ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(object!=  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  builder.append( "[ ");  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    object.length();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	56	None	replace
287	[BUG]  [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  builder.append( ", ");  }  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  builder.append( ", ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(object!=  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  builder.append( ", ");  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    object.length();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	56	None	replace
288	[BUG]  [BUGGY]  throw  new  InternalError(e, "Unexpected  IllegalAccessException: ");  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  throw  new  InternalError(e, "Unexpected  IllegalAccessException: ");  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  InternalError(e, "Unexpected  IllegalAccessException: ");	  throw    new    InternalError(   "Unexpected    IllegalAccessException:   ");    	non-compiled	[CE]  'finally'  without  'try'	7	None	replace
289	[BUG]  [BUGGY]  if(excludeFields!=  null  ||  excludeFields.contains(fieldValue))  {  throw  new  IllegalAccessException( " ");  }  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(excludeFields!=  null  ||  excludeFields.contains(fieldValue))  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(excludeFields!=  null  ||  excludeFields.contains(fieldValue))  {  throw  new  IllegalAccessException( " ");  }	  if(fieldValue    ==    null    ||    excludeFields.contains(fieldValue))    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	82	None	replace
290	[BUG]  [BUGGY]  e.printStackTrace(field);  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  e.printStackTrace(field);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	e.printStackTrace(field);	  e.printStackTrace(builder);    	non-compiled	[CE]  'finally'  without  'try'	64	None	replace
291	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  if(field.getName().indexOf('$')  ==  -1)  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null)  {  if(field.getName().indexOf('$')  ==  -1)  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null)  {  if(field.getName().indexOf('$')  ==  -1)  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  if(fieldValue!=    null)    {    if(field.getName().indexOf('$')    ==    -1)    {    return;    }    	non-compiled	[CE]  'finally'  without  'try'	1	None	replace
292	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fields.size();  i++)  {  builder.append( "[ ");  }  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fields.size();  i++)  {  builder.append( "[ ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fields.size();  i++)  {  builder.append( "[ ");  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fields.size();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	46	None	replace
293	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fields.size();  i++)  {  builder.append( ", ");  }  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fields.size();  i++)  {  builder.append( ", ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fields.size();  i++)  {  builder.append( ", ");  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fields.size();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	46	None	replace
294	[BUG]  [BUGGY]  Builder.append(object,  builder);  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  Builder.append(object,  builder);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Builder.append(object,  builder);	  Builder.append(fieldValue);    	non-compiled	[CE]  'finally'  without  'try'	41	None	replace
295	[BUG]  [BUGGY]  Builder.append(object,  e);  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  Builder.append(object,  e);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Builder.append(object,  e);	  Builder.append(fieldValue);    	non-compiled	[CE]  'finally'  without  'try'	41	None	replace
296	[BUG]  [BUGGY]  ||(fieldValue!=  null  &&  fieldValue.equals( " ")))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  ||(fieldValue!=  null  &&  fieldValue.equals( " ")))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	||(fieldValue!=  null  &&  fieldValue.equals( " ")))  {  throw  new  IllegalArgumentException( " ");  }	  ||(fieldValue!=    null    &&    fieldValue.equals(object)))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
297	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue,  objects);  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue,  objects);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue,  objects);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fieldValue,    excludeFields);    	non-compiled	[CE]  'finally'  without  'try'	34	None	replace
298	[BUG]  [BUGGY]  Builder.append(fieldValue,  clazz.getSuperclass());  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  Builder.append(fieldValue,  clazz.getSuperclass());  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Builder.append(fieldValue,  clazz.getSuperclass());	  Builder.append(fieldValue,    clazz.getDeclaredFields());    	non-compiled	[CE]  'finally'  without  'try'	32	None	replace
299	[BUG]  [BUGGY]  ||(fieldValue  ==  null  &&  fieldValue.getClass().isAssignableFrom(fieldValue.getClass())))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  ||(fieldValue  ==  null  &&  fieldValue.getClass().isAssignableFrom(fieldValue.getClass())))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	||(fieldValue  ==  null  &&  fieldValue.getClass().isAssignableFrom(fieldValue.getClass())))  {  throw  new  IllegalArgumentException( " ");  }	  ||(fieldValue    ==    null    &&    fieldValue.getClass().isArray()))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
300	[BUG]  [BUGGY]  throw  new  InternalError(e.toString());  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  throw  new  InternalError(e.toString());  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  InternalError(e.toString());	  throw    new    InternalError(e.getMessage());    	non-compiled	[CE]  'finally'  without  'try'	53	None	replace
301	[BUG]  [BUGGY]  throw  new  IllegalAccessException( " ");  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  throw  new  IllegalAccessException( " ");  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  IllegalAccessException( " ");	  if(fieldValue!=    null)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	36	None	replace
302	[BUG]  [BUGGY]  aught(e,  fieldValue,  excludeFields);  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  aught(e,  fieldValue,  excludeFields);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	aught(e,  fieldValue,  excludeFields);	  if(fieldValue!=    null)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	36	None	replace
303	[BUG]  [BUGGY]  throw  new  InternalError( "Unexpected  field  value  ' "+fieldValue+ "'  for  object  ' "+object.getClass().getName()  + ",'  not  ' "+fieldValue+ "'. ");  [CE]  'finally'  without  'try'  [FE]                        AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  throw  new  InternalError( "Unexpected  field  value  ' "+fieldValue+ "'  for  object  ' "+object.getClass().getName()  + ",'  not  ' "+fieldValue+ "'. ");  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  InternalError( "Unexpected  field  value  ' "+fieldValue+ "'  for  object  ' "+object.getClass().getName()  + ",'  not  ' "+fieldValue+ "'. ");	  throw    new    InternalError(   "Unexpected    field    value    '   "+fieldValue+   "'    for    object    '   "+object.getClass().getName()    +   "'    not    '   "+fieldValue+   "'   ");    	non-compiled	[CE]  'finally'  without  'try'	22	None	replace
304	[BUG]  [BUGGY]  if(!useTransients  ||!Modifier.isTransient(field.getModifiers()))  {  e.printStackTrace();  }  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(!useTransients  ||!Modifier.isTransient(field.getModifiers()))  {  e.printStackTrace();  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(!useTransients  ||!Modifier.isTransient(field.getModifiers()))  {  e.printStackTrace();  }	  if(!useTransients)    {    e.printStackTrace();    }    	non-compiled	[CE]  'finally'  without  'try'	80	None	replace
305	[BUG]  [BUGGY]  if(!useTransients  ||!Modifier.isTransient(field.getModifiers()))  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(!useTransients  ||!Modifier.isTransient(field.getModifiers()))  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(!useTransients  ||!Modifier.isTransient(field.getModifiers()))  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  if(!useTransients)    {    e.printStackTrace();    }    	non-compiled	[CE]  'finally'  without  'try'	80	None	replace
306	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  excludeFields.contains(fieldValue))  {  throw  new  IllegalStateException( " ").getMessage());  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null  ||  excludeFields.contains(fieldValue))  {  throw  new  IllegalStateException( " ").getMessage());  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  excludeFields.contains(fieldValue))  {  throw  new  IllegalStateException( " ").getMessage());  }	  if(fieldValue    ==    null)    {    throw    new    IllegalStateException(   "   ".getMessage());    }    	non-compiled	[CE]  	28	None	replace
307	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  fieldValue.getName().indexOf('$')  >=  -1)  {  throw  new  IllegalAccessException( " ");  }  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null  ||  fieldValue.getName().indexOf('$')  >=  -1)  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  fieldValue.getName().indexOf('$')  >=  -1)  {  throw  new  IllegalAccessException( " ");  }	  if(fieldValue    ==    null    ||    fieldValue.getName().indexOf('$')    ==    -1)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	30	None	replace
308	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  fieldValue.getName().indexOf('$')!=  -1)  {  throw  new  IllegalAccessException( " ");  }  [CE]  'finally'  without  'try'  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null  ||  fieldValue.getName().indexOf('$')!=  -1)  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  fieldValue.getName().indexOf('$')!=  -1)  {  throw  new  IllegalAccessException( " ");  }	  if(fieldValue    ==    null    ||    fieldValue.getName().indexOf('$')    ==    -1)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	30	None	replace
309	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.size();  i++)  {  builder.append('n');  }  [CE]  'finally'  without  'try'  [FE]                    AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.size();  i++)  {  builder.append('n');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.size();  i++)  {  builder.append('n');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fields.length();    i++)    {    builder.append('n');    }    	non-compiled	[CE]  'finally'  without  'try'	25	None	replace
310	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append( ", ");  }  [CE]  'finally'  without  'try'  [FE]                      AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append( ", ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append( ", ");  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fields.length();    i++)    {    builder.append('n');    }    	non-compiled	[CE]  'finally'  without  'try'	25	None	replace
311	[BUG]  [BUGGY]  throw  new  InternalError( "Unexpected  IllegalAccessException.  Did  you  know?  Check  if(fieldValue  ==  null)? ");  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  throw  new  InternalError( "Unexpected  IllegalAccessException.  Did  you  know?  Check  if(fieldValue  ==  null)? ");  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  InternalError( "Unexpected  IllegalAccessException.  Did  you  know?  Check  if(fieldValue  ==  null)? ");	  throw    new    InternalError(   "Unexpected    IllegalAccessException.    Did    you    know?   ");    	non-compiled	[CE]  'finally'  without  'try'	84	None	replace
312	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(fieldValue,  excludeFields[fieldValue].toString());  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");      [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(fieldValue,  excludeFields[fieldValue].toString());  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Field[]  fields  =  clazz.getFields();  builder.append(fieldValue,  excludeFields[fieldValue].toString());	  Field[]    fields    =    clazz.getFields();    builder.append(excludeFields[fieldValue].toString());    	non-compiled	[CE]  'finally'  without  'try'	49	None	replace
