bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  if(field.getName().indexOf('$')  ==  -1)  {  return;  }  [CE]  'finally'  without  'try'  [FE]        AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue!=  null)  {  if(field.getName().indexOf('$')  ==  -1)  {  return;  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null)  {  if(field.getName().indexOf('$')  ==  -1)  {  return;  }	      if(fieldValue    ==    null)    {    if(field.getName().indexOf('$')    ==    -1)    {    return;    }    	non-compiled	[CE]  'finally'  without  'try'	6	None	replace
2	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  field.getName().indexOf('$')  ==  -1)  {  return;  }  [CE]  'finally'  without  'try'  [FE]          AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue  ==  null  ||  field.getName().indexOf('$')  ==  -1)  {  return;  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  field.getName().indexOf('$')  ==  -1)  {  return;  }	      if(fieldValue    ==    null)    {    if(field.getName().indexOf('$')    ==    -1)    {    return;    }    	non-compiled	[CE]  'finally'  without  'try'	6	None	replace
3	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  fieldValue.getName().indexOf('$')  ==  -1)  {  return;  }  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue  ==  null  ||  fieldValue.getName().indexOf('$')  ==  -1)  {  return;  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  fieldValue.getName().indexOf('$')  ==  -1)  {  return;  }	      if(fieldValue    ==    null)    {    if(field.getName().indexOf('$')    ==    -1)    {    return;    }    	non-compiled	[CE]  'finally'  without  'try'	6	None	replace
4	[BUG]  [BUGGY]  throw  new  InternalError( "Unexpected  IllegalAccessException ",  e);  [CE]  'finally'  without  'try'  [FE]        AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  throw  new  InternalError( "Unexpected  IllegalAccessException ",  e);  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  InternalError( "Unexpected  IllegalAccessException ",  e);	  throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    	non-compiled	[CE]  'finally'  without  'try'	1	None	replace
5	[BUG]  [BUGGY]  throw  new  InternalError( "Unexpected  IllegalAccessException: "  +  e.getMessage());  [CE]  'finally'  without  'try'  [FE]          AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  throw  new  InternalError( "Unexpected  IllegalAccessException: "  +  e.getMessage());  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  InternalError( "Unexpected  IllegalAccessException: "  +  e.getMessage());	  throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    	non-compiled	[CE]  'finally'  without  'try'	1	None	replace
6	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue  ==  null)  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null)  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    	non-compiled	[CE]  'finally'  without  'try'	1	None	replace
7	[BUG]  [BUGGY]  throw  new  InternalError( "Unexpected  IllegalAccessException: ");  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  throw  new  InternalError( "Unexpected  IllegalAccessException: ");  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  InternalError( "Unexpected  IllegalAccessException: ");	  throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    	non-compiled	[CE]  'finally'  without  'try'	1	None	replace
8	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  e.printStackTrace();  }  [CE]  'finally'  without  'try'  [FE]          AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue  ==  null)  {  e.printStackTrace();  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null)  {  e.printStackTrace();  }	  e.printStackTrace();    	non-compiled	[CE]  'finally'  without  'try'	2	None	replace
9	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  e.printStackTrace();  }  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue!=  null)  {  e.printStackTrace();  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null)  {  e.printStackTrace();  }	  e.printStackTrace();    	non-compiled	[CE]  'finally'  without  'try'	2	None	replace
10	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  e.printStackTrace();  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue  ==  null)  {  e.printStackTrace();  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null)  {  e.printStackTrace();  }  else  {  throw  new  InternalError( "Unexpected  IllegalAccessException ");  }	  e.printStackTrace();    	non-compiled	[CE]  'finally'  without  'try'	2	None	replace
11	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('[');  }  [CE]  'finally'  without  'try'  [FE]          AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('[');  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('[');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fields.length;    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	10	None	replace
12	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  field.length;  i++)  {  builder.append('[');  }  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  field.length;  i++)  {  builder.append('[');  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  field.length;  i++)  {  builder.append('[');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fields.length;    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	10	None	replace
13	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  field.length;  i++)  {  builder.append('[');  }  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  field.length;  i++)  {  builder.append('[');  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  field.length;  i++)  {  builder.append('[');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fields.length;    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	10	None	replace
14	[BUG]  [BUGGY]  ||  fieldValue  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  ||  fieldValue  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	||  fieldValue  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldValue    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
15	[BUG]  [BUGGY]  ||(fieldValue!=  null  &&  fieldValue.equals(object)))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  ||(fieldValue!=  null  &&  fieldValue.equals(object)))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	||(fieldValue!=  null  &&  fieldValue.equals(object)))  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldValue    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
16	[BUG]  [BUGGY]  ||(fieldValue  ==  null  &&  fieldValue.getClass().isArray()))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  ||(fieldValue  ==  null  &&  fieldValue.getClass().isArray()))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	||(fieldValue  ==  null  &&  fieldValue.getClass().isArray()))  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldValue    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
17	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('[');  }  [CE]  'finally'  without  'try'  [FE]        AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('[');  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('[');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	9	None	replace
18	[BUG]  [BUGGY]  if(fieldValue!=  null  ||  fieldValue.length()  ==  0)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('[');  }  [CE]  'finally'  without  'try'  [FE]          AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue!=  null  ||  fieldValue.length()  ==  0)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('[');  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null  ||  fieldValue.length()  ==  0)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('[');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	9	None	replace
19	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('[');  }  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('[');  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('[');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	9	None	replace
20	[BUG]  [BUGGY]  throw  new  InternalError( "Unexpected  field  value  ' "  +  fieldValue  + "'  without  'try'. ");  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  throw  new  InternalError( "Unexpected  field  value  ' "  +  fieldValue  + "'  without  'try'. ");  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  InternalError( "Unexpected  field  value  ' "  +  fieldValue  + "'  without  'try'. ");	      	non-compiled	[CE]  'finally'  without  'try'	5	None	replace
21	[BUG]  [BUGGY]  throw  new  InternalError( "Unexpected  field  value  ' "+fieldValue+ "'  for  class  ' "+clazz.getName()  + "': "+e.getMessage());  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  throw  new  InternalError( "Unexpected  field  value  ' "+fieldValue+ "'  for  class  ' "+clazz.getName()  + "': "+e.getMessage());  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  InternalError( "Unexpected  field  value  ' "+fieldValue+ "'  for  class  ' "+clazz.getName()  + "': "+e.getMessage());	      	non-compiled	[CE]  'finally'  without  'try'	5	None	replace
22	[BUG]  [BUGGY]  throw  new  InternalError( "Unexpected  field  value  ' "+fieldValue+ "'  for  object  ' "+object.getClass().getName()  + "'  not  ' "+fieldValue+ "' ");  [CE]  'finally'  without  'try'  [FE]                    AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  throw  new  InternalError( "Unexpected  field  value  ' "+fieldValue+ "'  for  object  ' "+object.getClass().getName()  + "'  not  ' "+fieldValue+ "' ");  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  InternalError( "Unexpected  field  value  ' "+fieldValue+ "'  for  object  ' "+object.getClass().getName()  + "'  not  ' "+fieldValue+ "' ");	      	non-compiled	[CE]  'finally'  without  'try'	5	None	replace
23	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('n');  }  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('n');  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('n');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    builder.append('n');    }    	non-compiled	[CE]  'finally'  without  'try'	11	None	replace
24	[BUG]  [BUGGY]  if(fieldValue!=  null  ||  fieldValue.length()  ==  0)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('n');  }  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue!=  null  ||  fieldValue.length()  ==  0)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('n');  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null  ||  fieldValue.length()  ==  0)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('n');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    builder.append('n');    }    	non-compiled	[CE]  'finally'  without  'try'	11	None	replace
25	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('n');  }  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('n');  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('n');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    builder.append('n');    }    	non-compiled	[CE]  'finally'  without  'try'	11	None	replace
26	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  'finally'  without  'try'  [FE]        AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null)  {  throw  new  IllegalStateException( " ");  }	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  'finally'  without  'try'	16	None	replace
27	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  'finally'  without  'try'  [FE]          AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null)  {  throw  new  IllegalStateException( " ");  }	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  'finally'  without  'try'	16	None	replace
28	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  throw  new  IllegalStateException( " ".getMessage());  }  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue  ==  null)  {  throw  new  IllegalStateException( " ".getMessage());  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null)  {  throw  new  IllegalStateException( " ".getMessage());  }	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  'finally'  without  'try'	16	None	replace
29	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  if(field.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalAccessException( " ");  }  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue!=  null)  {  if(field.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null)  {  if(field.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalAccessException( " ");  }	      if(fieldValue    ==    null)    {    if(field.getName().indexOf('$')    ==    -1)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	8	None	replace
30	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  fieldValue.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalAccessException( " ");  }  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue  ==  null  ||  fieldValue.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  fieldValue.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalAccessException( " ");  }	      if(fieldValue    ==    null)    {    if(field.getName().indexOf('$')    ==    -1)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	8	None	replace
31	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  if(field.getName().indexOf('$')!=  -1)  {  throw  new  IllegalAccessException( " ");  }  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue  ==  null)  {  if(field.getName().indexOf('$')!=  -1)  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null)  {  if(field.getName().indexOf('$')!=  -1)  {  throw  new  IllegalAccessException( " ");  }	      if(fieldValue    ==    null)    {    if(field.getName().indexOf('$')    ==    -1)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	8	None	replace
32	[BUG]  [BUGGY]  Builder.append(fieldValue,  clazz.getDeclaredFields());  [CE]  'finally'  without  'try'  [FE]          AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  Builder.append(fieldValue,  clazz.getDeclaredFields());  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Builder.append(fieldValue,  clazz.getDeclaredFields());	      Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fieldValue,    fields);    	non-compiled	[CE]  'finally'  without  'try'	14	None	replace
33	[BUG]  [BUGGY]  builder.append(fieldValue,  clazz.getDeclaredFields());  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  builder.append(fieldValue,  clazz.getDeclaredFields());  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	builder.append(fieldValue,  clazz.getDeclaredFields());	      Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fieldValue,    fields);    	non-compiled	[CE]  'finally'  without  'try'	14	None	replace
34	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue,  excludeFields);  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue,  excludeFields);  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue,  excludeFields);	      Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fieldValue,    fields);    	non-compiled	[CE]  'finally'  without  'try'	14	None	replace
35	[BUG]  [BUGGY]  BuilderBuilder.append(fieldValue,  clazz.getDeclaredFields());  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  BuilderBuilder.append(fieldValue,  clazz.getDeclaredFields());  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	BuilderBuilder.append(fieldValue,  clazz.getDeclaredFields());	      Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fieldValue,    fields);    	non-compiled	[CE]  'finally'  without  'try'	14	None	replace
36	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  throw  new  IllegalAccessException( " ");  }  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue!=  null)  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null)  {  throw  new  IllegalAccessException( " ");  }	  if(fieldValue    ==    null)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	3	None	replace
37	[BUG]  [BUGGY]  ||  fieldValue  ==  null)  {  throw  new  IllegalAccessException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  ||  fieldValue  ==  null)  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	||  fieldValue  ==  null)  {  throw  new  IllegalAccessException( " ");  }	  if(fieldValue    ==    null)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
38	[BUG]  [BUGGY]  ||(fieldValue  ==  null  &&  fieldValue.equals(object)))  {  throw  new  IllegalAccessException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  ||(fieldValue  ==  null  &&  fieldValue.equals(object)))  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	||(fieldValue  ==  null  &&  fieldValue.equals(object)))  {  throw  new  IllegalAccessException( " ");  }	  if(fieldValue    ==    null)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
39	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[fieldValue]);  [CE]  'finally'  without  'try'  [FE]        AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[fieldValue]);  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[fieldValue]);	      Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fieldValue);    	non-compiled	[CE]  'finally'  without  'try'	13	None	replace
40	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[fieldValue].toString());  [CE]  'finally'  without  'try'  [FE]          AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[fieldValue].toString());  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[fieldValue].toString());	      Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fieldValue);    	non-compiled	[CE]  'finally'  without  'try'	13	None	replace
41	[BUG]  [BUGGY]  Builder.append(fieldValue);  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  Builder.append(fieldValue);  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Builder.append(fieldValue);	      Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fieldValue);    	non-compiled	[CE]  'finally'  without  'try'	13	None	replace
42	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  if(field.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'finally'  without  'try'  [FE]          AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue!=  null)  {  if(field.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null)  {  if(field.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalArgumentException( " ");  }	      if(fieldValue    ==    null)    {    if(field.getName().indexOf('$')    ==    -1)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	7	None	replace
43	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  field.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue  ==  null  ||  field.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  field.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalArgumentException( " ");  }	      if(fieldValue    ==    null)    {    if(field.getName().indexOf('$')    ==    -1)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	7	None	replace
44	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  fieldValue.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue  ==  null  ||  fieldValue.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  fieldValue.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalArgumentException( " ");  }	      if(fieldValue    ==    null)    {    if(field.getName().indexOf('$')    ==    -1)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	7	None	replace
45	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fieldValue.size();  i++)  {  builder.append('[');  }  [CE]  'finally'  without  'try'  [FE]        AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fieldValue.size();  i++)  {  builder.append('[');  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fieldValue.size();  i++)  {  builder.append('[');  }	      if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.size();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	12	None	replace
46	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.size();  i++)  {  builder.append('[');  }  [CE]  'finally'  without  'try'  [FE]          AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.size();  i++)  {  builder.append('[');  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.size();  i++)  {  builder.append('[');  }	      if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.size();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	12	None	replace
47	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  field.size();  i++)  {  builder.append('[');  }  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  field.size();  i++)  {  builder.append('[');  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  field.size();  i++)  {  builder.append('[');  }	      if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.size();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	12	None	replace
48	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(fieldValue,  excludeFields);  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(fieldValue,  excludeFields);  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Field[]  fields  =  clazz.getFields();  builder.append(fieldValue,  excludeFields);	      Field[]    fields    =    clazz.getFields();    builder.append(fieldValue);    	non-compiled	[CE]  'finally'  without  'try'	15	None	replace
49	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(excludeFields[fieldValue].toString());  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(excludeFields[fieldValue].toString());  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Field[]  fields  =  clazz.getFields();  builder.append(excludeFields[fieldValue].toString());	      Field[]    fields    =    clazz.getFields();    builder.append(fieldValue);    	non-compiled	[CE]  'finally'  without  'try'	15	None	replace
50	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(excludeFields[fieldValue]);  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(excludeFields[fieldValue]);  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Field[]  fields  =  clazz.getFields();  builder.append(excludeFields[fieldValue]);	      Field[]    fields    =    clazz.getFields();    builder.append(fieldValue);    	non-compiled	[CE]  'finally'  without  'try'	15	None	replace
51	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldValue    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	4	None	replace
52	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue  ==  null)  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null)  {  throw  new  IllegalArgumentException( " ".getMessage());  }	  if(fieldValue    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	4	None	replace
53	[BUG]  [BUGGY]  throw  new  InternalError(e.getMessage());  [CE]  'finally'  without  'try'  [FE]          AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  throw  new  InternalError(e.getMessage());  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  InternalError(e.getMessage());	  throw    new    InternalError(   "Unexpected    IllegalAccessException.   ");    	non-compiled	[CE]  'finally'  without  'try'	17	None	replace
54	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields,  fieldValue);  [CE]  'finally'  without  'try'  [FE]          AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields,  fieldValue);  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields,  fieldValue);	      Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fieldValue,    fields);    	non-compiled	[CE]  'finally'  without  'try'	14	None	replace
55	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('[');  }  [CE]  'finally'  without  'try'  [FE]        AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('[');  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('[');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	9	None	replace
56	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  builder.append('[');  }  [CE]  'finally'  without  'try'  [FE]          AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  builder.append('[');  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  builder.append('[');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	9	None	replace
57	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(excludeFields);  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(excludeFields);  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Field[]  fields  =  clazz.getFields();  builder.append(excludeFields);	      Field[]    fields    =    clazz.getFields();    builder.append(fieldValue);    	non-compiled	[CE]  'finally'  without  'try'	15	None	replace
58	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(excludeFields,  fieldValue);  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(excludeFields,  fieldValue);  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Field[]  fields  =  clazz.getFields();  builder.append(excludeFields,  fieldValue);	      Field[]    fields    =    clazz.getFields();    builder.append(fieldValue);    	non-compiled	[CE]  'finally'  without  'try'	15	None	replace
59	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  builder.append('n');  }  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  builder.append('n');  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  builder.append('n');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    builder.append('n');    }    	non-compiled	[CE]  'finally'  without  'try'	11	None	replace
60	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('n');  }  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('n');  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('n');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    builder.append('n');    }    	non-compiled	[CE]  'finally'  without  'try'	11	None	replace
61	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  if(field.getName().indexOf('$')  >=  -1)  {  throw  new  IllegalAccessException( " ");  }  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue  ==  null)  {  if(field.getName().indexOf('$')  >=  -1)  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null)  {  if(field.getName().indexOf('$')  >=  -1)  {  throw  new  IllegalAccessException( " ");  }	      if(fieldValue    ==    null)    {    if(field.getName().indexOf('$')    ==    -1)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	8	None	replace
62	[BUG]  [BUGGY]  throw  new  InternalError( "Unexpected  field  value  ' "  +  object.getClass().getName()  + "'  without  'try'. ");  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  throw  new  InternalError( "Unexpected  field  value  ' "  +  object.getClass().getName()  + "'  without  'try'. ");  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  InternalError( "Unexpected  field  value  ' "  +  object.getClass().getName()  + "'  without  'try'. ");	      	non-compiled	[CE]  'finally'  without  'try'	5	None	replace
63	[BUG]  [BUGGY]  throw  new  InternalError( "Unexpected  field  value  ' "  +  object.getClass().getName()  + "'  without  'try' ");  [CE]  'finally'  without  'try'  [FE]                  AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  throw  new  InternalError( "Unexpected  field  value  ' "  +  object.getClass().getName()  + "'  without  'try' ");  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  InternalError( "Unexpected  field  value  ' "  +  object.getClass().getName()  + "'  without  'try' ");	      	non-compiled	[CE]  'finally'  without  'try'	5	None	replace
64	[BUG]  [BUGGY]  e.printStackTrace(builder);  [CE]  'finally'  without  'try'  [FE]          AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  e.printStackTrace(builder);  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	e.printStackTrace(builder);	  e.printStackTrace();    	non-compiled	[CE]  'finally'  without  'try'	2	None	replace
65	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields);  [CE]  'finally'  without  'try'  [FE]        AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields);  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields);	      Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fieldValue);    	non-compiled	[CE]  'finally'  without  'try'	13	None	replace
66	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  fieldValue.getClass()!=  null)  {  if(field.getName().indexOf('$')  ==  -1)  {  return;  }  [CE]  'finally'  without  'try'  [FE]        AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue  ==  null  ||  fieldValue.getClass()!=  null)  {  if(field.getName().indexOf('$')  ==  -1)  {  return;  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  fieldValue.getClass()!=  null)  {  if(field.getName().indexOf('$')  ==  -1)  {  return;  }	      if(fieldValue    ==    null)    {    if(field.getName().indexOf('$')    ==    -1)    {    return;    }    	non-compiled	[CE]  'finally'  without  'try'	6	None	replace
67	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  if(field.getName().indexOf('$')!=  -1)  {  return;  }  [CE]  'finally'  without  'try'  [FE]          AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue  ==  null)  {  if(field.getName().indexOf('$')!=  -1)  {  return;  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null)  {  if(field.getName().indexOf('$')!=  -1)  {  return;  }	      if(fieldValue    ==    null)    {    if(field.getName().indexOf('$')    ==    -1)    {    return;    }    	non-compiled	[CE]  'finally'  without  'try'	6	None	replace
68	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  if(field.getName().indexOf('$')!=  -1)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'finally'  without  'try'  [FE]          AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue  ==  null)  {  if(field.getName().indexOf('$')!=  -1)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null)  {  if(field.getName().indexOf('$')!=  -1)  {  throw  new  IllegalArgumentException( " ");  }	      if(fieldValue    ==    null)    {    if(field.getName().indexOf('$')    ==    -1)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	7	None	replace
69	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  if(field.getName().indexOf('$')  >=  -1)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue  ==  null)  {  if(field.getName().indexOf('$')  >=  -1)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null)  {  if(field.getName().indexOf('$')  >=  -1)  {  throw  new  IllegalArgumentException( " ");  }	      if(fieldValue    ==    null)    {    if(field.getName().indexOf('$')    ==    -1)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	7	None	replace
70	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fields.size();  i++)  {  builder.append('[');  }  [CE]  'finally'  without  'try'  [FE]        AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fields.size();  i++)  {  builder.append('[');  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fields.size();  i++)  {  builder.append('[');  }	      if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.size();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	12	None	replace
71	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  [CE]  'finally'  without  'try'  [FE]          AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  Field[]  fields  =  clazz.getFields();  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Field[]  fields  =  clazz.getFields();	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fields.length;    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	10	None	replace
72	[BUG]  [BUGGY]  throw  new  InternalError(e, "Unexpected  IllegalAccessException ");  [CE]  'finally'  without  'try'  [FE]        AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  throw  new  InternalError(e, "Unexpected  IllegalAccessException ");  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  InternalError(e, "Unexpected  IllegalAccessException ");	  throw    new    InternalError(   "Unexpected    IllegalAccessException   ");    	non-compiled	[CE]  'finally'  without  'try'	1	None	replace
73	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  if(field.getName().indexOf('$')  >=  -1)  {  return;  }  [CE]  'finally'  without  'try'  [FE]        AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue  ==  null)  {  if(field.getName().indexOf('$')  >=  -1)  {  return;  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null)  {  if(field.getName().indexOf('$')  >=  -1)  {  return;  }	      if(fieldValue    ==    null)    {    if(field.getName().indexOf('$')    ==    -1)    {    return;    }    	non-compiled	[CE]  'finally'  without  'try'	6	None	replace
74	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Unexpected  IllegalAccessException ");  [CE]  'finally'  without  'try'  [FE]        AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  throw  new  IllegalStateException( "Unexpected  IllegalAccessException ");  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  IllegalStateException( "Unexpected  IllegalAccessException ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  'finally'  without  'try'	16	None	replace
75	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Unexpected  IllegalAccessException: ");  [CE]  'finally'  without  'try'  [FE]          AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  throw  new  IllegalStateException( "Unexpected  IllegalAccessException: ");  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  IllegalStateException( "Unexpected  IllegalAccessException: ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  'finally'  without  'try'	16	None	replace
76	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append( "[ ");  }  [CE]  'finally'  without  'try'  [FE]          AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append( "[ ");  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append( "[ ");  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fields.length;    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	10	None	replace
77	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append( ", ");  }  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append( ", ");  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append( ", ");  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fields.length;    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	10	None	replace
78	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  excludeFields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue  ==  null  ||  excludeFields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  excludeFields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldValue    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	4	None	replace
79	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  excludeFields.contains(fieldValue))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'finally'  without  'try'  [FE]                AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue  ==  null  ||  excludeFields.contains(fieldValue))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  excludeFields.contains(fieldValue))  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldValue    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	4	None	replace
80	[BUG]  [BUGGY]  if(!useTransients)  {  e.printStackTrace();  }  [CE]  'finally'  without  'try'  [FE]          AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(!useTransients)  {  e.printStackTrace();  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(!useTransients)  {  e.printStackTrace();  }	  e.printStackTrace();    	non-compiled	[CE]  'finally'  without  'try'	2	None	replace
81	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  excludeFields.length  ==  0)  {  throw  new  IllegalAccessException( " ");  }  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue  ==  null  ||  excludeFields.length  ==  0)  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  excludeFields.length  ==  0)  {  throw  new  IllegalAccessException( " ");  }	  if(fieldValue    ==    null)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	3	None	replace
82	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  excludeFields.contains(fieldValue))  {  throw  new  IllegalAccessException( " ");  }  [CE]  'finally'  without  'try'  [FE]              AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue  ==  null  ||  excludeFields.contains(fieldValue))  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  excludeFields.contains(fieldValue))  {  throw  new  IllegalAccessException( " ");  }	  if(fieldValue    ==    null)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	3	None	replace
83	[BUG]  [BUGGY]  throw  new  InternalError(e, "Unexpected  IllegalAccessException. ");  [CE]  'finally'  without  'try'  [FE]          AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  throw  new  InternalError(e, "Unexpected  IllegalAccessException. ");  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  InternalError(e, "Unexpected  IllegalAccessException. ");	  throw    new    InternalError(   "Unexpected    IllegalAccessException.   ");    	non-compiled	[CE]  'finally'  without  'try'	17	None	replace
84	[BUG]  [BUGGY]  throw  new  InternalError( "Unexpected  IllegalAccessException.  Did  you  know? ");  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  throw  new  InternalError( "Unexpected  IllegalAccessException.  Did  you  know? ");  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	throw  new  InternalError( "Unexpected  IllegalAccessException.  Did  you  know? ");	  throw    new    InternalError(   "Unexpected    IllegalAccessException.   ");    	non-compiled	[CE]  'finally'  without  'try'	17	None	replace
85	[BUG]  [BUGGY]  if(fieldValue!=  null  &&  fieldValue.length()  >  0)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('n');  }  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue!=  null  &&  fieldValue.length()  >  0)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('n');  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null  &&  fieldValue.length()  >  0)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('n');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    builder.append('n');    }    	non-compiled	[CE]  'finally'  without  'try'	11	None	replace
86	[BUG]  [BUGGY]  if(fieldValue!=  null  &&  fieldValue.length()  >  0)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('[');  }  [CE]  'finally'  without  'try'  [FE]        AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue!=  null  &&  fieldValue.length()  >  0)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('[');  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null  &&  fieldValue.length()  >  0)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('[');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	9	None	replace
87	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  field.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalAccessException( " ");  }  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue  ==  null  ||  field.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue  ==  null  ||  field.getName().indexOf('$')  ==  -1)  {  throw  new  IllegalAccessException( " ");  }	      if(fieldValue    ==    null)    {    if(field.getName().indexOf('$')    ==    -1)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  'finally'  without  'try'	8	None	replace
88	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue,  excludedFields);  [CE]  'finally'  without  'try'  [FE]          AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue,  excludedFields);  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue,  excludedFields);	      Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fieldValue,    fields);    	non-compiled	[CE]  'finally'  without  'try'	14	None	replace
89	[BUG]  [BUGGY]  if(fieldValue!=  null  &&  fieldValue.isEmpty())  {  for(int  i  =  0;  i  <  fieldValue.size();  i++)  {  builder.append('[');  }  [CE]  'finally'  without  'try'  [FE]        AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue!=  null  &&  fieldValue.isEmpty())  {  for(int  i  =  0;  i  <  fieldValue.size();  i++)  {  builder.append('[');  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null  &&  fieldValue.isEmpty())  {  for(int  i  =  0;  i  <  fieldValue.size();  i++)  {  builder.append('[');  }	      if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.size();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	12	None	replace
90	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fieldValue.size();  i++)  {  builder.append( "[ ");  }  [CE]  'finally'  without  'try'  [FE]          AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fieldValue.size();  i++)  {  builder.append( "[ ");  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fieldValue.size();  i++)  {  builder.append( "[ ");  }	      if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.size();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  'finally'  without  'try'	12	None	replace
91	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclasses();  builder.append(fieldValue);  [CE]  'finally'  without  'try'  [FE]            AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  Field[]  fields  =  clazz.getSuperclasses();  builder.append(fieldValue);  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Field[]  fields  =  clazz.getSuperclasses();  builder.append(fieldValue);	      Field[]    fields    =    clazz.getFields();    builder.append(fieldValue);    	non-compiled	[CE]  'finally'  without  'try'	15	None	replace
92	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(object);  [CE]  'finally'  without  'try'  [FE]        AssertionFailedError    [CONTEXT]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(object);  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	192	192	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(object);	      Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fieldValue);    	non-compiled	[CE]  'finally'  without  'try'	13	None	replace
