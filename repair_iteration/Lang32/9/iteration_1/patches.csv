bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(!ArrayUtils.contains(field,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers()))  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]  if(!ArrayUtils.contains(field,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers()))  [BUGGY]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(field,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers()))	  if(!ArrayUtils.contains(excludeFields,    field.getName())&&    (field.getName().indexOf('$')    ==    -1)&&    useTransients    ||!Modifier.isTransient(field.getModifiers()))    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
2	[BUG]  [BUGGY]  if(!ArrayUtils.contains(object,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers()))  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]  if(!ArrayUtils.contains(object,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers()))  [BUGGY]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(object,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers()))	  if(!ArrayUtils.contains(excludeFields,    field.getName())&&    (field.getName().indexOf('$')    ==    -1)&&    useTransients    ||!Modifier.isTransient(field.getModifiers()))    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
3	[BUG]  [BUGGY]  if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers())))  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]  if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers())))  [BUGGY]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers())))	  if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isTransient(field.getModifiers())))    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
4	[BUG]  [BUGGY]  if(!ArrayUtils.contains(field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers())))  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]  if(!ArrayUtils.contains(field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers())))  [BUGGY]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers())))	  if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isTransient(field.getModifiers())))    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
5	[BUG]  [BUGGY]  Field[]  fieldValues  =  clazz.getFieldValues();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]  Field[]  fieldValues  =  clazz.getFieldValues();  [BUGGY]    if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Field[]  fieldValues  =  clazz.getFieldValues();	      Field[]    fieldValues    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
6	[BUG]  [BUGGY]  Field[]  fieldValues  =  field.getDeclaredFields();  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]  Field[]  fieldValues  =  field.getDeclaredFields();  [BUGGY]    if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Field[]  fieldValues  =  field.getDeclaredFields();	      Field[]    fieldValues    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
7	[BUG]  [BUGGY]  Field[]  fieldValues  =  clazz.getDeclaredFields(field);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]  Field[]  fieldValues  =  clazz.getDeclaredFields(field);  [BUGGY]    if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Field[]  fieldValues  =  clazz.getDeclaredFields(field);	      Field[]    fieldValues    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
8	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]  Field[]  fields  =  field.getFields();  [BUGGY]    if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Field[]  fields  =  field.getFields();	      Field[]    fields    =    field.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
9	[BUG]  [BUGGY]  Field[]  fields  =  field.getDeclaredFields(excludeFields);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]  Field[]  fields  =  field.getDeclaredFields(excludeFields);  [BUGGY]    if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Field[]  fields  =  field.getDeclaredFields(excludeFields);	      Field[]    fields    =    field.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
10	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  false);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]  AccessibleObject.setAccessible(fields,  false);  [BUGGY]    if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	AccessibleObject.setAccessible(fields,  false);	      Field[]    fields    =    field.getDeclaredFields();    AccessibleObject.setAccessible(fields,    false);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
11	[BUG]  [BUGGY]  AccessibleObject.setAccessible(field,  false);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]  AccessibleObject.setAccessible(field,  false);  [BUGGY]    if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	AccessibleObject.setAccessible(field,  false);	      Field[]    fields    =    field.getDeclaredFields();    AccessibleObject.setAccessible(fields,    false);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
12	[BUG]  [BUGGY]  if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))  [CE]  no  suitable  method  found  for  contains(Field,String)  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]  if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))  [BUGGY]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))	  if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isStatic(field.getModifiers()))    	non-compiled	[CE]  no  suitable  method  found  for  contains(Field,String)	13	None	replace
13	[BUG]  [BUGGY]  if(!ArrayUtils.contains(field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))  [CE]  no  suitable  method  found  for  contains(String)  [FE]      AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]  if(!ArrayUtils.contains(field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))  [BUGGY]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))	  if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isStatic(field.getModifiers()))    	non-compiled	[CE]  no  suitable  method  found  for  contains(String)	13	None	replace
14	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclassFields();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]  Field[]  fields  =  clazz.getSuperclassFields();  [BUGGY]    if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Field[]  fields  =  clazz.getSuperclassFields();	      Field[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
15	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]  Field[]  fields  =  clazz.getFields();  [BUGGY]    if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Field[]  fields  =  clazz.getFields();	      Field[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
16	[BUG]  [BUGGY]  AccessibleObject.setAccessible(field,  true);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]  AccessibleObject.setAccessible(field,  true);  [BUGGY]    if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	AccessibleObject.setAccessible(field,  true);	      Field[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(fields,    true);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
17	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  true);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]  AccessibleObject.setAccessible(fields,  true);  [BUGGY]    if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	AccessibleObject.setAccessible(fields,  true);	      Field[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(fields,    true);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
18	[BUG]  [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))  [BUGGY]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isStatic(field.getModifiers()))    if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))	  	non-compiled	[CE]  ')'  expected	12	None	add
19	[BUG]  [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')!=  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')!=  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))  [BUGGY]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isStatic(field.getModifiers()))    if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')!=  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))	  	non-compiled	[CE]  ')'  expected	12	None	add
20	[BUG]  [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers())  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers())  [BUGGY]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isStatic(field.getModifiers()))    if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers())	  	non-compiled	[CE]  ')'  expected	12	None	add
21	[BUG]  [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  false);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  false);  [BUGGY]    if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Object[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  false);	      Object[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(fields,    true);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
22	[BUG]  [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)  &&  useTransients  ||!Modifier.isStatic(field.getModifiers()))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)  &&  useTransients  ||!Modifier.isStatic(field.getModifiers()))  {  [BUGGY]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)  &&  useTransients  ||!Modifier.isStatic(field.getModifiers()))  {	  if(!ArrayUtils.contains(excludeFields,    field.getName())&&    (field.getName().indexOf('$')    ==    -1)&&    useTransients    ||!Modifier.isTransient(field.getModifiers()))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
23	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)  &&  useTransients  ||!Modifier.isStatic(field.getModifiers())  [BUGGY]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	add	if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)  &&  useTransients  ||!Modifier.isStatic(field.getModifiers())	  if(!ArrayUtils.contains(excludeFields,    field.getName())&&    (field.getName().indexOf('$')    ==    -1)&&    useTransients    ||!Modifier.isTransient(field.getModifiers()))    {    	compilable	  [FE]  AssertionFailedError  	7	3	replace
24	[BUG]  [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)  &&  useTransients  ||!Modifier.isStatic(field.getModifiers())  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)  &&  useTransients  ||!Modifier.isStatic(field.getModifiers())  [BUGGY]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)  &&  useTransients  ||!Modifier.isStatic(field.getModifiers())	  if(!ArrayUtils.contains(excludeFields,    field.getName())&&    (field.getName().indexOf('$')    ==    -1)&&    useTransients    ||!Modifier.isTransient(field.getModifiers()))    {    	compilable	  [FE]  AssertionFailedError  	7	3	replace
25	[BUG]  [BUGGY]  if(!ArrayUtils.contains(field,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)  &&  useTransients  ||!Modifier.isStatic(field.getModifiers()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]  if(!ArrayUtils.contains(field,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)  &&  useTransients  ||!Modifier.isStatic(field.getModifiers()))  {  [BUGGY]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(field,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)  &&  useTransients  ||!Modifier.isStatic(field.getModifiers()))  {	  if(!ArrayUtils.contains(excludeFields,    field.getName())&&    (field.getName().indexOf('$')    ==    -1)&&    useTransients    ||!Modifier.isTransient(field.getModifiers()))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
26	[BUG]  [BUGGY]      Field[]  fieldValues  =  clazz.getDeclaredFields();  Field[]  fieldValues  =  clazz.getDeclaredFields();  [CE]  variable  fieldValues  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]      Field[]  fieldValues  =  clazz.getDeclaredFields();  Field[]  fieldValues  =  clazz.getDeclaredFields();  [BUGGY]    if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	        Field[]    fieldValues    =    clazz.getDeclaredFields();    Field[]  fieldValues  =  clazz.getDeclaredFields();	  	non-compiled	[CE]  variable  fieldValues  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	9	None	add
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]      Field[]  fieldValues  =  clazz.getDeclaredFields();  Field[]  fieldsValues  =  clazz.getDeclaredFields();  [BUGGY]    if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	add	        Field[]    fieldValues    =    clazz.getDeclaredFields();    Field[]  fieldsValues  =  clazz.getDeclaredFields();	  	compilable	  [FE]  AssertionFailedError  	9	1	add
28	[BUG]  [BUGGY]      Field[]  fieldValues  =  clazz.getDeclaredFields();  Field[]  fieldsValues  =  clazz.getDeclaredFields();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]      Field[]  fieldValues  =  clazz.getDeclaredFields();  Field[]  fieldsValues  =  clazz.getDeclaredFields();  [BUGGY]    if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	        Field[]    fieldValues    =    clazz.getDeclaredFields();    Field[]  fieldsValues  =  clazz.getDeclaredFields();	  	compilable	  [FE]  AssertionFailedError  	9	1	add
29	[BUG]  [BUGGY]      Field[]  fieldValues  =  clazz.getDeclaredFields();  Field[]  fields  =  clazz.getDeclaredFields();  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]      Field[]  fieldValues  =  clazz.getDeclaredFields();  Field[]  fields  =  clazz.getDeclaredFields();  [BUGGY]    if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	        Field[]    fieldValues    =    clazz.getDeclaredFields();    Field[]  fields  =  clazz.getDeclaredFields();	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	9	None	add
30	[BUG]  [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers())  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers())  [BUGGY]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers())	  if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isStatic(field.getModifiers())    	non-compiled	[CE]  ')'  expected	14	None	replace
31	[BUG]  [BUGGY]  if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers())  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]  if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers())  [BUGGY]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers())	  if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isStatic(field.getModifiers())    	non-compiled	[CE]  ')'  expected	14	None	replace
32	[BUG]  [BUGGY]  if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers())  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]  if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers())  [BUGGY]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers())	  if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isStatic(field.getModifiers())    	non-compiled	[CE]  ')'  expected	14	None	replace
33	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  >=  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))  [BUGGY]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	add	if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  >=  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))	  if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isStatic(field.getModifiers()))    	compilable	  [FE]  AssertionFailedError  	13	1	replace
34	[BUG]  [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  >=  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  >=  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))  [BUGGY]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  >=  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))	  if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isStatic(field.getModifiers()))    	compilable	  [FE]  AssertionFailedError  	13	1	replace
35	[BUG]  [BUGGY]      Field[]  fieldValues  =  clazz.getDeclaredFields();  String[]  fieldValues  =  clazz.getDeclaredFields();  [CE]  variable  fieldValues  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]      Field[]  fieldValues  =  clazz.getDeclaredFields();  String[]  fieldValues  =  clazz.getDeclaredFields();  [BUGGY]    if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	        Field[]    fieldValues    =    clazz.getDeclaredFields();    String[]  fieldValues  =  clazz.getDeclaredFields();	  	non-compiled	[CE]  variable  fieldValues  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	9	None	add
36	[BUG]  [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))  ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))  ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))  [BUGGY]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isStatic(field.getModifiers()))    ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))	  	non-compiled	[CE]  ')'  expected	12	None	add
37	[BUG]  [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isStatic(field.getModifiers()))  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isStatic(field.getModifiers()))  [BUGGY]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isStatic(field.getModifiers()))	  if(!ArrayUtils.contains(excludeFields,    field.getName())&&    (field.getName().indexOf('$')    ==    -1)&&    useTransients    ||!Modifier.isTransient(field.getModifiers()))    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
38	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(field);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(field);  [BUGGY]    if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Field[]  fields  =  clazz.getDeclaredFields(field);	      Field[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
39	[BUG]  [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  >=  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers())  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  >=  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers())  [BUGGY]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  >=  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers())	  if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isStatic(field.getModifiers())    	non-compiled	[CE]  ')'  expected	14	None	replace
40	[BUG]  [BUGGY]  Field[]  fieldValues  =  clazz.getAccessibleFields();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]  Field[]  fieldValues  =  clazz.getAccessibleFields();  [BUGGY]    if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Field[]  fieldValues  =  clazz.getAccessibleFields();	      Field[]    fieldValues    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
41	[BUG]  [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))  if(!ObjectUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))  if(!ObjectUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))  [BUGGY]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isStatic(field.getModifiers()))    if(!ObjectUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))	  	non-compiled	[CE]  ')'  expected	12	None	add
42	[BUG]  [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers())))  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers())))  [BUGGY]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers())))	  if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isTransient(field.getModifiers())))    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
43	[BUG]  [BUGGY]  if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers())))  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]  if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers())))  [BUGGY]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers())))	  if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isTransient(field.getModifiers())))    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
44	[BUG]  [BUGGY]  if(!ArrayUtils.contains(field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers())))  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]  if(!ArrayUtils.contains(field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers())))  [BUGGY]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers())))	  if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isTransient(field.getModifiers())))    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
45	[BUG]  [BUGGY]  Field[]  fieldValues  =  clazz.getSuperclassValues();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]  Field[]  fieldValues  =  clazz.getSuperclassValues();  [BUGGY]    if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Field[]  fieldValues  =  clazz.getSuperclassValues();	      Field[]    fieldValues    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
46	[BUG]  [BUGGY]  Field[]  fields  =  class.getDeclaredFields();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]  Field[]  fields  =  class.getDeclaredFields();  [BUGGY]    if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Field[]  fields  =  class.getDeclaredFields();	      Field[]    fields    =    field.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
47	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclasses();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]  Field[]  fields  =  clazz.getSuperclasses();  [BUGGY]    if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Field[]  fields  =  clazz.getSuperclasses();	      Field[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
48	[BUG]  [BUGGY]      Field[]  fieldValues  =  clazz.getDeclaredFields();  Field[]  fieldValues  =  class.getDeclaredFields();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]      Field[]  fieldValues  =  clazz.getDeclaredFields();  Field[]  fieldValues  =  class.getDeclaredFields();  [BUGGY]    if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	        Field[]    fieldValues    =    clazz.getDeclaredFields();    Field[]  fieldValues  =  class.getDeclaredFields();	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
49	[BUG]  [BUGGY]  if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isStatic(field.getModifiers()))  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {    [BUGGY]  if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isStatic(field.getModifiers()))  [BUGGY]    &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isStatic(field.getModifiers()))	  if(!ArrayUtils.contains(excludeFields,    field.getName())&&    (field.getName().indexOf('$')    ==    -1)&&    useTransients    ||!Modifier.isTransient(field.getModifiers()))    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
