bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]    AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  [BUGGY]    Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  [BUGGY]  if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError( "Unexpected  IllegalAccessException ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	    Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);		non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	18	None	add
2	[BUG]  [BUGGY]    Field[]  fields  =  field.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]      AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  [BUGGY]    Field[]  fields  =  field.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  [BUGGY]  if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError( "Unexpected  IllegalAccessException ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	    Field[]  fields  =  field.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);		non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	18	None	add
3	[BUG]  [BUGGY]    Field[]  fields  =  clazz.getDeclaredFields();  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]        AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  [BUGGY]    Field[]  fields  =  clazz.getDeclaredFields();  [BUGGY]  if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError( "Unexpected  IllegalAccessException ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	    Field[]  fields  =  clazz.getDeclaredFields();		non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	18	None	add
4	[BUG]  [BUGGY]    Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  false);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]          AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  [BUGGY]    Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  false);  [BUGGY]  if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError( "Unexpected  IllegalAccessException ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	    Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  false);		non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	18	None	add
5	[BUG]  [BUGGY]    Field[]  fields  =  field.getDeclaredFields();  AccessibleObject.setAccessible(fields,  false);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]            AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  [BUGGY]    Field[]  fields  =  field.getDeclaredFields();  AccessibleObject.setAccessible(fields,  false);  [BUGGY]  if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError( "Unexpected  IllegalAccessException ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	    Field[]  fields  =  field.getDeclaredFields();  AccessibleObject.setAccessible(fields,  false);		non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	18	None	add
6	[BUG]  [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers()))  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers()))  [BUGGY]  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError( "Unexpected  IllegalAccessException ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers()))	if  (!ArrayUtils.contains(excludeFields,  field.getName())    &&  (field.getName().indexOf('$')  ==  -1)      &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
7	[BUG]  [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers()))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers()))  {  [BUGGY]  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError( "Unexpected  IllegalAccessException ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers()))  {	if  (!ArrayUtils.contains(excludeFields,  field.getName())    &&  (field.getName().indexOf('$')  ==  -1)      &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
8	[BUG]  [BUGGY]    Object[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]    AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  [BUGGY]    Object[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  [BUGGY]  if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError( "Unexpected  IllegalAccessException ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	    Object[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);		non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	18	None	add
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  [BUGGY]    Field[]  fieldValues  =  clazz.getDeclaredFields();  [BUGGY]  if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError( "Unexpected  IllegalAccessException ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	add	    Field[]  fieldValues  =  clazz.getDeclaredFields();		compilable	  [FE]  AssertionFailedError  	18	1	add
10	[BUG]  [BUGGY]    Field[]  fieldValues  =  clazz.getDeclaredFields();  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  [BUGGY]    Field[]  fieldValues  =  clazz.getDeclaredFields();  [BUGGY]  if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError( "Unexpected  IllegalAccessException ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	    Field[]  fieldValues  =  clazz.getDeclaredFields();		compilable	  [FE]  AssertionFailedError  	18	1	add
11	[BUG]  [BUGGY]    Field[]  fields  =  field.getDeclaredFields();  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]    AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  [BUGGY]    Field[]  fields  =  field.getDeclaredFields();  [BUGGY]  if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError( "Unexpected  IllegalAccessException ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	    Field[]  fields  =  field.getDeclaredFields();		non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	18	None	add
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))  [BUGGY]  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError( "Unexpected  IllegalAccessException ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	add	if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))	if  (!ArrayUtils.contains(excludeFields,  field.getName())    &&  (field.getName().indexOf('$')  ==  -1)      &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  	compilable	  [FE]  AssertionFailedError  	17	2	replace
13	[BUG]  [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))  [BUGGY]  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError( "Unexpected  IllegalAccessException ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))	if  (!ArrayUtils.contains(excludeFields,  field.getName())    &&  (field.getName().indexOf('$')  ==  -1)      &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  	compilable	  [FE]  AssertionFailedError  	17	2	replace
14	[BUG]  [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers())  [CE]  ')'  expected  [FE]      AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers())  [BUGGY]  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError( "Unexpected  IllegalAccessException ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers())	if  (!ArrayUtils.contains(excludeFields,  field.getName())    &&  (field.getName().indexOf('$')  ==  -1)      &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  	non-compiled	[CE]  ')'  expected	17	None	replace
15	[BUG]  [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers())))  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers())))  [BUGGY]  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError( "Unexpected  IllegalAccessException ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers())))	if  (!ArrayUtils.contains(excludeFields,  field.getName())    &&  (field.getName().indexOf('$')  ==  -1)      &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
