bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  AccessibleObject.setAccessible(field,  false,  field.getModifiers());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  AccessibleObject.setAccessible(field,  false,  field.getModifiers());  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	AccessibleObject.setAccessible(field,  false,  field.getModifiers());	  AccessibleObject.setAccessible(field,    false);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
2	[BUG]  [BUGGY]  AccessibleObject.setAccessible(field,  false,  field.getName());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  AccessibleObject.setAccessible(field,  false,  field.getName());  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	AccessibleObject.setAccessible(field,  false,  field.getName());	  AccessibleObject.setAccessible(field,    false);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
3	[BUG]  [BUGGY]  Field[]  fields  =  field.getSuperclasses();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  Field[]  fields  =  field.getSuperclasses();  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Field[]  fields  =  field.getSuperclasses();	  Field[]    fields    =    field.getFields();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
4	[BUG]  [BUGGY]  Field[]  fields  =  object.getDeclaredFields();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  Field[]  fields  =  object.getDeclaredFields();  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Field[]  fields  =  object.getDeclaredFields();	  Field[]    fields    =    class.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
5	[BUG]  [BUGGY]  if(field.getName().indexOf('$')  ==  -1)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(field.getName().indexOf('$')  ==  -1)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(field.getName().indexOf('$')  ==  -1)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||	  if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isStatic(field.getModifiers()))    if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isStatic(field.getModifiers())    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
6	[BUG]  [BUGGY]  if(field.getName().indexOf('$')  ==  -1)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(field.getName().indexOf('$')  ==  -1)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(field.getName().indexOf('$')  ==  -1)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&	  if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isStatic(field.getModifiers()))    if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isStatic(field.getModifiers())    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
7	[BUG]  [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)  &&  useTransients  ||!Modifier.isStatic(field.getModifiers())  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)  &&  useTransients  ||!Modifier.isStatic(field.getModifiers())  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)  &&  useTransients  ||!Modifier.isStatic(field.getModifiers())  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)  &&  useTransients  ||!Modifier.isStatic(field.getModifiers())  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(excludeFields,    field.getName())&&    (field.getName().indexOf('$')    ==    -1)    &&    useTransients    ||!Modifier.isStatic(field.getModifiers())    if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)  &&  useTransients  ||!Modifier.isStatic(field.getModifiers())	  	non-compiled	[CE]  ')'  expected	23	None	add
8	[BUG]  [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)  &&  useTransients  ||!Modifier.isStatic(field.getModifiers())  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')!=  -1)  &&  useTransients  ||!Modifier.isStatic(field.getModifiers())  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)  &&  useTransients  ||!Modifier.isStatic(field.getModifiers())  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')!=  -1)  &&  useTransients  ||!Modifier.isStatic(field.getModifiers())  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(excludeFields,    field.getName())&&    (field.getName().indexOf('$')    ==    -1)    &&    useTransients    ||!Modifier.isStatic(field.getModifiers())    if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')!=  -1)  &&  useTransients  ||!Modifier.isStatic(field.getModifiers())	  	non-compiled	[CE]  ')'  expected	23	None	add
9	[BUG]  [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)  &&  useTransients  ||!Modifier.isStatic(field.getModifiers())  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)  &&  usedTransients  ||!Modifier.isStatic(field.getModifiers())  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)  &&  useTransients  ||!Modifier.isStatic(field.getModifiers())  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)  &&  usedTransients  ||!Modifier.isStatic(field.getModifiers())  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(excludeFields,    field.getName())&&    (field.getName().indexOf('$')    ==    -1)    &&    useTransients    ||!Modifier.isStatic(field.getModifiers())    if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)  &&  usedTransients  ||!Modifier.isStatic(field.getModifiers())	  	non-compiled	[CE]  ')'  expected	23	None	add
10	[BUG]  [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)  &&  useTransients  ||!Modifier.isStatic(field.getModifiers())  If(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)  &&  useTransients  ||!Modifier.isStatic(field.getModifiers())  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)  &&  useTransients  ||!Modifier.isStatic(field.getModifiers())  If(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)  &&  useTransients  ||!Modifier.isStatic(field.getModifiers())  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(excludeFields,    field.getName())&&    (field.getName().indexOf('$')    ==    -1)    &&    useTransients    ||!Modifier.isStatic(field.getModifiers())    If(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)  &&  useTransients  ||!Modifier.isStatic(field.getModifiers())	  	non-compiled	[CE]  ')'  expected	23	None	add
11	[BUG]  [BUGGY]  if(!ArrayUtils.contains(field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers())))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(!ArrayUtils.contains(field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers())))  {  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers())))  {	  if(!ArrayUtils.contains(field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isStatic(field.getModifiers())))    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
12	[BUG]  [BUGGY]  String[]  fieldValues  =  clazz.getDeclaredFields();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  String[]  fieldValues  =  clazz.getDeclaredFields();  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	String[]  fieldValues  =  clazz.getDeclaredFields();	          Field[]    fieldValues    =    clazz.getDeclaredFields();    String[]    fieldValues    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
13	[BUG]  [BUGGY]  Object[]  fieldValues  =  clazz.getDeclaredFields();  String[]  fieldValues  =  clazz.getDeclaredFields();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  Object[]  fieldValues  =  clazz.getDeclaredFields();  String[]  fieldValues  =  clazz.getDeclaredFields();  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Object[]  fieldValues  =  clazz.getDeclaredFields();  String[]  fieldValues  =  clazz.getDeclaredFields();	          Field[]    fieldValues    =    clazz.getDeclaredFields();    String[]    fieldValues    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
14	[BUG]  [BUGGY]  if(field.getName().indexOf('$')  ==  -1)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')!=  -1)&&  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(field.getName().indexOf('$')  ==  -1)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')!=  -1)&&  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(field.getName().indexOf('$')  ==  -1)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')!=  -1)&&	  if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isStatic(field.getModifiers()))    if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')!=    -1)&&(useTransients    ||!Modifier.isStatic(field.getModifiers()))    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
15	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields);  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Field[]  fields  =  clazz.getDeclaredFields(excludeFields);	  Field[]    fields    =    field.getDeclaredFields(excludeFields);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
16	[BUG]  [BUGGY]  Field[]  fields  =  field.getDeclaredFields(excludeFields,  useTransients);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  Field[]  fields  =  field.getDeclaredFields(excludeFields,  useTransients);  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Field[]  fields  =  field.getDeclaredFields(excludeFields,  useTransients);	  Field[]    fields    =    field.getDeclaredFields(excludeFields);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
17	[BUG]  [BUGGY]  Field[]  fields  =  field.getDeclaredFields(excludeFields,  builder);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  Field[]  fields  =  field.getDeclaredFields(excludeFields,  builder);  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Field[]  fields  =  field.getDeclaredFields(excludeFields,  builder);	  Field[]    fields    =    field.getDeclaredFields(excludeFields);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
18	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers())  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	add	if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers())	  if(!ArrayUtils.contains(excludeFields,    field.getName())&&    (field.getName().indexOf('$')    ==    -1)    &&    useTransients    ||!Modifier.isStatic(field.getModifiers())    	compilable	  [FE]  AssertionFailedError  	24	2	replace
19	[BUG]  [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers())  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers())  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers())	  if(!ArrayUtils.contains(excludeFields,    field.getName())&&    (field.getName().indexOf('$')    ==    -1)    &&    useTransients    ||!Modifier.isStatic(field.getModifiers())    	compilable	  [FE]  AssertionFailedError  	24	2	replace
20	[BUG]  [BUGGY]  if(!ArrayUtils.contains(field,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isStatic(field.getModifiers())  [CE]  no  suitable  method  found  for  contains(Field,String)  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(!ArrayUtils.contains(field,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isStatic(field.getModifiers())  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(field,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isStatic(field.getModifiers())	  if(!ArrayUtils.contains(excludeFields,    field.getName())&&    (field.getName().indexOf('$')    ==    -1)    &&    useTransients    ||!Modifier.isStatic(field.getModifiers())    	non-compiled	[CE]  no  suitable  method  found  for  contains(Field,String)	24	None	replace
21	[BUG]  [BUGGY]  Field[]  fields  =  field.getSuperclassFields();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  Field[]  fields  =  field.getSuperclassFields();  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Field[]  fields  =  field.getSuperclassFields();	  Field[]    fields    =    clazz.getSuperclassFields();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
22	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields(field);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  Field[]  fields  =  clazz.getFields(field);  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Field[]  fields  =  clazz.getFields(field);	  Field[]    fields    =    clazz.getDeclaredFields(field);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
23	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclassFields(field);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  Field[]  fields  =  clazz.getSuperclassFields(field);  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Field[]  fields  =  clazz.getSuperclassFields(field);	  Field[]    fields    =    clazz.getDeclaredFields(field);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
24	[BUG]  [BUGGY]  Field[]  fieldValues  =  clazz.getFieldValues(field);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  Field[]  fieldValues  =  clazz.getFieldValues(field);  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Field[]  fieldValues  =  clazz.getFieldValues(field);	  Field[]    fieldValues    =    clazz.getDeclaredFields(field);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
25	[BUG]  [BUGGY]  Field[]  fieldValues  =  clazz.getDeclaredFields(field.getName());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  Field[]  fieldValues  =  clazz.getDeclaredFields(field.getName());  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Field[]  fieldValues  =  clazz.getDeclaredFields(field.getName());	  Field[]    fieldValues    =    clazz.getDeclaredFields(field);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
26	[BUG]  [BUGGY]  Field[]  fieldsValues  =  clazz.getDeclaredFields();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  Field[]  fieldsValues  =  clazz.getDeclaredFields();  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Field[]  fieldsValues  =  clazz.getDeclaredFields();	          Field[]    fieldValues    =    clazz.getDeclaredFields();    Field[]    fieldsValues    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
27	[BUG]  [BUGGY]  Field[]  fieldsValues  =  clazz.getFields();  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  Field[]  fieldsValues  =  clazz.getFields();  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Field[]  fieldsValues  =  clazz.getFields();	          Field[]    fieldValues    =    clazz.getDeclaredFields();    Field[]    fieldsValues    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
28	[BUG]  [BUGGY]  Field[]  fieldsValues  =  clazz.getTypedFields();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  Field[]  fieldsValues  =  clazz.getTypedFields();  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Field[]  fieldsValues  =  clazz.getTypedFields();	          Field[]    fieldValues    =    clazz.getDeclaredFields();    Field[]    fieldsValues    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
29	[BUG]  [BUGGY]  if(field.getName().indexOf('$')  ==  -1)  {  if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(field.getName().indexOf('$')  ==  -1)  {  if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(field.getName().indexOf('$')  ==  -1)  {  if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!	  if(!ArrayUtils.contains(field,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isTransient(field.getModifiers())))    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
30	[BUG]  [BUGGY]  if(!ArrayUtils.contains(field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers())  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(!ArrayUtils.contains(field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers())  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers())	  if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isTransient(field.getModifiers())    	non-compiled	[CE]  ')'  expected	30	None	replace
31	[BUG]  [BUGGY]          Field[]    fieldValues    =    clazz.getDeclaredFields();    Field[]  fieldsValues  =  clazz.getDeclaredFields();  Field[]  fieldValues  =  clazz.getDeclaredFields();  Field[]  fieldsValues  =  clazz.getDeclaredFields();  [CE]  variable  fieldValues  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]          Field[]    fieldValues    =    clazz.getDeclaredFields();    Field[]  fieldsValues  =  clazz.getDeclaredFields();  Field[]  fieldValues  =  clazz.getDeclaredFields();  Field[]  fieldsValues  =  clazz.getDeclaredFields();  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	                Field[]        fieldValues        =        clazz.getDeclaredFields();        Field[]    fieldsValues    =    clazz.getDeclaredFields();    Field[]  fieldValues  =  clazz.getDeclaredFields();  Field[]  fieldsValues  =  clazz.getDeclaredFields();	  	non-compiled	[CE]  variable  fieldValues  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	27	None	add
32	[BUG]  [BUGGY]          Field[]    fieldValues    =    clazz.getDeclaredFields();    Field[]  fieldsValues  =  clazz.getDeclaredFields();  Field[]  fieldsValues  =  clazz.getDeclaredFields();  Field[]  fieldsValues  =  clazz.getDeclaredFields();  [CE]  variable  fieldsValues  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]          Field[]    fieldValues    =    clazz.getDeclaredFields();    Field[]  fieldsValues  =  clazz.getDeclaredFields();  Field[]  fieldsValues  =  clazz.getDeclaredFields();  Field[]  fieldsValues  =  clazz.getDeclaredFields();  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	                Field[]        fieldValues        =        clazz.getDeclaredFields();        Field[]    fieldsValues    =    clazz.getDeclaredFields();    Field[]  fieldsValues  =  clazz.getDeclaredFields();  Field[]  fieldsValues  =  clazz.getDeclaredFields();	  	non-compiled	[CE]  variable  fieldsValues  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	27	None	add
33	[BUG]  [BUGGY]          Field[]    fieldValues    =    clazz.getDeclaredFields();    Field[]  fieldsValues  =  clazz.getDeclaredFields();  String[]  fieldValues  =  clazz.getDeclaredFields();  Field[]  fieldsValues  =  clazz.getDeclaredFields();  [CE]  variable  fieldValues  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]        AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]          Field[]    fieldValues    =    clazz.getDeclaredFields();    Field[]  fieldsValues  =  clazz.getDeclaredFields();  String[]  fieldValues  =  clazz.getDeclaredFields();  Field[]  fieldsValues  =  clazz.getDeclaredFields();  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	                Field[]        fieldValues        =        clazz.getDeclaredFields();        Field[]    fieldsValues    =    clazz.getDeclaredFields();    String[]  fieldValues  =  clazz.getDeclaredFields();  Field[]  fieldsValues  =  clazz.getDeclaredFields();	  	non-compiled	[CE]  variable  fieldValues  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	27	None	add
34	[BUG]  [BUGGY]  Field[]  fieldValues  =  field.getValues();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  Field[]  fieldValues  =  field.getValues();  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Field[]  fieldValues  =  field.getValues();	  Field[]    fieldValues    =    field.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
35	[BUG]  [BUGGY]  Field[]  fieldValues  =  field.get(object);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  Field[]  fieldValues  =  field.get(object);  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Field[]  fieldValues  =  field.get(object);	  Field[]    fieldValues    =    field.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
36	[BUG]  [BUGGY]  if(!ArrayUtils.contains(field,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers()))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(!ArrayUtils.contains(field,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers()))  {  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(field,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers()))  {	  if(!ArrayUtils.contains(field,    field.getName())&&    (field.getName().indexOf('$')    ==    -1)    &&    useTransients    ||!Modifier.isStatic(field.getModifiers()))    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
37	[BUG]  [BUGGY]  if(!ArrayUtils.contains(field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers()))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(!ArrayUtils.contains(field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers()))  {  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers()))  {	  if(!ArrayUtils.contains(field,    field.getName())&&    (field.getName().indexOf('$')    ==    -1)    &&    useTransients    ||!Modifier.isStatic(field.getModifiers()))    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
38	[BUG]  [BUGGY]  if(!ArrayUtils.contains(object,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers()))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(!ArrayUtils.contains(object,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers()))  {  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(object,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers()))  {	  if(!ArrayUtils.contains(field,    field.getName())&&    (field.getName().indexOf('$')    ==    -1)    &&    useTransients    ||!Modifier.isStatic(field.getModifiers()))    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
39	[BUG]  [BUGGY]  if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  >=  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))  [CE]  no  suitable  method  found  for  contains(Field,String)  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  >=  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  >=  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))	  if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    >=    -1)&&(useTransients    ||!Modifier.isTransient(field.getModifiers()))    	non-compiled	[CE]  no  suitable  method  found  for  contains(Field,String)	34	None	replace
40	[BUG]  [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  >=  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  >=  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  >=  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  >=  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    >=    -1)&&(useTransients    ||!Modifier.isTransient(field.getModifiers()))    if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  >=  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))	  	non-compiled	[CE]  ')'  expected	33	None	add
41	[BUG]  [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  >=  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')!=  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  >=  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')!=  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    >=    -1)&&(useTransients    ||!Modifier.isTransient(field.getModifiers()))    if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')!=  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))	  	non-compiled	[CE]  ')'  expected	33	None	add
42	[BUG]  [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  >=  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  >>  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  >=  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  >>  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    >=    -1)&&(useTransients    ||!Modifier.isTransient(field.getModifiers()))    if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  >>  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))	  	non-compiled	[CE]  ')'  expected	33	None	add
43	[BUG]  [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  >=  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  >=  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    >=    -1)&&(useTransients    ||!Modifier.isTransient(field.getModifiers()))    if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))	  	non-compiled	[CE]  ')'  expected	33	None	add
44	[BUG]  [BUGGY]  if(!ArrayUtils.contains(fieldValue,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers()))  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(!ArrayUtils.contains(fieldValue,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers()))  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(fieldValue,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers()))	  if(!ArrayUtils.contains(object,    field.getName())&&    (field.getName().indexOf('$')    ==    -1)&&    useTransients    ||!Modifier.isTransient(field.getModifiers()))    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
45	[BUG]  [BUGGY]  Field[]  fieldValues  =  class.getDeclaredFields();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  Field[]  fieldValues  =  class.getDeclaredFields();  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Field[]  fieldValues  =  class.getDeclaredFields();	          Field[]    fieldValues    =    clazz.getDeclaredFields();    Field[]    fieldValues    =    class.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
46	[BUG]  [BUGGY]  Field[]  fieldValues  =  clazz.getDeclaredFieldValues();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  Field[]  fieldValues  =  clazz.getDeclaredFieldValues();  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Field[]  fieldValues  =  clazz.getDeclaredFieldValues();	  Field[]    fieldValues    =    clazz.getFieldValues();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
47	[BUG]  [BUGGY]  AccessibleObject.setField(field,  false);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  AccessibleObject.setField(field,  false);  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	AccessibleObject.setField(field,  false);	  AccessibleObject.setAccessible(field,    true);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
48	[BUG]  [BUGGY]  AccessibleObject.setInstance(field,  true);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  AccessibleObject.setInstance(field,  true);  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	AccessibleObject.setInstance(field,  true);	  AccessibleObject.setAccessible(field,    true);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
49	[BUG]  [BUGGY]  if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))  &&  (!  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))  &&  (!  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))  &&  (!	  if(!ArrayUtils.contains(field,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isTransient(field.getModifiers())    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
50	[BUG]  [BUGGY]  if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  >=  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers())  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  >=  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers())  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  >=  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers())	  if(!ArrayUtils.contains(field,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isTransient(field.getModifiers())    	non-compiled	[CE]  ')'  expected	31	None	replace
51	[BUG]  [BUGGY]  Field[]  fieldValues  =  clazz.getSuperclassValues(field);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  Field[]  fieldValues  =  clazz.getSuperclassValues(field);  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Field[]  fieldValues  =  clazz.getSuperclassValues(field);	  Field[]    fieldValues    =    clazz.getSuperclassValues();    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
52	[BUG]  [BUGGY]  fieldValues  =  clazz.getDeclaredFields();  Field[]  fields  =  clazz.getDeclaredFields();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  fieldValues  =  clazz.getDeclaredFields();  Field[]  fields  =  clazz.getDeclaredFields();  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	fieldValues  =  clazz.getDeclaredFields();  Field[]  fields  =  clazz.getDeclaredFields();	          Field[]    fieldValues    =    clazz.getDeclaredFields();    Field[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
53	[BUG]  [BUGGY]  String[]  fields  =  clazz.getDeclaredFields();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  String[]  fields  =  clazz.getDeclaredFields();  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	String[]  fields  =  clazz.getDeclaredFields();	          Field[]    fieldValues    =    clazz.getDeclaredFields();    Field[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
54	[BUG]  [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields();  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Object[]  fields  =  clazz.getDeclaredFields();	          Field[]    fieldValues    =    clazz.getDeclaredFields();    Field[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
55	[BUG]  [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')!=  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers())  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')!=  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers())  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')!=  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers())	  if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    >=    -1)&&(useTransients    ||!Modifier.isTransient(field.getModifiers())    	non-compiled	[CE]  ')'  expected	39	None	replace
56	[BUG]  [BUGGY]  if(!ArrayUtils.contains(field.getName(),  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))  [CE]  no  suitable  method  found  for  contains(String,String)  [FE]        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(!ArrayUtils.contains(field.getName(),  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(field.getName(),  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))	  if(!ArrayUtils.contains(field,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isTransient(field.getModifiers()))    	non-compiled	[CE]  no  suitable  method  found  for  contains(String,String)	12	None	replace
57	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(!ArrayUtils.contains(fields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	add	if(!ArrayUtils.contains(fields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))	  if(!ArrayUtils.contains(field,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isTransient(field.getModifiers()))    	compilable	  [FE]  AssertionFailedError  	12	2	replace
58	[BUG]  [BUGGY]  if(!ArrayUtils.contains(fields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(!ArrayUtils.contains(fields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(fields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))	  if(!ArrayUtils.contains(field,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isTransient(field.getModifiers()))    	compilable	  [FE]  AssertionFailedError  	12	2	replace
59	[BUG]  [BUGGY]  Object[]  fieldValues  =  clazz.getDeclaredFields();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  Object[]  fieldValues  =  clazz.getDeclaredFields();  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Object[]  fieldValues  =  clazz.getDeclaredFields();	          Field[]    fieldValues    =    clazz.getDeclaredFields();    Field[]    fieldValues    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
60	[BUG]  [BUGGY]  if(!ArrayUtils.contains(field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(!ArrayUtils.contains(field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))  {  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))  {	  if(!ArrayUtils.contains(field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isTransient(field.getModifiers()))    	non-compiled	[CE]  ')'  expected	13	None	replace
61	[BUG]  [BUGGY]  if(!ArrayUtils.contains(field.getName())&&(field.getName().indexOf('$')  >=  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))  [CE]  no  suitable  method  found  for  contains(String)  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(!ArrayUtils.contains(field.getName())&&(field.getName().indexOf('$')  >=  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(field.getName())&&(field.getName().indexOf('$')  >=  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))	  if(!ArrayUtils.contains(field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isTransient(field.getModifiers()))    	non-compiled	[CE]  no  suitable  method  found  for  contains(String)	13	None	replace
62	[BUG]  [BUGGY]  if(field.getName().indexOf('$')  ==  -1)  {  if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(field.getName().indexOf('$')  ==  -1)  {  if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(field.getName().indexOf('$')  ==  -1)  {  if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!	  if(!ArrayUtils.contains(field,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&    useTransients    ||!Modifier.isStatic(field.getModifiers()))    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
63	[BUG]  [BUGGY]  if(!ObjectUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))  [CE]  cannot  find  symbol  ObjectUtils  [FE]        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(!ObjectUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ObjectUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))	  if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isStatic(field.getModifiers()))    if(!ObjectUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isStatic(field.getModifiers()))    	non-compiled	[CE]  cannot  find  symbol  ObjectUtils	41	None	replace
64	[BUG]  [BUGGY]  Field[]  fields  =  class.getDeclaredFields(field);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  Field[]  fields  =  class.getDeclaredFields(field);  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Field[]  fields  =  class.getDeclaredFields(field);	  Field[]    fields    =    class.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
65	[BUG]  [BUGGY]  if(field.getName()  ==  null  ||!ArrayUtils.contains(field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers())))  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(field.getName()  ==  null  ||!ArrayUtils.contains(field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers())))  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(field.getName()  ==  null  ||!ArrayUtils.contains(field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers())))	  if(!ArrayUtils.contains(field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isStatic(field.getModifiers())))    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
66	[BUG]  [BUGGY]  if(!ArrayUtils.contains(field.getName())&&(field.getName().indexOf('$')  >=  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers())))  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(!ArrayUtils.contains(field.getName())&&(field.getName().indexOf('$')  >=  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers())))  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(field.getName())&&(field.getName().indexOf('$')  >=  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers())))	  if(!ArrayUtils.contains(field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isStatic(field.getModifiers())))    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
67	[BUG]  [BUGGY]  Field[]  fieldValues  =  field.getFieldValues();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  Field[]  fieldValues  =  field.getFieldValues();  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Field[]  fieldValues  =  field.getFieldValues();	  Field[]    fieldValues    =    field.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
68	[BUG]  [BUGGY]  if(field.getName()  ==  null  ||!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers())))  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(field.getName()  ==  null  ||!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers())))  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(field.getName()  ==  null  ||!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers())))	  if(!ArrayUtils.contains(field,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isTransient(field.getModifiers())))    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
69	[BUG]  [BUGGY]  if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))  [CE]  no  suitable  method  found  for  contains(Field,String)  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))	  if(!ArrayUtils.contains(field,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isTransient(field.getModifiers())))    	non-compiled	[CE]  no  suitable  method  found  for  contains(Field,String)	3	None	replace
70	[BUG]  [BUGGY]  if(field.getType()  ==  Token.NAME)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers())  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(field.getType()  ==  Token.NAME)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers())  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(field.getType()  ==  Token.NAME)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers())	  if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isStatic(field.getModifiers()))    if(!ObjectUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isStatic(field.getModifiers()))    	non-compiled	[CE]  ')'  expected	41	None	replace
71	[BUG]  [BUGGY]  if(field.getType()  ==  Token.FUNCTION)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers())  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(field.getType()  ==  Token.FUNCTION)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers())  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(field.getType()  ==  Token.FUNCTION)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers())	  if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isStatic(field.getModifiers()))    if(!ObjectUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isStatic(field.getModifiers()))    	non-compiled	[CE]  ')'  expected	41	None	replace
72	[BUG]  [BUGGY]  if(!ArrayUtils.contains(object,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))  [CE]  no  suitable  method  found  for  contains(Object,String)  [FE]        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(!ArrayUtils.contains(object,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(object,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers()))	  if(!ArrayUtils.contains(field,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isTransient(field.getModifiers()))    	non-compiled	[CE]  no  suitable  method  found  for  contains(Object,String)	12	None	replace
73	[BUG]  [BUGGY]  Field[]  fieldValues  =  clazz.getAccessibleFields(field);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  Field[]  fieldValues  =  clazz.getAccessibleFields(field);  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Field[]  fieldValues  =  clazz.getAccessibleFields(field);	  Field[]    fieldValues    =    clazz.getAccessibleFields();    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
74	[BUG]  [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  >=  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers())))  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  >=  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers())))  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  >=  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers())))	  if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isStatic(field.getModifiers())))    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
75	[BUG]  [BUGGY]  Field[]  fields  =  field.getDeclaredFields(iConstant);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  Field[]  fields  =  field.getDeclaredFields(iConstant);  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Field[]  fields  =  field.getDeclaredFields(iConstant);	  Field[]    fields    =    field.getDeclaredFields(excludeFields);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
76	[BUG]  [BUGGY]  if(field.getType()  ==  Token.NAME)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))  [CE]  'finally'  without  'try'  [FE]        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(field.getType()  ==  Token.NAME)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(field.getType()  ==  Token.NAME)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))	  if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isStatic(field.getModifiers()))    ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isStatic(field.getModifiers()))    	non-compiled	[CE]  'finally'  without  'try'	36	None	replace
77	[BUG]  [BUGGY]  if(field.getName()!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))  [CE]  'finally'  without  'try'  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(field.getName()!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(field.getName()!=  null)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))	  if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isStatic(field.getModifiers()))    ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isStatic(field.getModifiers()))    	non-compiled	[CE]  'finally'  without  'try'	36	None	replace
78	[BUG]  [BUGGY]  Field[]  fieldValues  =  clazz.getDeclaredFields(field,  builder);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  Field[]  fieldValues  =  clazz.getDeclaredFields(field,  builder);  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Field[]  fieldValues  =  clazz.getDeclaredFields(field,  builder);	  Field[]    fieldValues    =    clazz.getDeclaredFields(field);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
79	[BUG]  [BUGGY]          Field[]    fieldValues    =    clazz.getDeclaredFields();    Field[]  fieldsValues  =  clazz.getDeclaredFields();  Object[]  fieldValues  =  clazz.getDeclaredFields();  Field[]  fieldsValues  =  clazz.getDeclaredFields();  [CE]  variable  fieldValues  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]          Field[]    fieldValues    =    clazz.getDeclaredFields();    Field[]  fieldsValues  =  clazz.getDeclaredFields();  Object[]  fieldValues  =  clazz.getDeclaredFields();  Field[]  fieldsValues  =  clazz.getDeclaredFields();  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	                Field[]        fieldValues        =        clazz.getDeclaredFields();        Field[]    fieldsValues    =    clazz.getDeclaredFields();    Object[]  fieldValues  =  clazz.getDeclaredFields();  Field[]  fieldsValues  =  clazz.getDeclaredFields();	  	non-compiled	[CE]  variable  fieldValues  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	27	None	add
80	[BUG]  [BUGGY]  Object[]  fieldValues  =  clazz.getDeclaredFields();  Field[]  fields  =  clazz.getDeclaredFields();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  Object[]  fieldValues  =  clazz.getDeclaredFields();  Field[]  fields  =  clazz.getDeclaredFields();  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Object[]  fieldValues  =  clazz.getDeclaredFields();  Field[]  fields  =  clazz.getDeclaredFields();	          Field[]    fieldValues    =    clazz.getDeclaredFields();    Field[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
81	[BUG]  [BUGGY]  if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  (useTransients  ||!Modifier.isTransient(field.getModifiers())))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  (useTransients  ||!Modifier.isTransient(field.getModifiers())))  {  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  (useTransients  ||!Modifier.isTransient(field.getModifiers())))  {	  if(!ArrayUtils.contains(field,    field.getName())&&    (field.getName().indexOf('$')    ==    -1)    &&    useTransients    ||!Modifier.isStatic(field.getModifiers()))    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
82	[BUG]  [BUGGY]  if(field.getName()  ==  null  ||!ArrayUtils.contains(field,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers()))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(field.getName()  ==  null  ||!ArrayUtils.contains(field,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers()))  {  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(field.getName()  ==  null  ||!ArrayUtils.contains(field,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers()))  {	  if(!ArrayUtils.contains(field,    field.getName())&&    (field.getName().indexOf('$')    ==    -1)    &&    useTransients    ||!Modifier.isStatic(field.getModifiers()))    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
83	[BUG]  [BUGGY]  if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  >=  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers())))  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  >=  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers())))  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  >=  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers())))	  if(!ArrayUtils.contains(field,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isStatic(field.getModifiers())))    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
84	[BUG]  [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)  &&  useTransients  ||!Modifier.isStatic(field.getModifiers())  ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)  &&  useTransients  ||!Modifier.isStatic(field.getModifiers())  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)  &&  useTransients  ||!Modifier.isStatic(field.getModifiers())  ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)  &&  useTransients  ||!Modifier.isStatic(field.getModifiers())  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(excludeFields,    field.getName())&&    (field.getName().indexOf('$')    ==    -1)    &&    useTransients    ||!Modifier.isStatic(field.getModifiers())    ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)  &&  useTransients  ||!Modifier.isStatic(field.getModifiers())	  	non-compiled	[CE]  ')'  expected	23	None	add
85	[BUG]  [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)  &&  useTransients  ||!Modifier.isStatic(field.getModifiers())  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)  &&  useTransients  ||  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)  &&  useTransients  ||!Modifier.isStatic(field.getModifiers())  if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)  &&  useTransients  ||  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(excludeFields,    field.getName())&&    (field.getName().indexOf('$')    ==    -1)    &&    useTransients    ||!Modifier.isStatic(field.getModifiers())    if(!ArrayUtils.contains(excludeFields,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)  &&  useTransients  ||	  	non-compiled	[CE]  ')'  expected	23	None	add
86	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclasses(field);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  Field[]  fields  =  clazz.getSuperclasses(field);  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Field[]  fields  =  clazz.getSuperclasses(field);	  Field[]    fields    =    clazz.getSuperclasses();    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
87	[BUG]  [BUGGY]  AccessibleObject.setAccessible(field);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  AccessibleObject.setAccessible(field);  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	AccessibleObject.setAccessible(field);	  AccessibleObject.setAccessible(fields,    true);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
88	[BUG]  [BUGGY]  if(!ArrayUtils.contains(object,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isStatic(field.getModifiers()))  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(!ArrayUtils.contains(object,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isStatic(field.getModifiers()))  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(object,  field.getName())&&  (field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isStatic(field.getModifiers()))	  if(!ArrayUtils.contains(object,    field.getName())&&    (field.getName().indexOf('$')    ==    -1)&&    useTransients    ||!Modifier.isTransient(field.getModifiers()))    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
89	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(field.getName());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(field.getName());  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Field[]  fields  =  clazz.getDeclaredFields(field.getName());	  Field[]    fields    =    clazz.getDeclaredFields(field);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
90	[BUG]  [BUGGY]  Class  <?>[]  fieldValues  =  clazz.getDeclaredFields();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  Class  <?>[]  fieldValues  =  clazz.getDeclaredFields();  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Class  <?>[]  fieldValues  =  clazz.getDeclaredFields();	          Field[]    fieldValues    =    clazz.getDeclaredFields();    Field[]    fieldValues    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
91	[BUG]  [BUGGY]  if(field.getName().indexOf('$')  ==  -1)  {  ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(field.getName().indexOf('$')  ==  -1)  {  ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(field.getName().indexOf('$')  ==  -1)  {  ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||	  if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isStatic(field.getModifiers()))    ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isStatic(field.getModifiers()))    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
92	[BUG]  [BUGGY]  if(!ArrayUtils.contains(field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))  [CE]  no  suitable  method  found  for  contains(String)  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(!ArrayUtils.contains(field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))	  if(!ArrayUtils.contains(field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isTransient(field.getModifiers()))    	non-compiled	[CE]  no  suitable  method  found  for  contains(String)	13	None	replace
93	[BUG]  [BUGGY]  AccessibleObject.setAccessible(field,  false,  true);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  AccessibleObject.setAccessible(field,  false,  true);  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	AccessibleObject.setAccessible(field,  false,  true);	  AccessibleObject.setAccessible(field,    false);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
94	[BUG]  [BUGGY]          Field[]    fieldValues    =    clazz.getDeclaredFields();    Field[]  fieldsValues  =  clazz.getDeclaredFields();  Class  <?>  fieldValues  =  clazz.getDeclaredFields();  Field[]  fieldsValues  =  clazz.getDeclaredFields();  [CE]  variable  fieldValues  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]          Field[]    fieldValues    =    clazz.getDeclaredFields();    Field[]  fieldsValues  =  clazz.getDeclaredFields();  Class  <?>  fieldValues  =  clazz.getDeclaredFields();  Field[]  fieldsValues  =  clazz.getDeclaredFields();  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	                Field[]        fieldValues        =        clazz.getDeclaredFields();        Field[]    fieldsValues    =    clazz.getDeclaredFields();    Class  <?>  fieldValues  =  clazz.getDeclaredFields();  Field[]  fieldsValues  =  clazz.getDeclaredFields();	  	non-compiled	[CE]  variable  fieldValues  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	27	None	add
95	[BUG]  [BUGGY]  AccessibleObject.setAccessible(field,  true,  false);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  AccessibleObject.setAccessible(field,  true,  false);  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	AccessibleObject.setAccessible(field,  true,  false);	  AccessibleObject.setAccessible(field,    true);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
96	[BUG]  [BUGGY]  Field[]  fieldValues  =(class  <?>)clazz.getDeclaredFields();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  Field[]  fieldValues  =(class  <?>)clazz.getDeclaredFields();  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Field[]  fieldValues  =(class  <?>)clazz.getDeclaredFields();	          Field[]    fieldValues    =    clazz.getDeclaredFields();    Field[]    fieldValues    =    class.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
97	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(field,  iConstant);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(field,  iConstant);  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Field[]  fields  =  clazz.getDeclaredFields(field,  iConstant);	  Field[]    fields    =    clazz.getDeclaredFields(field);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
98	[BUG]  [BUGGY]  if(!ArrayUtils.contains(field.getName())&&(field.getName().indexOf('$')  >=  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers())))  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(!ArrayUtils.contains(field.getName())&&(field.getName().indexOf('$')  >=  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers())))  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(field.getName())&&(field.getName().indexOf('$')  >=  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers())))	  if(!ArrayUtils.contains(field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isTransient(field.getModifiers())))    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
99	[BUG]  [BUGGY]  if(!ArrayUtils.contains(field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers())))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(!ArrayUtils.contains(field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers())))  {  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers())))  {	  if(!ArrayUtils.contains(field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isTransient(field.getModifiers())))    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
100	[BUG]  [BUGGY]  Field[]  fieldValues  =  clazz.getDeclaredFields(field,  iConstant);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  Field[]  fieldValues  =  clazz.getDeclaredFields(field,  iConstant);  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Field[]  fieldValues  =  clazz.getDeclaredFields(field,  iConstant);	  Field[]    fieldValues    =    clazz.getDeclaredFields(field);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
101	[BUG]  [BUGGY]  if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers())  [CE]  no  suitable  method  found  for  contains(Field,String)  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers())  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers())	  if(!ArrayUtils.contains(excludeFields,    field.getName())&&    (field.getName().indexOf('$')    ==    -1)    &&    useTransients    ||!Modifier.isStatic(field.getModifiers())    	non-compiled	[CE]  no  suitable  method  found  for  contains(Field,String)	24	None	replace
102	[BUG]  [BUGGY]  if(!ArrayUtils.contains(field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isStatic(field.getModifiers()))  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(!ArrayUtils.contains(field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isStatic(field.getModifiers()))  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isStatic(field.getModifiers()))	  if(!ArrayUtils.contains(object,    field.getName())&&    (field.getName().indexOf('$')    ==    -1)&&    useTransients    ||!Modifier.isTransient(field.getModifiers()))    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
103	[BUG]  [BUGGY]  if(!ArrayUtils.contains(field.getName(),  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers()))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(!ArrayUtils.contains(field.getName(),  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers()))  {  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(field.getName(),  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&  useTransients  ||!Modifier.isTransient(field.getModifiers()))  {	  if(!ArrayUtils.contains(field,    field.getName())&&    (field.getName().indexOf('$')    ==    -1)    &&    useTransients    ||!Modifier.isStatic(field.getModifiers()))    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
104	[BUG]  [BUGGY]  if(!ArrayUtils.contains(field.getName(),  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers())))  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(!ArrayUtils.contains(field.getName(),  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers())))  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(field.getName(),  field.getName())&&(field.getName().indexOf('$')  ==  -1)&&(useTransients  ||!Modifier.isTransient(field.getModifiers())))	  if(!ArrayUtils.contains(field,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isStatic(field.getModifiers())))    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
105	[BUG]  [BUGGY]  Field[]  fields  =  excludeFields.getDeclaredFields();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  Field[]  fields  =  excludeFields.getDeclaredFields();  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Field[]  fields  =  excludeFields.getDeclaredFields();	  Field[]    fields    =    field.getDeclaredFields(excludeFields);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
106	[BUG]  [BUGGY]  Field[]  fieldValues  =  clazz.getSuperClassValues();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  Field[]  fieldValues  =  clazz.getSuperClassValues();  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Field[]  fieldValues  =  clazz.getSuperClassValues();	  Field[]    fieldValues    =    clazz.getSuperclassValues();    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
107	[BUG]  [BUGGY]  Field[]  fields  =  field.getReferences();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  Field[]  fields  =  field.getReferences();  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Field[]  fields  =  field.getReferences();	  Field[]    fields    =    field.getFields();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
108	[BUG]  [BUGGY]  if(field.getName().indexOf('$')  ==  -1)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)  [CE]  'finally'  without  'try'  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(field.getName().indexOf('$')  ==  -1)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(field.getName().indexOf('$')  ==  -1)  {  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  ==  -1)	  if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isStatic(field.getModifiers()))    if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')!=    -1)&&(useTransients    ||!Modifier.isStatic(field.getModifiers()))    	non-compiled	[CE]  'finally'  without  'try'	19	None	replace
109	[BUG]  [BUGGY]  if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  ==  -1)  &&(useTransients  ||!Modifier.isTransient(field.getModifiers()))  &&  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  ==  -1)  &&(useTransients  ||!Modifier.isTransient(field.getModifiers()))  &&  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  ==  -1)  &&(useTransients  ||!Modifier.isTransient(field.getModifiers()))  &&	  if(!ArrayUtils.contains(field,    field.getName())&&(field.getName().indexOf('$')    ==    -1)&&(useTransients    ||!Modifier.isStatic(field.getModifiers())    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
110	[BUG]  [BUGGY]  Object[]  fields  =  field.getDeclaredFields();  AccessibleObject.setAccessible(fields,  false);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  Object[]  fields  =  field.getDeclaredFields();  AccessibleObject.setAccessible(fields,  false);  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Object[]  fields  =  field.getDeclaredFields();  AccessibleObject.setAccessible(fields,  false);	  Object[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(fields,    false);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
111	[BUG]  [BUGGY]  Field[]  fieldValues  =  field.getType();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  Field[]  fieldValues  =  field.getType();  [BUGGY]      if  (!ArrayUtils.contains(excludeFields,  field.getName())      &&  (field.getName().indexOf('$')  ==  -1)          &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	Field[]  fieldValues  =  field.getType();	  Field[]    fieldValues    =    field.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
112	[BUG]  [BUGGY]  if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  >=  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))  [CE]  no  suitable  method  found  for  contains(Field,String)  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  >=  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(field,  field.getName())&&(field.getName().indexOf('$')  >=  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))	  if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    >=    -1)&&(useTransients    ||!Modifier.isTransient(field.getModifiers()))    	non-compiled	[CE]  no  suitable  method  found  for  contains(Field,String)	34	None	replace
113	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  >=  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	add	if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  >=  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))	  if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    >=    -1)&&(useTransients    ||!Modifier.isTransient(field.getModifiers()))    	compilable	  [FE]  AssertionFailedError  	34	2	replace
114	[BUG]  [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  >=  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {      [BUGGY]  if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  >=  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))  [BUGGY]      &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	181	183	1	replace	if(!ArrayUtils.contains(excludeFields,  field.getName())&&(field.getName().indexOf('$')  >=  -1)&&(useTransients  ||!Modifier.isStatic(field.getModifiers()))	  if(!ArrayUtils.contains(excludeFields,    field.getName())&&(field.getName().indexOf('$')    >=    -1)&&(useTransients    ||!Modifier.isTransient(field.getModifiers()))    	compilable	  [FE]  AssertionFailedError  	34	2	replace
