bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  false);  [CE]  no  suitable  method  found  for  setAccessible(String[],boolean)  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  AccessibleObject.setAccessible(excludeFields,  false);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	AccessibleObject.setAccessible(excludeFields,  false);	  AccessibleObject.setAccessible(excludeFields,    true);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],boolean)	30	None	replace
2	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  useTransients);  [CE]  no  suitable  method  found  for  setAccessible(String[],boolean,boolean)  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  useTransients);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	AccessibleObject.setAccessible(excludeFields,  true,  useTransients);	  AccessibleObject.setAccessible(excludeFields,    true);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],boolean,boolean)	30	None	replace
3	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  clazz);  [CE]  no  suitable  method  found  for  setAccessible(String[],boolean,Class<CAP#1>)  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  clazz);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	AccessibleObject.setAccessible(excludeFields,  true,  clazz);	  AccessibleObject.setAccessible(excludeFields,    true);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],boolean,Class<CAP#1>)	30	None	replace
4	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]                        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  fieldValue);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	AccessibleObject.setAccessible(excludeFields,  true,  fieldValue);	  AccessibleObject.setAccessible(excludeFields,    true);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	30	None	replace
5	[BUG]  [BUGGY]  Field[]  fields  =  builder.getDeclaredFields(excludeFields,  clazz);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  builder.getDeclaredFields(excludeFields,  clazz);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  builder.getDeclaredFields(excludeFields,  clazz);	  Field[]    fields    =    clazz.getDeclaredFields(excludeFields,    builder);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
6	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(builder,  excludeFields);  [CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(builder,  excludeFields);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  clazz.getDeclaredFields(builder,  excludeFields);	  Field[]    fields    =    clazz.getDeclaredFields(excludeFields,    builder);    	non-compiled	[CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;	16	None	replace
7	[BUG]  [BUGGY]  Field[]  fields  =  constructer.getDeclaredFields(excludeFields,  clazz);  [CE]  cannot  find  symbol  constructer  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  constructer.getDeclaredFields(excludeFields,  clazz);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  constructer.getDeclaredFields(excludeFields,  clazz);	  Field[]    fields    =    clazz.getDeclaredFields(excludeFields,    builder);    	non-compiled	[CE]  cannot  find  symbol  constructer	16	None	replace
8	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  builder,  useTransients);  [CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  builder,  useTransients);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  builder,  useTransients);	  Field[]    fields    =    clazz.getDeclaredFields(excludeFields,    builder);    	non-compiled	[CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;	16	None	replace
9	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclassesFields();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  clazz.getSuperclassesFields();  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  clazz.getSuperclassesFields();	  Field[]    fields    =    clazz.getSuperclassesArray();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
10	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclassesFieldsArray();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  clazz.getSuperclassesFieldsArray();  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  clazz.getSuperclassesFieldsArray();	  Field[]    fields    =    clazz.getSuperclassesArray();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
11	[BUG]  [BUGGY]  AccessibleObject.setAccessible(emptyFields,  true);  [CE]  cannot  find  symbol  emptyFields  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  AccessibleObject.setAccessible(emptyFields,  true);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	AccessibleObject.setAccessible(emptyFields,  true);	  AccessibleObject.setAccessible(fields,    true);    	non-compiled	[CE]  cannot  find  symbol  emptyFields	11	None	replace
12	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(object,  excludeFields);  [CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(object,  excludeFields);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  clazz.getDeclaredFields(object,  excludeFields);	  Field[]    fields    =    clazz.getDeclaredFields(excludeFields,    object);    	non-compiled	[CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;	19	None	replace
13	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(fieldValue,  excludeFields);  [CE]  cannot  find  symbol  fieldValue  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(fieldValue,  excludeFields);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  clazz.getDeclaredFields(fieldValue,  excludeFields);	  Field[]    fields    =    clazz.getDeclaredFields(excludeFields,    object);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	19	None	replace
14	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(field,  excludeFields);  [CE]  cannot  find  symbol  field  [FE]                        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(field,  excludeFields);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  clazz.getDeclaredFields(field,  excludeFields);	  Field[]    fields    =    clazz.getDeclaredFields(excludeFields,    object);    	non-compiled	[CE]  cannot  find  symbol  field	19	None	replace
15	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  object,  useTransients);  [CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  object,  useTransients);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  object,  useTransients);	  Field[]    fields    =    clazz.getDeclaredFields(excludeFields,    object);    	non-compiled	[CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;	19	None	replace
16	[BUG]  [BUGGY]  Field[]  fields  =  this.excludeFields.getSuperclassFields();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  this.excludeFields.getSuperclassFields();  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  this.excludeFields.getSuperclassFields();	  Field[]    fields    =    excludedFields.getSuperclassFields();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	45	None	replace
17	[BUG]  [BUGGY]  Collections.sort(excludeFields,  this.useTransients);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Collections.sort(excludeFields,  this.useTransients);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Collections.sort(excludeFields,  this.useTransients);	  Collections.sort(this.excludeFields);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	40	None	replace
18	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  useTransients,  false);  [CE]  no  suitable  method  found  for  setAccessible(String[],boolean,boolean)  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  useTransients,  false);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  useTransients,  false);	  Field[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(excludeFields,    useTransients,    true);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],boolean,boolean)	43	None	replace
19	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  useTransients,  true);  [CE]  no  suitable  method  found  for  setAccessible(String[],boolean,boolean)  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  AccessibleObject.setAccessible(excludeFields,  useTransients,  true);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	AccessibleObject.setAccessible(excludeFields,  useTransients,  true);	  Field[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(excludeFields,    useTransients,    true);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],boolean,boolean)	43	None	replace
20	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(useTransients,  excludeFields,  true);  [CE]  no  suitable  method  found  for  setAccessible(boolean,String[],boolean)  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(useTransients,  excludeFields,  true);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(useTransients,  excludeFields,  true);	  Field[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(excludeFields,    useTransients,    true);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,String[],boolean)	43	None	replace
21	[BUG]  [BUGGY]  String[]  fields  =  clazz.getSuperclasses(excludeFields);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  String[]  fields  =  clazz.getSuperclasses(excludeFields);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	String[]  fields  =  clazz.getSuperclasses(excludeFields);	  String[]    fields    =    clazz.getSuperclasses();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
22	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  false);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  false);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  false);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  false);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(fields,    false);    Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  false);	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	12	None	add
23	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  false);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  false);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(fields,    false);    Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	12	None	add
24	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  false);  String[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  false);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]        AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  false);  String[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  false);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(fields,    false);    String[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  false);	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	12	None	add
25	[BUG]  [BUGGY]  Class  <?>  clazz  =  object  ==  null?  object.getSuperclass()  :  excludeFields;  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Class  <?>  clazz  =  object  ==  null?  object.getSuperclass()  :  excludeFields;  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Class  <?>  clazz  =  object  ==  null?  object.getSuperclass()  :  excludeFields;	  Class    <?>    clazz    =    object!=    null?    object.getSuperclass()    :    excludeFields;    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	37	None	replace
26	[BUG]  [BUGGY]  Class  <?>  clazz  =  object!=  null?  object.getSuperclass()  :  excludeFields[0];  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Class  <?>  clazz  =  object!=  null?  object.getSuperclass()  :  excludeFields[0];  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Class  <?>  clazz  =  object!=  null?  object.getSuperclass()  :  excludeFields[0];	  Class    <?>    clazz    =    object!=    null?    object.getSuperclass()    :    excludeFields;    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	37	None	replace
27	[BUG]  [BUGGY]  Class  <?>  clazz  =  object!=  null?  object.getClass()  :  excludeFields;  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Class  <?>  clazz  =  object!=  null?  object.getClass()  :  excludeFields;  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Class  <?>  clazz  =  object!=  null?  object.getClass()  :  excludeFields;	  Class    <?>    clazz    =    object!=    null?    object.getSuperclass()    :    excludeFields;    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	37	None	replace
28	[BUG]  [BUGGY]  Collections.sort(excludeFields,  object);  [CE]  cannot  find  symbol  Collections  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Collections.sort(excludeFields,  object);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Collections.sort(excludeFields,  object);	  Collections.sort(excludeFields,    iConstant);    	non-compiled	[CE]  cannot  find  symbol  Collections	35	None	replace
29	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  Field[]  fields  =  clazz.getFields();  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  clazz.getFields();  Field[]  fields  =  clazz.getFields();  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]    fields    =    clazz.getFields();    Field[]  fields  =  clazz.getFields();	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	5	None	add
30	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  Class  <?>  clazz  =  clazz.getFields();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  clazz.getFields();  Class  <?>  clazz  =  clazz.getFields();  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]    fields    =    clazz.getFields();    Class  <?>  clazz  =  clazz.getFields();	  	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	5	None	add
31	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  String[]  fields  =  clazz.getFields();  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]        AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  clazz.getFields();  String[]  fields  =  clazz.getFields();  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]    fields    =    clazz.getFields();    String[]  fields  =  clazz.getFields();	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	5	None	add
32	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  fields  =  clazz.getFields();  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]          AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  clazz.getFields();  fields  =  clazz.getFields();  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]    fields    =    clazz.getFields();    fields  =  clazz.getFields();	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	5	None	add
33	[BUG]  [BUGGY]  Class  <?>  clazz  =  getRawClass().getComponentType();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Class  <?>  clazz  =  getRawClass().getComponentType();  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Class  <?>  clazz  =  getRawClass().getComponentType();	  Class    <?>    clazz    =    getRawClass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	27	None	replace
34	[BUG]  [BUGGY]  Class  <?>  clazz  =  getRawClass().getSuperclass();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Class  <?>  clazz  =  getRawClass().getSuperclass();  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Class  <?>  clazz  =  getRawClass().getSuperclass();	  Class    <?>    clazz    =    getRawClass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	27	None	replace
35	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  false);  [CE]  cannot  find  symbol  fields  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  AccessibleObject.setAccessible(fields,  false);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	AccessibleObject.setAccessible(fields,  false);	  Field[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(fields,    false);    	non-compiled	[CE]  cannot  find  symbol  fields	13	None	replace
36	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  fields);  [CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  fields);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  fields);	  Field[]    fields    =    clazz.getDeclaredFields(fields,    excludeFields);    	non-compiled	[CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;	17	None	replace
37	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  field);  [CE]  cannot  find  symbol  field  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  field);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  field);	  Field[]    fields    =    clazz.getDeclaredFields(fields,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol  field	17	None	replace
38	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  excludeFields);  [CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  excludeFields);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  excludeFields);	  Field[]    fields    =    clazz.getDeclaredFields(fields,    excludeFields);    	non-compiled	[CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;	17	None	replace
39	[BUG]  [BUGGY]  Collections.sort(excludeFields,  clazz,  builder);  [CE]  cannot  find  symbol  Collections  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Collections.sort(excludeFields,  clazz,  builder);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Collections.sort(excludeFields,  clazz,  builder);	  Collections.sort(excludeFields,    clazz);    	non-compiled	[CE]  cannot  find  symbol  Collections	22	None	replace
40	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  false,  useTransients);  [CE]  no  suitable  method  found  for  setAccessible(String[],boolean,boolean)  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  false,  useTransients);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  false,  useTransients);	  Field[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(excludeFields,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],boolean,boolean)	31	None	replace
41	[BUG]  [BUGGY]  Field[]  fields  =  excludeFields.getSuperclasses(clazz);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  excludeFields.getSuperclasses(clazz);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  excludeFields.getSuperclasses(clazz);	  Field[]    fields    =    clazz.getSuperclasses(excludeFields);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
42	[BUG]  [BUGGY]  Field[]  fields  =  excludeFields.getFields();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  excludeFields.getFields();  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  excludeFields.getFields();	  Field[]    fields    =    object.getFields();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
43	[BUG]  [BUGGY]  Class  <?>  clazz  =  getClass().getRawClass();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Class  <?>  clazz  =  getClass().getRawClass();  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Class  <?>  clazz  =  getClass().getRawClass();	  Class    <?>    clazz    =    getClass().getSuperclass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	29	None	replace
44	[BUG]  [BUGGY]  Class  <?>  clazz  =  getClass().getSuperclassLoader();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Class  <?>  clazz  =  getClass().getSuperclassLoader();  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Class  <?>  clazz  =  getClass().getSuperclassLoader();	  Class    <?>    clazz    =    getClass().getSuperclass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	29	None	replace
45	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  fieldValue,  useTransients);  [CE]  cannot  find  symbol  fieldValue  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  fieldValue,  useTransients);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  fieldValue,  useTransients);	  Field[]    fields    =    clazz.getDeclaredFields(excludeFields,    useTransients);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	18	None	replace
46	[BUG]  [BUGGY]  Collections.sort(object,  excludeFields);  [CE]  cannot  find  symbol  Collections  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Collections.sort(object,  excludeFields);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Collections.sort(object,  excludeFields);	  Collections.sort(excludeFields,    useTransients);    	non-compiled	[CE]  cannot  find  symbol  Collections	23	None	replace
47	[BUG]  [BUGGY]  Collections.sort(excludeFields,  field);  [CE]  cannot  find  symbol  field  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Collections.sort(excludeFields,  field);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Collections.sort(excludeFields,  field);	  Collections.sort(excludeFields,    useTransients);    	non-compiled	[CE]  cannot  find  symbol  field	23	None	replace
48	[BUG]  [BUGGY]  Field[]  fields  =  getFields(excludeFields);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  getFields(excludeFields);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  getFields(excludeFields);	  Field[]    fields    =    getFields();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
49	[BUG]  [BUGGY]  Field[]  fields  =  getFields().toArray(excludeFields);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  getFields().toArray(excludeFields);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  getFields().toArray(excludeFields);	  Field[]    fields    =    getFields();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
50	[BUG]  [BUGGY]  Field[]  fields  =  getFields().toArray(new  Field[fields.size()  ]);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  getFields().toArray(new  Field[fields.size()  ]);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  getFields().toArray(new  Field[fields.size()  ]);	  Field[]    fields    =    getFields();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
51	[BUG]  [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  true);  [CE]  no  suitable  method  found  for  setAccessible(String[],boolean)  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  true);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Object[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  true);	  Object[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(fields,    true);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],boolean)	39	None	replace
52	[BUG]  [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true,  excludeFields);  [CE]  no  suitable  method  found  for  setAccessible(Object[],boolean,String[])  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true,  excludeFields);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Object[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true,  excludeFields);	  Object[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(fields,    true);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Object[],boolean,String[])	39	None	replace
53	[BUG]  [BUGGY]  Collections.sort(excludeFields,  builder,  useTransients);  [CE]  cannot  find  symbol  Collections  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Collections.sort(excludeFields,  builder,  useTransients);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Collections.sort(excludeFields,  builder,  useTransients);	  Collections.sort(excludeFields,    builder);    	non-compiled	[CE]  cannot  find  symbol  Collections	21	None	replace
54	[BUG]  [BUGGY]  Collections.sort(excludeFields,  builder,  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Collections.sort(excludeFields,  builder,  iConstant);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Collections.sort(excludeFields,  builder,  iConstant);	  Collections.sort(excludeFields,    builder);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	21	None	replace
55	[BUG]  [BUGGY]  Collections.sort(excludeFields,  builder,  clazz);  [CE]  cannot  find  symbol  Collections  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Collections.sort(excludeFields,  builder,  clazz);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Collections.sort(excludeFields,  builder,  clazz);	  Collections.sort(excludeFields,    builder);    	non-compiled	[CE]  cannot  find  symbol  Collections	21	None	replace
56	[BUG]  [BUGGY]  Collections.sort(excludeFields,  builder,  iTotal);  [CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Collections.sort(excludeFields,  builder,  iTotal);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Collections.sort(excludeFields,  builder,  iTotal);	  Collections.sort(excludeFields,    builder);    	non-compiled	[CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context	21	None	replace
57	[BUG]  [BUGGY]  Field[]  fields  =  excludeFields!=  null?  null  :  excludeFields.getSuperclassFields();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  excludeFields!=  null?  null  :  excludeFields.getSuperclassFields();  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  excludeFields!=  null?  null  :  excludeFields.getSuperclassFields();	  Field[]    fields    =    excludeFields.getSuperclassFields();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
58	[BUG]  [BUGGY]  Field[]  fields  =  excludeFields  ==  null?  null  :  excludeFields.getSuperclassFields();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  excludeFields  ==  null?  null  :  excludeFields.getSuperclassFields();  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  excludeFields  ==  null?  null  :  excludeFields.getSuperclassFields();	  Field[]    fields    =    excludeFields.getSuperclassFields();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
59	[BUG]  [BUGGY]  Class  <?>  clazz  =  object.getValue();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Class  <?>  clazz  =  object.getValue();  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Class  <?>  clazz  =  object.getValue();	  Class    <?>    clazz    =    object.getRawClass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	14	None	replace
60	[BUG]  [BUGGY]  String[]  fields  =  clazz.getDeclaredFields(excludeFields,  useTransients);  [CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  String[]  fields  =  clazz.getDeclaredFields(excludeFields,  useTransients);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	String[]  fields  =  clazz.getDeclaredFields(excludeFields,  useTransients);	  String[]    fields    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;	33	None	replace
61	[BUG]  [BUGGY]  String[]  fields  =  clazz.getDeclaredFields(excludeFields,  builder);  [CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  String[]  fields  =  clazz.getDeclaredFields(excludeFields,  builder);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	String[]  fields  =  clazz.getDeclaredFields(excludeFields,  builder);	  String[]    fields    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;	33	None	replace
62	[BUG]  [BUGGY]  String[]  fields  =  clazz.getDeclaredFields(fields,  excludeFields);  [CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  String[]  fields  =  clazz.getDeclaredFields(fields,  excludeFields);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	String[]  fields  =  clazz.getDeclaredFields(fields,  excludeFields);	  String[]    fields    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;	33	None	replace
63	[BUG]  [BUGGY]  String[]  fields  =  clazz.getDeclaredFields(excludeFields,  object);  [CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  String[]  fields  =  clazz.getDeclaredFields(excludeFields,  object);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	String[]  fields  =  clazz.getDeclaredFields(excludeFields,  object);	  String[]    fields    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;	33	None	replace
64	[BUG]  [BUGGY]  Class  <?>  clazz  =  getClass(object);  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Class  <?>  clazz  =  getClass(object);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Class  <?>  clazz  =  getClass(object);	  Class    <?>    clazz    =    getClass(excludeFields);    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	34	None	replace
65	[BUG]  [BUGGY]  Class  <?>  clazz  =  getClass(excludeFields,  builder);  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Class  <?>  clazz  =  getClass(excludeFields,  builder);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Class  <?>  clazz  =  getClass(excludeFields,  builder);	  Class    <?>    clazz    =    getClass(excludeFields);    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	34	None	replace
66	[BUG]  [BUGGY]  Class  <?>  clazz  =  getClass(object,  excludeFields);  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Class  <?>  clazz  =  getClass(object,  excludeFields);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Class  <?>  clazz  =  getClass(object,  excludeFields);	  Class    <?>    clazz    =    getClass(excludeFields);    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	34	None	replace
67	[BUG]  [BUGGY]  Class  <?>  clazz  =  getClass(excludeFields,  constructor);  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Class  <?>  clazz  =  getClass(excludeFields,  constructor);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Class  <?>  clazz  =  getClass(excludeFields,  constructor);	  Class    <?>    clazz    =    getClass(excludeFields);    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	34	None	replace
68	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  true,  useTransients,  object);  [CE]  no  suitable  method  found  for  setAccessible(String[],boolean,boolean,Object)  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  true,  useTransients,  object);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  true,  useTransients,  object);	  Field[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(excludeFields,    true,    useTransients);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],boolean,boolean,Object)	32	None	replace
69	[BUG]  [BUGGY]  Field[]  fields  =  excludeFields.getSuperclassFields(clazz);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  excludeFields.getSuperclassFields(clazz);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  excludeFields.getSuperclassFields(clazz);	  Field[]    fields    =    clazz.getSuperclassFields(excludeFields);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
70	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclassFields(excludeFields,  builder);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  clazz.getSuperclassFields(excludeFields,  builder);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  clazz.getSuperclassFields(excludeFields,  builder);	  Field[]    fields    =    clazz.getSuperclassFields(excludeFields);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
71	[BUG]  [BUGGY]  Collections.sort(excludeFields,  constructor,  builder);  [CE]  cannot  find  symbol  constructor  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Collections.sort(excludeFields,  constructor,  builder);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Collections.sort(excludeFields,  constructor,  builder);	  Collections.sort(excludeFields,    constructor);    	non-compiled	[CE]  cannot  find  symbol  constructor	24	None	replace
72	[BUG]  [BUGGY]  Field[]  fields  =  excludeFields!=  null?  null  :  excludeFields.getSuperclasses();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  excludeFields!=  null?  null  :  excludeFields.getSuperclasses();  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  excludeFields!=  null?  null  :  excludeFields.getSuperclasses();	  Field[]    fields    =    excludeFields.getSuperclasses();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
73	[BUG]  [BUGGY]  Field[]  fields  =  excludeFields  ==  null?  null  :  excludeFields.getSuperclasses();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  excludeFields  ==  null?  null  :  excludeFields.getSuperclasses();  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  excludeFields  ==  null?  null  :  excludeFields.getSuperclasses();	  Field[]    fields    =    excludeFields.getSuperclasses();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
74	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  fieldValue);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  fieldValue);	  Field[]    fields    =    clazz.getDeclaredFields(fields);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	42	None	replace
75	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  fieldType);  [CE]  cannot  find  symbol  fieldType  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  fieldType);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  fieldType);	  Field[]    fields    =    clazz.getDeclaredFields(fields);    	non-compiled	[CE]  cannot  find  symbol  fieldType	42	None	replace
76	[BUG]  [BUGGY]  Class  <?>  clazz  =  object!=  null?  null  :  object.getSuperclass();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Class  <?>  clazz  =  object!=  null?  null  :  object.getSuperclass();  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Class  <?>  clazz  =  object!=  null?  null  :  object.getSuperclass();	  Class    <?>    clazz    =    object    ==    null?    null    :    object.getSuperclass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	36	None	replace
77	[BUG]  [BUGGY]  Class  <?>  clazz  =  object  ==  null?  null  :  object.getClass();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Class  <?>  clazz  =  object  ==  null?  null  :  object.getClass();  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Class  <?>  clazz  =  object  ==  null?  null  :  object.getClass();	  Class    <?>    clazz    =    object    ==    null?    null    :    object.getSuperclass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	36	None	replace
78	[BUG]  [BUGGY]  Class  <?>  clazz  =  getClass().getSimpleName();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Class  <?>  clazz  =  getClass().getSimpleName();  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Class  <?>  clazz  =  getClass().getSimpleName();	  Class    <?>    clazz    =    getClass().getComponentType();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	28	None	replace
79	[BUG]  [BUGGY]  Class  <?>  clazz  =  getClass().getReturnType();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Class  <?>  clazz  =  getClass().getReturnType();  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Class  <?>  clazz  =  getClass().getReturnType();	  Class    <?>    clazz    =    getClass().getComponentType();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	28	None	replace
80	[BUG]  [BUGGY]  AccessibleObject.setAccessible(exclusionFields,  true);  [CE]  cannot  find  symbol  exclusionFields  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  AccessibleObject.setAccessible(exclusionFields,  true);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	AccessibleObject.setAccessible(exclusionFields,  true);	  AccessibleObject.setAccessible(fields,    true);    	non-compiled	[CE]  cannot  find  symbol  exclusionFields	11	None	replace
81	[BUG]  [BUGGY]  Collections.sort(excludeFields,  iTotal);  [CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Collections.sort(excludeFields,  iTotal);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Collections.sort(excludeFields,  iTotal);	  Collections.sort(excludeFields,    iConstant);    	non-compiled	[CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context	35	None	replace
82	[BUG]  [BUGGY]  Class  <?>  clazz  =  getRawClass(excludeFields);  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Class  <?>  clazz  =  getRawClass(excludeFields);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Class  <?>  clazz  =  getRawClass(excludeFields);	  Class    <?>    clazz    =    getRawClass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	27	None	replace
83	[BUG]  [BUGGY]  Field[]  fields  =  constructFields(object.getSuperclassFields());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  constructFields(object.getSuperclassFields());  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  constructFields(object.getSuperclassFields());	  Field[]    fields    =    object.getSuperclassFields();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
84	[BUG]  [BUGGY]  Class  <?>  clazz  =  excludeFields!=  null?  object.getSuperclass()  :  null;  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Class  <?>  clazz  =  excludeFields!=  null?  object.getSuperclass()  :  null;  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Class  <?>  clazz  =  excludeFields!=  null?  object.getSuperclass()  :  null;	  Class    <?>    clazz    =    object!=    null?    object.getSuperclass()    :    excludeFields;    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	37	None	replace
85	[BUG]  [BUGGY]  Class  <?>  clazz  =  getClass().getName();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Class  <?>  clazz  =  getClass().getName();  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Class  <?>  clazz  =  getClass().getName();	  Class    <?>    clazz    =    getClass().getComponentType();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	28	None	replace
86	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  object,  builder);  [CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  object,  builder);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  object,  builder);	  Field[]    fields    =    clazz.getDeclaredFields(excludeFields,    object);    	non-compiled	[CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;	19	None	replace
87	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(fieldValue,  object);  [CE]  cannot  find  symbol  fieldValue  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(fieldValue,  object);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  clazz.getDeclaredFields(fieldValue,  object);	  Field[]    fields    =    clazz.getDeclaredFields(excludeFields,    object);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	19	None	replace
88	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(useTransients,  excludeFields);  [CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(useTransients,  excludeFields);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  clazz.getDeclaredFields(useTransients,  excludeFields);	  Field[]    fields    =    clazz.getDeclaredFields(excludeFields,    useTransients);    	non-compiled	[CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;	18	None	replace
89	[BUG]  [BUGGY]  Class  <?>  clazz  =  object  ==  null  ||  object.getSuperclass()!=  null;  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Class  <?>  clazz  =  object  ==  null  ||  object.getSuperclass()!=  null;  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Class  <?>  clazz  =  object  ==  null  ||  object.getSuperclass()!=  null;	  Class    <?>    clazz    =    object    ==    null?    null    :    object.getSuperclass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	36	None	replace
90	[BUG]  [BUGGY]  Class  <?>  clazz  =  object  ==  null?  null  :  object.getRawClass();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Class  <?>  clazz  =  object  ==  null?  null  :  object.getRawClass();  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Class  <?>  clazz  =  object  ==  null?  null  :  object.getRawClass();	  Class    <?>    clazz    =    object.getRawClass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	14	None	replace
91	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  iConstant);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	AccessibleObject.setAccessible(excludeFields,  true,  iConstant);	  AccessibleObject.setAccessible(excludeFields,    true);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	30	None	replace
92	[BUG]  [BUGGY]  Class  <?>  clazz  =  object.getDeclaringClass();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Class  <?>  clazz  =  object.getDeclaringClass();  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Class  <?>  clazz  =  object.getDeclaringClass();	  Class    <?>    clazz    =    object.getReturnType();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	15	None	replace
93	[BUG]  [BUGGY]  Field[]  fields  =  excludedFields.getSuperclasses(clazz);  [CE]  cannot  find  symbol  excludedFields  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  excludedFields.getSuperclasses(clazz);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  excludedFields.getSuperclasses(clazz);	  Field[]    fields    =    clazz.getSuperclasses(excludeFields);    	non-compiled	[CE]  cannot  find  symbol  excludedFields	9	None	replace
94	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  iConstant);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  iConstant);	  Field[]    fields    =    clazz.getDeclaredFields(fields);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	42	None	replace
95	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  iTotal);  [CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  iTotal);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  iTotal);	  Field[]    fields    =    clazz.getDeclaredFields(fields);    	non-compiled	[CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context	42	None	replace
96	[BUG]  [BUGGY]  Class  <?>  clazz  =  getClass().getDeclaredFields();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Class  <?>  clazz  =  getClass().getDeclaredFields();  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Class  <?>  clazz  =  getClass().getDeclaredFields();	  Class    <?>    clazz    =    getClass().getSuperclass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	29	None	replace
97	[BUG]  [BUGGY]  String[]  fields  =  excludeFields.getSuperclasses();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  String[]  fields  =  excludeFields.getSuperclasses();  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	String[]  fields  =  excludeFields.getSuperclasses();	  String[]    fields    =    clazz.getSuperclasses();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
98	[BUG]  [BUGGY]  Field[]  fields  =  getReferenceFields();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  getReferenceFields();  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  getReferenceFields();	  Field[]    fields    =    getFields();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
99	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  true,  useTransients,  builder);  [CE]  no  suitable  method  found  for  setAccessible(String[],boolean,boolean,HashCodeBuilder)  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  true,  useTransients,  builder);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  true,  useTransients,  builder);	  Field[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(excludeFields,    true,    useTransients);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],boolean,boolean,HashCodeBuilder)	32	None	replace
100	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  false,  excludeFields);  [CE]  no  suitable  method  found  for  setAccessible(String[],boolean,String[])  [FE]                        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  false,  excludeFields);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  false,  excludeFields);	  Field[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(excludeFields,    true,    useTransients);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],boolean,String[])	32	None	replace
101	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  false);  Field[]  fields  =  clazz.getDeclaredFields();  AccesibleObject.setAccessible(fields,  false);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  false);  Field[]  fields  =  clazz.getDeclaredFields();  AccesibleObject.setAccessible(fields,  false);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(fields,    false);    Field[]  fields  =  clazz.getDeclaredFields();  AccesibleObject.setAccessible(fields,  false);	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	12	None	add
102	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  false);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibilityObject.setAccessible(fields,  false);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  false);  Field[]  fields  =  clazz.getDeclaredFields();  AccessibilityObject.setAccessible(fields,  false);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(fields,    false);    Field[]  fields  =  clazz.getDeclaredFields();  AccessibilityObject.setAccessible(fields,  false);	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	12	None	add
103	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  builder,  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  builder,  iConstant);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  builder,  iConstant);	  Field[]    fields    =    clazz.getDeclaredFields(excludeFields,    builder);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	16	None	replace
104	[BUG]  [BUGGY]  Collections.sort(excludeFields,  Arrays.asList(useTransients));  [CE]  cannot  find  symbol  Arrays  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Collections.sort(excludeFields,  Arrays.asList(useTransients));  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Collections.sort(excludeFields,  Arrays.asList(useTransients));	  Collections.sort(excludeFields,    useTransients);    	non-compiled	[CE]  cannot  find  symbol  Arrays	23	None	replace
105	[BUG]  [BUGGY]  Field[]  fields  =  excludedFields.getFields();  [CE]  cannot  find  symbol  excludedFields  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  excludedFields.getFields();  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  excludedFields.getFields();	  Field[]    fields    =    object.getFields();    	non-compiled	[CE]  cannot  find  symbol  excludedFields	7	None	replace
106	[BUG]  [BUGGY]  Class  <?>  clazz  =  getClass(excludeFields,  useTransients);  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Class  <?>  clazz  =  getClass(excludeFields,  useTransients);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Class  <?>  clazz  =  getClass(excludeFields,  useTransients);	  Class    <?>    clazz    =    getClass(excludeFields);    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	34	None	replace
107	[BUG]  [BUGGY]  Field[]  fields  =  excludeFields.getSuperclassesArray();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  excludeFields.getSuperclassesArray();  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  excludeFields.getSuperclassesArray();	  Field[]    fields    =    clazz.getSuperclassesArray();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
108	[BUG]  [BUGGY]  Collections.sort(excludeFields,  clazz,  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Collections.sort(excludeFields,  clazz,  iConstant);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Collections.sort(excludeFields,  clazz,  iConstant);	  Collections.sort(excludeFields,    clazz);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	22	None	replace
109	[BUG]  [BUGGY]  String[]  fields  =  clazz.getDeclaredFields(excludeFields,  constructor);  [CE]  cannot  find  symbol  constructor  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  String[]  fields  =  clazz.getDeclaredFields(excludeFields,  constructor);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	String[]  fields  =  clazz.getDeclaredFields(excludeFields,  constructor);	  String[]    fields    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  cannot  find  symbol  constructor	33	None	replace
110	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  field);  [CE]  cannot  find  symbol  field  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  field);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	AccessibleObject.setAccessible(excludeFields,  true,  field);	  AccessibleObject.setAccessible(excludeFields,    true);    	non-compiled	[CE]  cannot  find  symbol  field	30	None	replace
111	[BUG]  [BUGGY]  String[]  fields  =  clazz.getDeclaredFields(fields);  [CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  String[]  fields  =  clazz.getDeclaredFields(fields);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	String[]  fields  =  clazz.getDeclaredFields(fields);	  String[]    fields    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;	33	None	replace
112	[BUG]  [BUGGY]  String[]  fields  =  clazz.getDeclaredFields(iConstant,  excludeFields);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  String[]  fields  =  clazz.getDeclaredFields(iConstant,  excludeFields);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	String[]  fields  =  clazz.getDeclaredFields(iConstant,  excludeFields);	  String[]    fields    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	33	None	replace
113	[BUG]  [BUGGY]  Collections.sort(object,  useTransients);  [CE]  cannot  find  symbol  Collections  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Collections.sort(object,  useTransients);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Collections.sort(object,  useTransients);	  Collections.sort(excludeFields,    useTransients);    	non-compiled	[CE]  cannot  find  symbol  Collections	23	None	replace
114	[BUG]  [BUGGY]  Collections.sort(fields,  useTransients);  [CE]  cannot  find  symbol  fields  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Collections.sort(fields,  useTransients);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Collections.sort(fields,  useTransients);	  Collections.sort(excludeFields,    useTransients);    	non-compiled	[CE]  cannot  find  symbol  fields	23	None	replace
115	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getReferences();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  clazz.getReferences();  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  clazz.getReferences();	  Field[]    fields    =    clazz.getFields();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
116	[BUG]  [BUGGY]  Field[]  fields  =  excludedFields.getSuperclasses();  [CE]  cannot  find  symbol  excludedFields  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  excludedFields.getSuperclasses();  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  excludedFields.getSuperclasses();	  Field[]    fields    =    object.getSuperclasses();    	non-compiled	[CE]  cannot  find  symbol  excludedFields	10	None	replace
117	[BUG]  [BUGGY]  if(excludeFields!=  null)  {  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  false);  }  [CE]  cannot  find  symbol  fields  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  if(excludeFields!=  null)  {  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  false);  }  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	if(excludeFields!=  null)  {  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  false);  }	  Field[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(fields,    false);    	non-compiled	[CE]  cannot  find  symbol  fields	13	None	replace
118	[BUG]  [BUGGY]  Field[]  fields  =  super.getFields();  [CE]  non-static  variable  super  cannot  be  referenced  from  a  static  context  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  super.getFields();  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  super.getFields();	  Field[]    fields    =    getFields();    	non-compiled	[CE]  non-static  variable  super  cannot  be  referenced  from  a  static  context	8	None	replace
119	[BUG]  [BUGGY]  Collections.sort(this.excludeFields,  clazz);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Collections.sort(this.excludeFields,  clazz);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Collections.sort(this.excludeFields,  clazz);	  Collections.sort(excludeFields,    clazz);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	22	None	replace
120	[BUG]  [BUGGY]  Field[]  fields  =  excludeFields!=  null?  field.getSuperclasses()  :  excludeFields;  [CE]  cannot  find  symbol  field  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  excludeFields!=  null?  field.getSuperclasses()  :  excludeFields;  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  excludeFields!=  null?  field.getSuperclasses()  :  excludeFields;	  Field[]    fields    =    excludeFields.getSuperclasses();    	non-compiled	[CE]  cannot  find  symbol  field	38	None	replace
121	[BUG]  [BUGGY]  Field[]  fields  =  excludeFields!=  null?  fields.getSuperclasses()  :  excludeFields;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  excludeFields!=  null?  fields.getSuperclasses()  :  excludeFields;  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  excludeFields!=  null?  fields.getSuperclasses()  :  excludeFields;	  Field[]    fields    =    excludeFields.getSuperclasses();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
122	[BUG]  [BUGGY]  Class  <?>  clazz  =  excludeFields!=  null?  object.getSuperclass()  :  excludeFields;  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Class  <?>  clazz  =  excludeFields!=  null?  object.getSuperclass()  :  excludeFields;  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Class  <?>  clazz  =  excludeFields!=  null?  object.getSuperclass()  :  excludeFields;	  Class    <?>    clazz    =    object!=    null?    object.getSuperclass()    :    excludeFields;    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	37	None	replace
123	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(fields,  useTransients);  [CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(fields,  useTransients);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  clazz.getDeclaredFields(fields,  useTransients);	  Field[]    fields    =    clazz.getDeclaredFields(excludeFields,    useTransients);    	non-compiled	[CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;	18	None	replace
124	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(fields,  builder);  [CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(fields,  builder);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  clazz.getDeclaredFields(fields,  builder);	  Field[]    fields    =    clazz.getDeclaredFields(excludeFields,    builder);    	non-compiled	[CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;	16	None	replace
125	[BUG]  [BUGGY]  Field[]  fields  =  builder.getDeclaredFields(excludeFields);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  builder.getDeclaredFields(excludeFields);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  builder.getDeclaredFields(excludeFields);	  Field[]    fields    =    clazz.getDeclaredFields(excludeFields,    builder);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
126	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  field[]  fields  =  clazz.getFields();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  clazz.getFields();  field[]  fields  =  clazz.getFields();  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]    fields    =    clazz.getFields();    field[]  fields  =  clazz.getFields();	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
127	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  Field[]  fields  =  class.getFields();  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  clazz.getFields();  Field[]  fields  =  class.getFields();  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]    fields    =    clazz.getFields();    Field[]  fields  =  class.getFields();	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
128	[BUG]  [BUGGY]  Collections.sort(object,  builder);  [CE]  cannot  find  symbol  Collections  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Collections.sort(object,  builder);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Collections.sort(object,  builder);	  Collections.sort(excludeFields,    builder);    	non-compiled	[CE]  cannot  find  symbol  Collections	21	None	replace
129	[BUG]  [BUGGY]  Collections.sort(builder,  excludeFields);  [CE]  cannot  find  symbol  Collections  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Collections.sort(builder,  excludeFields);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Collections.sort(builder,  excludeFields);	  Collections.sort(excludeFields,    builder);    	non-compiled	[CE]  cannot  find  symbol  Collections	21	None	replace
130	[BUG]  [BUGGY]  Field[]  fields  =  excludeFields!=  null?  field.getSuperclassFields()  :  excludeFields;  [CE]  cannot  find  symbol  field  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  excludeFields!=  null?  field.getSuperclassFields()  :  excludeFields;  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  excludeFields!=  null?  field.getSuperclassFields()  :  excludeFields;	  Field[]    fields    =    excludeFields.getSuperclassFields();    	non-compiled	[CE]  cannot  find  symbol  field	3	None	replace
131	[BUG]  [BUGGY]  AccessibleObject.setAccessible(useTransients,  excludeFields,  true);  [CE]  no  suitable  method  found  for  setAccessible(boolean,String[],boolean)  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  AccessibleObject.setAccessible(useTransients,  excludeFields,  true);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	AccessibleObject.setAccessible(useTransients,  excludeFields,  true);	  Field[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(excludeFields,    useTransients,    true);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,String[],boolean)	43	None	replace
132	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  useTransients,  true);  [CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,boolean)  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  useTransients,  true);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  useTransients,  true);	  Field[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(excludeFields,    useTransients,    true);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,boolean)	43	None	replace
133	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  excludeFields);  [CE]  no  suitable  method  found  for  setAccessible(String[],boolean,String[])  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  excludeFields);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	AccessibleObject.setAccessible(excludeFields,  true,  excludeFields);	  Field[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(excludeFields,    true,    useTransients);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],boolean,String[])	32	None	replace
134	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(useTransients,  true,  excludeFields);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,String[])  [FE]                        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(useTransients,  true,  excludeFields);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(useTransients,  true,  excludeFields);	  Field[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(excludeFields,    true,    useTransients);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,String[])	32	None	replace
135	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true,  useTransients);  [CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,boolean)  [FE]                          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true,  useTransients);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true,  useTransients);	  Field[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(excludeFields,    true,    useTransients);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,boolean)	32	None	replace
136	[BUG]  [BUGGY]  clazz.setAccessible(exclusionFields,  true);  [CE]  cannot  find  symbol  exclusionFields  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  clazz.setAccessible(exclusionFields,  true);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	clazz.setAccessible(exclusionFields,  true);	  clazz.setAccessible(excludeFields,    false);    	non-compiled	[CE]  cannot  find  symbol  exclusionFields	1	None	replace
137	[BUG]  [BUGGY]  Class  <?>  clazz  =  object.getRawParameterType(0);  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Class  <?>  clazz  =  object.getRawParameterType(0);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Class  <?>  clazz  =  object.getRawParameterType(0);	  Class    <?>    clazz    =    object.getRawClass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	14	None	replace
138	[BUG]  [BUGGY]  Field[]  fields  =  excludedFields.getSuperclassFields(clazz);  [CE]  cannot  find  symbol  excludedFields  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Field[]  fields  =  excludedFields.getSuperclassFields(clazz);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  excludedFields.getSuperclassFields(clazz);	  Field[]    fields    =    clazz.getSuperclassFields(excludeFields);    	non-compiled	[CE]  cannot  find  symbol  excludedFields	2	None	replace
139	[BUG]  [BUGGY]  String[]  fields  =  clazz.getSuperclassesArray();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  String[]  fields  =  clazz.getSuperclassesArray();  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	String[]  fields  =  clazz.getSuperclassesArray();	  String[]    fields    =    clazz.getSuperclasses();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
140	[BUG]  [BUGGY]  Collections.sort(this.excludeFields,  excludeFields);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);      [BUGGY]  Collections.sort(this.excludeFields,  excludeFields);  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Collections.sort(this.excludeFields,  excludeFields);	  Collections.sort(this.excludeFields);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	40	None	replace
