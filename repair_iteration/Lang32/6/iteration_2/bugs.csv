bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  clazz.setAccessible(excludeFields,  false);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);    [BUGGY]  clazz.setAccessible(excludeFields,  false);  [BUGGY]    Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	clazz.setAccessible(excludeFields,  false);	      clazz.setAccessible(excludeFields,    true);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
2	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclassFields(excludeFields);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);    [BUGGY]  Field[]  fields  =  clazz.getSuperclassFields(excludeFields);  [BUGGY]    AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  clazz.getSuperclassFields(excludeFields);	  Field[]    fields    =    clazz.getSuperclassFields();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
3	[BUG]  [BUGGY]  Field[]  fields  =  excludeFields.getSuperclassFields();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);    [BUGGY]  Field[]  fields  =  excludeFields.getSuperclassFields();  [BUGGY]    AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  excludeFields.getSuperclassFields();	  Field[]    fields    =    clazz.getSuperclassFields();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
4	[BUG]  [BUGGY]  Field[]  fields  =  object.getSuperclassFields();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);    [BUGGY]  Field[]  fields  =  object.getSuperclassFields();  [BUGGY]    AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  object.getSuperclassFields();	  Field[]    fields    =    clazz.getSuperclassFields();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);    [BUGGY]  Field[]  fields  =  clazz.getFields();  [BUGGY]    AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	add	Field[]  fields  =  clazz.getFields();	      	compilable	  [FE]  AssertionFailedError  	4	4	replace
6	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);    [BUGGY]  Field[]  fields  =  clazz.getFields();  [BUGGY]    AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  clazz.getFields();	      	compilable	  [FE]  AssertionFailedError  	4	4	replace
7	[BUG]  [BUGGY]  Field[]  fields  =  object.getFields();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);    [BUGGY]  Field[]  fields  =  object.getFields();  [BUGGY]    AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  object.getFields();	      	non-compiled	[CE]  cannot  find  symbol	4	None	replace
8	[BUG]  [BUGGY]  Field[]  fields  =  getFields();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);    [BUGGY]  Field[]  fields  =  getFields();  [BUGGY]    AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  getFields();	      	non-compiled	[CE]  cannot  find  symbol	4	None	replace
9	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclasses(excludeFields);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);    [BUGGY]  Field[]  fields  =  clazz.getSuperclasses(excludeFields);  [BUGGY]    AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  clazz.getSuperclasses(excludeFields);	  Field[]    fields    =    clazz.getSuperclasses();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
10	[BUG]  [BUGGY]  Field[]  fields  =  object.getSuperclasses();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);    [BUGGY]  Field[]  fields  =  object.getSuperclasses();  [BUGGY]    AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  object.getSuperclasses();	  Field[]    fields    =    clazz.getSuperclasses();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
11	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  true);  [CE]  cannot  find  symbol  fields  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);    [BUGGY]  AccessibleObject.setAccessible(fields,  true);  [BUGGY]    Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	AccessibleObject.setAccessible(fields,  true);	      String[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(fields,    true);    	non-compiled	[CE]  cannot  find  symbol  fields	7	None	replace
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  false);  [BUGGY]    Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	add	Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  false);	      String[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(fields,    true);    	compilable	  [FE]  AssertionFailedError  	7	1	replace
13	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  false);  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  false);  [BUGGY]    Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  false);	      String[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(fields,    true);    	compilable	  [FE]  AssertionFailedError  	7	1	replace
14	[BUG]  [BUGGY]  Class  <?>  clazz  =  object.getRawClass();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);    [BUGGY]  Class  <?>  clazz  =  object.getRawClass();  [BUGGY]    Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Class  <?>  clazz  =  object.getRawClass();	      Class    <?>    clazz    =    object.getDeclaredClass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	11	None	replace
15	[BUG]  [BUGGY]  Class  <?>  clazz  =  object.getReturnType();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]              AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);    [BUGGY]  Class  <?>  clazz  =  object.getReturnType();  [BUGGY]    Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Class  <?>  clazz  =  object.getReturnType();	      Class    <?>    clazz    =    object.getDeclaredClass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	11	None	replace
16	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  builder);  [CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  builder);  [BUGGY]    AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  builder);	  Field[]    fields    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;	2	None	replace
17	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(fields,  excludeFields);  [CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(fields,  excludeFields);  [BUGGY]    AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  clazz.getDeclaredFields(fields,  excludeFields);	  Field[]    fields    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;	2	None	replace
18	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  useTransients);  [CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  useTransients);  [BUGGY]    AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  useTransients);	  Field[]    fields    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;	2	None	replace
19	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  object);  [CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  object);  [BUGGY]    AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  object);	  Field[]    fields    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;	2	None	replace
20	[BUG]  [BUGGY]  Class  <?>  clazz  =  object.getSuperClass();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);    [BUGGY]  Class  <?>  clazz  =  object.getSuperClass();  [BUGGY]    Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Class  <?>  clazz  =  object.getSuperClass();	      Class    <?>    clazz    =    object.getSuperclass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	14	None	replace
21	[BUG]  [BUGGY]  Collections.sort(excludeFields,  builder);  [CE]  cannot  find  symbol  Collections  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);    [BUGGY]  Collections.sort(excludeFields,  builder);  [BUGGY]    Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Collections.sort(excludeFields,  builder);	      Collections.sort(excludeFields);    	non-compiled	[CE]  cannot  find  symbol  Collections	13	None	replace
22	[BUG]  [BUGGY]  Collections.sort(excludeFields,  clazz);  [CE]  cannot  find  symbol  Collections  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);    [BUGGY]  Collections.sort(excludeFields,  clazz);  [BUGGY]    Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Collections.sort(excludeFields,  clazz);	      Collections.sort(excludeFields);    	non-compiled	[CE]  cannot  find  symbol  Collections	13	None	replace
23	[BUG]  [BUGGY]  Collections.sort(excludeFields,  useTransients);  [CE]  cannot  find  symbol  Collections  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);    [BUGGY]  Collections.sort(excludeFields,  useTransients);  [BUGGY]    Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Collections.sort(excludeFields,  useTransients);	      Collections.sort(excludeFields);    	non-compiled	[CE]  cannot  find  symbol  Collections	13	None	replace
24	[BUG]  [BUGGY]  Collections.sort(excludeFields,  constructor);  [CE]  cannot  find  symbol  constructor  [FE]              AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);    [BUGGY]  Collections.sort(excludeFields,  constructor);  [BUGGY]    Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Collections.sort(excludeFields,  constructor);	      Collections.sort(excludeFields);    	non-compiled	[CE]  cannot  find  symbol  constructor	13	None	replace
25	[BUG]  [BUGGY]  String[]  fields  =  clazz.getSuperclasses();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);    [BUGGY]  String[]  fields  =  clazz.getSuperclasses();  [BUGGY]    Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	String[]  fields  =  clazz.getSuperclasses();	      String[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
26	[BUG]  [BUGGY]  String[]  fields  =  clazz.getFields();  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);    [BUGGY]  String[]  fields  =  clazz.getFields();  [BUGGY]    Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	String[]  fields  =  clazz.getFields();	      String[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  incompatible  types	6	None	replace
27	[BUG]  [BUGGY]  Class  <?>  clazz  =  getRawClass();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);    [BUGGY]  Class  <?>  clazz  =  getRawClass();  [BUGGY]    Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Class  <?>  clazz  =  getRawClass();	      Class    <?>    clazz    =    getClass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	9	None	replace
28	[BUG]  [BUGGY]  Class  <?>  clazz  =  getClass().getComponentType();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);    [BUGGY]  Class  <?>  clazz  =  getClass().getComponentType();  [BUGGY]    Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Class  <?>  clazz  =  getClass().getComponentType();	      Class    <?>    clazz    =    getClass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	9	None	replace
29	[BUG]  [BUGGY]  Class  <?>  clazz  =  getClass().getSuperclass();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);    [BUGGY]  Class  <?>  clazz  =  getClass().getSuperclass();  [BUGGY]    Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Class  <?>  clazz  =  getClass().getSuperclass();	      Class    <?>    clazz    =    getClass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	9	None	replace
30	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true);  [CE]  no  suitable  method  found  for  setAccessible(String[],boolean)  [FE]              AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);    [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true);  [BUGGY]    Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	AccessibleObject.setAccessible(excludeFields,  true);	      Field[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(excludeFields,    true);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],boolean)	8	None	replace
31	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  false);  [CE]  no  suitable  method  found  for  setAccessible(String[],boolean)  [FE]                AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  false);  [BUGGY]    Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  false);	      Field[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(excludeFields,    true);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],boolean)	8	None	replace
32	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  true,  useTransients);  [CE]  no  suitable  method  found  for  setAccessible(String[],boolean,boolean)  [FE]                  AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  true,  useTransients);  [BUGGY]    Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  true,  useTransients);	      Field[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(excludeFields,    true);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],boolean,boolean)	8	None	replace
33	[BUG]  [BUGGY]  String[]  fields  =  clazz.getDeclaredFields(excludeFields);  [CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);    [BUGGY]  String[]  fields  =  clazz.getDeclaredFields(excludeFields);  [BUGGY]    Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	String[]  fields  =  clazz.getDeclaredFields(excludeFields);	      String[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;	6	None	replace
34	[BUG]  [BUGGY]  Class  <?>  clazz  =  getClass(excludeFields);  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);    [BUGGY]  Class  <?>  clazz  =  getClass(excludeFields);  [BUGGY]    Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Class  <?>  clazz  =  getClass(excludeFields);	      Class    <?>    clazz    =    getClass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	9	None	replace
35	[BUG]  [BUGGY]  Collections.sort(excludeFields,  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);    [BUGGY]  Collections.sort(excludeFields,  iConstant);  [BUGGY]    Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Collections.sort(excludeFields,  iConstant);	      Collections.sort(excludeFields);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	13	None	replace
36	[BUG]  [BUGGY]  Class  <?>  clazz  =  object  ==  null?  null  :  object.getSuperclass();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);    [BUGGY]  Class  <?>  clazz  =  object  ==  null?  null  :  object.getSuperclass();  [BUGGY]    Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Class  <?>  clazz  =  object  ==  null?  null  :  object.getSuperclass();	      Class    <?>    clazz    =    object.getSuperclass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	14	None	replace
37	[BUG]  [BUGGY]  Class  <?>  clazz  =  object!=  null?  object.getSuperclass()  :  excludeFields;  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);    [BUGGY]  Class  <?>  clazz  =  object!=  null?  object.getSuperclass()  :  excludeFields;  [BUGGY]    Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Class  <?>  clazz  =  object!=  null?  object.getSuperclass()  :  excludeFields;	      Class    <?>    clazz    =    object.getSuperclass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	14	None	replace
38	[BUG]  [BUGGY]  Field[]  fields  =  excludeFields.getSuperclasses();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);    [BUGGY]  Field[]  fields  =  excludeFields.getSuperclasses();  [BUGGY]    AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  excludeFields.getSuperclasses();	  Field[]    fields    =    clazz.getSuperclasses();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
39	[BUG]  [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  [CE]  no  suitable  method  found  for  setAccessible(Object[],boolean)  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);    [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  [BUGGY]    Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Object[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);	      Field[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(fields,    true);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Object[],boolean)	5	None	replace
40	[BUG]  [BUGGY]  Collections.sort(this.excludeFields);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);    [BUGGY]  Collections.sort(this.excludeFields);  [BUGGY]    Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Collections.sort(this.excludeFields);	      Collections.sort(excludeFields);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	13	None	replace
41	[BUG]  [BUGGY]  Class  <?>  clazz  =  object.getComponentType();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);    [BUGGY]  Class  <?>  clazz  =  object.getComponentType();  [BUGGY]    Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Class  <?>  clazz  =  object.getComponentType();	      Class    <?>    clazz    =    object.getClass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	10	None	replace
42	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(fields);  [CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(fields);  [BUGGY]    AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  clazz.getDeclaredFields(fields);	  Field[]    fields    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;	2	None	replace
43	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  useTransients,  true);  [CE]  no  suitable  method  found  for  setAccessible(String[],boolean,boolean)  [FE]              AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  useTransients,  true);  [BUGGY]    Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  AccessibleObject.setAccessible(excludeFields,  useTransients,  true);	      Field[]    fields    =    clazz.getDeclaredFields();    AccessibleObject.setAccessible(excludeFields,    true);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],boolean,boolean)	8	None	replace
44	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclassesArray();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);    [BUGGY]  Field[]  fields  =  clazz.getSuperclassesArray();  [BUGGY]    AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  clazz.getSuperclassesArray();	  Field[]    fields    =    clazz.getSuperclasses();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
45	[BUG]  [BUGGY]  Field[]  fields  =  excludedFields.getSuperclassFields();  [CE]  cannot  find  symbol  excludedFields  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);    [BUGGY]  Field[]  fields  =  excludedFields.getSuperclassFields();  [BUGGY]    AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	178	178	1	replace	Field[]  fields  =  excludedFields.getSuperclassFields();	  Field[]    fields    =    clazz.getSuperclassFields();    	non-compiled	[CE]  cannot  find  symbol  excludedFields	3	None	replace
