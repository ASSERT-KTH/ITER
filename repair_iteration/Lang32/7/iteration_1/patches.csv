bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  AccessibleObject.setAccessible(fields,  false);  AccessibleObject.setAccessible(fields,  false);  [BUGGY]    for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	add	AccessibleObject.setAccessible(fields,    false);    AccessibleObject.setAccessible(fields,  false);	  	compilable	  [FE]  AssertionFailedError  	6	1	add
2	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  false);  AccessibleObject.setAccessible(fields,  false);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  AccessibleObject.setAccessible(fields,  false);  AccessibleObject.setAccessible(fields,  false);  [BUGGY]    for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,    false);    AccessibleObject.setAccessible(fields,  false);	  	compilable	  [FE]  AssertionFailedError  	6	1	add
3	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  false);  AccesibleObject.setAccessible(fields,  false);  [CE]  cannot  find  symbol  AccesibleObject  [FE]      AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  AccessibleObject.setAccessible(fields,  false);  AccesibleObject.setAccessible(fields,  false);  [BUGGY]    for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,    false);    AccesibleObject.setAccessible(fields,  false);	  	non-compiled	[CE]  cannot  find  symbol  AccesibleObject	6	None	add
4	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  AccessibleObject.setAccessible(fields,  false);  AccessibleObject.setAccessible(fields,  true);  [BUGGY]    for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	add	AccessibleObject.setAccessible(fields,    false);    AccessibleObject.setAccessible(fields,  true);	  	compilable	  [FE]  AssertionFailedError  	6	1	add
5	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  false);  AccessibleObject.setAccessible(fields,  true);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  AccessibleObject.setAccessible(fields,  false);  AccessibleObject.setAccessible(fields,  true);  [BUGGY]    for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,    false);    AccessibleObject.setAccessible(fields,  true);	  	compilable	  [FE]  AssertionFailedError  	6	1	add
6	[BUG]  [BUGGY]  Builder.append(excludeFields);  [CE]  cannot  find  symbol  Builder  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  Builder.append(excludeFields);  [BUGGY]    AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Builder.append(excludeFields);	      Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fields);    	non-compiled	[CE]  cannot  find  symbol  Builder	16	None	replace
7	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields);  [BUGGY]    AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields);	      Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fields);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	16	None	replace
8	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields,  true);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields,  true);  [BUGGY]    AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields,  true);	      Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fields);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	16	None	replace
9	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  Field[]  fields  =  clazz.getFields();  [BUGGY]    AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Field[]  fields  =  clazz.getFields();	      Field[]    fields    =    clazz.getReferences();    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	5	None	replace
10	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getStaticFields();  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                  AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  Field[]  fields  =  clazz.getStaticFields();  [BUGGY]    AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Field[]  fields  =  clazz.getStaticFields();	      Field[]    fields    =    clazz.getReferences();    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	5	None	replace
11	[BUG]  [BUGGY]  String[]  fields  =  clazz.getDeclaredFields(excludeFields);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  String[]  fields  =  clazz.getDeclaredFields(excludeFields);  [BUGGY]    AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	String[]  fields  =  clazz.getDeclaredFields(excludeFields);	      String[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	11	None	replace
12	[BUG]  [BUGGY]  String[]  fields  =  clazz.getSuperclasses();  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  String[]  fields  =  clazz.getSuperclasses();  [BUGGY]    AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	String[]  fields  =  clazz.getSuperclasses();	      String[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	11	None	replace
13	[BUG]  [BUGGY]  Builder.append(excludeFields,  true);  [CE]  cannot  find  symbol  Builder  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  Builder.append(excludeFields,  true);  [BUGGY]    AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Builder.append(excludeFields,  true);	      Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fields,    true);    	non-compiled	[CE]  cannot  find  symbol  Builder	13	None	replace
14	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields,  false);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]              AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields,  false);  [BUGGY]    AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields,  false);	      Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fields,    true);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	13	None	replace
15	[BUG]  [BUGGY]  builder.append(excludeFields,  true);  [CE]  no  suitable  method  found  for  append(String[],boolean)  [FE]                AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  builder.append(excludeFields,  true);  [BUGGY]    AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	builder.append(excludeFields,  true);	      Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fields,    true);    	non-compiled	[CE]  no  suitable  method  found  for  append(String[],boolean)	13	None	replace
16	[BUG]  [BUGGY]  AccessibleObject.setAccuracy(fields,  true);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  AccessibleObject.setAccuracy(fields,  true);  [BUGGY]    for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccuracy(fields,  true);	  AccessibleObject.setAccuracy(fields,    false);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
17	[BUG]  [BUGGY]  AccessibleObject.setAccuracy(excludeFields,  false);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  AccessibleObject.setAccuracy(excludeFields,  false);  [BUGGY]    for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccuracy(excludeFields,  false);	  AccessibleObject.setAccuracy(fields,    false);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
18	[BUG]  [BUGGY]  AccessibleObject.setAccuracy(fields,  false,  excludeFields);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  AccessibleObject.setAccuracy(fields,  false,  excludeFields);  [BUGGY]    for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccuracy(fields,  false,  excludeFields);	  AccessibleObject.setAccuracy(fields,    false);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
19	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  false,  true);  [CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,boolean)  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  AccessibleObject.setAccessible(fields,  false,  true);  [BUGGY]    for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  false,  true);	  AccessibleObject.setAccessible(fields,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,boolean)	7	None	replace
20	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  false,  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]      AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  AccessibleObject.setAccessible(fields,  false,  fieldValue);  [BUGGY]    for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  false,  fieldValue);	  AccessibleObject.setAccessible(fields,    false);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	7	None	replace
21	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  null,  excludeFields);  [CE]  no  suitable  method  found  for  setAccessible(Field[],<null>,String[])  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  AccessibleObject.setAccessible(fields,  null,  excludeFields);  [BUGGY]    for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  null,  excludeFields);	  AccessibleObject.setAccessible(fields,    null);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],<null>,String[])	10	None	replace
22	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  null,  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  AccessibleObject.setAccessible(fields,  null,  iConstant);  [BUGGY]    for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  null,  iConstant);	  AccessibleObject.setAccessible(fields,    null);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	10	None	replace
23	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  null,  iTotal);  [CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  AccessibleObject.setAccessible(fields,  null,  iTotal);  [BUGGY]    for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  null,  iTotal);	  AccessibleObject.setAccessible(fields,    null);    	non-compiled	[CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context	10	None	replace
24	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  null,  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]              AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  AccessibleObject.setAccessible(fields,  null,  fieldValue);  [BUGGY]    for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  null,  fieldValue);	  AccessibleObject.setAccessible(fields,    null);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	10	None	replace
25	[BUG]  [BUGGY]  Object  fieldValue  =  clazz.getDeclaredFields(fields);  [CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  Object  fieldValue  =  clazz.getDeclaredFields(fields);  [BUGGY]    AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Object  fieldValue  =  clazz.getDeclaredFields(fields);	      Object    fieldValue    =    clazz.getDeclaredFields();    	non-compiled	[CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;	12	None	replace
26	[BUG]  [BUGGY]  Object  fieldValue  =  clazz.getSuperclass();  [CE]  variable  fieldValue  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  Object  fieldValue  =  clazz.getSuperclass();  [BUGGY]    AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Object  fieldValue  =  clazz.getSuperclass();	      Object    fieldValue    =    clazz.getDeclaredFields();    	non-compiled	[CE]  variable  fieldValue  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	12	None	replace
27	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclassFields(excludeFields);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]              AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  Field[]  fields  =  clazz.getSuperclassFields(excludeFields);  [BUGGY]    AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Field[]  fields  =  clazz.getSuperclassFields(excludeFields);	      Field[]    fields    =    clazz.getSuperclassFields();    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	14	None	replace
28	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  true,  false,  excludeFields);  [CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,boolean,String[])  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  AccessibleObject.setAccessible(fields,  true,  false,  excludeFields);  [BUGGY]    for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  true,  false,  excludeFields);	  AccessibleObject.setAccessible(fields,    true,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,boolean,String[])	9	None	replace
29	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  true,  false,  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]              AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  AccessibleObject.setAccessible(fields,  true,  false,  iConstant);  [BUGGY]    for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  true,  false,  iConstant);	  AccessibleObject.setAccessible(fields,    true,    false);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	9	None	replace
30	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  true,  false,  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]                AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  AccessibleObject.setAccessible(fields,  true,  false,  fieldValue);  [BUGGY]    for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  true,  false,  fieldValue);	  AccessibleObject.setAccessible(fields,    true,    false);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	9	None	replace
31	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclasses(excludeFields);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  Field[]  fields  =  clazz.getSuperclasses(excludeFields);  [BUGGY]    AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Field[]  fields  =  clazz.getSuperclasses(excludeFields);	      Field[]    fields    =    clazz.getSuperclasses();    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	3	None	replace
32	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  true,  excludeFields,  useTransients);  [CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,String[],boolean)  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  AccessibleObject.setAccessible(fields,  true,  excludeFields,  useTransients);  [BUGGY]    for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  true,  excludeFields,  useTransients);	  AccessibleObject.setAccessible(fields,    true,    useTransients);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,String[],boolean)	15	None	replace
33	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  true,  useTransients,  excludeFields);  [CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,boolean,String[])  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  AccessibleObject.setAccessible(fields,  true,  useTransients,  excludeFields);  [BUGGY]    for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  true,  useTransients,  excludeFields);	  AccessibleObject.setAccessible(fields,    true,    useTransients);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,boolean,String[])	15	None	replace
34	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  false,  excludeFields,  useTransients);  [CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,String[],boolean)  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  AccessibleObject.setAccessible(fields,  false,  excludeFields,  useTransients);  [BUGGY]    for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  false,  excludeFields,  useTransients);	  AccessibleObject.setAccessible(fields,    true,    useTransients);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,String[],boolean)	15	None	replace
35	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  true,  excludeFields);  [CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,String[])  [FE]              AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  AccessibleObject.setAccessible(fields,  true,  excludeFields);  [BUGGY]    for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  true,  excludeFields);	  AccessibleObject.setAccessible(fields,    true,    useTransients);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,String[])	15	None	replace
36	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields);  [BUGGY]    AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Field[]  fields  =  clazz.getDeclaredFields(excludeFields);	      Field[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	1	None	replace
37	[BUG]  [BUGGY]  Fields[]  fields  =  excludeFields.getDeclaredFields();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  Fields[]  fields  =  excludeFields.getDeclaredFields();  [BUGGY]    AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Fields[]  fields  =  excludeFields.getDeclaredFields();	      Fields[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
38	[BUG]  [BUGGY]  Fields[]  fields  =  clazz.getFields();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  Fields[]  fields  =  clazz.getFields();  [BUGGY]    AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Fields[]  fields  =  clazz.getFields();	      Fields[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
39	[BUG]  [BUGGY]  Fields[]  fields  =  clazz.getSuperclassFields();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  Fields[]  fields  =  clazz.getSuperclassFields();  [BUGGY]    AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Fields[]  fields  =  clazz.getSuperclassFields();	      Fields[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
40	[BUG]  [BUGGY]  Fields[]  fields  =  excludedFields.getDeclaredFields();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  Fields[]  fields  =  excludedFields.getDeclaredFields();  [BUGGY]    AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Fields[]  fields  =  excludedFields.getDeclaredFields();	      Fields[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
41	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  useTransients);  [CE]  no  suitable  method  found  for  setAccessible(String[],boolean,boolean)  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  useTransients);  [BUGGY]    for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(excludeFields,  true,  useTransients);	  AccessibleObject.setAccessible(fields,    true,    useTransients);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],boolean,boolean)	15	None	replace
42	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  fields);  [CE]  no  suitable  method  found  for  setAccessible(String[],boolean,Field[])  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  fields);  [BUGGY]    for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(excludeFields,  true,  fields);	  AccessibleObject.setAccessible(fields,    true,    useTransients);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],boolean,Field[])	15	None	replace
43	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  false);  [CE]  no  suitable  method  found  for  setAccessible(String[],boolean)  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  AccessibleObject.setAccessible(excludeFields,  false);  [BUGGY]    for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(excludeFields,  false);	  AccessibleObject.setAccessible(fields,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],boolean)	7	None	replace
44	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  false,  excludeFields);  [CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,String[])  [FE]      AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  AccessibleObject.setAccessible(fields,  false,  excludeFields);  [BUGGY]    for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  false,  excludeFields);	  AccessibleObject.setAccessible(fields,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,String[])	7	None	replace
45	[BUG]  [BUGGY]  Object  fieldValue  =  clazz.getDeclaredFields(excludeFields);  [CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  Object  fieldValue  =  clazz.getDeclaredFields(excludeFields);  [BUGGY]    AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Object  fieldValue  =  clazz.getDeclaredFields(excludeFields);	      Object    fieldValue    =    clazz.getDeclaredFields();    	non-compiled	[CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;	12	None	replace
46	[BUG]  [BUGGY]  Object  fieldValue  =  clazz.get(object);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  Object  fieldValue  =  clazz.get(object);  [BUGGY]    AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Object  fieldValue  =  clazz.get(object);	      Object    fieldValue    =    clazz.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
47	[BUG]  [BUGGY]  String[]  fields  =  clazz.getSuperclassFields();  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  String[]  fields  =  clazz.getSuperclassFields();  [BUGGY]    AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	String[]  fields  =  clazz.getSuperclassFields();	      String[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	11	None	replace
48	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  true,  true,  excludeFields);  [CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,boolean,String[])  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  AccessibleObject.setAccessible(fields,  true,  true,  excludeFields);  [BUGGY]    for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  true,  true,  excludeFields);	  AccessibleObject.setAccessible(fields,    true,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,boolean,String[])	9	None	replace
49	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  null);  [CE]  no  suitable  method  found  for  setAccessible(String[],<null>)  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  AccessibleObject.setAccessible(excludeFields,  null);  [BUGGY]    for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(excludeFields,  null);	  AccessibleObject.setAccessible(fields,    null);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],<null>)	10	None	replace
50	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclasses();  builder.append(excludeFields);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  Field[]  fields  =  clazz.getSuperclasses();  builder.append(excludeFields);  [BUGGY]    AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Field[]  fields  =  clazz.getSuperclasses();  builder.append(excludeFields);	      Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fields);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	16	None	replace
51	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields,  false);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields,  false);  [BUGGY]    AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields,  false);	      Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fields,    true);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	13	None	replace
52	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  true,  false,  useTransients);  [CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,boolean,boolean)  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  AccessibleObject.setAccessible(fields,  true,  false,  useTransients);  [BUGGY]    for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  true,  false,  useTransients);	  AccessibleObject.setAccessible(fields,    true,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,boolean,boolean)	9	None	replace
53	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  true,  useTransients,  false);  [CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,boolean,boolean)  [FE]              AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  AccessibleObject.setAccessible(fields,  true,  useTransients,  false);  [BUGGY]    for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  true,  useTransients,  false);	  AccessibleObject.setAccessible(fields,    true,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,boolean,boolean)	9	None	replace
54	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperClassFields();  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]              AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  Field[]  fields  =  clazz.getSuperClassFields();  [BUGGY]    AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Field[]  fields  =  clazz.getSuperClassFields();	      Field[]    fields    =    clazz.getSuperclassFields();    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	14	None	replace
55	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields,  excludeFields);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields,  excludeFields);  [BUGGY]    AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields,  excludeFields);	      Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fields);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	16	None	replace
56	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  true,  excludedFields,  useTransients);  [CE]  cannot  find  symbol  excludedFields  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  AccessibleObject.setAccessible(fields,  true,  excludedFields,  useTransients);  [BUGGY]    for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  true,  excludedFields,  useTransients);	  AccessibleObject.setAccessible(fields,    true,    useTransients);    	non-compiled	[CE]  cannot  find  symbol  excludedFields	15	None	replace
57	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  null,  fields);  [CE]  no  suitable  method  found  for  setAccessible(Field[],<null>,Field[])  [FE]        AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  AccessibleObject.setAccessible(fields,  null,  fields);  [BUGGY]    for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  null,  fields);	  AccessibleObject.setAccessible(fields,    null);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],<null>,Field[])	10	None	replace
58	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  false,  null);  [CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,<null>)  [FE]    AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  AccessibleObject.setAccessible(fields,  false,  null);  [BUGGY]    for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  false,  null);	  AccessibleObject.setAccessible(fields,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,<null>)	7	None	replace
59	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclassesArray();  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]            AssertionFailedError    [CONTEXT]    String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();    [BUGGY]  Field[]  fields  =  clazz.getSuperclassesArray();  [BUGGY]    AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Field[]  fields  =  clazz.getSuperclassesArray();	      Field[]    fields    =    clazz.getSuperclasses();    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	3	None	replace
