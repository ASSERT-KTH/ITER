bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  field,  null);  [CE]  cannot  find  symbol  field  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(excludeFields,  field,  null);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(excludeFields,  field,  null);	  AccessibleObject.setAccessible(excludeFields,    null);    	non-compiled	[CE]  cannot  find  symbol  field	49	None	replace
2	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  null,  fields);  [CE]  no  suitable  method  found  for  setAccessible(String[],<null>,Field[])  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(excludeFields,  null,  fields);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(excludeFields,  null,  fields);	  AccessibleObject.setAccessible(excludeFields,    null);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],<null>,Field[])	49	None	replace
3	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  fields,  null);  [CE]  no  suitable  method  found  for  setAccessible(String[],Field[],<null>)  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(excludeFields,  fields,  null);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(excludeFields,  fields,  null);	  AccessibleObject.setAccessible(excludeFields,    null);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],Field[],<null>)	49	None	replace
4	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  false,  fields);  [CE]  no  suitable  method  found  for  setAccessible(String[],boolean,boolean,Field[])  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  false,  fields);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(excludeFields,  true,  false,  fields);	  AccessibleObject.setAccessible(fields,    true,    false,    excludeFields);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],boolean,boolean,Field[])	28	None	replace
5	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  true,  false,  excludeFields,  useTransients);  [CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,boolean,String[],boolean)  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  true,  false,  excludeFields,  useTransients);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  true,  false,  excludeFields,  useTransients);	  AccessibleObject.setAccessible(fields,    true,    false,    excludeFields);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,boolean,String[],boolean)	28	None	replace
6	[BUG]  [BUGGY]  String[]  fields  =  clazz.getDeclaredFields(fields);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  String[]  fields  =  clazz.getDeclaredFields(fields);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	String[]  fields  =  clazz.getDeclaredFields(fields);	  String[]    fields    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	11	None	replace
7	[BUG]  [BUGGY]  String[]  fields  =  clazz.getDeclaredFields(excludeFields,  useTransients);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  String[]  fields  =  clazz.getDeclaredFields(excludeFields,  useTransients);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	String[]  fields  =  clazz.getDeclaredFields(excludeFields,  useTransients);	  String[]    fields    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	11	None	replace
8	[BUG]  [BUGGY]  String[]  fields  =  clazz.getDeclaredFields(excludeFields,  builder);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  String[]  fields  =  clazz.getDeclaredFields(excludeFields,  builder);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	String[]  fields  =  clazz.getDeclaredFields(excludeFields,  builder);	  String[]    fields    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	11	None	replace
9	[BUG]  [BUGGY]  Builder.append(fields);  [CE]  cannot  find  symbol  Builder  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Builder.append(fields);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Builder.append(fields);	  Builder.append(excludeFields);    	non-compiled	[CE]  cannot  find  symbol  Builder	6	None	replace
10	[BUG]  [BUGGY]  Builder.append(builder,  excludeFields);  [CE]  cannot  find  symbol  Builder  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Builder.append(builder,  excludeFields);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Builder.append(builder,  excludeFields);	  Builder.append(excludeFields);    	non-compiled	[CE]  cannot  find  symbol  Builder	6	None	replace
11	[BUG]  [BUGGY]  Builder.append(useTransients,  excludeFields);  [CE]  cannot  find  symbol  Builder  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Builder.append(useTransients,  excludeFields);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Builder.append(useTransients,  excludeFields);	  Builder.append(excludeFields);    	non-compiled	[CE]  cannot  find  symbol  Builder	6	None	replace
12	[BUG]  [BUGGY]  Builder.append(useTransients);  [CE]  cannot  find  symbol  Builder  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Builder.append(useTransients);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Builder.append(useTransients);	  Builder.append(excludeFields);    	non-compiled	[CE]  cannot  find  symbol  Builder	6	None	replace
13	[BUG]  [BUGGY]  Builder.append(excludeFields,  false);  [CE]  cannot  find  symbol  Builder  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Builder.append(excludeFields,  false);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Builder.append(excludeFields,  false);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(excludeFields,    false);    	non-compiled	[CE]  cannot  find  symbol  Builder	14	None	replace
14	[BUG]  [BUGGY]  builder.append(excludeFields,  false);  [CE]  no  suitable  method  found  for  append(String[],boolean)  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  builder.append(excludeFields,  false);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	builder.append(excludeFields,  false);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(excludeFields,    false);    	non-compiled	[CE]  no  suitable  method  found  for  append(String[],boolean)	14	None	replace
15	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  false,  fields,  useTransients);  [CE]  no  suitable  method  found  for  setAccessible(String[],boolean,Field[],boolean)  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(excludeFields,  false,  fields,  useTransients);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(excludeFields,  false,  fields,  useTransients);	  AccessibleObject.setAccessible(fields,    false,    excludeFields,    useTransients);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],boolean,Field[],boolean)	34	None	replace
16	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  false,  excludeFields,  useTransients);  [CE]  no  suitable  method  found  for  setAccessible(String[],boolean,String[],boolean)  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(excludeFields,  false,  excludeFields,  useTransients);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(excludeFields,  false,  excludeFields,  useTransients);	  AccessibleObject.setAccessible(fields,    false,    excludeFields,    useTransients);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],boolean,String[],boolean)	34	None	replace
17	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  false,  field,  useTransients);  [CE]  cannot  find  symbol  field  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(excludeFields,  false,  field,  useTransients);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(excludeFields,  false,  field,  useTransients);	  AccessibleObject.setAccessible(fields,    false,    excludeFields,    useTransients);    	non-compiled	[CE]  cannot  find  symbol  field	34	None	replace
18	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  false,  excludeFields,  fields);  [CE]  no  suitable  method  found  for  setAccessible(String[],boolean,String[],Field[])  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(excludeFields,  false,  excludeFields,  fields);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(excludeFields,  false,  excludeFields,  fields);	  AccessibleObject.setAccessible(fields,    false,    excludeFields,    useTransients);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],boolean,String[],Field[])	34	None	replace
19	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  false,  false,  excludeFields,  useTransients);  [CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,boolean,String[],boolean)  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  false,  false,  excludeFields,  useTransients);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  false,  false,  excludeFields,  useTransients);	  AccessibleObject.setAccessible(fields,    true,    false,    useTransients);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,boolean,String[],boolean)	52	None	replace
20	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  false,  true,  useTransients,  excludeFields);  [CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,boolean,boolean,String[])  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  false,  true,  useTransients,  excludeFields);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  false,  true,  useTransients,  excludeFields);	  AccessibleObject.setAccessible(fields,    true,    false,    useTransients);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,boolean,boolean,String[])	52	None	replace
21	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  true,  false,  useTransients,  excludeFields);  [CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,boolean,boolean,String[])  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  true,  false,  useTransients,  excludeFields);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  true,  false,  useTransients,  excludeFields);	  AccessibleObject.setAccessible(fields,    true,    false,    useTransients);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,boolean,boolean,String[])	52	None	replace
22	[BUG]  [BUGGY]  if(fields!=  null)  {  AccessibleObject.setAccessible(false);  AccessibleObject.setAccessible(fields,  true);  }  [CE]  non-static  method  setAccessible(boolean)  cannot  be  referenced  from  a  static  context  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  if(fields!=  null)  {  AccessibleObject.setAccessible(false);  AccessibleObject.setAccessible(fields,  true);  }  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	if(fields!=  null)  {  AccessibleObject.setAccessible(false);  AccessibleObject.setAccessible(fields,  true);  }	  AccessibleObject.setAccessible(fields,    false);    AccessibleObject.setAccessible(fields,    true);    	non-compiled	[CE]  non-static  method  setAccessible(boolean)  cannot  be  referenced  from  a  static  context	5	None	replace
23	[BUG]  [BUGGY]  if(fields!=  null)  {  AccessibleObject.setAccessible(false,  false);  AccessibleObject.setAccessible(fields,  true);  }  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  if(fields!=  null)  {  AccessibleObject.setAccessible(false,  false);  AccessibleObject.setAccessible(fields,  true);  }  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	if(fields!=  null)  {  AccessibleObject.setAccessible(false,  false);  AccessibleObject.setAccessible(fields,  true);  }	  AccessibleObject.setAccessible(fields,    false);    AccessibleObject.setAccessible(fields,    true);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)	5	None	replace
24	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  true,  excludeFields,  false);  [CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,String[],boolean)  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  true,  excludeFields,  false);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  true,  excludeFields,  false);	  AccessibleObject.setAccessible(fields,    true,    useTransients,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,String[],boolean)	53	None	replace
25	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  true,  field,  false);  [CE]  cannot  find  symbol  field  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  true,  field,  false);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  true,  field,  false);	  AccessibleObject.setAccessible(fields,    true,    useTransients,    false);    	non-compiled	[CE]  cannot  find  symbol  field	53	None	replace
26	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  false,  useTransients,  true);  [CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,boolean,boolean)  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  false,  useTransients,  true);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  false,  useTransients,  true);	  AccessibleObject.setAccessible(fields,    true,    useTransients,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,boolean,boolean)	53	None	replace
27	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  true,  fields,  false);  [CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,Field[],boolean)  [FE]                        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  true,  fields,  false);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  true,  fields,  false);	  AccessibleObject.setAccessible(fields,    true,    useTransients,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,Field[],boolean)	53	None	replace
28	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  null,  field);  [CE]  cannot  find  symbol  field  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  null,  field);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  null,  field);	  AccessibleObject.setAccessible(fields,    null,    iTotal);    	non-compiled	[CE]  cannot  find  symbol  field	23	None	replace
29	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  null,  field.iTotal);  [CE]  cannot  find  symbol  field  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  null,  field.iTotal);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  null,  field.iTotal);	  AccessibleObject.setAccessible(fields,    null,    iTotal);    	non-compiled	[CE]  cannot  find  symbol  field	23	None	replace
30	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  fields,  useTransients);  [CE]  no  suitable  method  found  for  setAccessible(String[],boolean,Field[],boolean)  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  fields,  useTransients);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(excludeFields,  true,  fields,  useTransients);	  AccessibleObject.setAccessible(excludeFields,    true,    useTransients);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],boolean,Field[],boolean)	41	None	replace
31	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  field,  useTransients);  [CE]  cannot  find  symbol  field  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  field,  useTransients);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(excludeFields,  true,  field,  useTransients);	  AccessibleObject.setAccessible(excludeFields,    true,    useTransients);    	non-compiled	[CE]  cannot  find  symbol  field	41	None	replace
32	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  useTransients,  true);  [CE]  no  suitable  method  found  for  setAccessible(String[],boolean,boolean)  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(excludeFields,  useTransients,  true);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(excludeFields,  useTransients,  true);	  AccessibleObject.setAccessible(excludeFields,    true,    useTransients);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],boolean,boolean)	41	None	replace
33	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  builder.append(excludeFields);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	add	builder.append(excludeFields);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(excludeFields);    	compilable	  [FE]  AssertionFailedError  	7	4	replace
34	[BUG]  [BUGGY]  builder.append(excludeFields);  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  builder.append(excludeFields);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	builder.append(excludeFields);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(excludeFields);    	compilable	  [FE]  AssertionFailedError  	7	4	replace
35	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(fields);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(fields);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Field[]  fields  =  clazz.getDeclaredFields(fields);	  Field[]    fields    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	36	None	replace
36	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  useTransients);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  useTransients);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  useTransients);	  Field[]    fields    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	36	None	replace
37	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  builder);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  builder);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  builder);	  Field[]    fields    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	36	None	replace
38	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  null,  excludeFields,  useTransients);  [CE]  no  suitable  method  found  for  setAccessible(Field[],<null>,String[],boolean)  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  null,  excludeFields,  useTransients);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  null,  excludeFields,  useTransients);	  AccessibleObject.setAccessible(fields,    null,    excludeFields);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],<null>,String[],boolean)	21	None	replace
39	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  null,  excludeFields,  iTotal);  [CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  null,  excludeFields,  iTotal);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  null,  excludeFields,  iTotal);	  AccessibleObject.setAccessible(fields,    null,    excludeFields);    	non-compiled	[CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context	21	None	replace
40	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  true,  useTransients,  useTransients);  [CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,boolean,boolean)  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  true,  useTransients,  useTransients);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  true,  useTransients,  useTransients);	  AccessibleObject.setAccessible(fields,    true,    excludedFields,    useTransients);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,boolean,boolean)	56	None	replace
41	[BUG]  [BUGGY]  Object  fieldValue  =  clazz.getSuperclass(fields);  [CE]  method  getSuperclass  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Object  fieldValue  =  clazz.getSuperclass(fields);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Object  fieldValue  =  clazz.getSuperclass(fields);	  Object    fieldValue    =    clazz.getSuperclass();    	non-compiled	[CE]  method  getSuperclass  in  class  Class<T>  cannot  be  applied  to  given  types;	26	None	replace
42	[BUG]  [BUGGY]  Fields[]  fields  =  excludeFields!=  null?  null  :  excludedFields.getDeclaredFields();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Fields[]  fields  =  excludeFields!=  null?  null  :  excludedFields.getDeclaredFields();  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Fields[]  fields  =  excludeFields!=  null?  null  :  excludedFields.getDeclaredFields();	  Fields[]    fields    =    excludedFields.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
43	[BUG]  [BUGGY]  Fields[]  fields  =  excludeFields!=  null?  null  :  excludeFields.getDeclaredFields();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Fields[]  fields  =  excludeFields!=  null?  null  :  excludeFields.getDeclaredFields();  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Fields[]  fields  =  excludeFields!=  null?  null  :  excludeFields.getDeclaredFields();	  Fields[]    fields    =    excludedFields.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
44	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclassesFields();  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Field[]  fields  =  clazz.getSuperclassesFields();  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Field[]  fields  =  clazz.getSuperclassesFields();	  Field[]    fields    =    clazz.getSuperclassesArray();    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	59	None	replace
45	[BUG]  [BUGGY]  Object  fieldValue  =  clazz.getDeclaredFields(fields,  excludeFields);  [CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Object  fieldValue  =  clazz.getDeclaredFields(fields,  excludeFields);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Object  fieldValue  =  clazz.getDeclaredFields(fields,  excludeFields);	  Object    fieldValue    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;	45	None	replace
46	[BUG]  [BUGGY]  Object  fieldValue  =  clazz.getDeclaredFields(excludeFields,  fields);  [CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Object  fieldValue  =  clazz.getDeclaredFields(excludeFields,  fields);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Object  fieldValue  =  clazz.getDeclaredFields(excludeFields,  fields);	  Object    fieldValue    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;	45	None	replace
47	[BUG]  [BUGGY]  Object  fieldValue  =  clazz.getDeclaredFields(object,  excludeFields);  [CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Object  fieldValue  =  clazz.getDeclaredFields(object,  excludeFields);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Object  fieldValue  =  clazz.getDeclaredFields(object,  excludeFields);	  Object    fieldValue    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;	45	None	replace
48	[BUG]  [BUGGY]  Fields[]  fields  =  excludeFields.getSuperclassFields();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Fields[]  fields  =  excludeFields.getSuperclassFields();  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Fields[]  fields  =  excludeFields.getSuperclassFields();	  Fields[]    fields    =    clazz.getSuperclassFields();    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
49	[BUG]  [BUGGY]  Fields[]  fields  =  clazz.getSuperclassFields(excludeFields);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Fields[]  fields  =  clazz.getSuperclassFields(excludeFields);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Fields[]  fields  =  clazz.getSuperclassFields(excludeFields);	  Fields[]    fields    =    clazz.getSuperclassFields();    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
50	[BUG]  [BUGGY]  Fields[]  fields  =  this.clazz.getSuperclassFields();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Fields[]  fields  =  this.clazz.getSuperclassFields();  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Fields[]  fields  =  this.clazz.getSuperclassFields();	  Fields[]    fields    =    clazz.getSuperclassFields();    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
51	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  true,  fields);  [CE]  no  suitable  method  found  for  setAccessible(String[],boolean,boolean,Field[])  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  true,  fields);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(excludeFields,  true,  true,  fields);	  AccessibleObject.setAccessible(fields,    true,    true,    excludeFields);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],boolean,boolean,Field[])	48	None	replace
52	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  true,  true,  excludeFields,  useTransients);  [CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,boolean,String[],boolean)  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  true,  true,  excludeFields,  useTransients);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  true,  true,  excludeFields,  useTransients);	  AccessibleObject.setAccessible(fields,    true,    true,    excludeFields);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,boolean,String[],boolean)	48	None	replace
53	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  useTransients,  fields);  [CE]  no  suitable  method  found  for  setAccessible(String[],boolean,boolean,Field[])  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  useTransients,  fields);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(excludeFields,  true,  useTransients,  fields);	  AccessibleObject.setAccessible(fields,    true,    useTransients,    excludeFields);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],boolean,boolean,Field[])	33	None	replace
54	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  field,  useTransients,  excludeFields);  [CE]  cannot  find  symbol  field  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  field,  useTransients,  excludeFields);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(excludeFields,  true,  field,  useTransients,  excludeFields);	  AccessibleObject.setAccessible(fields,    true,    useTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol  field	33	None	replace
55	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  true,  false,  object);  [CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,boolean,Object)  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  true,  false,  object);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  true,  false,  object);	  AccessibleObject.setAccessible(fields,    true,    false,    fieldValue);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,boolean,Object)	30	None	replace
56	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  true,  false,  fields[iConstant);  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  true,  false,  fields[iConstant);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  true,  false,  fields[iConstant);	  AccessibleObject.setAccessible(fields,    true,    false,    fieldValue);    	non-compiled	[CE]  ']'  expected	30	None	replace
57	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,    false);    AccessibleObject.setAccessible(fields,  false);  AccessibleObject.setAccessible(fields,  false);  AccessibleObject.setAccessible(fields,  false);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	add	AccessibleObject.setAccessible(fields,        false);        AccessibleObject.setAccessible(fields,    false);    AccessibleObject.setAccessible(fields,  false);  AccessibleObject.setAccessible(fields,  false);	  	compilable	  [FE]  AssertionFailedError  	1	1	add
58	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,    false);    AccessibleObject.setAccessible(fields,  false);  AccessibleObject.setAccessible(fields,  false);  AccessibleObject.setAccessible(fields,  false);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,    false);    AccessibleObject.setAccessible(fields,  false);  AccessibleObject.setAccessible(fields,  false);  AccessibleObject.setAccessible(fields,  false);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,        false);        AccessibleObject.setAccessible(fields,    false);    AccessibleObject.setAccessible(fields,  false);  AccessibleObject.setAccessible(fields,  false);	  	compilable	  [FE]  AssertionFailedError  	1	1	add
59	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,    false);    AccessibleObject.setAccessible(fields,  false);  AccessibleObject.setAccessible(fields,  false);  AccessibleObject.setAccessible(fields,  true);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	add	AccessibleObject.setAccessible(fields,        false);        AccessibleObject.setAccessible(fields,    false);    AccessibleObject.setAccessible(fields,  false);  AccessibleObject.setAccessible(fields,  true);	  	compilable	  [FE]  AssertionFailedError  	1	1	add
60	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,    false);    AccessibleObject.setAccessible(fields,  false);  AccessibleObject.setAccessible(fields,  false);  AccessibleObject.setAccessible(fields,  true);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,    false);    AccessibleObject.setAccessible(fields,  false);  AccessibleObject.setAccessible(fields,  false);  AccessibleObject.setAccessible(fields,  true);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,        false);        AccessibleObject.setAccessible(fields,    false);    AccessibleObject.setAccessible(fields,  false);  AccessibleObject.setAccessible(fields,  true);	  	compilable	  [FE]  AssertionFailedError  	1	1	add
61	[BUG]  [BUGGY]  Fields[]  fields  =  excludeFields  ==  null?  null  :  excludeFields.getDeclaredFields();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Fields[]  fields  =  excludeFields  ==  null?  null  :  excludeFields.getDeclaredFields();  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Fields[]  fields  =  excludeFields  ==  null?  null  :  excludeFields.getDeclaredFields();	  Fields[]    fields    =    excludeFields.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
62	[BUG]  [BUGGY]  Fields[]  fields  =  excludeFields.getFields();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Fields[]  fields  =  excludeFields.getFields();  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Fields[]  fields  =  excludeFields.getFields();	  Fields[]    fields    =    clazz.getFields();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
63	[BUG]  [BUGGY]  AccessibleObject.setAccuracy(excludeFields,  false,  fields);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccuracy(excludeFields,  false,  fields);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccuracy(excludeFields,  false,  fields);	  AccessibleObject.setAccuracy(fields,    false,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
64	[BUG]  [BUGGY]  AccessibleObject.setAccuracy(excludeFields,  true,  fields);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccuracy(excludeFields,  true,  fields);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccuracy(excludeFields,  true,  fields);	  AccessibleObject.setAccuracy(fields,    false,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
65	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclasses();  builder.append(fields,  excludeFields);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Field[]  fields  =  clazz.getSuperclasses();  builder.append(fields,  excludeFields);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Field[]  fields  =  clazz.getSuperclasses();  builder.append(fields,  excludeFields);	  Field[]    fields    =    clazz.getSuperclasses();    builder.append(excludeFields);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	50	None	replace
66	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclasses();  builder.append(fields);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Field[]  fields  =  clazz.getSuperclasses();  builder.append(fields);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Field[]  fields  =  clazz.getSuperclasses();  builder.append(fields);	  Field[]    fields    =    clazz.getSuperclasses();    builder.append(excludeFields);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	50	None	replace
67	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  if(fields!=  null)  {  AccessibleObject.setAccessible(fields,  false);  }  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	add	if(fields!=  null)  {  AccessibleObject.setAccessible(fields,  false);  }	  AccessibleObject.setAccessible(fields,    false);    AccessibleObject.setAccessible(fields,    false);    	compilable	  [FE]  AssertionFailedError  	2	4	replace
68	[BUG]  [BUGGY]  if(fields!=  null)  {  AccessibleObject.setAccessible(fields,  false);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  if(fields!=  null)  {  AccessibleObject.setAccessible(fields,  false);  }  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	if(fields!=  null)  {  AccessibleObject.setAccessible(fields,  false);  }	  AccessibleObject.setAccessible(fields,    false);    AccessibleObject.setAccessible(fields,    false);    	compilable	  [FE]  AssertionFailedError  	2	4	replace
69	[BUG]  [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields();  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields();  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Object[]  fields  =  clazz.getDeclaredFields();	  AccessibleObject.setAccessible(fields,    false);    AccessibleObject.setAccessible(fields,    false);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	2	None	replace
70	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  excludeFields,  useTransients);  [CE]  no  suitable  method  found  for  setAccessible(String[],boolean,String[],boolean)  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  excludeFields,  useTransients);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(excludeFields,  true,  excludeFields,  useTransients);	  AccessibleObject.setAccessible(fields,    true,    excludeFields,    useTransients);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],boolean,String[],boolean)	32	None	replace
71	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  true,  excludeFields,  useTransients,  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  true,  excludeFields,  useTransients,  fieldValue);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  true,  excludeFields,  useTransients,  fieldValue);	  AccessibleObject.setAccessible(fields,    true,    excludeFields,    useTransients);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	32	None	replace
72	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperClassFields(excludeFields);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Field[]  fields  =  clazz.getSuperClassFields(excludeFields);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Field[]  fields  =  clazz.getSuperClassFields(excludeFields);	  Field[]    fields    =    clazz.getSuperClassFields();    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	54	None	replace
73	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  null,  fields,  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  null,  fields,  iConstant);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  null,  fields,  iConstant);	  AccessibleObject.setAccessible(fields,    null,    fields);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	57	None	replace
74	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  null,  fields,  iTotal);  [CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  null,  fields,  iTotal);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  null,  fields,  iTotal);	  AccessibleObject.setAccessible(fields,    null,    fields);    	non-compiled	[CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context	57	None	replace
75	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  null,  fieldValues);  [CE]  cannot  find  symbol  fieldValues  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  null,  fieldValues);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  null,  fieldValues);	  AccessibleObject.setAccessible(fields,    null,    fields);    	non-compiled	[CE]  cannot  find  symbol  fieldValues	57	None	replace
76	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclassFields(fields);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Field[]  fields  =  clazz.getSuperclassFields(fields);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Field[]  fields  =  clazz.getSuperclassFields(fields);	  Field[]    fields    =    clazz.getSuperclassFields(excludeFields);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	27	None	replace
77	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclassFields(excludeFields,  useTransients);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Field[]  fields  =  clazz.getSuperclassFields(excludeFields,  useTransients);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Field[]  fields  =  clazz.getSuperclassFields(excludeFields,  useTransients);	  Field[]    fields    =    clazz.getSuperclassFields(excludeFields);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	27	None	replace
78	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclassFields(excludeFields,  builder);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Field[]  fields  =  clazz.getSuperclassFields(excludeFields,  builder);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Field[]  fields  =  clazz.getSuperclassFields(excludeFields,  builder);	  Field[]    fields    =    clazz.getSuperclassFields(excludeFields);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	27	None	replace
79	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclassFields(object);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Field[]  fields  =  clazz.getSuperclassFields(object);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Field[]  fields  =  clazz.getSuperclassFields(object);	  Field[]    fields    =    clazz.getSuperclassFields(excludeFields);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	27	None	replace
80	[BUG]  [BUGGY]  FieldUtils.setAccessible(fields,  false);  [CE]  cannot  find  symbol  FieldUtils  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  FieldUtils.setAccessible(fields,  false);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	FieldUtils.setAccessible(fields,  false);	  AccessibleObject.setAccessible(fields,    false);    AccesibleObject.setAccessible(fields,    false);    	non-compiled	[CE]  cannot  find  symbol  FieldUtils	3	None	replace
81	[BUG]  [BUGGY]  Builder.append(fields,  true);  [CE]  cannot  find  symbol  Builder  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Builder.append(fields,  true);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Builder.append(fields,  true);	  Builder.append(excludeFields,    true);    	non-compiled	[CE]  cannot  find  symbol  Builder	13	None	replace
82	[BUG]  [BUGGY]  Builder.append(builder,  excludeFields,  true);  [CE]  cannot  find  symbol  Builder  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Builder.append(builder,  excludeFields,  true);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Builder.append(builder,  excludeFields,  true);	  Builder.append(excludeFields,    true);    	non-compiled	[CE]  cannot  find  symbol  Builder	13	None	replace
83	[BUG]  [BUGGY]  Builder.append(object,  true);  [CE]  cannot  find  symbol  Builder  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Builder.append(object,  true);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Builder.append(object,  true);	  Builder.append(excludeFields,    true);    	non-compiled	[CE]  cannot  find  symbol  Builder	13	None	replace
84	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  fields,  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  fields,  iConstant);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(excludeFields,  true,  fields,  iConstant);	  AccessibleObject.setAccessible(excludeFields,    true,    fields);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	42	None	replace
85	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclasses(fields);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Field[]  fields  =  clazz.getSuperclasses(fields);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Field[]  fields  =  clazz.getSuperclasses(fields);	  Field[]    fields    =    clazz.getSuperclasses(excludeFields);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	31	None	replace
86	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclasses(excludeFields,  useTransients);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Field[]  fields  =  clazz.getSuperclasses(excludeFields,  useTransients);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Field[]  fields  =  clazz.getSuperclasses(excludeFields,  useTransients);	  Field[]    fields    =    clazz.getSuperclasses(excludeFields);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	31	None	replace
87	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclasses(excludeFields,  builder);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Field[]  fields  =  clazz.getSuperclasses(excludeFields,  builder);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Field[]  fields  =  clazz.getSuperclasses(excludeFields,  builder);	  Field[]    fields    =    clazz.getSuperclasses(excludeFields);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	31	None	replace
88	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclasses(object);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Field[]  fields  =  clazz.getSuperclasses(object);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Field[]  fields  =  clazz.getSuperclasses(object);	  Field[]    fields    =    clazz.getSuperclasses(excludeFields);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	31	None	replace
89	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  null,  builder);  [CE]  no  suitable  method  found  for  setAccessible(Field[],<null>,HashCodeBuilder)  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  null,  builder);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  null,  builder);	  AccessibleObject.setAccessible(fields,    null,    fieldValue);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],<null>,HashCodeBuilder)	24	None	replace
90	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  null,  constructor);  [CE]  cannot  find  symbol  constructor  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  null,  constructor);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  null,  constructor);	  AccessibleObject.setAccessible(fields,    null,    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  constructor	24	None	replace
91	[BUG]  [BUGGY]  String[]  fields  =  clazz.getSuperclasses(excludeFields);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  String[]  fields  =  clazz.getSuperclasses(excludeFields);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	String[]  fields  =  clazz.getSuperclasses(excludeFields);	  String[]    fields    =    clazz.getSuperclasses();    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	12	None	replace
92	[BUG]  [BUGGY]  BuilderBuilder.append(excludeFields,  true);  [CE]  cannot  find  symbol  BuilderBuilder  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  BuilderBuilder.append(excludeFields,  true);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	BuilderBuilder.append(excludeFields,  true);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(excludeFields,    true);    	non-compiled	[CE]  cannot  find  symbol  BuilderBuilder	8	None	replace
93	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true);  [CE]  no  suitable  method  found  for  setAccessible(String[],boolean)  [FE]        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(excludeFields,  true);	  AccessibleObject.setAccessible(excludeFields,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],boolean)	43	None	replace
94	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  false);  [CE]  no  suitable  method  found  for  setAccessible(String[],boolean,boolean)  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  false);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(excludeFields,  true,  false);	  AccessibleObject.setAccessible(excludeFields,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],boolean,boolean)	43	None	replace
95	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getStaticFields(excludeFields);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Field[]  fields  =  clazz.getStaticFields(excludeFields);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Field[]  fields  =  clazz.getStaticFields(excludeFields);	  Field[]    fields    =    clazz.getStaticFields();    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	10	None	replace
96	[BUG]  [BUGGY]  Object  fieldValue  =  clazz.getDeclaredFields(excludeFields,  field);  [CE]  cannot  find  symbol  field  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Object  fieldValue  =  clazz.getDeclaredFields(excludeFields,  field);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Object  fieldValue  =  clazz.getDeclaredFields(excludeFields,  field);	  Object    fieldValue    =    clazz.getDeclaredFields(fields);    	non-compiled	[CE]  cannot  find  symbol  field	25	None	replace
97	[BUG]  [BUGGY]  Object  fieldValue  =  clazz.getDeclaredFields(fields,  true);  [CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Object  fieldValue  =  clazz.getDeclaredFields(fields,  true);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Object  fieldValue  =  clazz.getDeclaredFields(fields,  true);	  Object    fieldValue    =    clazz.getDeclaredFields(fields);    	non-compiled	[CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;	25	None	replace
98	[BUG]  [BUGGY]  AccessibleObject.setAccuracy(excludeFields,  true);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccuracy(excludeFields,  true);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccuracy(excludeFields,  true);	  AccessibleObject.setAccuracy(excludeFields,    false);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
99	[BUG]  [BUGGY]  AccessibleObject.setAccuracy(excludeFields,  false,  clazz);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccuracy(excludeFields,  false,  clazz);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccuracy(excludeFields,  false,  clazz);	  AccessibleObject.setAccuracy(excludeFields,    false);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
100	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  true,  false,  fields[iTotal]);  [CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  true,  false,  fields[iTotal]);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  true,  false,  fields[iTotal]);	  AccessibleObject.setAccessible(fields,    true,    false,    iConstant);    	non-compiled	[CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context	29	None	replace
101	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  true,  false,  iTotal);  [CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  true,  false,  iTotal);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  true,  false,  iTotal);	  AccessibleObject.setAccessible(fields,    true,    false,    iConstant);    	non-compiled	[CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context	29	None	replace
102	[BUG]  [BUGGY]  Object  fieldValue  =  object.get(clazz);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Object  fieldValue  =  object.get(clazz);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Object  fieldValue  =  object.get(clazz);	  Object    fieldValue    =    clazz.get(object);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
103	[BUG]  [BUGGY]  Object  objectValue  =  clazz.get(object);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Object  objectValue  =  clazz.get(object);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Object  objectValue  =  clazz.get(object);	  Object    fieldValue    =    clazz.get(object);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
104	[BUG]  [BUGGY]  Object  fieldValue  =  objects.get(clazz);  [CE]  cannot  find  symbol  objects  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Object  fieldValue  =  objects.get(clazz);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Object  fieldValue  =  objects.get(clazz);	  Object    fieldValue    =    clazz.get(object);    	non-compiled	[CE]  cannot  find  symbol  objects	46	None	replace
105	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields,  fields);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields,  fields);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields,  fields);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fields,    excludeFields);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	55	None	replace
106	[BUG]  [BUGGY]  Builder.append(excludeFields,  clazz.getDeclaredFields());  [CE]  cannot  find  symbol  Builder  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Builder.append(excludeFields,  clazz.getDeclaredFields());  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Builder.append(excludeFields,  clazz.getDeclaredFields());	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fields,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol  Builder	55	None	replace
107	[BUG]  [BUGGY]  Builder.append(excludeFields,  clazz);  [CE]  cannot  find  symbol  Builder  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Builder.append(excludeFields,  clazz);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Builder.append(excludeFields,  clazz);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fields,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol  Builder	55	None	replace
108	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields,  field);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields,  field);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields,  field);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fields,    excludeFields);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	55	None	replace
109	[BUG]  [BUGGY]  builder.append(excludeFields,  true,  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  builder.append(excludeFields,  true,  fieldValue);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	builder.append(excludeFields,  true,  fieldValue);	  builder.append(excludeFields,    true);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	15	None	replace
110	[BUG]  [BUGGY]  builder.append(excludeFields,  true,  fields);  [CE]  no  suitable  method  found  for  append(String[],boolean,Field[])  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  builder.append(excludeFields,  true,  fields);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	builder.append(excludeFields,  true,  fields);	  builder.append(excludeFields,    true);    	non-compiled	[CE]  no  suitable  method  found  for  append(String[],boolean,Field[])	15	None	replace
111	[BUG]  [BUGGY]  builder.append(excludeFields,  fieldValue,  true);  [CE]  cannot  find  symbol  fieldValue  [FE]                        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  builder.append(excludeFields,  fieldValue,  true);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	builder.append(excludeFields,  fieldValue,  true);	  builder.append(excludeFields,    true);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	15	None	replace
112	[BUG]  [BUGGY]  String[]  fields  =  clazz.getSuperclassFields(excludeFields);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  String[]  fields  =  clazz.getSuperclassFields(excludeFields);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	String[]  fields  =  clazz.getSuperclassFields(excludeFields);	  String[]    fields    =    clazz.getSuperclassFields();    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	47	None	replace
113	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  true,  null);  [CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,<null>)  [FE]        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  true,  null);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  true,  null);	  AccessibleObject.setAccessible(fields,    false,    null);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,<null>)	58	None	replace
114	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  false,  excludeFields,  null);  [CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,String[],<null>)  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  false,  excludeFields,  null);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  false,  excludeFields,  null);	  AccessibleObject.setAccessible(fields,    false,    null);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,String[],<null>)	58	None	replace
115	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  false,  null,  excludeFields);  [CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,<null>,String[])  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  false,  null,  excludeFields);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  false,  null,  excludeFields);	  AccessibleObject.setAccessible(fields,    false,    null);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,<null>,String[])	58	None	replace
116	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  false,  null,  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  false,  null,  iConstant);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  false,  null,  iConstant);	  AccessibleObject.setAccessible(fields,    false,    null);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	58	None	replace
117	[BUG]  [BUGGY]  AccessibleObject.setAccuracy(fields,  true,  excludeFields);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccuracy(fields,  true,  excludeFields);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccuracy(fields,  true,  excludeFields);	  AccessibleObject.setAccuracy(fields,    true);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
118	[BUG]  [BUGGY]  AccessibleObject.setAccuracy(fields,  true,  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccuracy(fields,  true,  iConstant);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccuracy(fields,  true,  iConstant);	  AccessibleObject.setAccuracy(fields,    true);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	16	None	replace
119	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,    false);    AccessibleObject.setAccessible(fields,  true);  AccessibleObject.setAccessible(fields,  false);  AccessibleObject.setAccessible(fields,  true);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	add	AccessibleObject.setAccessible(fields,        false);        AccessibleObject.setAccessible(fields,    true);    AccessibleObject.setAccessible(fields,  false);  AccessibleObject.setAccessible(fields,  true);	  	compilable	  [FE]  AssertionFailedError  	4	1	add
120	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,    false);    AccessibleObject.setAccessible(fields,  true);  AccessibleObject.setAccessible(fields,  false);  AccessibleObject.setAccessible(fields,  true);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,    false);    AccessibleObject.setAccessible(fields,  true);  AccessibleObject.setAccessible(fields,  false);  AccessibleObject.setAccessible(fields,  true);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,        false);        AccessibleObject.setAccessible(fields,    true);    AccessibleObject.setAccessible(fields,  false);  AccessibleObject.setAccessible(fields,  true);	  	compilable	  [FE]  AssertionFailedError  	4	1	add
121	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,    false);    AccessibleObject.setAccessible(fields,  true);  AccessibleObject.setAccessible(fields,  false);  AccesibleObject.setAccessible(fields,  true);  [CE]  cannot  find  symbol  AccesibleObject  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,    false);    AccessibleObject.setAccessible(fields,  true);  AccessibleObject.setAccessible(fields,  false);  AccesibleObject.setAccessible(fields,  true);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,        false);        AccessibleObject.setAccessible(fields,    true);    AccessibleObject.setAccessible(fields,  false);  AccesibleObject.setAccessible(fields,  true);	  	non-compiled	[CE]  cannot  find  symbol  AccesibleObject	4	None	add
122	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  true,  excludeFields,  iTotal);  [CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  true,  excludeFields,  iTotal);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  true,  excludeFields,  iTotal);	  AccessibleObject.setAccessible(fields,    true,    excludeFields);    	non-compiled	[CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context	35	None	replace
123	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  false,  builder);  [CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,HashCodeBuilder)  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  false,  builder);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  false,  builder);	  AccessibleObject.setAccessible(fields,    false,    fieldValue);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,HashCodeBuilder)	20	None	replace
124	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  true,  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  true,  fieldValue);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  true,  fieldValue);	  AccessibleObject.setAccessible(fields,    false,    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	20	None	replace
125	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  false,  true,  excludeFields);  [CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,boolean,String[])  [FE]        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  false,  true,  excludeFields);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  false,  true,  excludeFields);	  AccessibleObject.setAccessible(fields,    false,    true);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,boolean,String[])	19	None	replace
126	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  false,  false,  true,  excludeFields);  [CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,boolean,boolean,String[])  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  false,  false,  true,  excludeFields);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  false,  false,  true,  excludeFields);	  AccessibleObject.setAccessible(fields,    false,    true);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,boolean,boolean,String[])	19	None	replace
127	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  false,  true,  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  false,  true,  fieldValue);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  false,  true,  fieldValue);	  AccessibleObject.setAccessible(fields,    false,    true);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	19	None	replace
128	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  false,  fields);  [CE]  no  suitable  method  found  for  setAccessible(String[],boolean,Field[])  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(excludeFields,  false,  fields);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(excludeFields,  false,  fields);	  AccessibleObject.setAccessible(fields,    false,    excludeFields);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],boolean,Field[])	44	None	replace
129	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  false,  excludeFields,  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  false,  excludeFields,  iConstant);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  false,  excludeFields,  iConstant);	  AccessibleObject.setAccessible(fields,    false,    excludeFields);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	44	None	replace
130	[BUG]  [BUGGY]  Object  fieldValue  =  fields.get(object);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Object  fieldValue  =  fields.get(object);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Object  fieldValue  =  fields.get(object);	  Object    fieldValue    =    clazz.get(object);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
131	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  false,  clazz);  [CE]  no  suitable  method  found  for  setAccessible(String[],boolean,Class<CAP#1>)  [FE]        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(excludeFields,  false,  clazz);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(excludeFields,  false,  clazz);	  AccessibleObject.setAccessible(excludeFields,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],boolean,Class<CAP#1>)	43	None	replace
132	[BUG]  [BUGGY]  builder.append(excludeFields,  true,  field);  [CE]  cannot  find  symbol  field  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  builder.append(excludeFields,  true,  field);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	builder.append(excludeFields,  true,  field);	  builder.append(excludeFields,    true);    	non-compiled	[CE]  cannot  find  symbol  field	15	None	replace
133	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  false,  null,  iTotal);  [CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context  [FE]        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  false,  null,  iTotal);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  false,  null,  iTotal);	  AccessibleObject.setAccessible(fields,    false,    null);    	non-compiled	[CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context	58	None	replace
134	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  true,  true,  excludeFields,  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  true,  true,  excludeFields,  iConstant);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  true,  true,  excludeFields,  iConstant);	  AccessibleObject.setAccessible(fields,    true,    true,    excludeFields);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	48	None	replace
135	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  true,  true,  excludeFields,  iTotal);  [CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  true,  true,  excludeFields,  iTotal);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  true,  true,  excludeFields,  iTotal);	  AccessibleObject.setAccessible(fields,    true,    true,    excludeFields);    	non-compiled	[CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context	48	None	replace
136	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  useTransients,  false);  [CE]  no  suitable  method  found  for  setAccessible(String[],boolean,boolean,boolean)  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  useTransients,  false);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(excludeFields,  true,  useTransients,  false);	  AccessibleObject.setAccessible(fields,    true,    useTransients,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],boolean,boolean,boolean)	53	None	replace
137	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  false,  excludeFields,  false);  [CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,String[],boolean)  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  false,  excludeFields,  false);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  false,  excludeFields,  false);	  AccessibleObject.setAccessible(fields,    true,    useTransients,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,String[],boolean)	53	None	replace
138	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  field,  false);  [CE]  cannot  find  symbol  field  [FE]                      AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  field,  false);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(excludeFields,  true,  field,  false);	  AccessibleObject.setAccessible(fields,    true,    useTransients,    false);    	non-compiled	[CE]  cannot  find  symbol  field	53	None	replace
139	[BUG]  [BUGGY]  Object  fieldValue  =  clazz.getFieldValue(fields);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Object  fieldValue  =  clazz.getFieldValue(fields);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Object  fieldValue  =  clazz.getFieldValue(fields);	  Object    fieldValue    =    clazz.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
140	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  true,  false,  fields);  [CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,boolean,Field[])  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  true,  false,  fields);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  true,  false,  fields);	  AccessibleObject.setAccessible(fields,    true,    false,    iConstant);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,boolean,Field[])	29	None	replace
141	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  null,  excludeFields,  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  null,  excludeFields,  iConstant);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  null,  excludeFields,  iConstant);	  AccessibleObject.setAccessible(fields,    null,    excludeFields);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	21	None	replace
142	[BUG]  [BUGGY]  Object  fieldValue  =  fields[0].getValue();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Object  fieldValue  =  fields[0].getValue();  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Object  fieldValue  =  fields[0].getValue();	  AccessibleObject.setAccessible(fields,    false);    AccessibleObject.setAccessible(fields,    true);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
143	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  false,  fields);  [CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,Field[])  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  false,  fields);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  false,  fields);	  AccessibleObject.setAccessible(fields,    false,    fieldValue);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,Field[])	20	None	replace
144	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  true,  excludeFields,  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  true,  excludeFields,  iConstant);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  true,  excludeFields,  iConstant);	  AccessibleObject.setAccessible(fields,    true,    excludeFields);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	35	None	replace
145	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  fields,  iTotal);  [CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  fields,  iTotal);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(excludeFields,  true,  fields,  iTotal);	  AccessibleObject.setAccessible(excludeFields,    true,    fields);    	non-compiled	[CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context	42	None	replace
146	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  false,  excludeFields,  field);  [CE]  cannot  find  symbol  field  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(excludeFields,  false,  excludeFields,  field);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(excludeFields,  false,  excludeFields,  field);	  AccessibleObject.setAccessible(fields,    false,    excludeFields,    useTransients);    	non-compiled	[CE]  cannot  find  symbol  field	34	None	replace
147	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  false,  field,  useTransients);  [CE]  cannot  find  symbol  field  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  false,  field,  useTransients);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(excludeFields,  true,  false,  field,  useTransients);	  AccessibleObject.setAccessible(fields,    true,    false,    useTransients);    	non-compiled	[CE]  cannot  find  symbol  field	52	None	replace
148	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  false,  false,  true);  [CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,boolean,boolean)  [FE]        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  false,  false,  true);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  false,  false,  true);	  AccessibleObject.setAccessible(fields,    false,    true);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,boolean,boolean)	19	None	replace
149	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  true,  false,  excludeFields,  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  true,  false,  excludeFields,  iConstant);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  true,  false,  excludeFields,  iConstant);	  AccessibleObject.setAccessible(fields,    true,    false,    excludeFields);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	28	None	replace
150	[BUG]  [BUGGY]  Object  fieldValue  =  clazz.getDeclaredFields(excludeFields,  builder);  [CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Object  fieldValue  =  clazz.getDeclaredFields(excludeFields,  builder);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Object  fieldValue  =  clazz.getDeclaredFields(excludeFields,  builder);	  Object    fieldValue    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;	45	None	replace
151	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  excludeFields,  field);  [CE]  cannot  find  symbol  field  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  excludeFields,  field);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(excludeFields,  true,  excludeFields,  field);	  AccessibleObject.setAccessible(fields,    true,    excludeFields,    useTransients);    	non-compiled	[CE]  cannot  find  symbol  field	32	None	replace
152	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  excludeFields,  fields);  [CE]  no  suitable  method  found  for  setAccessible(String[],boolean,String[],Field[])  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  excludeFields,  fields);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(excludeFields,  true,  excludeFields,  fields);	  AccessibleObject.setAccessible(fields,    true,    excludeFields,    useTransients);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],boolean,String[],Field[])	32	None	replace
153	[BUG]  [BUGGY]  Object  fieldValue  =  clazz.getDeclaredFields(excludeFields,  object);  [CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Object  fieldValue  =  clazz.getDeclaredFields(excludeFields,  object);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Object  fieldValue  =  clazz.getDeclaredFields(excludeFields,  object);	  Object    fieldValue    =    clazz.getDeclaredFields(fields);    	non-compiled	[CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;	25	None	replace
154	[BUG]  [BUGGY]  Object  fieldValue  =  clazz.getDeclaredFields(excludeFields,  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Object  fieldValue  =  clazz.getDeclaredFields(excludeFields,  iConstant);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Object  fieldValue  =  clazz.getDeclaredFields(excludeFields,  iConstant);	  Object    fieldValue    =    clazz.getDeclaredFields(fields);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	25	None	replace
155	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  excludedFields,  useTransients);  [CE]  cannot  find  symbol  excludedFields  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  excludedFields,  useTransients);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(excludeFields,  true,  excludedFields,  useTransients);	  AccessibleObject.setAccessible(fields,    true,    excludedFields,    useTransients);    	non-compiled	[CE]  cannot  find  symbol  excludedFields	56	None	replace
156	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  clazz,  null);  [CE]  no  suitable  method  found  for  setAccessible(String[],Class<CAP#1>,<null>)  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(excludeFields,  clazz,  null);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(excludeFields,  clazz,  null);	  AccessibleObject.setAccessible(excludeFields,    null);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],Class<CAP#1>,<null>)	49	None	replace
157	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  null,  excludedFields);  [CE]  cannot  find  symbol  excludedFields  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  null,  excludedFields);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  null,  excludedFields);	  AccessibleObject.setAccessible(fields,    null,    fields);    	non-compiled	[CE]  cannot  find  symbol  excludedFields	57	None	replace
158	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  clazz,  null,  fields);  [CE]  no  suitable  method  found  for  setAccessible(Field[],Class<CAP#1>,<null>,Field[])  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  clazz,  null,  fields);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  clazz,  null,  fields);	  AccessibleObject.setAccessible(fields,    null,    fields);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],Class<CAP#1>,<null>,Field[])	57	None	replace
159	[BUG]  [BUGGY]  Builder.append(useTransients,  true);  [CE]  cannot  find  symbol  Builder  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Builder.append(useTransients,  true);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Builder.append(useTransients,  true);	  Builder.append(excludeFields,    true);    	non-compiled	[CE]  cannot  find  symbol  Builder	13	None	replace
160	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  false,  useTransients);  [CE]  no  suitable  method  found  for  setAccessible(String[],boolean,boolean)  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(excludeFields,  false,  useTransients);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(excludeFields,  false,  useTransients);	  AccessibleObject.setAccessible(excludeFields,    true,    useTransients);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],boolean,boolean)	41	None	replace
161	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  if(fields!=  null)  {  AccessibleObject.setAccessible(fields,  false);  AccessibleObject.setAccessible(fields,  false);  }  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	add	if(fields!=  null)  {  AccessibleObject.setAccessible(fields,  false);  AccessibleObject.setAccessible(fields,  false);  }	  AccessibleObject.setAccessible(fields,    false);    AccessibleObject.setAccessible(fields,    false);    	compilable	  [FE]  AssertionFailedError  	2	4	replace
162	[BUG]  [BUGGY]  if(fields!=  null)  {  AccessibleObject.setAccessible(fields,  false);  AccessibleObject.setAccessible(fields,  false);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  if(fields!=  null)  {  AccessibleObject.setAccessible(fields,  false);  AccessibleObject.setAccessible(fields,  false);  }  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	if(fields!=  null)  {  AccessibleObject.setAccessible(fields,  false);  AccessibleObject.setAccessible(fields,  false);  }	  AccessibleObject.setAccessible(fields,    false);    AccessibleObject.setAccessible(fields,    false);    	compilable	  [FE]  AssertionFailedError  	2	4	replace
163	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  if(fields!=  null)  {  AccessibleObject.setAccessible(fields,  false);  AccessibleObject.setAccessible(fields,  false);  }  else  {  builder.append('n');  }  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	add	if(fields!=  null)  {  AccessibleObject.setAccessible(fields,  false);  AccessibleObject.setAccessible(fields,  false);  }  else  {  builder.append('n');  }	  AccessibleObject.setAccessible(fields,    false);    AccessibleObject.setAccessible(fields,    false);    	compilable	  [FE]  AssertionFailedError  	2	4	replace
164	[BUG]  [BUGGY]  if(fields!=  null)  {  AccessibleObject.setAccessible(fields,  false);  AccessibleObject.setAccessible(fields,  false);  }  else  {  builder.append('n');  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  if(fields!=  null)  {  AccessibleObject.setAccessible(fields,  false);  AccessibleObject.setAccessible(fields,  false);  }  else  {  builder.append('n');  }  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	if(fields!=  null)  {  AccessibleObject.setAccessible(fields,  false);  AccessibleObject.setAccessible(fields,  false);  }  else  {  builder.append('n');  }	  AccessibleObject.setAccessible(fields,    false);    AccessibleObject.setAccessible(fields,    false);    	compilable	  [FE]  AssertionFailedError  	2	4	replace
165	[BUG]  [BUGGY]  Builder.append(excludeFields,  builder);  [CE]  cannot  find  symbol  Builder  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Builder.append(excludeFields,  builder);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Builder.append(excludeFields,  builder);	  Builder.append(excludeFields);    	non-compiled	[CE]  cannot  find  symbol  Builder	6	None	replace
166	[BUG]  [BUGGY]  String[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields,  false);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  String[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields,  false);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	String[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields,  false);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(excludeFields,    false);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	14	None	replace
167	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  false,  null,  useTransients);  [CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,<null>,boolean)  [FE]        AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  false,  null,  useTransients);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  false,  null,  useTransients);	  AccessibleObject.setAccessible(fields,    false,    null);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,<null>,boolean)	58	None	replace
168	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  true,  false,  excludeFields,  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  true,  false,  excludeFields,  fieldValue);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  true,  false,  excludeFields,  fieldValue);	  AccessibleObject.setAccessible(fields,    true,    false,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	28	None	replace
169	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  true,  false,  excludeFields,  fields);  [CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,boolean,String[],Field[])  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  true,  false,  excludeFields,  fields);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  true,  false,  excludeFields,  fields);	  AccessibleObject.setAccessible(fields,    true,    false,    excludeFields);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,boolean,String[],Field[])	28	None	replace
170	[BUG]  [BUGGY]  AccesibleObject.setAccessible(fields,  false);  [CE]  cannot  find  symbol  AccesibleObject  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccesibleObject.setAccessible(fields,  false);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccesibleObject.setAccessible(fields,  false);	  AccessibleObject.setAccessible(fields,    false);    AccesibleObject.setAccessible(fields,    false);    	non-compiled	[CE]  cannot  find  symbol  AccesibleObject	3	None	replace
171	[BUG]  [BUGGY]  Fields[]  fields  =  excludeFields!=  null?  clazz.getDeclaredFields()  :  excludeFields;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Fields[]  fields  =  excludeFields!=  null?  clazz.getDeclaredFields()  :  excludeFields;  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Fields[]  fields  =  excludeFields!=  null?  clazz.getDeclaredFields()  :  excludeFields;	  Fields[]    fields    =    excludeFields.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
172	[BUG]  [BUGGY]  Fields[]  fields  =  excludeFields  ==  null?  clazz.getDeclaredFields()  :  excludeFields;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Fields[]  fields  =  excludeFields  ==  null?  clazz.getDeclaredFields()  :  excludeFields;  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Fields[]  fields  =  excludeFields  ==  null?  clazz.getDeclaredFields()  :  excludeFields;	  Fields[]    fields    =    excludeFields.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
173	[BUG]  [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  fields,  useTransients,  excludeFields);  [CE]  no  suitable  method  found  for  setAccessible(String[],boolean,Field[],boolean,String[])  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(excludeFields,  true,  fields,  useTransients,  excludeFields);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(excludeFields,  true,  fields,  useTransients,  excludeFields);	  AccessibleObject.setAccessible(fields,    true,    useTransients,    excludeFields);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(String[],boolean,Field[],boolean,String[])	33	None	replace
174	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  true,  fields,  excludeFields,  useTransients);  [CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,Field[],String[],boolean)  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  true,  fields,  excludeFields,  useTransients);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  true,  fields,  excludeFields,  useTransients);	  AccessibleObject.setAccessible(fields,    true,    useTransients,    excludeFields);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,Field[],String[],boolean)	33	None	replace
175	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  false,  useTransients);  [CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,boolean)  [FE]          AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  false,  useTransients);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  false,  useTransients);	  AccessibleObject.setAccessible(fields,    false,    fieldValue);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,boolean)	20	None	replace
176	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(useTransients);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(useTransients);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Field[]  fields  =  clazz.getDeclaredFields(useTransients);	  Field[]    fields    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	36	None	replace
177	[BUG]  [BUGGY]  AccessibleObject.setAccessible(useTransients,  true,  excludeFields);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,String[])  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(useTransients,  true,  excludeFields);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(useTransients,  true,  excludeFields);	  AccessibleObject.setAccessible(excludeFields,    true,    useTransients);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,String[])	41	None	replace
178	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  true,  false,  excludedFields,  useTransients);  [CE]  cannot  find  symbol  excludedFields  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  true,  false,  excludedFields,  useTransients);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  true,  false,  excludedFields,  useTransients);	  AccessibleObject.setAccessible(fields,    true,    false,    useTransients);    	non-compiled	[CE]  cannot  find  symbol  excludedFields	52	None	replace
179	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  if(fields!=  null)  {  AccessibleObject.setAccessible(fields,  false);  AccessibleObject.setAccessible(fields,  false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	add	if(fields!=  null)  {  AccessibleObject.setAccessible(fields,  false);  AccessibleObject.setAccessible(fields,  false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  AccessibleObject.setAccessible(fields,    false);    AccessibleObject.setAccessible(fields,    false);    	compilable	  [FE]  AssertionFailedError  	2	4	replace
180	[BUG]  [BUGGY]  if(fields!=  null)  {  AccessibleObject.setAccessible(fields,  false);  AccessibleObject.setAccessible(fields,  false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  if(fields!=  null)  {  AccessibleObject.setAccessible(fields,  false);  AccessibleObject.setAccessible(fields,  false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	if(fields!=  null)  {  AccessibleObject.setAccessible(fields,  false);  AccessibleObject.setAccessible(fields,  false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  AccessibleObject.setAccessible(fields,    false);    AccessibleObject.setAccessible(fields,    false);    	compilable	  [FE]  AssertionFailedError  	2	4	replace
181	[BUG]  [BUGGY]  Builder.append(getReferenceName(),  true);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Builder.append(getReferenceName(),  true);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Builder.append(getReferenceName(),  true);	  Builder.append(excludeFields,    true);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
182	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  true,  excludedFields);  [CE]  cannot  find  symbol  excludedFields  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  true,  excludedFields);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  true,  excludedFields);	  AccessibleObject.setAccessible(excludeFields,    true,    fields);    	non-compiled	[CE]  cannot  find  symbol  excludedFields	42	None	replace
183	[BUG]  [BUGGY]  Object  fieldValue  =  clazz.getDeclaredFields(fields,  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Object  fieldValue  =  clazz.getDeclaredFields(fields,  iConstant);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Object  fieldValue  =  clazz.getDeclaredFields(fields,  iConstant);	  Object    fieldValue    =    clazz.getDeclaredFields(fields);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	25	None	replace
184	[BUG]  [BUGGY]  Object  fieldValue  =  clazz.getSuperClass();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Object  fieldValue  =  clazz.getSuperClass();  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Object  fieldValue  =  clazz.getSuperClass();	  Object    fieldValue    =    clazz.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
185	[BUG]  [BUGGY]  Object  fieldValue  =  clazz.getDeclaredFields(fields,  excludedFields);  [CE]  cannot  find  symbol  excludedFields  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Object  fieldValue  =  clazz.getDeclaredFields(fields,  excludedFields);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Object  fieldValue  =  clazz.getDeclaredFields(fields,  excludedFields);	  Object    fieldValue    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  cannot  find  symbol  excludedFields	45	None	replace
186	[BUG]  [BUGGY]  AccessibleObject.setAccuracy(fields,  true,  null);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccuracy(fields,  true,  null);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccuracy(fields,  true,  null);	  AccessibleObject.setAccuracy(fields,    true);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
187	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  false,  excludeFields,  fieldValue,  useTransients);  [CE]  cannot  find  symbol  fieldValue  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  false,  excludeFields,  fieldValue,  useTransients);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  false,  excludeFields,  fieldValue,  useTransients);	  AccessibleObject.setAccessible(fields,    false,    excludeFields,    useTransients);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	34	None	replace
188	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  false,  fields,  excludeFields,  useTransients);  [CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,Field[],String[],boolean)  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  false,  fields,  excludeFields,  useTransients);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  false,  fields,  excludeFields,  useTransients);	  AccessibleObject.setAccessible(fields,    false,    excludeFields,    useTransients);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,Field[],String[],boolean)	34	None	replace
189	[BUG]  [BUGGY]  Object  fieldValue  =  field.get(object);  [CE]  cannot  find  symbol  field  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Object  fieldValue  =  field.get(object);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Object  fieldValue  =  field.get(object);	  Object    fieldValue    =    clazz.get(object);    	non-compiled	[CE]  cannot  find  symbol  field	46	None	replace
190	[BUG]  [BUGGY]  Fields[]  fields  =  excludedFields.getSuperclassFields();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Fields[]  fields  =  excludedFields.getSuperclassFields();  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Fields[]  fields  =  excludedFields.getSuperclassFields();	  Fields[]    fields    =    clazz.getSuperclassFields();    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
191	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclassesReferences();  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Field[]  fields  =  clazz.getSuperclassesReferences();  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Field[]  fields  =  clazz.getSuperclassesReferences();	  Field[]    fields    =    clazz.getSuperclassesArray();    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	59	None	replace
192	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  null,  fields,  excludeFields);  [CE]  no  suitable  method  found  for  setAccessible(Field[],<null>,Field[],String[])  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  null,  fields,  excludeFields);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  null,  fields,  excludeFields);	  AccessibleObject.setAccessible(fields,    null,    excludeFields);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],<null>,Field[],String[])	21	None	replace
193	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  null,  fieldValue,  excludeFields);  [CE]  cannot  find  symbol  fieldValue  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  null,  fieldValue,  excludeFields);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  null,  fieldValue,  excludeFields);	  AccessibleObject.setAccessible(fields,    null,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	21	None	replace
194	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  null,  excludeFields,  fields);  [CE]  no  suitable  method  found  for  setAccessible(Field[],<null>,String[],Field[])  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  null,  excludeFields,  fields);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  null,  excludeFields,  fields);	  AccessibleObject.setAccessible(fields,    null,    fields);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],<null>,String[],Field[])	57	None	replace
195	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  null,  fields,  useTransients);  [CE]  no  suitable  method  found  for  setAccessible(Field[],<null>,Field[],boolean)  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  null,  fields,  useTransients);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  null,  fields,  useTransients);	  AccessibleObject.setAccessible(fields,    null,    fields);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],<null>,Field[],boolean)	57	None	replace
196	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  if(fields!=  null)  {  AccessibleObject.setAccessible(fields,  false);  AccessibleObject.setAccessible(fields,  true);  }  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	add	if(fields!=  null)  {  AccessibleObject.setAccessible(fields,  false);  AccessibleObject.setAccessible(fields,  true);  }	  AccessibleObject.setAccessible(fields,    false);    AccessibleObject.setAccessible(fields,    true);    	compilable	  [FE]  AssertionFailedError  	5	1	replace
197	[BUG]  [BUGGY]  if(fields!=  null)  {  AccessibleObject.setAccessible(fields,  false);  AccessibleObject.setAccessible(fields,  true);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  if(fields!=  null)  {  AccessibleObject.setAccessible(fields,  false);  AccessibleObject.setAccessible(fields,  true);  }  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	if(fields!=  null)  {  AccessibleObject.setAccessible(fields,  false);  AccessibleObject.setAccessible(fields,  true);  }	  AccessibleObject.setAccessible(fields,    false);    AccessibleObject.setAccessible(fields,    true);    	compilable	  [FE]  AssertionFailedError  	5	1	replace
198	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  true,  excludeFields,  fieldValue,  useTransients);  [CE]  cannot  find  symbol  fieldValue  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  true,  excludeFields,  fieldValue,  useTransients);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  true,  excludeFields,  fieldValue,  useTransients);	  AccessibleObject.setAccessible(fields,    true,    excludeFields,    useTransients);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	32	None	replace
199	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  true,  excludeFields,  fields,  useTransients);  [CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,String[],Field[],boolean)  [FE]              AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  true,  excludeFields,  fields,  useTransients);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  true,  excludeFields,  fields,  useTransients);	  AccessibleObject.setAccessible(fields,    true,    excludeFields,    useTransients);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,String[],Field[],boolean)	32	None	replace
200	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  true,  fields,  useTransients);  [CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,Field[],boolean)  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  true,  fields,  useTransients);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  true,  fields,  useTransients);	  AccessibleObject.setAccessible(fields,    true,    excludedFields,    useTransients);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],boolean,Field[],boolean)	56	None	replace
201	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  true,  excludeFields,  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  true,  excludeFields,  fieldValue);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  true,  excludeFields,  fieldValue);	  AccessibleObject.setAccessible(fields,    true,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	35	None	replace
202	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  null,  useTransients);  [CE]  no  suitable  method  found  for  setAccessible(Field[],<null>,boolean)  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  null,  useTransients);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  null,  useTransients);	  AccessibleObject.setAccessible(fields,    null,    fieldValue);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],<null>,boolean)	24	None	replace
203	[BUG]  [BUGGY]  Builder.append(useTransients,  fields);  [CE]  cannot  find  symbol  Builder  [FE]            AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Builder.append(useTransients,  fields);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Builder.append(useTransients,  fields);	  Builder.append(excludeFields);    	non-compiled	[CE]  cannot  find  symbol  Builder	6	None	replace
204	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  true,  excludedFields,  false);  [CE]  cannot  find  symbol  excludedFields  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  true,  excludedFields,  false);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  true,  excludedFields,  false);	  AccessibleObject.setAccessible(fields,    true,    useTransients,    false);    	non-compiled	[CE]  cannot  find  symbol  excludedFields	53	None	replace
205	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  true,  true,  excludeFields,  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  true,  true,  excludeFields,  fieldValue);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  true,  true,  excludeFields,  fieldValue);	  AccessibleObject.setAccessible(fields,    true,    true,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	48	None	replace
206	[BUG]  [BUGGY]  AccessibleObject.setAccuracy(fields,  false,  excludeFields,  useTransients);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccuracy(fields,  false,  excludeFields,  useTransients);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccuracy(fields,  false,  excludeFields,  useTransients);	  AccessibleObject.setAccuracy(fields,    false,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
207	[BUG]  [BUGGY]  AccessibleObject.setAccuracy(fields,  false,  excludeFields,  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccuracy(fields,  false,  excludeFields,  iConstant);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccuracy(fields,  false,  excludeFields,  iConstant);	  AccessibleObject.setAccuracy(fields,    false,    excludeFields);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	18	None	replace
208	[BUG]  [BUGGY]  builder.append(fields,  true);  [CE]  no  suitable  method  found  for  append(Field[],boolean)  [FE]                    AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  builder.append(fields,  true);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	builder.append(fields,  true);	  builder.append(excludeFields,    true);    	non-compiled	[CE]  no  suitable  method  found  for  append(Field[],boolean)	15	None	replace
209	[BUG]  [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields,  true);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields,  true);  [BUGGY]      AccessibleObject.setAccessible(fields,  true);  for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	Object[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields,  true);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(excludeFields,    true);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	8	None	replace
210	[BUG]  [BUGGY]  AccessibleObject.setAccessible(fields,  null,  fields.length);  [CE]  no  suitable  method  found  for  setAccessible(Field[],<null>,int)  [FE]                AssertionFailedError      [CONTEXT]      String[]  excludeFields)  {  if  (isRegistered(object))  {  return;  }  try  {  register(object);  Field[]  fields  =  clazz.getDeclaredFields();      [BUGGY]  AccessibleObject.setAccessible(fields,  null,  fields.length);  [BUGGY]      for  (Field  field  :  fields)  {  if  (!ArrayUtils.contains(excludeFields,  field.getName())  &&  (field.getName().indexOf('$')  ==  -1)  &&  (useTransients  ||  !Modifier.isTransient(field.getModifiers()))  &&  (!Modifier.isStatic(field.getModifiers())))  {  try  {  Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	179	179	1	replace	AccessibleObject.setAccessible(fields,  null,  fields.length);	  AccessibleObject.setAccessible(fields,    null,    iTotal);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field[],<null>,int)	23	None	replace
