bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass,  excludeFields,  multiplierNonZeroOddNumber);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass,  excludeFields,  multiplierNonZeroOddNumber);  [BUGGY]    while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass,  excludeFields,  multiplierNonZeroOddNumber);	  reflectionAppend(object,    clazz,    builder,    testTransients,    reflectUpToClass,    excludeFields);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	2	None	replace
2	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass,  multiplierNonZeroOddNumber,  excludeFields);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass,  multiplierNonZeroOddNumber,  excludeFields);  [BUGGY]    while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass,  multiplierNonZeroOddNumber,  excludeFields);	  reflectionAppend(object,    clazz,    builder,    testTransients,    reflectUpToClass,    excludeFields);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	2	None	replace
3	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass,  excludeFields,  multierNonZeroOddNumber);  [CE]  cannot  find  symbol  multierNonZeroOddNumber  [FE]              AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass,  excludeFields,  multierNonZeroOddNumber);  [BUGGY]    while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass,  excludeFields,  multierNonZeroOddNumber);	  reflectionAppend(object,    clazz,    builder,    testTransients,    reflectUpToClass,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol  multierNonZeroOddNumber	2	None	replace
4	[BUG]  [BUGGY]  Integer  testTransients  =  clazz.getReturnType();  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]            AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  Integer  testTransients  =  clazz.getReturnType();  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	Integer  testTransients  =  clazz.getReturnType();	      Integer    testTransients    =    clazz.getSuperclass();    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	19	None	replace
5	[BUG]  [BUGGY]  Integer  testTransients  =  clazz.getRawClass();  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]              AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  Integer  testTransients  =  clazz.getRawClass();  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	Integer  testTransients  =  clazz.getRawClass();	      Integer    testTransients    =    clazz.getSuperclass();    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	19	None	replace
6	[BUG]  [BUGGY]  Integer  testTransients  =  clazz.getSuperclass().intValue();  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]                AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  Integer  testTransients  =  clazz.getSuperclass().intValue();  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	Integer  testTransients  =  clazz.getSuperclass().intValue();	      Integer    testTransients    =    clazz.getSuperclass();    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	19	None	replace
7	[BUG]  [BUGGY]  int  testTransients  =  clazz.getTestClass();  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]          AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  int  testTransients  =  clazz.getTestClass();  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	int  testTransients  =  clazz.getTestClass();	      int    testTransients    =    clazz.getSuperclass();    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	18	None	replace
8	[BUG]  [BUGGY]  int  testTransients  =  clazz.getReturnType();  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]            AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  int  testTransients  =  clazz.getReturnType();  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	int  testTransients  =  clazz.getReturnType();	      int    testTransients    =    clazz.getSuperclass();    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	18	None	replace
9	[BUG]  [BUGGY]  int  testTransients  =  clazz.getRawClass();  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]              AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  int  testTransients  =  clazz.getRawClass();  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	int  testTransients  =  clazz.getRawClass();	      int    testTransients    =    clazz.getSuperclass();    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	18	None	replace
10	[BUG]  [BUGGY]  Class  <?>  clazz  =  object.getRawClass();  [CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]            AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  Class  <?>  clazz  =  object.getRawClass();  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	Class  <?>  clazz  =  object.getRawClass();	      Class    <?>    clazz    =    clazz.getRawClass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	9	None	replace
11	[BUG]  [BUGGY]  Class  <?>  clazz  =  builder.getRawClass();  [CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]              AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  Class  <?>  clazz  =  builder.getRawClass();  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	Class  <?>  clazz  =  builder.getRawClass();	      Class    <?>    clazz    =    clazz.getRawClass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	9	None	replace
12	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]      clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	add	        clazz    =    clazz.getSuperclass();    clazz  =  clazz.getSuperclass();	  	compilable	  [FE]  NullPointerException  	6	4	add
13	[BUG]  [BUGGY]      clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]      clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	        clazz    =    clazz.getSuperclass();    clazz  =  clazz.getSuperclass();	  	compilable	  [FE]  NullPointerException  	6	4	add
14	[BUG]  [BUGGY]      clazz  =  clazz.getSuperclass();  Class  <?>  clazz  =  clazz.getSuperclass();  [CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]      AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]      clazz  =  clazz.getSuperclass();  Class  <?>  clazz  =  clazz.getSuperclass();  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	        clazz    =    clazz.getSuperclass();    Class  <?>  clazz  =  clazz.getSuperclass();	  	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	6	None	add
15	[BUG]  [BUGGY]      clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperClass();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]      clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperClass();  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	        clazz    =    clazz.getSuperclass();    clazz  =  clazz.getSuperClass();	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
16	[BUG]  [BUGGY]  clazz  =  clazz.getRawClass();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  clazz  =  clazz.getRawClass();  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	clazz  =  clazz.getRawClass();	      clazz    =    clazz.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
17	[BUG]  [BUGGY]  clazz  =  clazz.getInterface();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  clazz  =  clazz.getInterface();  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	clazz  =  clazz.getInterface();	      clazz    =    clazz.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
18	[BUG]  [BUGGY]  reflectUpToClass(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber,  excludeFields);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  reflectUpToClass(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber,  excludeFields);  [BUGGY]    while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	reflectUpToClass(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber,  excludeFields);	  reflectUpToClass(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
19	[BUG]  [BUGGY]  reflectUpToClass(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  reflectUpToClass(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber);  [BUGGY]    while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	reflectUpToClass(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber);	  reflectUpToClass(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
20	[BUG]  [BUGGY]  ReflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  ReflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]    while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	ReflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  reflectUpToClass(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
21	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  multiplierNonZeroOddNumber);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  multiplierNonZeroOddNumber);  [BUGGY]    while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  multiplierNonZeroOddNumber);	  reflectionAppend(object,    clazz,    builder,    testTransients,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	11	None	replace
22	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  null);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  null);  [BUGGY]    while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  null);	  reflectionAppend(object,    clazz,    builder,    testTransients,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	11	None	replace
23	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  false);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  false);  [BUGGY]    while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  false);	  reflectionAppend(object,    clazz,    builder,    testTransients,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	11	None	replace
24	[BUG]  [BUGGY]  Class  <?>  clazz  =  object.getSuperclass();  [CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]          AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  Class  <?>  clazz  =  object.getSuperclass();  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	Class  <?>  clazz  =  object.getSuperclass();	      Class    <?>    clazz    =    clazz.getSuperclass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	8	None	replace
25	[BUG]  [BUGGY]  Class  <?>  clazz  =  builder.getSuperclass();  [CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]            AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  Class  <?>  clazz  =  builder.getSuperclass();  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	Class  <?>  clazz  =  builder.getSuperclass();	      Class    <?>    clazz    =    clazz.getSuperclass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	8	None	replace
26	[BUG]  [BUGGY]      Class  <?>  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]    AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]      Class  <?>  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]    while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	        Class  <?>  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	4	None	add
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]      clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]    while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	add	        clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	compilable	  [FE]  AssertionFailedError  	4	4	add
28	[BUG]  [BUGGY]      clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]      clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]    while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	        clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	compilable	  [FE]  AssertionFailedError  	4	4	add
29	[BUG]  [BUGGY]      Class  <?>  clazz  =  clazz.getSuperClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]        AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]      Class  <?>  clazz  =  clazz.getSuperClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]    while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	        Class  <?>  clazz  =  clazz.getSuperClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	4	None	add
30	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  initialNonZeroOddNumber,  excludeFields);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  initialNonZeroOddNumber,  excludeFields);  [BUGGY]    while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  initialNonZeroOddNumber,  excludeFields);	  reflectionAppend(object,    clazz,    builder,    testTransients,    multiplierNonZeroOddNumber,    excludeFields);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	1	None	replace
31	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [BUGGY]    while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);	  reflectionAppend(object,    clazz,    builder,    testTransients,    multiplierNonZeroOddNumber,    excludeFields);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	1	None	replace
32	[BUG]  [BUGGY]  int  iConstant  =  initialNonZeroOddNumber  +  clazz.getIndex();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  int  iConstant  =  initialNonZeroOddNumber  +  clazz.getIndex();  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	int  iConstant  =  initialNonZeroOddNumber  +  clazz.getIndex();	      int    iConstant    =    multiplierNonZeroOddNumber    +    clazz.getIndex();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
33	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  refiningUpToClass,  excludeFields);  [CE]  cannot  find  symbol  refiningUpToClass  [FE]            AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  refiningUpToClass,  excludeFields);  [BUGGY]    while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  refiningUpToClass,  excludeFields);	  reflectionAppend(object,    clazz,    builder,    testTransients,    multiplyerNonZeroOddNumber,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol  refiningUpToClass	3	None	replace
34	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  refiningHashCode,  excludeFields);  [CE]  cannot  find  symbol  refiningHashCode  [FE]              AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  refiningHashCode,  excludeFields);  [BUGGY]    while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  refiningHashCode,  excludeFields);	  reflectionAppend(object,    clazz,    builder,    testTransients,    multiplyerNonZeroOddNumber,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol  refiningHashCode	3	None	replace
35	[BUG]  [BUGGY]  Class  <?>  clazz  =  object.getReturnType();  [CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]              AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  Class  <?>  clazz  =  object.getReturnType();  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	Class  <?>  clazz  =  object.getReturnType();	      Class    <?>    clazz    =    clazz.getReturnType();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	10	None	replace
36	[BUG]  [BUGGY]  Class  <?>  clazz  =  builder.getReturnType();  [CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]                AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  Class  <?>  clazz  =  builder.getReturnType();  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	Class  <?>  clazz  =  builder.getReturnType();	      Class    <?>    clazz    =    clazz.getReturnType();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	10	None	replace
37	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  false,  reflectUpToClass,  excludeFields);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  false,  reflectUpToClass,  excludeFields);  [BUGGY]    while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  false,  reflectUpToClass,  excludeFields);	  reflectionAppend(object,    clazz,    builder,    testTransients,    false,    excludeFields);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	15	None	replace
38	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  true,  excludeFields,  multiplierNonZeroOddNumber);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  true,  excludeFields,  multiplierNonZeroOddNumber);  [BUGGY]    while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  true,  excludeFields,  multiplierNonZeroOddNumber);	  reflectionAppend(object,    clazz,    builder,    testTransients,    false,    excludeFields);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	15	None	replace
39	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  false,  excludeFields,  multiplierNonZeroOddNumber);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  false,  excludeFields,  multiplierNonZeroOddNumber);  [BUGGY]    while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  false,  excludeFields,  multiplierNonZeroOddNumber);	  reflectionAppend(object,    clazz,    builder,    testTransients,    false,    excludeFields);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	15	None	replace
40	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.getItemCount(initialNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.getItemCount(initialNonZeroOddNumber);  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.getItemCount(initialNonZeroOddNumber);	      int    iConstant    =    multiplierNonZeroOddNumber    +    clazz.getItemCount();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
41	[BUG]  [BUGGY]  int  iConstant  =  initialNonZeroOddNumber  +  clazz.getItemCount();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  int  iConstant  =  initialNonZeroOddNumber  +  clazz.getItemCount();  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	int  iConstant  =  initialNonZeroOddNumber  +  clazz.getItemCount();	      int    iConstant    =    multiplierNonZeroOddNumber    +    clazz.getItemCount();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
42	[BUG]  [BUGGY]  Class  <?  super  T>  clazz  =  object.getSuperclass();  [CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]        AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  Class  <?  super  T>  clazz  =  object.getSuperclass();  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	Class  <?  super  T>  clazz  =  object.getSuperclass();	      Class    <?    super    T>    clazz    =    clazz.getSuperclass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	17	None	replace
43	[BUG]  [BUGGY]  Class  <?  super  T>  clazz  =  clazz.getSuperClass();  [CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]          AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  Class  <?  super  T>  clazz  =  clazz.getSuperClass();  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	Class  <?  super  T>  clazz  =  clazz.getSuperClass();	      Class    <?    super    T>    clazz    =    clazz.getSuperclass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	17	None	replace
44	[BUG]  [BUGGY]  Class  <?  super  T>  clazz  =  clazz.getRawClass();  [CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]            AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  Class  <?  super  T>  clazz  =  clazz.getRawClass();  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	Class  <?  super  T>  clazz  =  clazz.getRawClass();	      Class    <?    super    T>    clazz    =    clazz.getSuperclass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	17	None	replace
45	[BUG]  [BUGGY]  int  iConstant  =  clazz.getIconstantIndex();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  int  iConstant  =  clazz.getIconstantIndex();  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	int  iConstant  =  clazz.getIconstantIndex();	      int    iConstant    =    clazz.getIConstantIndex();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
46	[BUG]  [BUGGY]  int  iConstant  =  clazz.getICONStantIndex();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  int  iConstant  =  clazz.getICONStantIndex();  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	int  iConstant  =  clazz.getICONStantIndex();	      int    iConstant    =    clazz.getIConstantIndex();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
47	[BUG]  [BUGGY]  int  iConstant  =  clazz.getIndex();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  int  iConstant  =  clazz.getIndex();  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	int  iConstant  =  clazz.getIndex();	      int    iConstant    =    clazz.getIConstantIndex();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
48	[BUG]  [BUGGY]      ReflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  return  builder.toHashCode();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]      ReflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  return  builder.toHashCode();  [BUGGY]    while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	        ReflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  return  builder.toHashCode();	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
49	[BUG]  [BUGGY]      ReflectionAppend(object,  clazz,  builder);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]      ReflectionAppend(object,  clazz,  builder);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]    while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	        ReflectionAppend(object,  clazz,  builder);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
50	[BUG]  [BUGGY]  int  iConstant  =  clazz.getIConstantIndex()  +  1;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  int  iConstant  =  clazz.getIConstantIndex()  +  1;  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	int  iConstant  =  clazz.getIConstantIndex()  +  1;	      int    iConstant    =    clazz.getIConstantIndex();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
51	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields);  [BUGGY]    while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields);	  reflectionAppend(object,    clazz,    builder,    testTransients,    multiplierNonZeroOddNumber,    excludeFields);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	1	None	replace
52	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber,  excludeFields,  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]          AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber,  excludeFields,  iConstant);  [BUGGY]    while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber,  excludeFields,  iConstant);	  reflectionAppend(object,    clazz,    builder,    testTransients,    multiplierNonZeroOddNumber,    excludeFields);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	1	None	replace
53	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  true,  excludeFields);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  true,  excludeFields);  [BUGGY]    while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  true,  excludeFields);	  reflectionAppend(object,    clazz,    builder,    testTransients,    false,    excludeFields);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	15	None	replace
54	[BUG]  [BUGGY]  Class  <?>  clazz  =  type.getReturnType();  [CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]              AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  Class  <?>  clazz  =  type.getReturnType();  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	Class  <?>  clazz  =  type.getReturnType();	      Class    <?>    clazz    =    clazz.getReturnType();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	10	None	replace
55	[BUG]  [BUGGY]  clazz  =  object.getSuperclass();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  clazz  =  object.getSuperclass();  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	clazz  =  object.getSuperclass();	      clazz    =    clazz.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
56	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.initialNonZeroOddNumber.getItemCount();  [CE]  cannot  find  symbol  initialNonZeroOddNumber  [FE]          AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.initialNonZeroOddNumber.getItemCount();  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.initialNonZeroOddNumber.getItemCount();	      int    iConstant    =    multiplierNonZeroOddNumber    +    clazz.getItemCount();    	non-compiled	[CE]  cannot  find  symbol  initialNonZeroOddNumber	13	None	replace
57	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.toItemCount();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.toItemCount();  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.toItemCount();	      int    iConstant    =    multiplierNonZeroOddNumber    +    clazz.getItemCount();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
58	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  injectorNonZeroOddNumber,  excludeFields);  [CE]  cannot  find  symbol  injectorNonZeroOddNumber  [FE]            AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  injectorNonZeroOddNumber,  excludeFields);  [BUGGY]    while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  injectorNonZeroOddNumber,  excludeFields);	  reflectionAppend(object,    clazz,    builder,    testTransients,    multiplyerNonZeroOddNumber,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol  injectorNonZeroOddNumber	3	None	replace
59	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.initialNonZeroOddNumber.getIndex();  [CE]  cannot  find  symbol  initialNonZeroOddNumber  [FE]            AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.initialNonZeroOddNumber.getIndex();  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.initialNonZeroOddNumber.getIndex();	      int    iConstant    =    multiplierNonZeroOddNumber    +    clazz.getIndex();    	non-compiled	[CE]  cannot  find  symbol  initialNonZeroOddNumber	14	None	replace
60	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.toIndex();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.toIndex();  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  clazz.toIndex();	      int    iConstant    =    multiplierNonZeroOddNumber    +    clazz.getIndex();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
61	[BUG]  [BUGGY]  int  testTransients  =  clazz.getTestSuperclass();  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]          AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  int  testTransients  =  clazz.getTestSuperclass();  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	int  testTransients  =  clazz.getTestSuperclass();	      int    testTransients    =    clazz.getSuperclass();    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	18	None	replace
62	[BUG]  [BUGGY]  Class  <?  super  T>  clazz  =  builder.getSuperclass();  [CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]        AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  Class  <?  super  T>  clazz  =  builder.getSuperclass();  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	Class  <?  super  T>  clazz  =  builder.getSuperclass();	      Class    <?    super    T>    clazz    =    clazz.getSuperclass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	17	None	replace
63	[BUG]  [BUGGY]  Integer  testTransients  =  clazz.getInitialNonZeroOddNumber();  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]            AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  Integer  testTransients  =  clazz.getInitialNonZeroOddNumber();  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	Integer  testTransients  =  clazz.getInitialNonZeroOddNumber();	      Integer    testTransients    =    clazz.getSuperclass();    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	19	None	replace
64	[BUG]  [BUGGY]  Integer  testTransients  =  clazz.getTestClass();  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]              AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  Integer  testTransients  =  clazz.getTestClass();  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	Integer  testTransients  =  clazz.getTestClass();	      Integer    testTransients    =    clazz.getSuperclass();    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	19	None	replace
65	[BUG]  [BUGGY]      clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  }  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  invalid  method  declaration;  return  type  required  [FE]    AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]      clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  }  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	        clazz    =    clazz.getSuperclass();    clazz  =  clazz.getSuperclass();  }  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	add
66	[BUG]  [BUGGY]      clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  this.reflectUpToClass  =  clazz.getSuperclass();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]      AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]      clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  this.reflectUpToClass  =  clazz.getSuperclass();  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	        clazz    =    clazz.getSuperclass();    clazz  =  clazz.getSuperclass();  this.reflectUpToClass  =  clazz.getSuperclass();	  	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	6	None	add
67	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]        AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  iConstant);  [BUGGY]    while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  iConstant);	  reflectionAppend(object,    clazz,    builder,    testTransients,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	11	None	replace
68	[BUG]  [BUGGY]  Class  <?>  clazz  =  object.getClass();  [CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]            AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  Class  <?>  clazz  =  object.getClass();  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	Class  <?>  clazz  =  object.getClass();	      Class    <?>    clazz    =    clazz.getRawClass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	9	None	replace
69	[BUG]  [BUGGY]  clazz  =  clazz.getSuperClass();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  clazz  =  clazz.getSuperClass();  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	clazz  =  clazz.getSuperClass();	      clazz    =    clazz.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
70	[BUG]  [BUGGY]  Class  <?>  clazz  =  type.getRawClass();  [CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]            AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  Class  <?>  clazz  =  type.getRawClass();  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	Class  <?>  clazz  =  type.getRawClass();	      Class    <?>    clazz    =    clazz.getRawClass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	9	None	replace
71	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass,  excludeFields,  null);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass,  excludeFields,  null);  [BUGGY]    while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass,  excludeFields,  null);	  reflectionAppend(object,    clazz,    builder,    testTransients,    reflectUpToClass,    excludeFields);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	2	None	replace
72	[BUG]  [BUGGY]  Class  <?>  clazz  =  target.getReturnType();  [CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]              AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  Class  <?>  clazz  =  target.getReturnType();  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	Class  <?>  clazz  =  target.getReturnType();	      Class    <?>    clazz    =    clazz.getReturnType();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	10	None	replace
73	[BUG]  [BUGGY]  ReflectionAppend(object,  clazz);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  ReflectionAppend(object,  clazz);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]    while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	ReflectionAppend(object,  clazz);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	      	non-compiled	[CE]  cannot  find  symbol	5	None	replace
74	[BUG]  [BUGGY]  int  iConstant  =  clazz.getImmediateParentIndex();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  int  iConstant  =  clazz.getImmediateParentIndex();  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	int  iConstant  =  clazz.getImmediateParentIndex();	      int    iConstant    =    clazz.getIConstantIndex();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
75	[BUG]  [BUGGY]  reflectUpToClass(object,  clazz,  builder,  testTransients,  excludeFields,  multiplierNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  reflectUpToClass(object,  clazz,  builder,  testTransients,  excludeFields,  multiplierNonZeroOddNumber);  [BUGGY]    while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	reflectUpToClass(object,  clazz,  builder,  testTransients,  excludeFields,  multiplierNonZeroOddNumber);	  reflectUpToClass(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
76	[BUG]  [BUGGY]      clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  instanceAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]      clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  instanceAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	        clazz    =    clazz.getSuperclass();    clazz  =  clazz.getSuperclass();  instanceAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
77	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  refiningNonZeroOddNumber,  excludeFields);  [CE]  cannot  find  symbol  refiningNonZeroOddNumber  [FE]            AssertionFailedError    [CONTEXT]    public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(   "The  object  to  build  a  hash  code  for  must  not  be  null   ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();    [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  refiningNonZeroOddNumber,  excludeFields);  [BUGGY]    while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	361	361	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  refiningNonZeroOddNumber,  excludeFields);	  reflectionAppend(object,    clazz,    builder,    testTransients,    multiplyerNonZeroOddNumber,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol  refiningNonZeroOddNumber	3	None	replace
