bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    AssertionFailedError  [CONTEXT]  public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]  Class  <?>  clazz  =  builder.getClass();  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	add	Class  <?>  clazz  =  builder.getClass();	Class<?>  clazz  =  object.getClass();  	compilable	  [FE]  IllegalArgumentException  	31	4	replace
2	[BUG]  [BUGGY]  Class  <?>  clazz  =  builder.getClass();  [FE]  IllegalArgumentException  [FE]    AssertionFailedError  [CONTEXT]  public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]  Class  <?>  clazz  =  builder.getClass();  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Class  <?>  clazz  =  builder.getClass();	Class<?>  clazz  =  object.getClass();  	compilable	  [FE]  IllegalArgumentException  	31	4	replace
3	[BUG]  [BUGGY]  Class  <?>  clazz  =  object.getSuperclass();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]  Class  <?>  clazz  =  object.getSuperclass();  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Class  <?>  clazz  =  object.getSuperclass();	Class<?>  clazz  =  object.getClass();  	non-compiled	[CE]  cannot  find  symbol	31	None	replace
4	[BUG]  [BUGGY]  Class  <?>  clazz  =  object.getRawClass();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError  [CONTEXT]  public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]  Class  <?>  clazz  =  object.getRawClass();  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Class  <?>  clazz  =  object.getRawClass();	Class<?>  clazz  =  object.getClass();  	non-compiled	[CE]  cannot  find  symbol	31	None	replace
5	[BUG]  [BUGGY]  Class  <?>  clazz  =  object.getSuperClass();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError  [CONTEXT]  public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]  Class  <?>  clazz  =  object.getSuperClass();  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Class  <?>  clazz  =  object.getSuperClass();	Class<?>  clazz  =  object.getClass();  	non-compiled	[CE]  cannot  find  symbol	31	None	replace
6	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  clazz  [FE]            AssertionFailedError  [CONTEXT]  public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]    [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	  	Class<?>  clazz  =  object.getClass();  	non-compiled	[CE]  cannot  find  symbol  clazz	31	None	replace
7	[BUG]  [BUGGY]    ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]    ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	    ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);		non-compiled	[CE]  cannot  find  symbol	32	None	add
8	[BUG]  [BUGGY]    ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]    ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  builder,  testTransients,  excludeFields);  [BUGGY]  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	    ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  builder,  testTransients,  excludeFields);		non-compiled	[CE]  cannot  find  symbol	32	None	add
9	[BUG]  [BUGGY]    ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError  [CONTEXT]  public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]    ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);  [BUGGY]  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	    ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);		non-compiled	[CE]  cannot  find  symbol	32	None	add
10	[BUG]  [BUGGY]    Class  <?>  object  =  builder.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  variable  object  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]          AssertionFailedError  [CONTEXT]  public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]    Class  <?>  object  =  builder.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	    Class  <?>  object  =  builder.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);		non-compiled	[CE]  variable  object  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	32	None	add
11	[BUG]  [BUGGY]    ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError  [CONTEXT]  public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]    ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	    ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);		non-compiled	[CE]  cannot  find  symbol	32	None	add
12	[BUG]  [BUGGY]    ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]    ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [BUGGY]  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	    ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);		non-compiled	[CE]  cannot  find  symbol	32	None	add
13	[BUG]  [BUGGY]    ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]    ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	    ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber);		non-compiled	[CE]  cannot  find  symbol	32	None	add
14	[BUG]  [BUGGY]    ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError  [CONTEXT]  public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]    ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields);  [BUGGY]  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	    ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields);		non-compiled	[CE]  cannot  find  symbol	32	None	add
15	[BUG]  [BUGGY]    ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError  [CONTEXT]  public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]    ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);  [BUGGY]  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	    ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);		non-compiled	[CE]  cannot  find  symbol	32	None	add
16	[BUG]  [BUGGY]    Integer  iConstant  =  getInitialNonZeroOddNumber(multierNonZeroOddNumber);  [CE]  cannot  find  symbol  multierNonZeroOddNumber  [FE]            AssertionFailedError  [CONTEXT]  public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]    Integer  iConstant  =  getInitialNonZeroOddNumber(multierNonZeroOddNumber);  [BUGGY]  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	    Integer  iConstant  =  getInitialNonZeroOddNumber(multierNonZeroOddNumber);		non-compiled	[CE]  cannot  find  symbol  multierNonZeroOddNumber	32	None	add
17	[BUG]  [BUGGY]    int  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]    AssertionFailedError  [CONTEXT]  public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]    int  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	    int  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);		non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	32	None	add
18	[BUG]  [BUGGY]    Integer  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]      AssertionFailedError  [CONTEXT]  public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]    Integer  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	    Integer  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);		non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	32	None	add
19	[BUG]  [BUGGY]    int  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]        AssertionFailedError  [CONTEXT]  public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]    int  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	    int  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);		non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	32	None	add
20	[BUG]  [BUGGY]    Integer  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]          AssertionFailedError  [CONTEXT]  public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]    Integer  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	    Integer  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);		non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	32	None	add
21	[BUG]  [BUGGY]    int  testTransients  =  builder.compareTo(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]            AssertionFailedError  [CONTEXT]  public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]    int  testTransients  =  builder.compareTo(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	    int  testTransients  =  builder.compareTo(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);		non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	32	None	add
