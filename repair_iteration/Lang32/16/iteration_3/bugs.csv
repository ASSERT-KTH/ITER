bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);	  ReflectionAppend(object,    initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
2	[BUG]  [BUGGY]  ReflectionAppend(object,  multiplierNonZeroOddNumber,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionAppend(object,  multiplierNonZeroOddNumber,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionAppend(object,  multiplierNonZeroOddNumber,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber);	  ReflectionAppend(object,    initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
3	[BUG]  [BUGGY]  if(initialNonZeroOddNumber  ==  initialNonZeroOddNumber)  {  Class  <?>  clazz  =  builder.getClass();  Class  <?>  clazz  =  builder.getClass());  }  [CE]  ';'  expected  [FE]        IllegalArgumentException      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  if(initialNonZeroOddNumber  ==  initialNonZeroOddNumber)  {  Class  <?>  clazz  =  builder.getClass();  Class  <?>  clazz  =  builder.getClass());  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	if(initialNonZeroOddNumber  ==  initialNonZeroOddNumber)  {  Class  <?>  clazz  =  builder.getClass();  Class  <?>  clazz  =  builder.getClass());  }	  Class    <?>    clazz    =    builder.getClass();    Class    <?>    clazz    =    builder.getClass());    	non-compiled	[CE]  ';'  expected	58	None	replace
4	[BUG]  [BUGGY]  if(testTransients)  {  Class  <?>  clazz  =  builder.getClass();  Class  <?>  clazz  =  builder.getClass());  }  [CE]  ';'  expected  [FE]          IllegalArgumentException      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  if(testTransients)  {  Class  <?>  clazz  =  builder.getClass();  Class  <?>  clazz  =  builder.getClass());  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	if(testTransients)  {  Class  <?>  clazz  =  builder.getClass();  Class  <?>  clazz  =  builder.getClass());  }	  Class    <?>    clazz    =    builder.getClass();    Class    <?>    clazz    =    builder.getClass());    	non-compiled	[CE]  ';'  expected	58	None	replace
5	[BUG]  [BUGGY]  if(initialNonZeroOddNumber  ==  null)  {  Class  <?>  clazz  =  builder.getClass();  Class  <?>  clazz  =  builder.getClass());  }  [CE]  ';'  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  if(initialNonZeroOddNumber  ==  null)  {  Class  <?>  clazz  =  builder.getClass();  Class  <?>  clazz  =  builder.getClass());  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	if(initialNonZeroOddNumber  ==  null)  {  Class  <?>  clazz  =  builder.getClass();  Class  <?>  clazz  =  builder.getClass());  }	  Class    <?>    clazz    =    builder.getClass();    Class    <?>    clazz    =    builder.getClass());    	non-compiled	[CE]  ';'  expected	58	None	replace
6	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass);	  ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
7	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyerNonZeroOddNumber,  initialNonZeroOddNumber,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyerNonZeroOddNumber,  initialNonZeroOddNumber,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyerNonZeroOddNumber,  initialNonZeroOddNumber,  testTransients,  excludeFields);	  ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
8	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);	  ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
9	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);	  ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
10	[BUG]  [BUGGY]  ReflectionAppend(object,  iConstant,  multiplierNonZeroOddNumber,  builder,  testTransients);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionAppend(object,  iConstant,  multiplierNonZeroOddNumber,  builder,  testTransients);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionAppend(object,  iConstant,  multiplierNonZeroOddNumber,  builder,  testTransients);	  ReflectionAppend(object,    initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    builder,    testTransients);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	69	None	replace
11	[BUG]  [BUGGY]  ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  builder,  testTransients,  reflectUpToClass);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  builder,  testTransients,  reflectUpToClass);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  builder,  testTransients,  reflectUpToClass);	  ReflectionAppend(object,    initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    builder,    testTransients);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
12	[BUG]  [BUGGY]  int  iConstant  =  initialNonZeroOddNumber;  [CE]  cannot  find  symbol  clazz  [FE]                        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  int  iConstant  =  initialNonZeroOddNumber;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	int  iConstant  =  initialNonZeroOddNumber;	  int    iConstant    =    multiplierNonZeroOddNumber;    	non-compiled	[CE]  cannot  find  symbol  clazz	16	None	replace
13	[BUG]  [BUGGY]  int  iConstant  =  initialNonZeroOddNumber  +  multiplierNonZeroOddNumber;  [CE]  cannot  find  symbol  clazz  [FE]                          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  int  iConstant  =  initialNonZeroOddNumber  +  multiplierNonZeroOddNumber;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	int  iConstant  =  initialNonZeroOddNumber  +  multiplierNonZeroOddNumber;	  int    iConstant    =    multiplierNonZeroOddNumber;    	non-compiled	[CE]  cannot  find  symbol  clazz	16	None	replace
14	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  1;  [CE]  cannot  find  symbol  clazz  [FE]                            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  1;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  1;	  int    iConstant    =    multiplierNonZeroOddNumber;    	non-compiled	[CE]  cannot  find  symbol  clazz	16	None	replace
15	[BUG]  [BUGGY]  int  testTransients  =  builder.compareTo(object,  multiplierNonZeroOddNumber,  testTransients);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  int  testTransients  =  builder.compareTo(object,  multiplierNonZeroOddNumber,  testTransients);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	int  testTransients  =  builder.compareTo(object,  multiplierNonZeroOddNumber,  testTransients);	  int    testTransients    =    builder.compareTo(object,    initialNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	26	None	replace
16	[BUG]  [BUGGY]  int  testTransients  =  builder.compareTo(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]                        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  int  testTransients  =  builder.compareTo(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	int  testTransients  =  builder.compareTo(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);	  int    testTransients    =    builder.compareTo(object,    initialNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	26	None	replace
17	[BUG]  [BUGGY]  reflectionAppend(object,  builder,  testTransients,  excludeFields,  multiplierNonZeroOddNumber);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  reflectionAppend(object,  builder,  testTransients,  excludeFields,  multiplierNonZeroOddNumber);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	reflectionAppend(object,  builder,  testTransients,  excludeFields,  multiplierNonZeroOddNumber);	  reflectionAppend(object,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	2	None	replace
18	[BUG]  [BUGGY]  reflectionAppend(object,  builder,  testTransients,  multiplierNonZeroOddNumber,  excludeFields);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  reflectionAppend(object,  builder,  testTransients,  multiplierNonZeroOddNumber,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	reflectionAppend(object,  builder,  testTransients,  multiplierNonZeroOddNumber,  excludeFields);	  reflectionAppend(object,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	2	None	replace
19	[BUG]  [BUGGY]  reflectionAppend(object,  builder,  testTransients,  reflectUpToClass,  excludeFields);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  reflectionAppend(object,  builder,  testTransients,  reflectUpToClass,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	reflectionAppend(object,  builder,  testTransients,  reflectUpToClass,  excludeFields);	  reflectionAppend(object,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	2	None	replace
20	[BUG]  [BUGGY]  int  testTransients  =  builder.compareTo(testTransients,  multiplierNonZeroOddNumber,  testTransients);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  int  testTransients  =  builder.compareTo(testTransients,  multiplierNonZeroOddNumber,  testTransients);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	int  testTransients  =  builder.compareTo(testTransients,  multiplierNonZeroOddNumber,  testTransients);	  int    testTransients    =    builder.compareTo(testTransients,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	46	None	replace
21	[BUG]  [BUGGY]  int  testTransients  =  builder.compareTo(testTransients,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]                        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  int  testTransients  =  builder.compareTo(testTransients,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	int  testTransients  =  builder.compareTo(testTransients,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber);	  int    testTransients    =    builder.compareTo(testTransients,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	46	None	replace
22	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields,  testTransients);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields,  testTransients);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields,  testTransients);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    reflectUpToClass,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
23	[BUG]  [BUGGY]  Class  <?>  clazz  =  class.getRawClass();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Class  <?>  clazz  =  class.getRawClass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Class  <?>  clazz  =  class.getRawClass();	  Class    <?>    clazz    =    clazz.getRawClass();    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
24	[BUG]  [BUGGY]  Class  <?>  clazz  =  builder.buildClass(initialNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Class  <?>  clazz  =  builder.buildClass(initialNonZeroOddNumber);  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Class  <?>  clazz  =  builder.buildClass(initialNonZeroOddNumber);	  Class    <?>    clazz    =    builder.build();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
25	[BUG]  [BUGGY]  Class  <?>  clazz  =  builder.buildClass(initialNonZeroOddNumber,  testTransients);  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Class  <?>  clazz  =  builder.buildClass(initialNonZeroOddNumber,  testTransients);  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Class  <?>  clazz  =  builder.buildClass(initialNonZeroOddNumber,  testTransients);	  Class    <?>    clazz    =    builder.build();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
26	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multipleNonZeroOddNumber,    initialNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
27	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multipleNonZeroOddNumber,    initialNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
28	[BUG]  [BUGGY]  Integer  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1,  object);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Integer  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1,  object);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Integer  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1,  object);	  Integer    testTransients    =    builder.computeValue(initialNonZeroOddNumber,    multiplierNonZeroOddNumber    +    1,    testTransients);    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	56	None	replace
29	[BUG]  [BUGGY]  Integer  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1,  testTransients,  reflectUpToClass);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Integer  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1,  testTransients,  reflectUpToClass);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Integer  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1,  testTransients,  reflectUpToClass);	  Integer    testTransients    =    builder.computeValue(initialNonZeroOddNumber,    multiplierNonZeroOddNumber    +    1,    testTransients);    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	56	None	replace
30	[BUG]  [BUGGY]  Integer  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1,  reflectUpToClass);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Integer  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1,  reflectUpToClass);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Integer  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1,  reflectUpToClass);	  Integer    testTransients    =    builder.computeValue(initialNonZeroOddNumber,    multiplierNonZeroOddNumber    +    1,    testTransients);    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	56	None	replace
31	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass,  excludeFields);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients,    reflectUpToClass);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
32	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients,  reflectUpToClass);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients,  reflectUpToClass);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients,  reflectUpToClass);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients,    reflectUpToClass);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
33	[BUG]  [BUGGY]  int  testTransients  =  object.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  int  testTransients  =  object.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	int  testTransients  =  object.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  Integer    testTransients    =    object.computeValue(initialNonZeroOddNumber,    multiplierNonZeroOddNumber);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	47	None	replace
34	[BUG]  [BUGGY]  Class  <?  super  T>  clazz  =  clazz.getSuperclass();  [CE]  variable  clazz  might  not  have  been  initialized  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Class  <?  super  T>  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Class  <?  super  T>  clazz  =  clazz.getSuperclass();	  Class    <?    super    T>    clazz    =    builder.getSuperclass();    	non-compiled	[CE]  variable  clazz  might  not  have  been  initialized	77	None	replace
35	[BUG]  [BUGGY]  Class  <?  super  T>  clazz  =  constructer.getSuperclass();  [CE]  cannot  find  symbol  constructer  [FE]                        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Class  <?  super  T>  clazz  =  constructer.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Class  <?  super  T>  clazz  =  constructer.getSuperclass();	  Class    <?    super    T>    clazz    =    builder.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol  constructer	77	None	replace
36	[BUG]  [BUGGY]  Class  <?  super  T>  clazz  =  builder.getSuperClass();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Class  <?  super  T>  clazz  =  builder.getSuperClass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Class  <?  super  T>  clazz  =  builder.getSuperClass();	  Class    <?    super    T>    clazz    =    builder.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
37	[BUG]  [BUGGY]  ReflectionAppend(object,  multiplierNonZeroOddNumber,  builder,  testTransients);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionAppend(object,  multiplierNonZeroOddNumber,  builder,  testTransients);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionAppend(object,  multiplierNonZeroOddNumber,  builder,  testTransients);	  ReflectionAppend(object,    multiplierNonZeroOddNumber,    initialNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
38	[BUG]  [BUGGY]  ReflectionAppend(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionAppend(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionAppend(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);	  ReflectionAppend(object,    multiplierNonZeroOddNumber,    initialNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
39	[BUG]  [BUGGY]  ReflectionAppend(object,  multiplierNonZeroOddNumber,  initialNonZeroOddNumber,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionAppend(object,  multiplierNonZeroOddNumber,  initialNonZeroOddNumber,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionAppend(object,  multiplierNonZeroOddNumber,  initialNonZeroOddNumber,  testTransients,  excludeFields);	  ReflectionAppend(object,    multiplierNonZeroOddNumber,    initialNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
40	[BUG]  [BUGGY]  if(initialNonZeroOddNumber  ==  initialNonZeroOddNumber)  {  Class  <?>  clazz  =  builder.getClass();  Class  <?>  clazz  =  builder.getClass();  }  [CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]            IllegalArgumentException      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  if(initialNonZeroOddNumber  ==  initialNonZeroOddNumber)  {  Class  <?>  clazz  =  builder.getClass();  Class  <?>  clazz  =  builder.getClass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	if(initialNonZeroOddNumber  ==  initialNonZeroOddNumber)  {  Class  <?>  clazz  =  builder.getClass();  Class  <?>  clazz  =  builder.getClass();  }	  Class    <?>    clazz    =    builder.getClass();    Class    >=?>    clazz    =    builder.getClass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	24	None	replace
41	[BUG]  [BUGGY]  if(initialNonZeroOddNumber  ==  null)  {  Class  <?>  clazz  =  builder.getClass();  Class  <?>  clazz  =  builder.getClass();  }  [CE]  incomparable  types:  int  and  <null>  [FE]              IllegalArgumentException      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  if(initialNonZeroOddNumber  ==  null)  {  Class  <?>  clazz  =  builder.getClass();  Class  <?>  clazz  =  builder.getClass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	if(initialNonZeroOddNumber  ==  null)  {  Class  <?>  clazz  =  builder.getClass();  Class  <?>  clazz  =  builder.getClass();  }	  Class    <?>    clazz    =    builder.getClass();    Class    >=?>    clazz    =    builder.getClass();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	24	None	replace
42	[BUG]  [BUGGY]  if(initialNonZeroOddNumber!=  null)  {  Class  <?>  clazz  =  builder.getClass();  Class  <?>  clazz  =  builder.getClass();  }  [CE]  incomparable  types:  int  and  <null>  [FE]                IllegalArgumentException      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  if(initialNonZeroOddNumber!=  null)  {  Class  <?>  clazz  =  builder.getClass();  Class  <?>  clazz  =  builder.getClass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	if(initialNonZeroOddNumber!=  null)  {  Class  <?>  clazz  =  builder.getClass();  Class  <?>  clazz  =  builder.getClass();  }	  Class    <?>    clazz    =    builder.getClass();    Class    >=?>    clazz    =    builder.getClass();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	24	None	replace
43	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  testTransients);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  testTransients);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  testTransients);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multipleNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
44	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multipleNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
45	[BUG]  [BUGGY]  Integer  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Integer  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Integer  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  if(testTransients)    {    Integer    testTransients    =    builder.computeValue(initialNonZeroOddNumber,    multiplierNonZeroOddNumber);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	74	None	replace
46	[BUG]  [BUGGY]  ReflectionAppend(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionAppend(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionAppend(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);	  ReflectionAppend(object,    multiplierNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
47	[BUG]  [BUGGY]  ReflectionAppend(object,  multiplierNonZeroOddNumber,  builder);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionAppend(object,  multiplierNonZeroOddNumber,  builder);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionAppend(object,  multiplierNonZeroOddNumber,  builder);	  ReflectionAppend(object,    multiplierNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
48	[BUG]  [BUGGY]  ReflectionAppend(object,  multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionAppend(object,  multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionAppend(object,  multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);	  ReflectionAppend(object,    multiplierNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
49	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multipleNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
50	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  object);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  object);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  object);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multipleNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
51	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  false);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  false);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  false);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multipleNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
52	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplicerNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplicerNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplicerNonZeroOddNumber,  multiplierNonZeroOddNumber);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplicerNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
53	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplicerNonZeroOddNumber,  multiplierNonZeroOddNumber,  object);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplicerNonZeroOddNumber,  multiplierNonZeroOddNumber,  object);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplicerNonZeroOddNumber,  multiplierNonZeroOddNumber,  object);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplicerNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
54	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplicerNonZeroOddNumber,  multiplierNonZeroOddNumber,  false);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplicerNonZeroOddNumber,  multiplierNonZeroOddNumber,  false);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplicerNonZeroOddNumber,  multiplierNonZeroOddNumber,  false);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplicerNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
55	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplyNonZeroOddNumber,    initialNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
56	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(numberNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(numberNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(numberNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplyNonZeroOddNumber,    initialNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
57	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplyNonZeroOddNumber,    initialNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
58	[BUG]  [BUGGY]  ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  builder,  testTransients,  null);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  builder,  testTransients,  null);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  builder,  testTransients,  null);	  ReflectionAppend(object,    initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients,    null);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
59	[BUG]  [BUGGY]  ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields,  null);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields,  null);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields,  null);	  ReflectionAppend(object,    initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients,    null);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
60	[BUG]  [BUGGY]  Class  <?>  clazz  =  constructer.getSuperClass();  [CE]  cannot  find  symbol  constructer  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Class  <?>  clazz  =  constructer.getSuperClass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Class  <?>  clazz  =  constructer.getSuperClass();	  Class    <?>    clazz    =    builder.getSuperClass();    	non-compiled	[CE]  cannot  find  symbol  constructer	35	None	replace
61	[BUG]  [BUGGY]  int  testTransients  =  builder.compareTo(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  int  testTransients  =  builder.compareTo(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	int  testTransients  =  builder.compareTo(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);	  int    testTransients    =    builder.compareTo(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	25	None	replace
62	[BUG]  [BUGGY]  int  testTransients  =  builder.compareTo(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  int  testTransients  =  builder.compareTo(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	int  testTransients  =  builder.compareTo(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass);	  int    testTransients    =    builder.compareTo(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	25	None	replace
63	[BUG]  [BUGGY]  int  testTransients  =  builder.compareTo(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  null);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]                        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  int  testTransients  =  builder.compareTo(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  null);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	int  testTransients  =  builder.compareTo(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  null);	  int    testTransients    =    builder.compareTo(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	25	None	replace
64	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(numberNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(numberNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  builder,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(numberNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  builder,  testTransients,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplyerNonZeroOddNumber,    multiplierNonZeroOddNumber);    reflectionAppend(object,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
65	[BUG]  [BUGGY]  Class  <?>  clazz  =  constructClass(initialNonZeroOddNumber,  testTransients);  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Class  <?>  clazz  =  constructClass(initialNonZeroOddNumber,  testTransients);  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Class  <?>  clazz  =  constructClass(initialNonZeroOddNumber,  testTransients);	  Class    <?>    clazz    =    builder.buildClass();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
66	[BUG]  [BUGGY]  Class  <?>  clazz  =  constructClass(initialNonZeroOddNumber,  builder.buildClass());  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Class  <?>  clazz  =  constructClass(initialNonZeroOddNumber,  builder.buildClass());  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Class  <?>  clazz  =  constructClass(initialNonZeroOddNumber,  builder.buildClass());	  Class    <?>    clazz    =    builder.buildClass();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
67	[BUG]  [BUGGY]  Class  <?>  clazz  =  constructer.getRawClass();  [CE]  cannot  find  symbol  constructer  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Class  <?>  clazz  =  constructer.getRawClass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Class  <?>  clazz  =  constructer.getRawClass();	  Class    <?>    clazz    =    builder.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  constructer	32	None	replace
68	[BUG]  [BUGGY]  Class  <?>  clazz  =  builder.build().getRawClass();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Class  <?>  clazz  =  builder.build().getRawClass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Class  <?>  clazz  =  builder.build().getRawClass();	  Class    <?>    clazz    =    builder.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
69	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(numberNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(numberNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(numberNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplyNonZeroOddNumber,    multiplierNonZeroOddNumber);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
70	[BUG]  [BUGGY]  if(testTransients)  {  Class  <?>  clazz  =  builder.getClass();  }  else  if(initialNonZeroOddNumber  ==  multiplierNonZeroOddNumber)  {  return  builder.toHashCode();  }  [CE]  cannot  find  symbol  clazz  [FE]        IllegalArgumentException      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  if(testTransients)  {  Class  <?>  clazz  =  builder.getClass();  }  else  if(initialNonZeroOddNumber  ==  multiplierNonZeroOddNumber)  {  return  builder.toHashCode();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	if(testTransients)  {  Class  <?>  clazz  =  builder.getClass();  }  else  if(initialNonZeroOddNumber  ==  multiplierNonZeroOddNumber)  {  return  builder.toHashCode();  }	  Class    <?>    clazz    =    builder.getClass();    Class    <?>    clazz    =    builder.getClass();    	non-compiled	[CE]  cannot  find  symbol  clazz	22	None	replace
71	[BUG]  [BUGGY]  if(testTransients)  {  Class  <?>  clazz  =  builder.getClass();  Class  <?>  clazz  =  builder.getClass();  }  else  {  reflectionHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddN  [CE]  ')'  expected  [FE]          IllegalArgumentException      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  if(testTransients)  {  Class  <?>  clazz  =  builder.getClass();  Class  <?>  clazz  =  builder.getClass();  }  else  {  reflectionHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddN  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	if(testTransients)  {  Class  <?>  clazz  =  builder.getClass();  Class  <?>  clazz  =  builder.getClass();  }  else  {  reflectionHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddN	  Class    <?>    clazz    =    builder.getClass();    Class    <?>    clazz    =    builder.getClass();    	non-compiled	[CE]  ')'  expected	22	None	replace
72	[BUG]  [BUGGY]  if(testTransients)  {  Class  <?>  clazz  =  builder.getClass();  Class  <?>  clazz  =  builder.getClass();  }  [CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]            IllegalArgumentException      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  if(testTransients)  {  Class  <?>  clazz  =  builder.getClass();  Class  <?>  clazz  =  builder.getClass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	if(testTransients)  {  Class  <?>  clazz  =  builder.getClass();  Class  <?>  clazz  =  builder.getClass();  }	  Class    <?>    clazz    =    builder.getClass();    Class    <?>    clazz    =    builder.getClass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	22	None	replace
73	[BUG]  [BUGGY]  int  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  int  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	int  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass);	  int    testTransients    =    builder.computeValue(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	36	None	replace
74	[BUG]  [BUGGY]  int  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]              AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  int  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	int  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);	  int    testTransients    =    builder.computeValue(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	36	None	replace
75	[BUG]  [BUGGY]  int  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  null);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  int  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  null);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	int  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  null);	  int    testTransients    =    builder.computeValue(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	36	None	replace
76	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplierNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
77	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  object);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  object);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  object);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplierNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
78	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  false);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  false);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  false);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplierNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
79	[BUG]  [BUGGY]  Integer  clazz  =  initialNonZeroOddNumber.getInitialNonZeroOddNumber();  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Integer  clazz  =  initialNonZeroOddNumber.getInitialNonZeroOddNumber();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Integer  clazz  =  initialNonZeroOddNumber.getInitialNonZeroOddNumber();	  Integer    clazz    =    builder.getInitialNonZeroOddNumber();    	non-compiled	[CE]  int  cannot  be  dereferenced	76	None	replace
80	[BUG]  [BUGGY]  Integer  clazz  =  initialNonZeroOddNumber,  builder.getInitialNonZeroOddNumber();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Integer  clazz  =  initialNonZeroOddNumber,  builder.getInitialNonZeroOddNumber();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Integer  clazz  =  initialNonZeroOddNumber,  builder.getInitialNonZeroOddNumber();	  Integer    clazz    =    builder.getInitialNonZeroOddNumber();    	non-compiled	[CE]  ';'  expected	76	None	replace
81	[BUG]  [BUGGY]  Integer  clazz  =  multierNonZeroOddNumber.getInitialNonZeroOddNumber();  [CE]  cannot  find  symbol  multierNonZeroOddNumber  [FE]                        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Integer  clazz  =  multierNonZeroOddNumber.getInitialNonZeroOddNumber();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Integer  clazz  =  multierNonZeroOddNumber.getInitialNonZeroOddNumber();	  Integer    clazz    =    builder.getInitialNonZeroOddNumber();    	non-compiled	[CE]  cannot  find  symbol  multierNonZeroOddNumber	76	None	replace
82	[BUG]  [BUGGY]  Integer  initialNonZeroOddNumber  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  variable  initialNonZeroOddNumber  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]                          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Integer  initialNonZeroOddNumber  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Integer  initialNonZeroOddNumber  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);	  Integer    iConstant    =    getInitialNonZeroOddNumber(initialNonZeroOddNumber,    multierNonZeroOddNumber);    	non-compiled	[CE]  variable  initialNonZeroOddNumber  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	43	None	replace
83	[BUG]  [BUGGY]  Integer  multierNonZeroOddNumber  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Integer  multierNonZeroOddNumber  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Integer  multierNonZeroOddNumber  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);	  Integer    iConstant    =    getInitialNonZeroOddNumber(initialNonZeroOddNumber,    multierNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
84	[BUG]  [BUGGY]  Integer  integerNonZeroOddNumber  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Integer  integerNonZeroOddNumber  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Integer  integerNonZeroOddNumber  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);	  Integer    iConstant    =    getInitialNonZeroOddNumber(initialNonZeroOddNumber,    multierNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
85	[BUG]  [BUGGY]  Integer  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  +  2);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]              AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Integer  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  +  2);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Integer  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  +  2);	  Integer    testTransients    =    builder.computeValue(initialNonZeroOddNumber,    multiplierNonZeroOddNumber    +    1);    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	55	None	replace
86	[BUG]  [BUGGY]  ReflectionAppend(object,  multiplierNonZeroOddNumber,  initialNonZeroOddNumber,  builder);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionAppend(object,  multiplierNonZeroOddNumber,  initialNonZeroOddNumber,  builder);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionAppend(object,  multiplierNonZeroOddNumber,  initialNonZeroOddNumber,  builder);	  ReflectionAppend(object,    initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    builder);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
87	[BUG]  [BUGGY]  ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  constructer);  [CE]  cannot  find  symbol  constructer  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  constructer);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  constructer);	  ReflectionAppend(object,    initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    builder);    	non-compiled	[CE]  cannot  find  symbol  constructer	19	None	replace
88	[BUG]  [BUGGY]  Integer  multiplierNonZeroOddNumber  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  variable  multiplierNonZeroOddNumber  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Integer  multiplierNonZeroOddNumber  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Integer  multiplierNonZeroOddNumber  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);	  Integer    iConstant    =    getInitialNonZeroOddNumber(multierNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  variable  multiplierNonZeroOddNumber  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	72	None	replace
89	[BUG]  [BUGGY]  Integer  iConstant  =  getInitialNonZeroOddNumber(multiplyerNonZeroOddNumber);  [CE]  cannot  find  symbol  multiplyerNonZeroOddNumber  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Integer  iConstant  =  getInitialNonZeroOddNumber(multiplyerNonZeroOddNumber);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Integer  iConstant  =  getInitialNonZeroOddNumber(multiplyerNonZeroOddNumber);	  Integer    iConstant    =    getInitialNonZeroOddNumber(initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol  multiplyerNonZeroOddNumber	40	None	replace
90	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplyerNonZeroOddNumber,    initialNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
91	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplyerNonZeroOddNumber,    initialNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
92	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplyerNonZeroOddNumber,    initialNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
93	[BUG]  [BUGGY]  ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  testTransients);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  testTransients);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  testTransients);	  ReflectionAppend(object,    initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    reflectUpToClass);    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
94	[BUG]  [BUGGY]  ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  null);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  null);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  null);	  ReflectionAppend(object,    initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    reflectUpToClass);    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
95	[BUG]  [BUGGY]  ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]                        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  iConstant);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  iConstant);	  ReflectionAppend(object,    initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    reflectUpToClass);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	70	None	replace
96	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multipleNonZeroOddNumber,    multiplierNonZeroOddNumber);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
97	[BUG]  [BUGGY]  Class  <?>  clazz  =  constructer.getSuperclass();  [CE]  cannot  find  symbol  constructer  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Class  <?>  clazz  =  constructer.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Class  <?>  clazz  =  constructer.getSuperclass();	  Class    <?>    clazz    =    builder.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol  constructer	21	None	replace
98	[BUG]  [BUGGY]  Integer  iConstant  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Integer  iConstant  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Integer  iConstant  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);	  Integer    iConstant    =    getInitialNonZeroOddNumber(initialNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
99	[BUG]  [BUGGY]  int  iConstant  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  int  iConstant  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	int  iConstant  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);	  Integer    iConstant    =    getInitialNonZeroOddNumber(initialNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
100	[BUG]  [BUGGY]  int  testTransients  =  builder.compareTo(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1,  testTransients);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  int  testTransients  =  builder.compareTo(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1,  testTransients);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	int  testTransients  =  builder.compareTo(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1,  testTransients);	  int    testTransients    =    builder.compareTo(initialNonZeroOddNumber,    multiplierNonZeroOddNumber    +    1);    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	45	None	replace
101	[BUG]  [BUGGY]  int  testTransients  =  builder.compareTo(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  +  2);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  int  testTransients  =  builder.compareTo(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  +  2);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	int  testTransients  =  builder.compareTo(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  +  2);	  int    testTransients    =    builder.compareTo(initialNonZeroOddNumber,    multiplierNonZeroOddNumber    +    1);    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	45	None	replace
102	[BUG]  [BUGGY]  Integer  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Integer  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Integer  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass);	  Integer    testTransients    =    builder.computeValue(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	27	None	replace
103	[BUG]  [BUGGY]  Integer  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Integer  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Integer  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);	  Integer    testTransients    =    builder.computeValue(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	27	None	replace
104	[BUG]  [BUGGY]  Integer  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  null);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Integer  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  null);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Integer  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  null);	  Integer    testTransients    =    builder.computeValue(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	27	None	replace
105	[BUG]  [BUGGY]  int  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1,  testTransients);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  int  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1,  testTransients);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	int  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1,  testTransients);	  int    testTransients    =    builder.computeValue(initialNonZeroOddNumber,    multiplierNonZeroOddNumber    +    1);    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	54	None	replace
106	[BUG]  [BUGGY]  int  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  +  2);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]              AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  int  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  +  2);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	int  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  +  2);	  int    testTransients    =    builder.computeValue(initialNonZeroOddNumber,    multiplierNonZeroOddNumber    +    1);    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	54	None	replace
107	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber  +  1;  [CE]  cannot  find  symbol  clazz  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber  +  1;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber  +  1;	  int    iConstant    =    multiplierNonZeroOddNumber    -    initialNonZeroOddNumber;    	non-compiled	[CE]  cannot  find  symbol  clazz	14	None	replace
108	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  /  initialNonZeroOddNumber;  [CE]  cannot  find  symbol  clazz  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  /  initialNonZeroOddNumber;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  /  initialNonZeroOddNumber;	  int    iConstant    =    multiplierNonZeroOddNumber    -    initialNonZeroOddNumber;    	non-compiled	[CE]  cannot  find  symbol  clazz	14	None	replace
109	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber,  multiplierNonZeroOddNumber;  [CE]  variable  multiplierNonZeroOddNumber  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]                        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber,  multiplierNonZeroOddNumber;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  -  initialNonZeroOddNumber,  multiplierNonZeroOddNumber;	  int    iConstant    =    multiplierNonZeroOddNumber    -    initialNonZeroOddNumber;    	non-compiled	[CE]  variable  multiplierNonZeroOddNumber  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	14	None	replace
110	[BUG]  [BUGGY]  int  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  int  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	int  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  Integer    testTransients    =    builder.computeValue(initialNonZeroOddNumber,    multiplierNonZeroOddNumber    +    1);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	48	None	replace
111	[BUG]  [BUGGY]  int  iConstant  =  initialNonZeroOddNumber  +  builder.length();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  int  iConstant  =  initialNonZeroOddNumber  +  builder.length();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	int  iConstant  =  initialNonZeroOddNumber  +  builder.length();	  int    iConstant    =    multiplierNonZeroOddNumber    +    builder.length();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
112	[BUG]  [BUGGY]  int  iConstant  =  builder  +  multiplierNonZeroOddNumber.length();  [CE]  int  cannot  be  dereferenced  [FE]                        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  int  iConstant  =  builder  +  multiplierNonZeroOddNumber.length();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	int  iConstant  =  builder  +  multiplierNonZeroOddNumber.length();	  int    iConstant    =    multiplierNonZeroOddNumber    +    builder.length();    	non-compiled	[CE]  int  cannot  be  dereferenced	15	None	replace
113	[BUG]  [BUGGY]  int  iConstant  =  constructerNonZeroOddNumber  +  multiplierNonZeroOddNumber.length();  [CE]  cannot  find  symbol  constructerNonZeroOddNumber  [FE]                          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  int  iConstant  =  constructerNonZeroOddNumber  +  multiplierNonZeroOddNumber.length();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	int  iConstant  =  constructerNonZeroOddNumber  +  multiplierNonZeroOddNumber.length();	  int    iConstant    =    multiplierNonZeroOddNumber    +    builder.length();    	non-compiled	[CE]  cannot  find  symbol  constructerNonZeroOddNumber	15	None	replace
114	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  testTransients,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    reflectUpToClass,    testTransients);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
115	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  testTransients,  null);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  testTransients,  null);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  testTransients,  null);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    reflectUpToClass,    testTransients);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
116	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  testTransients,  false);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  testTransients,  false);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  testTransients,  false);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    reflectUpToClass,    testTransients);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
117	[BUG]  [BUGGY]  if(testTransients)  {  Class  <?>  clazz  =  builder.getClass();  class  <?>  clazz  =  builder.getClass();  }  [CE]  <identifier>  expected  [FE]          IllegalArgumentException      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  if(testTransients)  {  Class  <?>  clazz  =  builder.getClass();  class  <?>  clazz  =  builder.getClass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	if(testTransients)  {  Class  <?>  clazz  =  builder.getClass();  class  <?>  clazz  =  builder.getClass();  }	  Class    <?>    clazz    =    builder.getClass();    class    <?>    clazz    =    builder.getClass();    	non-compiled	[CE]  <identifier>  expected	23	None	replace
118	[BUG]  [BUGGY]  class  <?>  clazz  =  builder.getClass();  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  class  <?>  clazz  =  builder.getClass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	class  <?>  clazz  =  builder.getClass();	  Class    <?>    clazz    =    builder.getClass();    class    <?>    clazz    =    builder.getClass();    	non-compiled	[CE]  <identifier>  expected	23	None	replace
119	[BUG]  [BUGGY]  if(testTransients)  {  Class  <?>  clazz  =  builder.getClass();  class  <?>  clazz  =  builder.getClass();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  if(testTransients)  {  Class  <?>  clazz  =  builder.getClass();  class  <?>  clazz  =  builder.getClass();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	if(testTransients)  {  Class  <?>  clazz  =  builder.getClass();  class  <?>  clazz  =  builder.getClass();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  Class    <?>    clazz    =    builder.getClass();    class    <?>    clazz    =    builder.getClass();    	non-compiled	[CE]  <identifier>  expected	23	None	replace
120	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber);  [CE]  cannot  find  symbol  clazz  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber);	  reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol  clazz	13	None	replace
121	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber,  excludeFields);  [CE]  cannot  find  symbol  clazz  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber,  excludeFields);	  reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol  clazz	13	None	replace
122	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  null,  excludeFields);  [CE]  cannot  find  symbol  clazz  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  null,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  null,  excludeFields);	  reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol  clazz	13	None	replace
123	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  initialNonZeroOddNumber,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  initialNonZeroOddNumber,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  initialNonZeroOddNumber,  testTransients,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
124	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
125	[BUG]  [BUGGY]  Integer  multierNonZeroOddNumber  =  getMultierNonZeroOddNumber(initialNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Integer  multierNonZeroOddNumber  =  getMultierNonZeroOddNumber(initialNonZeroOddNumber);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Integer  multierNonZeroOddNumber  =  getMultierNonZeroOddNumber(initialNonZeroOddNumber);	  Integer    multierNonZeroOddNumber    =    getInitialNonZeroOddNumber(initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
126	[BUG]  [BUGGY]  Integer  multierNonZeroOddNumber  =  getMultierNonZeroOddNumber(multierNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Integer  multierNonZeroOddNumber  =  getMultierNonZeroOddNumber(multierNonZeroOddNumber);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Integer  multierNonZeroOddNumber  =  getMultierNonZeroOddNumber(multierNonZeroOddNumber);	  Integer    multierNonZeroOddNumber    =    getInitialNonZeroOddNumber(initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
127	[BUG]  [BUGGY]  Integer  multierNonZeroOddNumber  =  getInitialNonZeroOddNumber(multierNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Integer  multierNonZeroOddNumber  =  getInitialNonZeroOddNumber(multierNonZeroOddNumber);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Integer  multierNonZeroOddNumber  =  getInitialNonZeroOddNumber(multierNonZeroOddNumber);	  Integer    multierNonZeroOddNumber    =    getInitialNonZeroOddNumber(initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
128	[BUG]  [BUGGY]  Integer  multierNonZeroOddNumber  =  getMultierNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Integer  multierNonZeroOddNumber  =  getMultierNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Integer  multierNonZeroOddNumber  =  getMultierNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);	  Integer    multierNonZeroOddNumber    =    getInitialNonZeroOddNumber(initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
129	[BUG]  [BUGGY]  Class  <?>  clazz  =  constructClass(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Class  <?>  clazz  =  constructClass(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Class  <?>  clazz  =  constructClass(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);	  Class    <?>    clazz    =    this.object.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
130	[BUG]  [BUGGY]  Class  <?>  clazz  =  constructClass(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Class  <?>  clazz  =  constructClass(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Class  <?>  clazz  =  constructClass(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);	  Class    <?>    clazz    =    this.object.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
131	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplyerNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
132	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  object);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  object);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  object);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplyerNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
133	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  false);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  false);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  false);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplyerNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
134	[BUG]  [BUGGY]  ReflectionAppend(object,  clazz,  builder,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  clazz  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionAppend(object,  clazz,  builder,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionAppend(object,  clazz,  builder,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);	  ReflectionAppend(object,    initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol  clazz	5	None	replace
135	[BUG]  [BUGGY]  ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  constructer,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  constructer  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  constructer,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  constructer,  testTransients,  excludeFields);	  ReflectionAppend(object,    initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol  constructer	5	None	replace
136	[BUG]  [BUGGY]  reflectionAppend(object,  initialNonZeroOddNumber,  testTransients,  excludeFields);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  reflectionAppend(object,  initialNonZeroOddNumber,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	reflectionAppend(object,  initialNonZeroOddNumber,  testTransients,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multipleNonZeroOddNumber,    multiplierNonZeroOddNumber);    reflectionAppend(object,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	3	None	replace
137	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  initialNonZeroOddNumber,  object);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  initialNonZeroOddNumber,  object);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  initialNonZeroOddNumber,  object);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    object);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
138	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    object);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
139	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  initialNonZeroOddNumber,  object);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  initialNonZeroOddNumber,  object);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  initialNonZeroOddNumber,  object);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    object);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
140	[BUG]  [BUGGY]  ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  builder,  testTransients,  reflectUpToClass,  excludeFields);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  builder,  testTransients,  reflectUpToClass,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  builder,  testTransients,  reflectUpToClass,  excludeFields);	  ReflectionAppend(object,    initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients,    reflectUpToClass,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
141	[BUG]  [BUGGY]  ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  constructor,  testTransients,  reflectUpToClass,  excludeFields);  [CE]  cannot  find  symbol  constructor  [FE]              AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  constructor,  testTransients,  reflectUpToClass,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  constructor,  testTransients,  reflectUpToClass,  excludeFields);	  ReflectionAppend(object,    initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients,    reflectUpToClass,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol  constructor	31	None	replace
142	[BUG]  [BUGGY]  ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  builder,  reflectUpToClass,  excludeFields);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  builder,  reflectUpToClass,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  builder,  reflectUpToClass,  excludeFields);	  ReflectionAppend(object,    initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients,    reflectUpToClass,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
143	[BUG]  [BUGGY]  Integer  iConstant  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  builder);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Integer  iConstant  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  builder);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Integer  iConstant  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  builder);	  Integer    iConstant    =    getInitialNonZeroOddNumber(initialNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
144	[BUG]  [BUGGY]  Integer  multierNonZeroOddNumber  =  getInitialNonZeroOddNumber(multierNonZeroOddNumber,  object);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Integer  multierNonZeroOddNumber  =  getInitialNonZeroOddNumber(multierNonZeroOddNumber,  object);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Integer  multierNonZeroOddNumber  =  getInitialNonZeroOddNumber(multierNonZeroOddNumber,  object);	  Integer    multierNonZeroOddNumber    =    getInitialNonZeroOddNumber(initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
145	[BUG]  [BUGGY]  int  testTransients  =  builder.compareTo(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  +  3);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  int  testTransients  =  builder.compareTo(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  +  3);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	int  testTransients  =  builder.compareTo(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  +  3);	  int    testTransients    =    builder.compareTo(initialNonZeroOddNumber,    multiplierNonZeroOddNumber    +    1);    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	45	None	replace
146	[BUG]  [BUGGY]  Integer  iConstant  =  getInitialNonZeroOddNumber(multiperNonZeroOddNumber,  initialNonZeroOddNumber);  [CE]  cannot  find  symbol  multiperNonZeroOddNumber  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Integer  iConstant  =  getInitialNonZeroOddNumber(multiperNonZeroOddNumber,  initialNonZeroOddNumber);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Integer  iConstant  =  getInitialNonZeroOddNumber(multiperNonZeroOddNumber,  initialNonZeroOddNumber);	  Integer    iConstant    =    getInitialNonZeroOddNumber(initialNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol  multiperNonZeroOddNumber	41	None	replace
147	[BUG]  [BUGGY]  Integer  iConstant  =  getInitialNonZeroOddNumber(multiplyerNonZeroOddNumber,  initialNonZeroOddNumber);  [CE]  cannot  find  symbol  multiplyerNonZeroOddNumber  [FE]                        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Integer  iConstant  =  getInitialNonZeroOddNumber(multiplyerNonZeroOddNumber,  initialNonZeroOddNumber);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Integer  iConstant  =  getInitialNonZeroOddNumber(multiplyerNonZeroOddNumber,  initialNonZeroOddNumber);	  Integer    iConstant    =    getInitialNonZeroOddNumber(initialNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol  multiplyerNonZeroOddNumber	41	None	replace
148	[BUG]  [BUGGY]  Integer  iConstant  =  getInitialNonZeroOddNumber(multiplierNonZeroOddNumber,  initialNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Integer  iConstant  =  getInitialNonZeroOddNumber(multiplierNonZeroOddNumber,  initialNonZeroOddNumber);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Integer  iConstant  =  getInitialNonZeroOddNumber(multiplierNonZeroOddNumber,  initialNonZeroOddNumber);	  Integer    iConstant    =    getInitialNonZeroOddNumber(initialNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
149	[BUG]  [BUGGY]  Class  <?>  clazz  =  clazz.getClass();  [CE]  variable  clazz  might  not  have  been  initialized  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Class  <?>  clazz  =  clazz.getClass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Class  <?>  clazz  =  clazz.getClass();	  Class    <?>    clazz    =    clazz.getRawClass();    	non-compiled	[CE]  variable  clazz  might  not  have  been  initialized	33	None	replace
150	[BUG]  [BUGGY]  ReflectionAppend(object,  multiplierNonZeroOddNumber,  initialNonZeroOddNumber,  builder,  testTransients);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionAppend(object,  multiplierNonZeroOddNumber,  initialNonZeroOddNumber,  builder,  testTransients);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionAppend(object,  multiplierNonZeroOddNumber,  initialNonZeroOddNumber,  builder,  testTransients);	  ReflectionAppend(object,    initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    builder,    testTransients);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
151	[BUG]  [BUGGY]  Integer  initialNonZeroOddNumber  =  getInitialNonZeroOddNumber(multierNonZeroOddNumber);  [CE]  variable  initialNonZeroOddNumber  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Integer  initialNonZeroOddNumber  =  getInitialNonZeroOddNumber(multierNonZeroOddNumber);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Integer  initialNonZeroOddNumber  =  getInitialNonZeroOddNumber(multierNonZeroOddNumber);	  Integer    iConstant    =    getInitialNonZeroOddNumber(initialNonZeroOddNumber);    	non-compiled	[CE]  variable  initialNonZeroOddNumber  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	40	None	replace
152	[BUG]  [BUGGY]  int  iConstant  =  getInitialNonZeroOddNumber(multierNonZeroOddNumber);  [CE]  cannot  find  symbol  multierNonZeroOddNumber  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  int  iConstant  =  getInitialNonZeroOddNumber(multierNonZeroOddNumber);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	int  iConstant  =  getInitialNonZeroOddNumber(multierNonZeroOddNumber);	  Integer    iConstant    =    getInitialNonZeroOddNumber(initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol  multierNonZeroOddNumber	40	None	replace
153	[BUG]  [BUGGY]  Integer  clazz  =  multiplierNonZeroOddNumber.getInitialNonZeroOddNumber();  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Integer  clazz  =  multiplierNonZeroOddNumber.getInitialNonZeroOddNumber();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Integer  clazz  =  multiplierNonZeroOddNumber.getInitialNonZeroOddNumber();	  Integer    clazz    =    builder.getInitialNonZeroOddNumber();    	non-compiled	[CE]  int  cannot  be  dereferenced	76	None	replace
154	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplyNonZeroOddNumber,    multiplierNonZeroOddNumber);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
155	[BUG]  [BUGGY]  Integer  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Integer  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Integer  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields);	  Integer    testTransients    =    builder.computeValue(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	27	None	replace
156	[BUG]  [BUGGY]  ReflectionAppend(object,  multiplierNonZeroOddNumber,  object,  testTransients);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionAppend(object,  multiplierNonZeroOddNumber,  object,  testTransients);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionAppend(object,  multiplierNonZeroOddNumber,  object,  testTransients);	  ReflectionAppend(object,    multiplierNonZeroOddNumber,    initialNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
157	[BUG]  [BUGGY]  Class  <?>  clazz  =  builder.getParameterType(0);  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Class  <?>  clazz  =  builder.getParameterType(0);  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Class  <?>  clazz  =  builder.getParameterType(0);	  Class    <?>    clazz    =    builder.getClass();    Class    <?>    clazz    =    builder.getClass());    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
158	[BUG]  [BUGGY]  Integer  clazz  =  builder.getClass();  [CE]  incompatible  types  [FE]          IllegalArgumentException      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Integer  clazz  =  builder.getClass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Integer  clazz  =  builder.getClass();	  Class    <?>    clazz    =    builder.getClass();    Class    <?>    clazz    =    builder.getClass());    	non-compiled	[CE]  incompatible  types	58	None	replace
159	[BUG]  [BUGGY]  ReflectionAppend(object,  multiplierNonZeroOddNumber,  initialNonZeroOddNumber,  testTransients,  null);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionAppend(object,  multiplierNonZeroOddNumber,  initialNonZeroOddNumber,  testTransients,  null);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionAppend(object,  multiplierNonZeroOddNumber,  initialNonZeroOddNumber,  testTransients,  null);	  ReflectionAppend(object,    initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients,    null);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
160	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplyerNonZeroOddNumber);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
161	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplyerNonZeroOddNumber);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
162	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);	  if(testTransients)    {    Class    <?>    object    =    builder.getClass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
163	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);	  if(testTransients)    {    Class    <?>    object    =    builder.getClass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
164	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  excludeFields);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplyerNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
165	[BUG]  [BUGGY]  ReflectionAppend(object,  clazz,  multiplierNonZeroOddNumber,  reflectUpToClass,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  clazz  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionAppend(object,  clazz,  multiplierNonZeroOddNumber,  reflectUpToClass,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionAppend(object,  clazz,  multiplierNonZeroOddNumber,  reflectUpToClass,  testTransients,  excludeFields);	  ReflectionAppend(object,    initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    reflectUpToClass,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol  clazz	44	None	replace
166	[BUG]  [BUGGY]  reflectionHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  builder,  testTransients,  excludeFields);  [CE]  no  suitable  method  found  for  reflectionHashCode(int,int,HashCodeBuilder,boolean,String[])  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  reflectionHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  builder,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	reflectionHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  builder,  testTransients,  excludeFields);	  if(testTransients)    {    Class    <?>    object    =    builder.getClass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    else    {    return    builder.toHashCode();    }    	non-compiled	[CE]  no  suitable  method  found  for  reflectionHashCode(int,int,HashCodeBuilder,boolean,String[])	78	None	replace
167	[BUG]  [BUGGY]  reflectionHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients,  excludeFields);  [CE]  no  suitable  method  found  for  reflectionHashCode(int,int,T#1,boolean,String[])  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  reflectionHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	reflectionHashCode(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients,  excludeFields);	  if(testTransients)    {    Class    <?>    object    =    builder.getClass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    else    {    return    builder.toHashCode();    }    	non-compiled	[CE]  no  suitable  method  found  for  reflectionHashCode(int,int,T#1,boolean,String[])	78	None	replace
168	[BUG]  [BUGGY]  int  iConstant  =  builderNonZeroOddNumber  +  multiplierNonZeroOddNumber.length();  [CE]  cannot  find  symbol  builderNonZeroOddNumber  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  int  iConstant  =  builderNonZeroOddNumber  +  multiplierNonZeroOddNumber.length();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	int  iConstant  =  builderNonZeroOddNumber  +  multiplierNonZeroOddNumber.length();	  int    iConstant    =    multiplierNonZeroOddNumber    +    builder.length();    	non-compiled	[CE]  cannot  find  symbol  builderNonZeroOddNumber	15	None	replace
169	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  initialNonZeroOddNumber,  reflectUpToClass,  excludeFields);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  initialNonZeroOddNumber,  reflectUpToClass,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  initialNonZeroOddNumber,  reflectUpToClass,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    reflectUpToClass,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
170	[BUG]  [BUGGY]  ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object);	  ReflectionAppend(object,    initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
171	[BUG]  [BUGGY]  Class  <?>  clazz  =  constructClass(initialNonZeroOddNumber).buildClass();  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Class  <?>  clazz  =  constructClass(initialNonZeroOddNumber).buildClass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Class  <?>  clazz  =  constructClass(initialNonZeroOddNumber).buildClass();	  Class    <?>    clazz    =    builder.buildClass();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
172	[BUG]  [BUGGY]  Class  <?>  clazz  =  constructClass(initialNonZeroOddNumber,  builder);  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Class  <?>  clazz  =  constructClass(initialNonZeroOddNumber,  builder);  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Class  <?>  clazz  =  constructClass(initialNonZeroOddNumber,  builder);	  Class    <?>    clazz    =    builder.buildClass();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
173	[BUG]  [BUGGY]  ReflectionAppend(object,  multiplierNonZeroOddNumber,  initialNonZeroOddNumber,  reflectUpToClass);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionAppend(object,  multiplierNonZeroOddNumber,  initialNonZeroOddNumber,  reflectUpToClass);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionAppend(object,  multiplierNonZeroOddNumber,  initialNonZeroOddNumber,  reflectUpToClass);	  ReflectionAppend(object,    initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    reflectUpToClass);    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
174	[BUG]  [BUGGY]  ReflectionAppend(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionAppend(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionAppend(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields);	  ReflectionAppend(object,    initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    reflectUpToClass);    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
175	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  reflectionAppend(object,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  reflectionAppend(object,  builder,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  reflectionAppend(object,  builder,  testTransients,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multipleNonZeroOddNumber,    multiplierNonZeroOddNumber);    reflectionAppend(object,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
176	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  -  1;  [CE]  cannot  find  symbol  clazz  [FE]                        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  -  1;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  -  1;	  int    iConstant    =    multiplierNonZeroOddNumber;    	non-compiled	[CE]  cannot  find  symbol  clazz	16	None	replace
177	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  initialNonZeroOddNumber;  [CE]  cannot  find  symbol  clazz  [FE]                          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  initialNonZeroOddNumber;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  initialNonZeroOddNumber;	  int    iConstant    =    multiplierNonZeroOddNumber;    	non-compiled	[CE]  cannot  find  symbol  clazz	16	None	replace
178	[BUG]  [BUGGY]  Class  <?>  clazz  =  constructer.build();  [CE]  cannot  find  symbol  constructer  [FE]        IllegalArgumentException      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Class  <?>  clazz  =  constructer.build();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Class  <?>  clazz  =  constructer.build();	  Class    <?>    clazz    =    builder.build();    	non-compiled	[CE]  cannot  find  symbol  constructer	67	None	replace
179	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  -  builder;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  -  builder;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  -  builder;	  int    iConstant    =    multiplierNonZeroOddNumber    -    initialNonZeroOddNumber;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	14	None	replace
180	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  -  builderNonZeroOddNumber;  [CE]  cannot  find  symbol  builderNonZeroOddNumber  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  -  builderNonZeroOddNumber;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  -  builderNonZeroOddNumber;	  int    iConstant    =    multiplierNonZeroOddNumber    -    initialNonZeroOddNumber;    	non-compiled	[CE]  cannot  find  symbol  builderNonZeroOddNumber	14	None	replace
181	[BUG]  [BUGGY]  if(initialNonZeroOddNumber  ==  multiplierNonZeroOddNumber)  {  Class  <?>  clazz  =  builder.getClass();  Class  <?>  clazz  =  builder.getClass();  }  [CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]            IllegalArgumentException      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  if(initialNonZeroOddNumber  ==  multiplierNonZeroOddNumber)  {  Class  <?>  clazz  =  builder.getClass();  Class  <?>  clazz  =  builder.getClass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	if(initialNonZeroOddNumber  ==  multiplierNonZeroOddNumber)  {  Class  <?>  clazz  =  builder.getClass();  Class  <?>  clazz  =  builder.getClass();  }	  Class    <?>    clazz    =    builder.getClass();    Class    >=?>    clazz    =    builder.getClass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	24	None	replace
182	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplicerNonZeroOddNumber,  multiplierNonZeroOddNumber,  excludeFields);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplicerNonZeroOddNumber,  multiplierNonZeroOddNumber,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplicerNonZeroOddNumber,  multiplierNonZeroOddNumber,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplicerNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
183	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  initialNonZeroOddNumber,  reflectUpToClass,  testTransients);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  initialNonZeroOddNumber,  reflectUpToClass,  testTransients);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  initialNonZeroOddNumber,  reflectUpToClass,  testTransients);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    reflectUpToClass,    testTransients);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
184	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);	  ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
185	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyNonZeroOddNumber,  initialNonZeroOddNumber,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyNonZeroOddNumber,  initialNonZeroOddNumber,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyNonZeroOddNumber,  initialNonZeroOddNumber,  testTransients,  excludeFields);	  ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
186	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyerNonZeroOddNumber,  object,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyerNonZeroOddNumber,  object,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyerNonZeroOddNumber,  object,  testTransients,  excludeFields);	  ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
187	[BUG]  [BUGGY]  Integer  testTransients  =  builder.compareTo(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Integer  testTransients  =  builder.compareTo(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Integer  testTransients  =  builder.compareTo(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients);	  int    testTransients    =    builder.compareTo(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	25	None	replace
188	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  excludeFields);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multipleNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
189	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplyerNonZeroOddNumber,    multiplierNonZeroOddNumber);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
190	[BUG]  [BUGGY]  ReflectionAppend(object,  clazz,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass,  excludeFields);  [CE]  cannot  find  symbol  clazz  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionAppend(object,  clazz,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionAppend(object,  clazz,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass,  excludeFields);	  ReflectionAppend(object,    initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients,    reflectUpToClass,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol  clazz	31	None	replace
191	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  initialNonZeroOddNumber,  testTransients,  reflectUpToClass);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  initialNonZeroOddNumber,  testTransients,  reflectUpToClass);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  initialNonZeroOddNumber,  testTransients,  reflectUpToClass);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients,    reflectUpToClass);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
192	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplyNonZeroOddNumber,    initialNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
193	[BUG]  [BUGGY]  Integer  testTransients  =  clazz.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Integer  testTransients  =  clazz.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Integer  testTransients  =  clazz.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  Integer    testTransients    =    object.computeValue(initialNonZeroOddNumber,    multiplierNonZeroOddNumber);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	47	None	replace
194	[BUG]  [BUGGY]  Integer  testTransients  =  object.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Integer  testTransients  =  object.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Integer  testTransients  =  object.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);	  Integer    testTransients    =    object.computeValue(initialNonZeroOddNumber,    multiplierNonZeroOddNumber);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	47	None	replace
195	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyNonZeroOddNumber,  initialNonZeroOddNumber,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyNonZeroOddNumber,  initialNonZeroOddNumber,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyNonZeroOddNumber,  initialNonZeroOddNumber,  testTransients,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
196	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
197	[BUG]  [BUGGY]  Class  <?>  clazz  =  constructClass(initialNonZeroOddNumber,  multiplierNonZeroOddNumber).getRawClass();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Class  <?>  clazz  =  constructClass(initialNonZeroOddNumber,  multiplierNonZeroOddNumber).getRawClass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Class  <?>  clazz  =  constructClass(initialNonZeroOddNumber,  multiplierNonZeroOddNumber).getRawClass();	  Class    <?>    clazz    =    this.object.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
198	[BUG]  [BUGGY]  ReflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  clazz  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  Integer    testTransients    =    builder.computeValue(initialNonZeroOddNumber,    multiplierNonZeroOddNumber    +    1);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol  clazz	48	None	replace
199	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  reflectionAppend(object,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  reflectionAppend(object,  builder,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  reflectionAppend(object,  builder,  testTransients,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplyerNonZeroOddNumber,    multiplierNonZeroOddNumber);    reflectionAppend(object,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
200	[BUG]  [BUGGY]  Integer  testTransients  =  builder.compareTo(object,  multiplierNonZeroOddNumber,  testTransients);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Integer  testTransients  =  builder.compareTo(object,  multiplierNonZeroOddNumber,  testTransients);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Integer  testTransients  =  builder.compareTo(object,  multiplierNonZeroOddNumber,  testTransients);	  int    testTransients    =    builder.compareTo(object,    initialNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	26	None	replace
201	[BUG]  [BUGGY]  Integer  iConstant  =  getInitialNonZeroOddNumber(multierNonZeroOddNumber,  testTransients);  [CE]  cannot  find  symbol  multierNonZeroOddNumber  [FE]                        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Integer  iConstant  =  getInitialNonZeroOddNumber(multierNonZeroOddNumber,  testTransients);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Integer  iConstant  =  getInitialNonZeroOddNumber(multierNonZeroOddNumber,  testTransients);	  Integer    iConstant    =    getInitialNonZeroOddNumber(initialNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  cannot  find  symbol  multierNonZeroOddNumber	42	None	replace
202	[BUG]  [BUGGY]  Integer  iConstant  =  getInitialNonZeroOddNumber(varierNonZeroOddNumber,  testTransients);  [CE]  cannot  find  symbol  varierNonZeroOddNumber  [FE]                          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Integer  iConstant  =  getInitialNonZeroOddNumber(varierNonZeroOddNumber,  testTransients);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Integer  iConstant  =  getInitialNonZeroOddNumber(varierNonZeroOddNumber,  testTransients);	  Integer    iConstant    =    getInitialNonZeroOddNumber(initialNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  cannot  find  symbol  varierNonZeroOddNumber	42	None	replace
203	[BUG]  [BUGGY]  ReflectionHashCode  <?>  object  =  builder.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionHashCode  <?>  object  =  builder.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionHashCode  <?>  object  =  builder.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  if(testTransients)    {    Class    <?>    object    =    builder.getClass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
204	[BUG]  [BUGGY]  ReflectionHashCode  <?>  object  =  builder.toHashCode();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionHashCode  <?>  object  =  builder.toHashCode();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionHashCode  <?>  object  =  builder.toHashCode();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  if(testTransients)    {    Class    <?>    object    =    builder.getClass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
205	[BUG]  [BUGGY]  int  testTransients  =  builder.compareTo(testTransients,  multiplierNonZeroOddNumber,  reflectUpToClass);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  int  testTransients  =  builder.compareTo(testTransients,  multiplierNonZeroOddNumber,  reflectUpToClass);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	int  testTransients  =  builder.compareTo(testTransients,  multiplierNonZeroOddNumber,  reflectUpToClass);	  int    testTransients    =    builder.compareTo(testTransients,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	46	None	replace
206	[BUG]  [BUGGY]  Class  <?  super  T>  clazz  =  object.getSuperclass();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Class  <?  super  T>  clazz  =  object.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Class  <?  super  T>  clazz  =  object.getSuperclass();	  Class    <?    super    T>    clazz    =    builder.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
207	[BUG]  [BUGGY]  Integer  clazz  =  builder.getInitialNonZeroOddNumber();  Class  <?>  clazz  =  builder.getClass();  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Integer  clazz  =  builder.getInitialNonZeroOddNumber();  Class  <?>  clazz  =  builder.getClass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Integer  clazz  =  builder.getInitialNonZeroOddNumber();  Class  <?>  clazz  =  builder.getClass();	  Class    <?>    clazz    =    builder.getClass();    Class    <?>    clazz    =    builder.getClass();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
208	[BUG]  [BUGGY]  Integer  multiERNonZeroOddNumber  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Integer  multiERNonZeroOddNumber  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Integer  multiERNonZeroOddNumber  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);	  Integer    iConstant    =    getInitialNonZeroOddNumber(multierNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
209	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multipleNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
210	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass);  [CE]  cannot  find  symbol  clazz  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass);	  reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol  clazz	13	None	replace
211	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass,  excludeFields);  [CE]  cannot  find  symbol  clazz  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass,  excludeFields);	  reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol  clazz	13	None	replace
212	[BUG]  [BUGGY]  ReflectionAppend(object,  multiplierNonZeroOddNumber,  object);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionAppend(object,  multiplierNonZeroOddNumber,  object);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionAppend(object,  multiplierNonZeroOddNumber,  object);	  ReflectionAppend(object,    multiplierNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
213	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplierNonZeroOddNumber,  initialNonZeroOddNumber,  object);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplierNonZeroOddNumber,  initialNonZeroOddNumber,  object);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplierNonZeroOddNumber,  initialNonZeroOddNumber,  object);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    object);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
214	[BUG]  [BUGGY]  ReflectionAppend(object,  multiplierNonZeroOddNumber,  object,  builder);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionAppend(object,  multiplierNonZeroOddNumber,  object,  builder);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionAppend(object,  multiplierNonZeroOddNumber,  object,  builder);	  ReflectionAppend(object,    initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    builder);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
215	[BUG]  [BUGGY]  ReflectionAppend(object,  builder,  multiplierNonZeroOddNumber,  initialNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionAppend(object,  builder,  multiplierNonZeroOddNumber,  initialNonZeroOddNumber);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionAppend(object,  builder,  multiplierNonZeroOddNumber,  initialNonZeroOddNumber);	  ReflectionAppend(object,    initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    builder);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
216	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  excludeFields);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplierNonZeroOddNumber,  multiplierNonZeroOddNumber,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplierNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
217	[BUG]  [BUGGY]  Class  <?>  clazz  =  this.clazz.getRawClass();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Class  <?>  clazz  =  this.clazz.getRawClass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Class  <?>  clazz  =  this.clazz.getRawClass();	  Class    <?>    clazz    =    clazz.getRawClass();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	33	None	replace
218	[BUG]  [BUGGY]  if(testTransients)  {  Integer  testTransients  =  object.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  if(testTransients)  {  Integer  testTransients  =  object.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	if(testTransients)  {  Integer  testTransients  =  object.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  Integer    testTransients    =    object.computeValue(initialNonZeroOddNumber,    multiplierNonZeroOddNumber);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	47	None	replace
219	[BUG]  [BUGGY]  final  Class  <?>  clazz  =  builder.getClass();  [CE]  cannot  assign  a  value  to  final  variable  clazz  [FE]          IllegalArgumentException      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  final  Class  <?>  clazz  =  builder.getClass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	final  Class  <?>  clazz  =  builder.getClass();	  Class    <?>    clazz    =    builder.getClass();    class    <?>    clazz    =    builder.getClass();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  clazz	23	None	replace
220	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass);  reflectionAppend(object,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass);  reflectionAppend(object,  builder,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass);  reflectionAppend(object,  builder,  testTransients,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplyerNonZeroOddNumber,    multiplierNonZeroOddNumber);    reflectionAppend(object,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
221	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplyerNonZeroOddNumber,    multiplierNonZeroOddNumber);    reflectionAppend(object,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
222	[BUG]  [BUGGY]  Integer  iConstant  =  getInitialNonZeroOddNumber(multierNonZeroOddNumber,  object);  [CE]  cannot  find  symbol  multierNonZeroOddNumber  [FE]                        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Integer  iConstant  =  getInitialNonZeroOddNumber(multierNonZeroOddNumber,  object);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Integer  iConstant  =  getInitialNonZeroOddNumber(multierNonZeroOddNumber,  object);	  Integer    iConstant    =    getInitialNonZeroOddNumber(initialNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  cannot  find  symbol  multierNonZeroOddNumber	42	None	replace
223	[BUG]  [BUGGY]  ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  builder,  testTransients);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  builder,  testTransients);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  builder,  testTransients);	  ReflectionAppend(object,    initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    reflectUpToClass,    excludeFields,    testTransients);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
224	[BUG]  [BUGGY]  ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients);	  ReflectionAppend(object,    initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    builder,    testTransients);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
225	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplyerNonZeroOddNumber,    initialNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
226	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients,  excludeFields);	  ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
227	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients,  excludeFields);	  ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
228	[BUG]  [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields);	  ReflectionHashCodeBuilder    builder    =    new    ReflectionHashCodeBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
229	[BUG]  [BUGGY]  if(testTransients)  {  Integer  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  if(testTransients)  {  Integer  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	if(testTransients)  {  Integer  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  Integer    testTransients    =    builder.computeValue(initialNonZeroOddNumber,    multiplierNonZeroOddNumber    +    1);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	48	None	replace
230	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multipleNonZeroOddNumber,    multiplierNonZeroOddNumber);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
231	[BUG]  [BUGGY]  Integer  multierNonZeroOddNumber  =  getInitialNonZeroOddNumber(multierNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Integer  multierNonZeroOddNumber  =  getInitialNonZeroOddNumber(multierNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Integer  multierNonZeroOddNumber  =  getInitialNonZeroOddNumber(multierNonZeroOddNumber,  multiplierNonZeroOddNumber);	  Integer    multierNonZeroOddNumber    =    getInitialNonZeroOddNumber(initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
232	[BUG]  [BUGGY]  Class  <?>  clazz  =  base.getRawClass();  [CE]  cannot  find  symbol  base  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Class  <?>  clazz  =  base.getRawClass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Class  <?>  clazz  =  base.getRawClass();	  Class    <?>    clazz    =    builder.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  base	32	None	replace
233	[BUG]  [BUGGY]  int  testTransients  =  builder.compareTo(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  int  testTransients  =  builder.compareTo(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	int  testTransients  =  builder.compareTo(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass);	  int    testTransients    =    builder.compareTo(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	25	None	replace
234	[BUG]  [BUGGY]  int  testTransients  =  builder.compareTo(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  int  testTransients  =  builder.compareTo(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	int  testTransients  =  builder.compareTo(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object);	  int    testTransients    =    builder.compareTo(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	25	None	replace
235	[BUG]  [BUGGY]  int  testTransients  =  builder.compareTo(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]                        AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  int  testTransients  =  builder.compareTo(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	int  testTransients  =  builder.compareTo(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields);	  int    testTransients    =    builder.compareTo(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	25	None	replace
236	[BUG]  [BUGGY]  int  testTransients  =  builder.compareTo(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]                          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  int  testTransients  =  builder.compareTo(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	int  testTransients  =  builder.compareTo(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients);	  int    testTransients    =    builder.compareTo(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	25	None	replace
237	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  reflectUpToClass,  excludeFields);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  reflectUpToClass,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  reflectUpToClass,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    reflectUpToClass,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
238	[BUG]  [BUGGY]  int  testTransients  =  builder.compareTo(testTransients,  multiplierNonZeroOddNumber,  object);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  int  testTransients  =  builder.compareTo(testTransients,  multiplierNonZeroOddNumber,  object);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	int  testTransients  =  builder.compareTo(testTransients,  multiplierNonZeroOddNumber,  object);	  int    testTransients    =    builder.compareTo(testTransients,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	46	None	replace
239	[BUG]  [BUGGY]  ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  builder,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  builder,  testTransients,  excludeFields);	  ReflectionAppend(object,    initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    reflectUpToClass,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
240	[BUG]  [BUGGY]  ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients,  excludeFields);	  ReflectionAppend(object,    initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    reflectUpToClass,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
241	[BUG]  [BUGGY]  reflectionAppend(object,  builder,  testTransients,  excludeFields,  reflectUpToClass);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  reflectionAppend(object,  builder,  testTransients,  excludeFields,  reflectUpToClass);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	reflectionAppend(object,  builder,  testTransients,  excludeFields,  reflectUpToClass);	  reflectionAppend(object,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	2	None	replace
242	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass);  reflectionAppend(object,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass);  reflectionAppend(object,  builder,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass);  reflectionAppend(object,  builder,  testTransients,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multipleNonZeroOddNumber,    multiplierNonZeroOddNumber);    reflectionAppend(object,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
243	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Class  <?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	add	Class  <?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  if(testTransients)    {    Class    <?>    object    =    builder.getClass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	60	4	replace
244	[BUG]  [BUGGY]  Class  <?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Class  <?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Class  <?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  if(testTransients)    {    Class    <?>    object    =    builder.getClass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	60	4	replace
245	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multipleNonZeroOddNumber,    initialNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
246	[BUG]  [BUGGY]  Integer  testTransients  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Integer  testTransients  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Integer  testTransients  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);	  Integer    iConstant    =    getInitialNonZeroOddNumber(multierNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	72	None	replace
247	[BUG]  [BUGGY]  Integer  iConstant  =  getInitialNonZeroOddNumber(multierNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  cannot  find  symbol  multierNonZeroOddNumber  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Integer  iConstant  =  getInitialNonZeroOddNumber(multierNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Integer  iConstant  =  getInitialNonZeroOddNumber(multierNonZeroOddNumber,  multiplierNonZeroOddNumber);	  Integer    iConstant    =    getInitialNonZeroOddNumber(multierNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol  multierNonZeroOddNumber	72	None	replace
248	[BUG]  [BUGGY]  if(object  ==  null)  {  Class  <?>  clazz  =  builder.getClass();  Class  <?>  clazz  =  builder.getClass();  }  [CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]        IllegalArgumentException      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  if(object  ==  null)  {  Class  <?>  clazz  =  builder.getClass();  Class  <?>  clazz  =  builder.getClass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	if(object  ==  null)  {  Class  <?>  clazz  =  builder.getClass();  Class  <?>  clazz  =  builder.getClass();  }	  Class    <?>    clazz    =    builder.getClass();    Class    <?>    clazz    =    builder.getClass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	22	None	replace
249	[BUG]  [BUGGY]  if(object  ==  null)  {  Class  <?>  clazz  =  builder.getClass();  Class  <?>  clazz  =  builder.getClass();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]          IllegalArgumentException      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  if(object  ==  null)  {  Class  <?>  clazz  =  builder.getClass();  Class  <?>  clazz  =  builder.getClass();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	if(object  ==  null)  {  Class  <?>  clazz  =  builder.getClass();  Class  <?>  clazz  =  builder.getClass();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  Class    <?>    clazz    =    builder.getClass();    Class    <?>    clazz    =    builder.getClass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	22	None	replace
250	[BUG]  [BUGGY]  if(object  ==  null)  {  Class  <?>  clazz  =  builder.getClass();  Class  <?>  clazz  =  builder.getClass();  }  else  {  reflectionAppend(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  [CE]  ')'  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  if(object  ==  null)  {  Class  <?>  clazz  =  builder.getClass();  Class  <?>  clazz  =  builder.getClass();  }  else  {  reflectionAppend(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	if(object  ==  null)  {  Class  <?>  clazz  =  builder.getClass();  Class  <?>  clazz  =  builder.getClass();  }  else  {  reflectionAppend(initialNonZeroOddNumber,  multiplierNonZeroOddNumber	  Class    <?>    clazz    =    builder.getClass();    Class    <?>    clazz    =    builder.getClass();    	non-compiled	[CE]  ')'  expected	22	None	replace
251	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multipleNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multipleNonZeroOddNumber,    initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
252	[BUG]  [BUGGY]  Class  <?>  clazz  =  object.buildClass();  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Class  <?>  clazz  =  object.buildClass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Class  <?>  clazz  =  object.buildClass();	  Class    <?>    clazz    =    builder.buildClass();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
253	[BUG]  [BUGGY]  Class  <?>  clazz  =  constructer.buildClass();  [CE]  cannot  find  symbol  constructer  [FE]          IllegalArgumentException      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Class  <?>  clazz  =  constructer.buildClass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Class  <?>  clazz  =  constructer.buildClass();	  Class    <?>    clazz    =    builder.buildClass();    	non-compiled	[CE]  cannot  find  symbol  constructer	62	None	replace
254	[BUG]  [BUGGY]  Class  <?>  clazz  =  base.buildClass();  [CE]  cannot  find  symbol  base  [FE]            IllegalArgumentException      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Class  <?>  clazz  =  base.buildClass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Class  <?>  clazz  =  base.buildClass();	  Class    <?>    clazz    =    builder.buildClass();    	non-compiled	[CE]  cannot  find  symbol  base	62	None	replace
255	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  object,  multiplierNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  object,  multiplierNonZeroOddNumber);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  object,  multiplierNonZeroOddNumber);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    object);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
256	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  object,  initialNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  object,  initialNonZeroOddNumber);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  object,  initialNonZeroOddNumber);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    object);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
257	[BUG]  [BUGGY]  Integer  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Integer  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Integer  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass);	  Integer    testTransients    =    builder.computeValue(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	27	None	replace
258	[BUG]  [BUGGY]  Integer  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  testTransients);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Integer  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  testTransients);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Integer  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  testTransients);	  Integer    testTransients    =    builder.computeValue(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	27	None	replace
259	[BUG]  [BUGGY]  Integer  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Integer  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Integer  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object);	  Integer    testTransients    =    builder.computeValue(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	27	None	replace
260	[BUG]  [BUGGY]  Integer  iConstant  =  getInitialNonZeroOddNumber(multiperNonZeroOddNumber);  [CE]  cannot  find  symbol  multiperNonZeroOddNumber  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Integer  iConstant  =  getInitialNonZeroOddNumber(multiperNonZeroOddNumber);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Integer  iConstant  =  getInitialNonZeroOddNumber(multiperNonZeroOddNumber);	  Integer    iConstant    =    getInitialNonZeroOddNumber(initialNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol  multiperNonZeroOddNumber	40	None	replace
261	[BUG]  [BUGGY]  int  testTransients  =  builder.compareTo(object,  multiplierNonZeroOddNumber,  object);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  int  testTransients  =  builder.compareTo(object,  multiplierNonZeroOddNumber,  object);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	int  testTransients  =  builder.compareTo(object,  multiplierNonZeroOddNumber,  object);	  int    testTransients    =    builder.compareTo(object,    initialNonZeroOddNumber,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	26	None	replace
262	[BUG]  [BUGGY]  ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields,  null);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields,  null);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields,  null);	  ReflectionAppend(object,    initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients,    null);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
263	[BUG]  [BUGGY]  Class  <?>  clazz  =  object.build();  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Class  <?>  clazz  =  object.build();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Class  <?>  clazz  =  object.build();	  Class    <?>    clazz    =    builder.build();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
264	[BUG]  [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  builder.toIntValue();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  int  iConstant  =  multiplierNonZeroOddNumber  +  builder.toIntValue();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	int  iConstant  =  multiplierNonZeroOddNumber  +  builder.toIntValue();	  int    iConstant    =    multiplierNonZeroOddNumber    +    builder.length();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
265	[BUG]  [BUGGY]  Class  <?>  clazz  =  builder.toClass();  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Class  <?>  clazz  =  builder.toClass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Class  <?>  clazz  =  builder.toClass();	  Class    <?>    clazz    =    builder.getClass();    Class    >=?>    clazz    =    builder.getClass();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
266	[BUG]  [BUGGY]  Class  <?>  clazz  =  builder.getParent();  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Class  <?>  clazz  =  builder.getParent();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Class  <?>  clazz  =  builder.getParent();	  Class    <?>    clazz    =    builder.getClass();    Class    >=?>    clazz    =    builder.getClass();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
267	[BUG]  [BUGGY]  ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  constructer,  testTransients,  reflectUpToClass);  [CE]  cannot  find  symbol  constructer  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  constructer,  testTransients,  reflectUpToClass);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionAppend(object,  initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  constructer,  testTransients,  reflectUpToClass);	  ReflectionAppend(object,    initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients,    reflectUpToClass);    	non-compiled	[CE]  cannot  find  symbol  constructer	11	None	replace
268	[BUG]  [BUGGY]  Integer  value  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Integer  value  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Integer  value  =  getInitialNonZeroOddNumber(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);	  Integer    iConstant    =    getInitialNonZeroOddNumber(initialNonZeroOddNumber,    multierNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
269	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  object,  testTransients,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
270	[BUG]  [BUGGY]  Reflection  <?>  object  =  builder.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Reflection  <?>  object  =  builder.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Reflection  <?>  object  =  builder.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  if(testTransients)    {    Class    <?>    object    =    builder.getClass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
271	[BUG]  [BUGGY]  Reflection  <?>  testTransients  =  builder.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Reflection  <?>  testTransients  =  builder.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Reflection  <?>  testTransients  =  builder.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  if(testTransients)    {    Class    <?>    object    =    builder.getClass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
272	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyerNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplyerNonZeroOddNumber,    multiplierNonZeroOddNumber);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
273	[BUG]  [BUGGY]  int  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]            AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  int  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	int  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass);	  int    testTransients    =    builder.computeValue(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	36	None	replace
274	[BUG]  [BUGGY]  int  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]              AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  int  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	int  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields);	  int    testTransients    =    builder.computeValue(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	36	None	replace
275	[BUG]  [BUGGY]  int  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  int  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	int  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  object);	  int    testTransients    =    builder.computeValue(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	36	None	replace
276	[BUG]  [BUGGY]  int  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  testTransients);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  int  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  testTransients);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	int  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  testTransients);	  int    testTransients    =    builder.computeValue(initialNonZeroOddNumber,    multiplierNonZeroOddNumber,    testTransients);    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	36	None	replace
277	[BUG]  [BUGGY]  Integer  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1,  target);  [CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  Integer  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1,  target);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	Integer  testTransients  =  builder.computeValue(initialNonZeroOddNumber,  multiplierNonZeroOddNumber  +  1,  target);	  Integer    testTransients    =    builder.computeValue(initialNonZeroOddNumber,    multiplierNonZeroOddNumber    +    1,    testTransients);    	non-compiled	[CE]  variable  testTransients  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	56	None	replace
278	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplyNonZeroOddNumber,    multiplierNonZeroOddNumber);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
279	[BUG]  [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	ReflectionBuilder  builder  =  new  ReflectionBuilder(multiplyNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass);	  ReflectionBuilder    builder    =    new    ReflectionBuilder(multiplyNonZeroOddNumber,    multiplierNonZeroOddNumber);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
280	[BUG]  [BUGGY]  reflectionAppend(object,  initialNonZeroOddNumber,  builder,  testTransients,  excludeFields);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  reflectionAppend(object,  initialNonZeroOddNumber,  builder,  testTransients,  excludeFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	reflectionAppend(object,  initialNonZeroOddNumber,  builder,  testTransients,  excludeFields);	  reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	13	None	replace
281	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  negationFields);  [CE]  cannot  find  symbol  clazz  [FE]                  AssertionFailedError      [CONTEXT]      public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  negationFields);  [BUGGY]      Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	360	360	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  negationFields);	  reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol  clazz	13	None	replace
