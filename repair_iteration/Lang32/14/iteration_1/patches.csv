bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ||!useTransients)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  ||!useTransients)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	||!useTransients)  {  throw  new  IllegalStateException( " ");  }	      if(!useTransients)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
2	[BUG]  [BUGGY]  if(useTransients)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(useTransients)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(useTransients)  {  throw  new  IllegalStateException( " ");  }	      if(!useTransients)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
3	[BUG]  [BUGGY]  if(!useTransients)  {  throw  new  IllegalStateException( " ".equals(fieldValue));  }  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(!useTransients)  {  throw  new  IllegalStateException( " ".equals(fieldValue));  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients)  {  throw  new  IllegalStateException( " ".equals(fieldValue));  }	      if(!useTransients)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
5	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
6	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
7	[BUG]  [BUGGY]  if(useTransients)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(useTransients)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(useTransients)  {  throw  new  IllegalArgumentException( " ");  }	      if(!useTransients)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
8	[BUG]  [BUGGY]  if(!useTransients)  {  throw  new  IllegalArgumentException( " ".equals(fieldValue));  }  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(!useTransients)  {  throw  new  IllegalArgumentException( " ".equals(fieldValue));  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients)  {  throw  new  IllegalArgumentException( " ".equals(fieldValue));  }	      if(!useTransients)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
9	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	throw  new  IllegalArgumentException( " ");	      if(!useTransients)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
10	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  throw  new  IllegalAccessException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  throw  new  IllegalAccessException( " ");  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
11	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  throw  new  IllegalAccessException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  throw  new  IllegalAccessException( " ");  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
12	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  throw  new  IllegalAccessException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  throw  new  IllegalAccessException( " ");  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
13	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]      if(!useTransients)  {  throw  new  IllegalStateException(   "   ");  }  if(!useTransients)  {  throw  new  IllegalStateException(   "   ");  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	add	        if(!useTransients)    {    throw    new    IllegalStateException(   "   ");    }    if(!useTransients)  {  throw  new  IllegalStateException(   "   ");  }	  	compilable	  [FE]  IllegalStateException  	13	4	add
14	[BUG]  [BUGGY]      if(!useTransients)  {  throw  new  IllegalStateException(   "   ");  }  if(!useTransients)  {  throw  new  IllegalStateException(   "   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]      if(!useTransients)  {  throw  new  IllegalStateException(   "   ");  }  if(!useTransients)  {  throw  new  IllegalStateException(   "   ");  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	        if(!useTransients)    {    throw    new    IllegalStateException(   "   ");    }    if(!useTransients)  {  throw  new  IllegalStateException(   "   ");  }	  	compilable	  [FE]  IllegalStateException  	13	4	add
15	[BUG]  [BUGGY]      if(!useTransients)  {  throw  new  IllegalStateException(   "   ");  }  If(!useTransients)  {  throw  new  IllegalStateException(   "   ");  }  [CE]  [FE]      IllegalStateException    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]      if(!useTransients)  {  throw  new  IllegalStateException(   "   ");  }  If(!useTransients)  {  throw  new  IllegalStateException(   "   ");  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	        if(!useTransients)    {    throw    new    IllegalStateException(   "   ");    }    If(!useTransients)  {  throw  new  IllegalStateException(   "   ");  }	  	non-compiled	[CE]  	13	None	add
16	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]      if(!useTransients)  {  throw  new  IllegalArgumentException(   "   ");  }  if(!useTransients)  {  throw  new  IllegalArgumentException(   "   ");  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	add	        if(!useTransients)    {    throw    new    IllegalArgumentException(   "   ");    }    if(!useTransients)  {  throw  new  IllegalArgumentException(   "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	15	4	add
17	[BUG]  [BUGGY]      if(!useTransients)  {  throw  new  IllegalArgumentException(   "   ");  }  if(!useTransients)  {  throw  new  IllegalArgumentException(   "   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]      if(!useTransients)  {  throw  new  IllegalArgumentException(   "   ");  }  if(!useTransients)  {  throw  new  IllegalArgumentException(   "   ");  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	        if(!useTransients)    {    throw    new    IllegalArgumentException(   "   ");    }    if(!useTransients)  {  throw  new  IllegalArgumentException(   "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	15	4	add
18	[BUG]  [BUGGY]      if(!useTransients)  {  throw  new  IllegalArgumentException(   "   ");  }  If(!useTransients)  {  throw  new  IllegalArgumentException(   "   ");  }  [CE]  [FE]      IllegalArgumentException    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]      if(!useTransients)  {  throw  new  IllegalArgumentException(   "   ");  }  If(!useTransients)  {  throw  new  IllegalArgumentException(   "   ");  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	        if(!useTransients)    {    throw    new    IllegalArgumentException(   "   ");    }    If(!useTransients)  {  throw  new  IllegalArgumentException(   "   ");  }	  	non-compiled	[CE]  	15	None	add
19	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue);  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue);  }	  builder.append(fieldValue);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
20	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue);  }  else  {  throw  new  IllegalStateException( " ");  }	  builder.append(fieldValue);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
21	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(fieldValue);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
22	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Throwables.throw  new  IllegalStateException( " ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	12	None	replace
23	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('n');  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('n');  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('n');  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
24	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('[');  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('[');  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('[');  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
25	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('n');  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('n');  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('n');  }	      if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fields.length;    i++)    {    builder.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
26	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  Field[]  fields  =  clazz.getFields();  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Field[]  fields  =  clazz.getFields();	      if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fields.length;    i++)    {    builder.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
27	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('N');  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('N');  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('N');  }	      if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fields.length;    i++)    {    builder.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
28	[BUG]  [BUGGY]  Field[]  fields  =  getFields();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  Field[]  fields  =  getFields();  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Field[]  fields  =  getFields();	      if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fields.length;    i++)    {    builder.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
29	[BUG]  [BUGGY]  if(object  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(object  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(object  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	      if(fieldValue    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
30	[BUG]  [BUGGY]  if(fields  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(fields  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fields  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	      if(fieldValue    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
31	[BUG]  [BUGGY]  If(object  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  If(object  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	If(object  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	      if(fieldValue    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
32	[BUG]  [BUGGY]  if(object!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(object!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(object!=  null)  {  throw  new  IllegalStateException( " ");  }	      if(fieldValue!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
33	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(fieldValue  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue  ==  null)  {  throw  new  IllegalStateException( " ");  }	      if(fieldValue!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
34	[BUG]  [BUGGY]  If(object!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  If(object!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	If(object!=  null)  {  throw  new  IllegalStateException( " ");  }	      if(fieldValue!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	11	None	replace
35	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length();  ++i)  {  unregister(fieldValue[i]);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length();  ++i)  {  unregister(fieldValue[i]);  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  fieldValue.length();  ++i)  {  unregister(fieldValue[i]);  }	      if(!useTransients)    {    for(int    i    =    0;    i    <    fieldValue.length();    ++i)    {    unregister(fieldValue[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
36	[BUG]  [BUGGY]  if(!useTransients)  {  for(int  i  =  0;  i  <  fields.length();  ++i)  {  unregister(fieldValue[i]);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(!useTransients)  {  for(int  i  =  0;  i  <  fields.length();  ++i)  {  unregister(fieldValue[i]);  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients)  {  for(int  i  =  0;  i  <  fields.length();  ++i)  {  unregister(fieldValue[i]);  }	      if(!useTransients)    {    for(int    i    =    0;    i    <    fieldValue.length();    ++i)    {    unregister(fieldValue[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
37	[BUG]  [BUGGY]  if(!useTransients)  {  for(int  i  =  0;  i  <  fieldValue.length();  ++i)  {  unregister(fieldValue[i].getName());  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(!useTransients)  {  for(int  i  =  0;  i  <  fieldValue.length();  ++i)  {  unregister(fieldValue[i].getName());  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients)  {  for(int  i  =  0;  i  <  fieldValue.length();  ++i)  {  unregister(fieldValue[i].getName());  }	      if(!useTransients)    {    for(int    i    =    0;    i    <    fieldValue.length();    ++i)    {    unregister(fieldValue[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
38	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('n');  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('n');  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('n');  }	      if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    builder.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
39	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('n');  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('n');  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('n');  }	      if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    builder.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
40	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('N');  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('N');  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('N');  }	      if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    builder.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
41	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append('[');  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append('[');  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append('[');  }	      if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length;    i++)    {    builder.append('[');    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
42	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('[');  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('[');  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('[');  }	      if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length;    i++)    {    builder.append('[');    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
43	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  object.length;  i++)  {  builder.append('[');  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  object.length;  i++)  {  builder.append('[');  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  object.length;  i++)  {  builder.append('[');  }	      if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length;    i++)    {    builder.append('[');    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
44	[BUG]  [BUGGY]  if(!useTransients)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  unregister(fieldValue[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(!useTransients)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  unregister(fieldValue[i]);  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  unregister(fieldValue[i]);  }	      if(!useTransients)    {    for(int    i    =    0;    i    <    fieldValue.length;    ++i)    {    unregister(fieldValue[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
45	[BUG]  [BUGGY]  Integer[]  fields  =  clazz.getConstants();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  unregister(fieldValue[i]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  Integer[]  fields  =  clazz.getConstants();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  unregister(fieldValue[i]);  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Integer[]  fields  =  clazz.getConstants();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  unregister(fieldValue[i]);  }	      if(!useTransients)    {    for(int    i    =    0;    i    <    fieldValue.length;    ++i)    {    unregister(fieldValue[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
46	[BUG]  [BUGGY]  if(!useTransients)  {  for(int  i  =  0;  i  <  fieldValue.length;  ++i)  {  unregister(fieldValue[i].getName());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(!useTransients)  {  for(int  i  =  0;  i  <  fieldValue.length;  ++i)  {  unregister(fieldValue[i].getName());  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients)  {  for(int  i  =  0;  i  <  fieldValue.length;  ++i)  {  unregister(fieldValue[i].getName());  }	      if(!useTransients)    {    for(int    i    =    0;    i    <    fieldValue.length;    ++i)    {    unregister(fieldValue[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
47	[BUG]  [BUGGY]  ||(fieldValue!=  null  &&  fieldValue.equals( " ")))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  ||(fieldValue!=  null  &&  fieldValue.equals( " ")))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	||(fieldValue!=  null  &&  fieldValue.equals( " ")))  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldValue!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
48	[BUG]  [BUGGY]  ||(fieldValue!=  null  &&  fieldValue.isEmpty()))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  ||(fieldValue!=  null  &&  fieldValue.isEmpty()))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	||(fieldValue!=  null  &&  fieldValue.isEmpty()))  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldValue!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
49	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append('n');  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append('n');  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append('n');  }	      if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length;    i++)    {    builder.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
50	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append('N');  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append('N');  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append('N');  }	      if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length;    i++)    {    builder.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
51	[BUG]  [BUGGY]  if(!useTransients)  {  builder.append(excludeFields[iConstant]);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(!useTransients)  {  builder.append(excludeFields[iConstant]);  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients)  {  builder.append(excludeFields[iConstant]);  }	      if(!useTransients)    {    builder.append(fieldValue);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
52	[BUG]  [BUGGY]  builder.append(excludeFields[iConstant]);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  builder.append(excludeFields[iConstant]);  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	builder.append(excludeFields[iConstant]);	      if(!useTransients)    {    builder.append(fieldValue);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
53	[BUG]  [BUGGY]  Builder.append(excludeFields[iConstant]);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  Builder.append(excludeFields[iConstant]);  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Builder.append(excludeFields[iConstant]);	      if(!useTransients)    {    builder.append(fieldValue);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
54	[BUG]  [BUGGY]  if(!useTransients)  {  builder.append(excludeFields[iTotal]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(!useTransients)  {  builder.append(excludeFields[iTotal]);  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients)  {  builder.append(excludeFields[iTotal]);  }	      if(!useTransients)    {    builder.append(fieldValue);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
55	[BUG]  [BUGGY]  if(!useTransients  ||  excludeFields.length  ==  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(!useTransients  ||  excludeFields.length  ==  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients  ||  excludeFields.length  ==  0)  {  throw  new  IllegalStateException( " ");  }	      if(!useTransients)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
56	[BUG]  [BUGGY]  if(fields!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(fields!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fields!=  null)  {  throw  new  IllegalStateException( " ");  }	      if(fieldValue!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
57	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append('[');  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append('[');  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append('[');  }	      if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length;    i++)    {    builder.append('[');    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
58	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fields.length();  ++i)  {  unregister(fieldValue[i]);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  for(int  i  =  0;  i  <  fields.length();  ++i)  {  unregister(fieldValue[i]);  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  fields.length();  ++i)  {  unregister(fieldValue[i]);  }	      if(!useTransients)    {    for(int    i    =    0;    i    <    fieldValue.length();    ++i)    {    unregister(fieldValue[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
59	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append( ", ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append( ", ");  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append( ", ");  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
60	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append('n');  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append('n');  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append('n');  }	      if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length;    i++)    {    builder.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
61	[BUG]  [BUGGY]  if(!useTransients)  {  builder.append(object);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(!useTransients)  {  builder.append(object);  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients)  {  builder.append(object);  }	      if(!useTransients)    {    builder.append(fieldValue);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
62	[BUG]  [BUGGY]  if(!useTransients)  {  builder.append(excludeFields[fieldValue]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(!useTransients)  {  builder.append(excludeFields[fieldValue]);  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients)  {  builder.append(excludeFields[fieldValue]);  }	      if(!useTransients)    {    builder.append(fieldValue);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
63	[BUG]  [BUGGY]  if(!useTransients)  {  builder.append(excludeFields[0]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(!useTransients)  {  builder.append(excludeFields[0]);  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients)  {  builder.append(excludeFields[0]);  }	      if(!useTransients)    {    builder.append(fieldValue);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
64	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue);  }  else  {  unregister(object);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue);  }  else  {  unregister(object);  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue);  }  else  {  unregister(object);  }	  builder.append(fieldValue);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
65	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue);  }  else  {  return;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue);  }  else  {  return;  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue);  }  else  {  return;  }	  builder.append(fieldValue);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
66	[BUG]  [BUGGY]  if(!useTransients  ||  excludeFields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(!useTransients  ||  excludeFields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients  ||  excludeFields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(!useTransients)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
67	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length;  ++i)  {  unregister(fieldValue[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length;  ++i)  {  unregister(fieldValue[i]);  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  fieldValue.length;  ++i)  {  unregister(fieldValue[i]);  }	      if(!useTransients)    {    for(int    i    =    0;    i    <    fieldValue.length;    ++i)    {    unregister(fieldValue[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
68	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  clazz.getName());  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  throw  new  IllegalStateException( " "  +  clazz.getName());  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	throw  new  IllegalStateException( " "  +  clazz.getName());	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
69	[BUG]  [BUGGY]  if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('n');  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('n');  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('n');  }	      if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fields.length;    i++)    {    builder.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
70	[BUG]  [BUGGY]  if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('N');  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('N');  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('N');  }	      if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fields.length;    i++)    {    builder.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
71	[BUG]  [BUGGY]  if(!useTransients)  {  for(int  i  =  0;  i  <  fieldValue.size();  ++i)  {  builder.append( ", ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(!useTransients)  {  for(int  i  =  0;  i  <  fieldValue.size();  ++i)  {  builder.append( ", ");  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients)  {  for(int  i  =  0;  i  <  fieldValue.size();  ++i)  {  builder.append( ", ");  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
72	[BUG]  [BUGGY]  if(!useTransients)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  builder.append( ", ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(!useTransients)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  builder.append( ", ");  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  builder.append( ", ");  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
73	[BUG]  [BUGGY]  if(!useTransients)  {  for(int  i  =  0;  i  <  fieldValue.size();  ++i)  {  builder.append('n');  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(!useTransients)  {  for(int  i  =  0;  i  <  fieldValue.size();  ++i)  {  builder.append('n');  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients)  {  for(int  i  =  0;  i  <  fieldValue.size();  ++i)  {  builder.append('n');  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
74	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue);  }  else  {  unregister(fieldValue);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(fieldValue!=  null)  {  builder.append(fieldValue);  }  else  {  unregister(fieldValue);  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue!=  null)  {  builder.append(fieldValue);  }  else  {  unregister(fieldValue);  }	  builder.append(fieldValue);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
75	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append( "[ ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append( "[ ");  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append( "[ ");  }	      if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length;    i++)    {    builder.append('[');    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
76	[BUG]  [BUGGY]  if(baseValue  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(baseValue  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(baseValue  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	      if(fieldValue    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
77	[BUG]  [BUGGY]  if(!useTransients)  {  builder.append(field);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(!useTransients)  {  builder.append(field);  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients)  {  builder.append(field);  }	      if(!useTransients)    {    builder.append(fieldValue);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
78	[BUG]  [BUGGY]  if(!useTransients)  {  builder.append('n');  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(!useTransients)  {  builder.append('n');  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients)  {  builder.append('n');  }	      if(!useTransients)    {    builder.append(fieldValue);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
79	[BUG]  [BUGGY]  if(!useTransients  &&  excludeFields.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(!useTransients  &&  excludeFields.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients  &&  excludeFields.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(!useTransients)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
80	[BUG]  [BUGGY]  if(!useTransients  ||  excludeFields.length  <  2)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(!useTransients  ||  excludeFields.length  <  2)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients  ||  excludeFields.length  <  2)  {  throw  new  IllegalArgumentException( " ");  }	      if(!useTransients)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
81	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Field[]  fields  =  clazz.getDeclaredFields();	      if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fields.length;    i++)    {    builder.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
82	[BUG]  [BUGGY]  if(!useTransients)  {  for(int  i  =  0;  i  <  object.length();  ++i)  {  unregister(fieldValue[i]);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(!useTransients)  {  for(int  i  =  0;  i  <  object.length();  ++i)  {  unregister(fieldValue[i]);  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients)  {  for(int  i  =  0;  i  <  object.length();  ++i)  {  unregister(fieldValue[i]);  }	      if(!useTransients)    {    for(int    i    =    0;    i    <    fieldValue.length();    ++i)    {    unregister(fieldValue[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
83	[BUG]  [BUGGY]  if(!useTransients  &&  excludeFields.length  >  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(!useTransients  &&  excludeFields.length  >  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients  &&  excludeFields.length  >  0)  {  throw  new  IllegalStateException( " ");  }	      if(!useTransients)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
84	[BUG]  [BUGGY]  if(!useTransients  ||  excludeFields.length  <  2)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(!useTransients  ||  excludeFields.length  <  2)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients  ||  excludeFields.length  <  2)  {  throw  new  IllegalStateException( " ");  }	      if(!useTransients)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
85	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  object.length;  i++)  {  builder.append('n');  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  object.length;  i++)  {  builder.append('n');  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  object.length;  i++)  {  builder.append('n');  }	      if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length;    i++)    {    builder.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
86	[BUG]  [BUGGY]  int  fieldValueLength  =  fieldValue.length;  unregister(fieldValueLength);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  int  fieldValueLength  =  fieldValue.length;  unregister(fieldValueLength);  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	int  fieldValueLength  =  fieldValue.length;  unregister(fieldValueLength);	      if(!useTransients)    {    for(int    i    =    0;    i    <    fieldValue.length;    ++i)    {    unregister(fieldValue[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
87	[BUG]  [BUGGY]  if(baseValue!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(baseValue!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(baseValue!=  null)  {  throw  new  IllegalStateException( " ");  }	      if(fieldValue!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
88	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  builder.append('n');  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  builder.append('n');  }  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  builder.append('n');  }	      if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    builder.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
89	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {  unregister(object);    [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  throw  new  IllegalStateException( " ");  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
