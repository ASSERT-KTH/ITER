bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length  -  1;  i++)  {  builder.append('n');  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length  -  1;  i++)  {  builder.append('n');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  fieldValue.length  -  1;  i++)  {  builder.append('n');  }	  for(int    i    =    0;    i    <    fieldValue.length;    i++)    {    builder.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
2	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length  -  2;  i++)  {  builder.append('n');  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length  -  2;  i++)  {  builder.append('n');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  fieldValue.length  -  2;  i++)  {  builder.append('n');  }	  for(int    i    =    0;    i    <    fieldValue.length;    i++)    {    builder.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
3	[BUG]  [BUGGY]  int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append('n');  }  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append('n');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append('n');  }	  for(int    i    =    0;    i    <    fieldValue.length;    i++)    {    builder.append('n');    }    	non-compiled	[CE]  >  expected	49	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append('N');  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append('N');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append('N');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length;    i++)    {    builder.append('N');    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
5	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('N');  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('N');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('N');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length;    i++)    {    builder.append('N');    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
6	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('N');  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('N');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('N');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length;    i++)    {    builder.append('N');    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
7	[BUG]  [BUGGY]  builder.append(excludeFields[iTotal]);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  builder.append(excludeFields[iTotal]);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	builder.append(excludeFields[iTotal]);	  builder.append(excludeFields[iConstant]);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
8	[BUG]  [BUGGY]  builder.append(fieldValue[iConstant]);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  builder.append(fieldValue[iConstant]);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	builder.append(fieldValue[iConstant]);	  builder.append(excludeFields[iConstant]);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
9	[BUG]  [BUGGY]  builder.append(object[iConstant]);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  builder.append(object[iConstant]);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	builder.append(object[iConstant]);	  builder.append(excludeFields[iConstant]);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
10	[BUG]  [BUGGY]  builder.append(excludeFields[iConstant  +  1]);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  builder.append(excludeFields[iConstant  +  1]);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	builder.append(excludeFields[iConstant  +  1]);	  builder.append(excludeFields[iConstant]);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
11	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append( ", ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append( ", ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append( ", ");  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length;    i++)    {    builder.append(   ",   ");    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
12	[BUG]  [BUGGY]  if(useTransients)  {  builder.append('n');  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(useTransients)  {  builder.append('n');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(useTransients)  {  builder.append('n');  }	  if(!useTransients)    {    builder.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
13	[BUG]  [BUGGY]  Builder.append('n');  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  Builder.append('n');  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Builder.append('n');	  if(!useTransients)    {    builder.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
14	[BUG]  [BUGGY]  if(isConstructor())  {  if(!useTransients)  {  builder.append('n');  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(isConstructor())  {  if(!useTransients)  {  builder.append('n');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(isConstructor())  {  if(!useTransients)  {  builder.append('n');  }	  if(!useTransients)    {    builder.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
15	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  clazz.getName());  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  clazz.getName());  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Throwables.throw  new  IllegalStateException( " "  +  clazz.getName());	  throw    new    IllegalStateException(   "   "    +    clazz.getName());    	non-compiled	[CE]  <identifier>  expected	68	None	replace
16	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  fieldValue.getName());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  throw  new  IllegalStateException( " "  +  fieldValue.getName());  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	throw  new  IllegalStateException( " "  +  fieldValue.getName());	  throw    new    IllegalStateException(   "   "    +    clazz.getName());    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
17	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ")  +  clazz.getName();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  throw  new  IllegalStateException( " ")  +  clazz.getName();  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	throw  new  IllegalStateException( " ")  +  clazz.getName();	  throw    new    IllegalStateException(   "   "    +    clazz.getName());    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
18	[BUG]  [BUGGY]  Class  <?>[]  fields  =  clazz.getDeclaredFields();  [CE]  illegal  start  of  expression  [FE]          IllegalStateException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  Class  <?>[]  fields  =  clazz.getDeclaredFields();  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Class  <?>[]  fields  =  clazz.getDeclaredFields();	          if(!useTransients)    {    throw    new    IllegalStateException(       "       ");    }    If(!useTransients)    {    throw    new    IllegalStateException(       "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
19	[BUG]  [BUGGY]  if(!useTransients)  {  throw  new  IllegalStateException( " ".equals(fieldValue);  }  [CE]  [FE]            IllegalStateException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients)  {  throw  new  IllegalStateException( " ".equals(fieldValue);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients)  {  throw  new  IllegalStateException( " ".equals(fieldValue);  }	          if(!useTransients)    {    throw    new    IllegalStateException(       "       ");    }    If(!useTransients)    {    throw    new    IllegalStateException(       "       ");    }    	non-compiled	[CE]  	15	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('[');  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('[');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('[');  }	  for(int    i    =    0;    i    <    fieldValue.length;    i++)    {    builder.append('[');    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
21	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length  -  1;  i++)  {  builder.append('[');  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length  -  1;  i++)  {  builder.append('[');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  fieldValue.length  -  1;  i++)  {  builder.append('[');  }	  for(int    i    =    0;    i    <    fieldValue.length;    i++)    {    builder.append('[');    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
22	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length  -  2;  i++)  {  builder.append('[');  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length  -  2;  i++)  {  builder.append('[');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  fieldValue.length  -  2;  i++)  {  builder.append('[');  }	  for(int    i    =    0;    i    <    fieldValue.length;    i++)    {    builder.append('[');    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
23	[BUG]  [BUGGY]  int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append('[');  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append('[');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append('[');  }	  for(int    i    =    0;    i    <    fieldValue.length;    i++)    {    builder.append('[');    }    	non-compiled	[CE]  >  expected	41	None	replace
24	[BUG]  [BUGGY]  if(!useTransients)  {  throw  new  IllegalStateException( " ").equals(fieldValue);  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients)  {  throw  new  IllegalStateException( " ").equals(fieldValue);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients)  {  throw  new  IllegalStateException( " ").equals(fieldValue);  }	  if(!useTransients)    {    throw    new    IllegalStateException(   "   ".equals(fieldValue));    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
25	[BUG]  [BUGGY]  if(!useTransients)  {  throw  new  IllegalStateException( " "  +  fieldValue);  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients)  {  throw  new  IllegalStateException( " "  +  fieldValue);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients)  {  throw  new  IllegalStateException( " "  +  fieldValue);  }	  if(!useTransients)    {    throw    new    IllegalStateException(   "   ".equals(fieldValue));    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
26	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fields.length  -  1;  i++)  {  builder.append('N');  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  for(int  i  =  0;  i  <  fields.length  -  1;  i++)  {  builder.append('N');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  fields.length  -  1;  i++)  {  builder.append('N');  }	  for(int    i    =    0;    i    <    fields.length;    i++)    {    builder.append('N');    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
27	[BUG]  [BUGGY]  int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('N');  }  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('N');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('N');  }	  for(int    i    =    0;    i    <    fields.length;    i++)    {    builder.append('N');    }    	non-compiled	[CE]  >  expected	27	None	replace
28	[BUG]  [BUGGY]  if(!useTransients  &&  excludeFields.length  >  1)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients  &&  excludeFields.length  >  1)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients  &&  excludeFields.length  >  1)  {  throw  new  IllegalArgumentException( " ");  }	  if(!useTransients    &&    excludeFields.length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
29	[BUG]  [BUGGY]  if(!useTransients  ||  excludeFields.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients  ||  excludeFields.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients  ||  excludeFields.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(!useTransients    &&    excludeFields.length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
30	[BUG]  [BUGGY]  if(!useTransients  &&  excludeFields!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients  &&  excludeFields!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients  &&  excludeFields!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(!useTransients    &&    excludeFields.length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
31	[BUG]  [BUGGY]  ||(fieldValue  ==  null  &&  fieldValue.equals( " ")))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  ||(fieldValue  ==  null  &&  fieldValue.equals( " ")))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	||(fieldValue  ==  null  &&  fieldValue.equals( " ")))  {  throw  new  IllegalArgumentException( " ");  }	  if(fields    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
32	[BUG]  [BUGGY]  ||(fieldValue  ==  null  &&  fieldValue.isEmpty()))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  ||(fieldValue  ==  null  &&  fieldValue.isEmpty()))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	||(fieldValue  ==  null  &&  fieldValue.isEmpty()))  {  throw  new  IllegalArgumentException( " ");  }	  if(fields    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
33	[BUG]  [BUGGY]  ||(fieldValue  ==  null  &&  fieldValue.isArray()))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  ||(fieldValue  ==  null  &&  fieldValue.isArray()))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	||(fieldValue  ==  null  &&  fieldValue.isArray()))  {  throw  new  IllegalArgumentException( " ");  }	  if(fields    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
34	[BUG]  [BUGGY]  ||(fieldValue  ==  null  &&  fieldValue.length()  >  0))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  ||(fieldValue  ==  null  &&  fieldValue.length()  >  0))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	||(fieldValue  ==  null  &&  fieldValue.length()  >  0))  {  throw  new  IllegalArgumentException( " ");  }	  if(fields    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
35	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue  ==  null)  {  builder.append(fieldValue);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldValue!=    null)    {    builder.append(fieldValue);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
36	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue);  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue  ==  null)  {  builder.append(fieldValue);  }	  if(fieldValue!=    null)    {    builder.append(fieldValue);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
37	[BUG]  [BUGGY]  if(useTransients)  {  builder.append(excludeFields[0]);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(useTransients)  {  builder.append(excludeFields[0]);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(useTransients)  {  builder.append(excludeFields[0]);  }	  if(!useTransients)    {    builder.append(excludeFields[0]);    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
38	[BUG]  [BUGGY]  Builder.append(excludeFields[0]);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  Builder.append(excludeFields[0]);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Builder.append(excludeFields[0]);	  if(!useTransients)    {    builder.append(excludeFields[0]);    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
39	[BUG]  [BUGGY]  builder.append(excludeFields[0]);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  builder.append(excludeFields[0]);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	builder.append(excludeFields[0]);	  if(!useTransients)    {    builder.append(excludeFields[0]);    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
40	[BUG]  [BUGGY]  int  i  =  0;  i  <  fields.length();  ++i)  {  unregister(fieldValue[i]);  }  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  int  i  =  0;  i  <  fields.length();  ++i)  {  unregister(fieldValue[i]);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	int  i  =  0;  i  <  fields.length();  ++i)  {  unregister(fieldValue[i]);  }	  for(int    i    =    0;    i    <    fields.length();    ++i)    {    unregister(fieldValue[i]);    }    	non-compiled	[CE]  >  expected	58	None	replace
41	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fields.length();  ++i)  {  unregister(fieldValue[i],  useTransients);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  for(int  i  =  0;  i  <  fields.length();  ++i)  {  unregister(fieldValue[i],  useTransients);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  fields.length();  ++i)  {  unregister(fieldValue[i],  useTransients);  }	  for(int    i    =    0;    i    <    fields.length();    ++i)    {    unregister(fieldValue[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
42	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Throwables.throw  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	9	None	replace
43	[BUG]  [BUGGY]  if(useTransients  ||  excludeFields  ==  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]          IllegalStateException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(useTransients  ||  excludeFields  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(useTransients  ||  excludeFields  ==  null)  {  throw  new  IllegalStateException( " ");  }	  if(useTransients)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
44	[BUG]  [BUGGY]  if(useTransients  ||  excludeFields!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(useTransients  ||  excludeFields!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(useTransients  ||  excludeFields!=  null)  {  throw  new  IllegalStateException( " ");  }	  if(useTransients)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
45	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('n');  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('n');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('n');  }	  if(fieldValue    ==    null)    {    for(int    i    =    0;    i    <    fieldValue.length;    i++)    {    builder.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
46	[BUG]  [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  throw  new  IllegalAccessException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(object!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  throw  new  IllegalAccessException( " ");  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    object.length();    i++)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
47	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  object.length();  i++)  {  throw  new  IllegalAccessException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  for(int  i  =  0;  i  <  object.length();  i++)  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  object.length();  i++)  {  throw  new  IllegalAccessException( " ");  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    object.length();    i++)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
48	[BUG]  [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  field.length();  i++)  {  throw  new  IllegalAccessException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  field.length();  i++)  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(object!=  null)  {  for(int  i  =  0;  i  <  field.length();  i++)  {  throw  new  IllegalAccessException( " ");  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    object.length();    i++)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
49	[BUG]  [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  throw  new  IllegalAccessException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(object!=  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  throw  new  IllegalAccessException( " ");  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    object.length();    i++)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
50	[BUG]  [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append('[');  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append('[');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(object!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append('[');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    object.length;    i++)    {    builder.append('[');    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
51	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  object.length;  i++)  {  builder.append('[');  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  for(int  i  =  0;  i  <  object.length;  i++)  {  builder.append('[');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  object.length;  i++)  {  builder.append('[');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    object.length;    i++)    {    builder.append('[');    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
52	[BUG]  [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  field.length;  i++)  {  builder.append('[');  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  field.length;  i++)  {  builder.append('[');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(object!=  null)  {  for(int  i  =  0;  i  <  field.length;  i++)  {  builder.append('[');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    object.length;    i++)    {    builder.append('[');    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
53	[BUG]  [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  object.length;  i++)  {  builder.append('[');  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  object.length;  i++)  {  builder.append('[');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(object!=  null)  {  for(int  i  =  0;  i  <  object.length;  i++)  {  builder.append('[');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    object.length;    i++)    {    builder.append('[');    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
54	[BUG]  [BUGGY]  if(!useTransients  &&  excludeFields.length  <  2)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]          IllegalStateException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients  &&  excludeFields.length  <  2)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients  &&  excludeFields.length  <  2)  {  throw  new  IllegalStateException( " ");  }	  if(!useTransients    ||    excludeFields.length    <    2)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
55	[BUG]  [BUGGY]  if(!useTransients  ||  excludeFields.length  <  1)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients  ||  excludeFields.length  <  1)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients  ||  excludeFields.length  <  1)  {  throw  new  IllegalStateException( " ");  }	  if(!useTransients    ||    excludeFields.length    <    2)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
56	[BUG]  [BUGGY]  if(useTransients)  {  throw  new  IllegalArgumentException( " ".equals(fieldValue));  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(useTransients)  {  throw  new  IllegalArgumentException( " ".equals(fieldValue));  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(useTransients)  {  throw  new  IllegalArgumentException( " ".equals(fieldValue));  }	  if(useTransients)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
57	[BUG]  [BUGGY]  if(!useTransients)  {  throw  new  IllegalArgumentException( " ").equals(fieldValue);  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients)  {  throw  new  IllegalArgumentException( " ").equals(fieldValue);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients)  {  throw  new  IllegalArgumentException( " ").equals(fieldValue);  }	  if(!useTransients)    {    throw    new    IllegalArgumentException(   "   ".equals(fieldValue));    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
58	[BUG]  [BUGGY]  if(!useTransients)  {  throw  new  IllegalArgumentException( " "  +  fieldValue);  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients)  {  throw  new  IllegalArgumentException( " "  +  fieldValue);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients)  {  throw  new  IllegalArgumentException( " "  +  fieldValue);  }	  if(!useTransients)    {    throw    new    IllegalArgumentException(   "   ".equals(fieldValue));    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
59	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('[');  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('[');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('[');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
60	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('[');  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('[');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('[');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
61	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  builder.append('[');  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  builder.append('[');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  builder.append('[');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
62	[BUG]  [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append('n');  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append('n');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(object!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append('n');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    object.length;    i++)    {    builder.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
63	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  object.length;  i++)  {  builder.append('n');  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  for(int  i  =  0;  i  <  object.length;  i++)  {  builder.append('n');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  object.length;  i++)  {  builder.append('n');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    object.length;    i++)    {    builder.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
64	[BUG]  [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  field.length;  i++)  {  builder.append('n');  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  field.length;  i++)  {  builder.append('n');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(object!=  null)  {  for(int  i  =  0;  i  <  field.length;  i++)  {  builder.append('n');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    object.length;    i++)    {    builder.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
65	[BUG]  [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  object.length;  i++)  {  builder.append('n');  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  object.length;  i++)  {  builder.append('n');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(object!=  null)  {  for(int  i  =  0;  i  <  object.length;  i++)  {  builder.append('n');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    object.length;    i++)    {    builder.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
66	[BUG]  [BUGGY]  if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('[');  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('[');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('[');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fields.length;    i++)    {    builder.append('[');    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
67	[BUG]  [BUGGY]  if(fields!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append('[');  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fields!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append('[');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fields!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append('[');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fields.length;    i++)    {    builder.append('[');    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
68	[BUG]  [BUGGY]  if(fields!=  null)  {  for(int  i  =  0;  i  <  field.length;  i++)  {  builder.append('[');  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fields!=  null)  {  for(int  i  =  0;  i  <  field.length;  i++)  {  builder.append('[');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fields!=  null)  {  for(int  i  =  0;  i  <  field.length;  i++)  {  builder.append('[');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fields.length;    i++)    {    builder.append('[');    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
69	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  fieldValue.length();  ++i)  {  unregister(fieldValue[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  for(int  i  =  1;  i  <  fieldValue.length();  ++i)  {  unregister(fieldValue[i]);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  1;  i  <  fieldValue.length();  ++i)  {  unregister(fieldValue[i]);  }	  for(int    i    =    0;    i    <    fieldValue.length();    ++i)    {    unregister(fieldValue[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
70	[BUG]  [BUGGY]  int  i  =  0;  i  <  fieldValue.length();  ++i)  {  unregister(fieldValue[i]);  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  int  i  =  0;  i  <  fieldValue.length();  ++i)  {  unregister(fieldValue[i]);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	int  i  =  0;  i  <  fieldValue.length();  ++i)  {  unregister(fieldValue[i]);  }	  for(int    i    =    0;    i    <    fieldValue.length();    ++i)    {    unregister(fieldValue[i]);    }    	non-compiled	[CE]  >  expected	35	None	replace
71	[BUG]  [BUGGY]  int[]  fields  =  clazz.getConstants();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  unregister(fieldValue[i]);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  int[]  fields  =  clazz.getConstants();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  unregister(fieldValue[i]);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	int[]  fields  =  clazz.getConstants();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  unregister(fieldValue[i]);  }	  Integer[]    fields    =    clazz.getConstants();    for(int    i    =    0;    i    <    fields.length;    ++i)    {    unregister(fieldValue[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
72	[BUG]  [BUGGY]  Integer[]  fields  =  clazz.getDeclaredFields();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  unregister(fieldValue[i]);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  Integer[]  fields  =  clazz.getDeclaredFields();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  unregister(fieldValue[i]);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Integer[]  fields  =  clazz.getDeclaredFields();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  unregister(fieldValue[i]);  }	  Integer[]    fields    =    clazz.getConstants();    for(int    i    =    0;    i    <    fields.length;    ++i)    {    unregister(fieldValue[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
73	[BUG]  [BUGGY]  String[]  fields  =  clazz.getConstants();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  unregister(fieldValue[i]);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  String[]  fields  =  clazz.getConstants();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  unregister(fieldValue[i]);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	String[]  fields  =  clazz.getConstants();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  unregister(fieldValue[i]);  }	  Integer[]    fields    =    clazz.getConstants();    for(int    i    =    0;    i    <    fields.length;    ++i)    {    unregister(fieldValue[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
74	[BUG]  [BUGGY]  if(useTransients)  {  builder.append(excludeFields[fieldValue]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(useTransients)  {  builder.append(excludeFields[fieldValue]);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(useTransients)  {  builder.append(excludeFields[fieldValue]);  }	  if(!useTransients)    {    builder.append(excludeFields[fieldValue]);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
75	[BUG]  [BUGGY]  Builder.append(excludeFields[fieldValue]);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  Builder.append(excludeFields[fieldValue]);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Builder.append(excludeFields[fieldValue]);	  if(!useTransients)    {    builder.append(excludeFields[fieldValue]);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
76	[BUG]  [BUGGY]  if(isConstructor())  {  if(!useTransients)  {  builder.append(excludeFields[fieldValue]);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(isConstructor())  {  if(!useTransients)  {  builder.append(excludeFields[fieldValue]);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(isConstructor())  {  if(!useTransients)  {  builder.append(excludeFields[fieldValue]);  }	  if(!useTransients)    {    builder.append(excludeFields[fieldValue]);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
77	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(fieldValue));  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(fieldValue));  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Throwables.throw  new  IllegalStateException( " ".equals(fieldValue));	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	22	None	replace
78	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(fieldValue)?  null  :  fieldValue);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(fieldValue)?  null  :  fieldValue);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Throwables.throw  new  IllegalStateException( " ".equals(fieldValue)?  null  :  fieldValue);	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	22	None	replace
79	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]          if(!useTransients)    {    throw    new    IllegalStateException(     "     ");    }    if(!useTransients)  {  throw  new  IllegalStateException(     "     ");  }  if(!useTransients)  {  throw  new  IllegalStateException(   "   ");  }  if(!useTransients)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	add	                if(!useTransients)        {        throw        new        IllegalStateException(       "       ");        }        if(!useTransients)    {    throw    new    IllegalStateException(       "       ");    }    if(!useTransients)  {  throw  new  IllegalStateException(   "   ");  }  if(!useTransients)  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	13	4	add
80	[BUG]  [BUGGY]          if(!useTransients)    {    throw    new    IllegalStateException(     "     ");    }    if(!useTransients)  {  throw  new  IllegalStateException(     "     ");  }  if(!useTransients)  {  throw  new  IllegalStateException(   "   ");  }  if(!useTransients)  {  throw  new  IllegalStateException( "   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]          if(!useTransients)    {    throw    new    IllegalStateException(     "     ");    }    if(!useTransients)  {  throw  new  IllegalStateException(     "     ");  }  if(!useTransients)  {  throw  new  IllegalStateException(   "   ");  }  if(!useTransients)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	                if(!useTransients)        {        throw        new        IllegalStateException(       "       ");        }        if(!useTransients)    {    throw    new    IllegalStateException(       "       ");    }    if(!useTransients)  {  throw  new  IllegalStateException(   "   ");  }  if(!useTransients)  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	13	4	add
81	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]          if(!useTransients)    {    throw    new    IllegalStateException(     "     ");    }    if(!useTransients)  {  throw  new  IllegalStateException(     "     ");  }  if(!useTransients)  {  throw  new  IllegalStateException( "   ");  }  if(!useTransients)  {  throw  new  IllegalStateException( "   ");  }  if(!useTransients)  {  throw  new  IllegalStateException(   "   ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	add	                if(!useTransients)        {        throw        new        IllegalStateException(       "       ");        }        if(!useTransients)    {    throw    new    IllegalStateException(       "       ");    }    if(!useTransients)  {  throw  new  IllegalStateException( "   ");  }  if(!useTransients)  {  throw  new  IllegalStateException( "   ");  }  if(!useTransients)  {  throw  new  IllegalStateException(   "   ");  }	  	compilable	  [FE]  IllegalStateException  	13	4	add
82	[BUG]  [BUGGY]          if(!useTransients)    {    throw    new    IllegalStateException(     "     ");    }    if(!useTransients)  {  throw  new  IllegalStateException(     "     ");  }  if(!useTransients)  {  throw  new  IllegalStateException( "   ");  }  if(!useTransients)  {  throw  new  IllegalStateException( "   ");  }  if(!useTransients)  {  throw  new  IllegalStateException(   "   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]          if(!useTransients)    {    throw    new    IllegalStateException(     "     ");    }    if(!useTransients)  {  throw  new  IllegalStateException(     "     ");  }  if(!useTransients)  {  throw  new  IllegalStateException( "   ");  }  if(!useTransients)  {  throw  new  IllegalStateException( "   ");  }  if(!useTransients)  {  throw  new  IllegalStateException(   "   ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	                if(!useTransients)        {        throw        new        IllegalStateException(       "       ");        }        if(!useTransients)    {    throw    new    IllegalStateException(       "       ");    }    if(!useTransients)  {  throw  new  IllegalStateException( "   ");  }  if(!useTransients)  {  throw  new  IllegalStateException( "   ");  }  if(!useTransients)  {  throw  new  IllegalStateException(   "   ");  }	  	compilable	  [FE]  IllegalStateException  	13	4	add
83	[BUG]  [BUGGY]  if(!useTransients)  {  throw  new  IllegalArgumentException( " ".equals(fieldValue);  }  [CE]  [FE]    IllegalArgumentException    [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients)  {  throw  new  IllegalArgumentException( " ".equals(fieldValue);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients)  {  throw  new  IllegalArgumentException( " ".equals(fieldValue);  }	          if(!useTransients)    {    throw    new    IllegalArgumentException(       "       ");    }    if(!useTransients)    {    throw    new    IllegalArgumentException(       "       ");    }    	non-compiled	[CE]  	17	None	replace
84	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  throw  new  IllegalStateException( " ");  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
85	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  throw  new  IllegalStateException( " ");  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
86	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  throw  new  IllegalStateException( " ");  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
87	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length();  ++i)  {  unregister(fieldValue[i].getName());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length();  ++i)  {  unregister(fieldValue[i].getName());  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  fieldValue.length();  ++i)  {  unregister(fieldValue[i].getName());  }	  if(!useTransients)    {    for(int    i    =    0;    i    <    fieldValue.length();    ++i)    {    unregister(fieldValue[i].getName());    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
88	[BUG]  [BUGGY]  if(!useTransients)  {  for(int  i  =  0;  i  <  fields.length();  ++i)  {  unregister(fieldValue[i].getName());  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients)  {  for(int  i  =  0;  i  <  fields.length();  ++i)  {  unregister(fieldValue[i].getName());  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients)  {  for(int  i  =  0;  i  <  fields.length();  ++i)  {  unregister(fieldValue[i].getName());  }	  if(!useTransients)    {    for(int    i    =    0;    i    <    fieldValue.length();    ++i)    {    unregister(fieldValue[i].getName());    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
89	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue);  }  else  {  return;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue);  }  else  {  return;  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue  ==  null)  {  builder.append(fieldValue);  }  else  {  return;  }	  if(fieldValue!=    null)    {    builder.append(fieldValue);    }    else    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
90	[BUG]  [BUGGY]  Field[]  fields  =  getFields().toArray(new  Field[fields.size()  ]);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  Field[]  fields  =  getFields().toArray(new  Field[fields.size()  ]);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Field[]  fields  =  getFields().toArray(new  Field[fields.size()  ]);	  Field[]    fields    =    getFields();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
91	[BUG]  [BUGGY]  Field[]  fields  =  getDeclaredFields();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  Field[]  fields  =  getDeclaredFields();  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Field[]  fields  =  getDeclaredFields();	  Field[]    fields    =    getFields();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
92	[BUG]  [BUGGY]  Field[]  fields  =  getFields(fieldValue);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  Field[]  fields  =  getFields(fieldValue);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Field[]  fields  =  getFields(fieldValue);	  Field[]    fields    =    getFields();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
93	[BUG]  [BUGGY]  ||(fieldValue!=  null  &&  fieldValue.equals( "_ ")))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  ||(fieldValue!=  null  &&  fieldValue.equals( "_ ")))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	||(fieldValue!=  null  &&  fieldValue.equals( "_ ")))  {  throw  new  IllegalArgumentException( " ");  }	  ||(fieldValue!=    null    &&    fieldValue.equals(   "   ")))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
94	[BUG]  [BUGGY]  ||(fieldValue!=  null  &&  fieldValue.equals( "* ")))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  ||(fieldValue!=  null  &&  fieldValue.equals( "* ")))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	||(fieldValue!=  null  &&  fieldValue.equals( "* ")))  {  throw  new  IllegalArgumentException( " ");  }	  ||(fieldValue!=    null    &&    fieldValue.equals(   "   ")))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
95	[BUG]  [BUGGY]  if(object  ==  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(object  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(object  ==  null)  {  throw  new  IllegalStateException( " ");  }	  if(object!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
96	[BUG]  [BUGGY]  aughtExceptionHandler.throwInternal();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  aughtExceptionHandler.throwInternal();  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	aughtExceptionHandler.throwInternal();	  if(object!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
97	[BUG]  [BUGGY]  ThreadLocal.getInstance(fieldValue);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  ThreadLocal.getInstance(fieldValue);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	ThreadLocal.getInstance(fieldValue);	  if(object!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
98	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('N');  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('N');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('N');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    builder.append('N');    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
99	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('N');  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('N');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('N');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    builder.append('N');    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
100	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  builder.append('N');  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  builder.append('N');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  builder.append('N');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    builder.append('N');    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
101	[BUG]  [BUGGY]  Integer[]  fields  =  clazz.getConstants();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  Integer[]  fields  =  clazz.getConstants();  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Integer[]  fields  =  clazz.getConstants();	  if(!useTransients)    {    for(int    i    =    0;    i    <    fields.length;    ++i)    {    builder.append(   ",   ");    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
102	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getConstants();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  Field[]  fields  =  clazz.getConstants();  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Field[]  fields  =  clazz.getConstants();	  if(!useTransients)    {    for(int    i    =    0;    i    <    fields.length;    ++i)    {    builder.append(   ",   ");    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
103	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  for(int  i  =  0;  i  <  fields.length();  ++i)  {  unregister(fieldValue[i]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  for(int  i  =  0;  i  <  fields.length();  ++i)  {  unregister(fieldValue[i]);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  for(int  i  =  0;  i  <  fields.length();  ++i)  {  unregister(fieldValue[i]);  }	  if(!useTransients)    {    for(int    i    =    0;    i    <    fields.length();    ++i)    {    unregister(fieldValue[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
104	[BUG]  [BUGGY]  int  iConstant  =  fields.length();  unregister(fieldValue[i]);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  int  iConstant  =  fields.length();  unregister(fieldValue[i]);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	int  iConstant  =  fields.length();  unregister(fieldValue[i]);	  if(!useTransients)    {    for(int    i    =    0;    i    <    fields.length();    ++i)    {    unregister(fieldValue[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
105	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fields.length();  i++)  {  throw  new  IllegalAccessException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  for(int  i  =  0;  i  <  fields.length();  i++)  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  fields.length();  i++)  {  throw  new  IllegalAccessException( " ");  }	  for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
106	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length()  -  1;  i++)  {  throw  new  IllegalAccessException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length()  -  1;  i++)  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  fieldValue.length()  -  1;  i++)  {  throw  new  IllegalAccessException( " ");  }	  for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
107	[BUG]  [BUGGY]  if(!useTransients)  {  for(int  i  =  0;  i  <  fieldValue.size();  ++i)  {  builder.append(',');  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients)  {  for(int  i  =  0;  i  <  fieldValue.size();  ++i)  {  builder.append(',');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients)  {  for(int  i  =  0;  i  <  fieldValue.size();  ++i)  {  builder.append(',');  }	  if(!useTransients)    {    for(int    i    =    0;    i    <    fieldValue.size();    ++i)    {    builder.append(   ",   ");    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
108	[BUG]  [BUGGY]  unregister(fieldValueLength);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  unregister(fieldValueLength);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	unregister(fieldValueLength);	  int    fieldValueLength    =    fieldValue.length;    unregister(fieldValueLength);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
109	[BUG]  [BUGGY]  int  fieldValueLength  =  fieldValue.length  -  1;  unregister(fieldValueLength);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  int  fieldValueLength  =  fieldValue.length  -  1;  unregister(fieldValueLength);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	int  fieldValueLength  =  fieldValue.length  -  1;  unregister(fieldValueLength);	  int    fieldValueLength    =    fieldValue.length;    unregister(fieldValueLength);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
110	[BUG]  [BUGGY]  int  fieldValueLength  =  field.length;  unregister(fieldValueLength);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  int  fieldValueLength  =  field.length;  unregister(fieldValueLength);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	int  fieldValueLength  =  field.length;  unregister(fieldValueLength);	  int    fieldValueLength    =    fieldValue.length;    unregister(fieldValueLength);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
111	[BUG]  [BUGGY]  if(object  ==  null)  {  throw  new  IllegalArgumentException( " ".equals(fieldValue));  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(object  ==  null)  {  throw  new  IllegalArgumentException( " ".equals(fieldValue));  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(object  ==  null)  {  throw  new  IllegalArgumentException( " ".equals(fieldValue));  }	  if(object    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
112	[BUG]  [BUGGY]  if(useTransients)  {  builder.append(excludeFields[iTotal]);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(useTransients)  {  builder.append(excludeFields[iTotal]);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(useTransients)  {  builder.append(excludeFields[iTotal]);  }	  if(!useTransients)    {    builder.append(excludeFields[iTotal]);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
113	[BUG]  [BUGGY]  if(iTotal  <  0)  {  if(!useTransients)  {  builder.append(excludeFields[iTotal]);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(iTotal  <  0)  {  if(!useTransients)  {  builder.append(excludeFields[iTotal]);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(iTotal  <  0)  {  if(!useTransients)  {  builder.append(excludeFields[iTotal]);  }	  if(!useTransients)    {    builder.append(excludeFields[iTotal]);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
114	[BUG]  [BUGGY]  Builder.append(excludeFields[iTotal]);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  Builder.append(excludeFields[iTotal]);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Builder.append(excludeFields[iTotal]);	  if(!useTransients)    {    builder.append(excludeFields[iTotal]);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
115	[BUG]  [BUGGY]  if(!useTransients  &&  excludeFields.length  <  2)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients  &&  excludeFields.length  <  2)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients  &&  excludeFields.length  <  2)  {  throw  new  IllegalArgumentException( " ");  }	  if(!useTransients    ||    excludeFields.length    <    2)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
116	[BUG]  [BUGGY]  if(!useTransients  ||  excludeFields.length  <  1)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients  ||  excludeFields.length  <  1)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients  ||  excludeFields.length  <  1)  {  throw  new  IllegalArgumentException( " ");  }	  if(!useTransients    ||    excludeFields.length    <    2)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
117	[BUG]  [BUGGY]  if(!useTransients  ||  excludeFields.length  ==  2)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients  ||  excludeFields.length  ==  2)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients  ||  excludeFields.length  ==  2)  {  throw  new  IllegalArgumentException( " ");  }	  if(!useTransients    ||    excludeFields.length    <    2)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
118	[BUG]  [BUGGY]  if(useTransients)  {  builder.append(field);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(useTransients)  {  builder.append(field);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(useTransients)  {  builder.append(field);  }	  if(!useTransients)    {    builder.append(field);    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
119	[BUG]  [BUGGY]  if(useTransients)  {  builder.append(fieldValue);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(useTransients)  {  builder.append(fieldValue);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(useTransients)  {  builder.append(fieldValue);  }	  if(!useTransients)    {    builder.append(field);    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
120	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fields.length();  i++)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  for(int  i  =  0;  i  <  fields.length();  i++)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  fields.length();  i++)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
121	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  object.length();  i++)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  for(int  i  =  0;  i  <  object.length();  i++)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  object.length();  i++)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
122	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length()  -  1;  i++)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length()  -  1;  i++)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  fieldValue.length()  -  1;  i++)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
123	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fields.length;  ++i)  {  unregister(fieldValue[i]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  for(int  i  =  0;  i  <  fields.length;  ++i)  {  unregister(fieldValue[i]);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  fields.length;  ++i)  {  unregister(fieldValue[i]);  }	  for(int    i    =    0;    i    <    fieldValue.length;    ++i)    {    unregister(fieldValue[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
124	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length  -  1;  ++i)  {  unregister(fieldValue[i]);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length  -  1;  ++i)  {  unregister(fieldValue[i]);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  fieldValue.length  -  1;  ++i)  {  unregister(fieldValue[i]);  }	  for(int    i    =    0;    i    <    fieldValue.length;    ++i)    {    unregister(fieldValue[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
125	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length  -  2;  ++i)  {  unregister(fieldValue[i]);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length  -  2;  ++i)  {  unregister(fieldValue[i]);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  fieldValue.length  -  2;  ++i)  {  unregister(fieldValue[i]);  }	  for(int    i    =    0;    i    <    fieldValue.length;    ++i)    {    unregister(fieldValue[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
126	[BUG]  [BUGGY]  While(object!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  While(object!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	While(object!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  If(object    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	31	None	replace
127	[BUG]  [BUGGY]  ThreadLocal.getInstance().unregister(object);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  ThreadLocal.getInstance().unregister(object);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	ThreadLocal.getInstance().unregister(object);	  If(object    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
128	[BUG]  [BUGGY]  ThreadLocal.getInstance();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  ThreadLocal.getInstance();  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	ThreadLocal.getInstance();	  If(object    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
129	[BUG]  [BUGGY]  if(useTransients)  {  builder.append(object);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(useTransients)  {  builder.append(object);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(useTransients)  {  builder.append(object);  }	  if(!useTransients)    {    builder.append(object);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
130	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append(fieldValue);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue  ==  null)  {  builder.append(fieldValue);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(fieldValue!=    null)    {    builder.append(fieldValue);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
131	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('n');  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('n');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('n');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fields.length();    i++)    {    builder.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
132	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('N');  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('N');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('N');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fields.length();    i++)    {    builder.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
133	[BUG]  [BUGGY]  if(baseValue  ==  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(baseValue  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(baseValue  ==  null)  {  throw  new  IllegalStateException( " ");  }	  if(baseValue!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
134	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  throw  new  IllegalStateException( " ".getMessage());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fieldValue!=  null)  {  throw  new  IllegalStateException( " ".getMessage());  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue!=  null)  {  throw  new  IllegalStateException( " ".getMessage());  }	  if(baseValue!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
135	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('N');  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  Field[]  fields  =  clazz.getFields();  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('N');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Field[]  fields  =  clazz.getFields();  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('N');  }	  if(fields!=    null)    {    for(int    i    =    0;    i    <    fields.length;    i++)    {    builder.append('N');    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
136	[BUG]  [BUGGY]  ||!isExported(fieldValue))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]        IllegalStateException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  ||!isExported(fieldValue))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	||!isExported(fieldValue))  {  throw  new  IllegalStateException( " ");  }	  ||!useTransients)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
137	[BUG]  [BUGGY]  ||  useTransients)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]          IllegalStateException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  ||  useTransients)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	||  useTransients)  {  throw  new  IllegalStateException( " ");  }	  ||!useTransients)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
138	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append( ", ");  }  else  {  unregister(fieldValue);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append( ", ");  }  else  {  unregister(fieldValue);  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue!=  null)  {  builder.append( ", ");  }  else  {  unregister(fieldValue);  }	  if(fieldValue!=    null)    {    builder.append(fieldValue);    }    else    {    unregister(fieldValue);    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
139	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append('n');  }  else  {  unregister(fieldValue);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append('n');  }  else  {  unregister(fieldValue);  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue!=  null)  {  builder.append('n');  }  else  {  unregister(fieldValue);  }	  if(fieldValue!=    null)    {    builder.append(fieldValue);    }    else    {    unregister(fieldValue);    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
140	[BUG]  [BUGGY]  if(!useTransients)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  unregister(fieldValue[i].getName());  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  unregister(fieldValue[i].getName());  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  unregister(fieldValue[i].getName());  }	  if(!useTransients)    {    for(int    i    =    0;    i    <    fieldValue.length;    ++i)    {    unregister(fieldValue[i].getName());    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
141	[BUG]  [BUGGY]  if(!useTransients)  {  for(int  i  =  0;  i  <  fieldValue.length;  ++i)  {  unregister(fieldValue[i].getReferenceName());  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients)  {  for(int  i  =  0;  i  <  fieldValue.length;  ++i)  {  unregister(fieldValue[i].getReferenceName());  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients)  {  for(int  i  =  0;  i  <  fieldValue.length;  ++i)  {  unregister(fieldValue[i].getReferenceName());  }	  if(!useTransients)    {    for(int    i    =    0;    i    <    fieldValue.length;    ++i)    {    unregister(fieldValue[i].getName());    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
142	[BUG]  [BUGGY]  ||(fieldValue!=  null  &&  fieldValue.equals( " ")))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  ||(fieldValue!=  null  &&  fieldValue.equals( " ")))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	||(fieldValue!=  null  &&  fieldValue.equals( " ")))  {  throw  new  IllegalStateException( " ");  }	  if(fields!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
143	[BUG]  [BUGGY]  ||(fieldValue!=  null  &&  fieldValue.isEmpty()))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  ||(fieldValue!=  null  &&  fieldValue.isEmpty()))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	||(fieldValue!=  null  &&  fieldValue.isEmpty()))  {  throw  new  IllegalStateException( " ");  }	  if(fields!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
144	[BUG]  [BUGGY]  ||(fieldValue!=  null  &&  fieldValue.length()  >  0)||(fields!=  null  &&  fields.length  >  0))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  ||(fieldValue!=  null  &&  fieldValue.length()  >  0)||(fields!=  null  &&  fields.length  >  0))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	||(fieldValue!=  null  &&  fieldValue.length()  >  0)||(fields!=  null  &&  fields.length  >  0))  {  throw  new  IllegalStateException( " ");  }	  if(fields!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
145	[BUG]  [BUGGY]  ||(fieldValue!=  null  &&  fieldValue.isArray()))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  ||(fieldValue!=  null  &&  fieldValue.isArray()))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	||(fieldValue!=  null  &&  fieldValue.isArray()))  {  throw  new  IllegalStateException( " ");  }	  if(fields!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
146	[BUG]  [BUGGY]  if(!useTransients  &&  excludeFields.length  >  1)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]        IllegalStateException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients  &&  excludeFields.length  >  1)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients  &&  excludeFields.length  >  1)  {  throw  new  IllegalStateException( " ");  }	  if(!useTransients    &&    excludeFields.length    >    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
147	[BUG]  [BUGGY]  if(!useTransients  ||  excludeFields.length  >  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]          IllegalStateException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients  ||  excludeFields.length  >  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients  ||  excludeFields.length  >  0)  {  throw  new  IllegalStateException( " ");  }	  if(!useTransients    &&    excludeFields.length    >    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
148	[BUG]  [BUGGY]  if(!useTransients  &&  excludeFields!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients  &&  excludeFields!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients  &&  excludeFields!=  null)  {  throw  new  IllegalStateException( " ");  }	  if(!useTransients    &&    excludeFields.length    >    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
149	[BUG]  [BUGGY]  if(!useTransients)  {  throw  new  IllegalArgumentException( " ".equals(object.getClass()));  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients)  {  throw  new  IllegalArgumentException( " ".equals(object.getClass()));  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients)  {  throw  new  IllegalArgumentException( " ".equals(object.getClass()));  }	          if(!useTransients)    {    throw    new    IllegalArgumentException(       "       ");    }    If(!useTransients)    {    throw    new    IllegalArgumentException(       "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
150	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fields.length  -  1;  i++)  {  builder.append('n');  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  for(int  i  =  0;  i  <  fields.length  -  1;  i++)  {  builder.append('n');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  fields.length  -  1;  i++)  {  builder.append('n');  }	  for(int    i    =    0;    i    <    fields.length;    i++)    {    builder.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
151	[BUG]  [BUGGY]  int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('n');  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('n');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('n');  }	  for(int    i    =    0;    i    <    fields.length;    i++)    {    builder.append('n');    }    	non-compiled	[CE]  >  expected	25	None	replace
152	[BUG]  [BUGGY]  UnsupportedOperation  <?>  fieldValue  =  object.getClass();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  UnsupportedOperation  <?>  fieldValue  =  object.getClass();  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	UnsupportedOperation  <?>  fieldValue  =  object.getClass();	  if(fieldValue!=    null)    {    builder.append(fieldValue);    }    else    {    unregister(object);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
153	[BUG]  [BUGGY]  Builder.append(fieldValue);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  Builder.append(fieldValue);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Builder.append(fieldValue);	  if(fieldValue!=    null)    {    builder.append(fieldValue);    }    else    {    unregister(object);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
154	[BUG]  [BUGGY]  UnsupportedOperation  <?>  fieldValue  =  getFieldValue(object);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  UnsupportedOperation  <?>  fieldValue  =  getFieldValue(object);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	UnsupportedOperation  <?>  fieldValue  =  getFieldValue(object);	  if(fieldValue!=    null)    {    builder.append(fieldValue);    }    else    {    unregister(object);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
155	[BUG]  [BUGGY]  UnsupportedOperation  <?>  fieldValue  =  getClass().getSimpleName();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  UnsupportedOperation  <?>  fieldValue  =  getClass().getSimpleName();  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	UnsupportedOperation  <?>  fieldValue  =  getClass().getSimpleName();	  if(fieldValue!=    null)    {    builder.append(fieldValue);    }    else    {    unregister(object);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
156	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclasses();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  Field[]  fields  =  clazz.getSuperclasses();  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Field[]  fields  =  clazz.getSuperclasses();	  Field[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
157	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclassFields();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  Field[]  fields  =  clazz.getSuperclassFields();  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Field[]  fields  =  clazz.getSuperclassFields();	  Field[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
158	[BUG]  [BUGGY]  if(!useTransients)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  builder.append('n');  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  builder.append('n');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  builder.append('n');  }	  if(!useTransients)    {    for(int    i    =    0;    i    <    fieldValue.size();    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
159	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  for(int  i  =  0;  i  <  fields.size();  ++i)  {  builder.append('n');  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  for(int  i  =  0;  i  <  fields.size();  ++i)  {  builder.append('n');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  for(int  i  =  0;  i  <  fields.size();  ++i)  {  builder.append('n');  }	  if(!useTransients)    {    for(int    i    =    0;    i    <    fieldValue.size();    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
160	[BUG]  [BUGGY]  Integer[]  fields  =  clazz.getConstants();  for(int  i  =  0;  i  <  fields.size();  ++i)  {  builder.append('n');  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  Integer[]  fields  =  clazz.getConstants();  for(int  i  =  0;  i  <  fields.size();  ++i)  {  builder.append('n');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Integer[]  fields  =  clazz.getConstants();  for(int  i  =  0;  i  <  fields.size();  ++i)  {  builder.append('n');  }	  if(!useTransients)    {    for(int    i    =    0;    i    <    fieldValue.size();    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
161	[BUG]  [BUGGY]  ||(fieldValue!=  null  &&  fieldValue.length()  >  0))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  ||(fieldValue!=  null  &&  fieldValue.length()  >  0))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	||(fieldValue!=  null  &&  fieldValue.length()  >  0))  {  throw  new  IllegalArgumentException( " ");  }	  ||(fieldValue!=    null    &&    fieldValue.isEmpty()))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
162	[BUG]  [BUGGY]  ||(fieldValue!=  null  &&  fieldValue.getClass().isArray()))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  ||(fieldValue!=  null  &&  fieldValue.getClass().isArray()))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	||(fieldValue!=  null  &&  fieldValue.getClass().isArray()))  {  throw  new  IllegalArgumentException( " ");  }	  ||(fieldValue!=    null    &&    fieldValue.isEmpty()))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
163	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]          if(!useTransients)    {    throw    new    IllegalArgumentException(     "     ");    }    if(!useTransients)  {  throw  new  IllegalArgumentException(     "     ");  }  if(!useTransients)  {  throw  new  IllegalArgumentException(   "   ");  }  if(!useTransients)  {  throw  new  IllegalArgumentException( "   ");  }  if(!useTransients)  {  throw  new  IllegalArgumentException(   "   ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	add	                if(!useTransients)        {        throw        new        IllegalArgumentException(       "       ");        }        if(!useTransients)    {    throw    new    IllegalArgumentException(       "       ");    }    if(!useTransients)  {  throw  new  IllegalArgumentException(   "   ");  }  if(!useTransients)  {  throw  new  IllegalArgumentException( "   ");  }  if(!useTransients)  {  throw  new  IllegalArgumentException(   "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	16	4	add
164	[BUG]  [BUGGY]          if(!useTransients)    {    throw    new    IllegalArgumentException(     "     ");    }    if(!useTransients)  {  throw  new  IllegalArgumentException(     "     ");  }  if(!useTransients)  {  throw  new  IllegalArgumentException(   "   ");  }  if(!useTransients)  {  throw  new  IllegalArgumentException( "   ");  }  if(!useTransients)  {  throw  new  IllegalArgumentException(   "   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]          if(!useTransients)    {    throw    new    IllegalArgumentException(     "     ");    }    if(!useTransients)  {  throw  new  IllegalArgumentException(     "     ");  }  if(!useTransients)  {  throw  new  IllegalArgumentException(   "   ");  }  if(!useTransients)  {  throw  new  IllegalArgumentException( "   ");  }  if(!useTransients)  {  throw  new  IllegalArgumentException(   "   ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	                if(!useTransients)        {        throw        new        IllegalArgumentException(       "       ");        }        if(!useTransients)    {    throw    new    IllegalArgumentException(       "       ");    }    if(!useTransients)  {  throw  new  IllegalArgumentException(   "   ");  }  if(!useTransients)  {  throw  new  IllegalArgumentException( "   ");  }  if(!useTransients)  {  throw  new  IllegalArgumentException(   "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	16	4	add
165	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]          if(!useTransients)    {    throw    new    IllegalArgumentException(     "     ");    }    if(!useTransients)  {  throw  new  IllegalArgumentException(     "     ");  }  if(!useTransients)  {  throw  new  IllegalArgumentException(   "   ");  }  if(!useTransients)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	add	                if(!useTransients)        {        throw        new        IllegalArgumentException(       "       ");        }        if(!useTransients)    {    throw    new    IllegalArgumentException(       "       ");    }    if(!useTransients)  {  throw  new  IllegalArgumentException(   "   ");  }  if(!useTransients)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	16	4	add
166	[BUG]  [BUGGY]          if(!useTransients)    {    throw    new    IllegalArgumentException(     "     ");    }    if(!useTransients)  {  throw  new  IllegalArgumentException(     "     ");  }  if(!useTransients)  {  throw  new  IllegalArgumentException(   "   ");  }  if(!useTransients)  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]          if(!useTransients)    {    throw    new    IllegalArgumentException(     "     ");    }    if(!useTransients)  {  throw  new  IllegalArgumentException(     "     ");  }  if(!useTransients)  {  throw  new  IllegalArgumentException(   "   ");  }  if(!useTransients)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	                if(!useTransients)        {        throw        new        IllegalArgumentException(       "       ");        }        if(!useTransients)    {    throw    new    IllegalArgumentException(       "       ");    }    if(!useTransients)  {  throw  new  IllegalArgumentException(   "   ");  }  if(!useTransients)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	16	4	add
167	[BUG]  [BUGGY]  if(!useTransients  &&  excludeFields.length  ==  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]        IllegalStateException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients  &&  excludeFields.length  ==  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients  &&  excludeFields.length  ==  0)  {  throw  new  IllegalStateException( " ");  }	  if(!useTransients    ||    excludeFields.length    ==    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
168	[BUG]  [BUGGY]  ||  excludeFields.length  ==  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]          IllegalStateException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  ||  excludeFields.length  ==  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	||  excludeFields.length  ==  0)  {  throw  new  IllegalStateException( " ");  }	  if(!useTransients    ||    excludeFields.length    ==    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
169	[BUG]  [BUGGY]  if(excludeFields!=  null  ||  excludeFields.length  ==  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(excludeFields!=  null  ||  excludeFields.length  ==  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(excludeFields!=  null  ||  excludeFields.length  ==  0)  {  throw  new  IllegalStateException( " ");  }	  if(!useTransients    ||    excludeFields.length    ==    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
170	[BUG]  [BUGGY]  if(iConstant  <  0)  {  if(!useTransients)  {  builder.append(excludeFields[iConstant]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(iConstant  <  0)  {  if(!useTransients)  {  builder.append(excludeFields[iConstant]);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(iConstant  <  0)  {  if(!useTransients)  {  builder.append(excludeFields[iConstant]);  }	  if(!useTransients)    {    builder.append(excludeFields[iConstant]);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
171	[BUG]  [BUGGY]  if(useTransients)  {  builder.append(excludeFields[iConstant]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(useTransients)  {  builder.append(excludeFields[iConstant]);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(useTransients)  {  builder.append(excludeFields[iConstant]);  }	  if(!useTransients)    {    builder.append(excludeFields[iConstant]);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
172	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fieldValue  ==  null)  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue  ==  null)  {  throw  new  IllegalArgumentException( " ".getMessage());  }	  if(baseValue    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
173	[BUG]  [BUGGY]  int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('n');  }  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('n');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('n');  }	  for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    builder.append('n');    }    	non-compiled	[CE]  >  expected	38	None	replace
174	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length()  -  1;  i++)  {  builder.append('n');  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length()  -  1;  i++)  {  builder.append('n');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  fieldValue.length()  -  1;  i++)  {  builder.append('n');  }	  for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    builder.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
175	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('n');  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  Field[]  fields  =  clazz.getFields();  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('n');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Field[]  fields  =  clazz.getFields();  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('n');  }	  if(fields!=    null)    {    for(int    i    =    0;    i    <    fields.length;    i++)    {    builder.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
176	[BUG]  [BUGGY]  if(!useTransients  &&  excludeFields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients  &&  excludeFields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients  &&  excludeFields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(!useTransients    ||    excludeFields.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
177	[BUG]  [BUGGY]  if(excludeFields!=  null  ||  excludeFields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(excludeFields!=  null  ||  excludeFields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(excludeFields!=  null  ||  excludeFields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(!useTransients    ||    excludeFields.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
178	[BUG]  [BUGGY]  ||  excludeFields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  ||  excludeFields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	||  excludeFields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(!useTransients    ||    excludeFields.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
179	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append( "[ ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append( "[ ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append( "[ ");  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length;    i++)    {    builder.append(   "[   ");    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
180	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append( "[] ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append( "[] ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append( "[] ");  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length;    i++)    {    builder.append(   "[   ");    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
181	[BUG]  [BUGGY]  If(object  ==  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  If(object  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	If(object  ==  null)  {  throw  new  IllegalStateException( " ");  }	  If(object!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	34	None	replace
182	[BUG]  [BUGGY]  While(object!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  While(object!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	While(object!=  null)  {  throw  new  IllegalStateException( " ");  }	  If(object!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	34	None	replace
183	[BUG]  [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('n');  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('n');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(object!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('n');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    object.length();    i++)    {    builder.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
184	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  object.length();  i++)  {  builder.append('n');  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  for(int  i  =  0;  i  <  object.length();  i++)  {  builder.append('n');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  object.length();  i++)  {  builder.append('n');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    object.length();    i++)    {    builder.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
185	[BUG]  [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  field.length();  i++)  {  builder.append('n');  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  field.length();  i++)  {  builder.append('n');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(object!=  null)  {  for(int  i  =  0;  i  <  field.length();  i++)  {  builder.append('n');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    object.length();    i++)    {    builder.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
186	[BUG]  [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  builder.append('n');  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  builder.append('n');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(object!=  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  builder.append('n');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    object.length();    i++)    {    builder.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
187	[BUG]  [BUGGY]  if(!useTransients)  {  for(int  i  =  0;  i  <  object.length();  ++i)  {  unregister(object[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients)  {  for(int  i  =  0;  i  <  object.length();  ++i)  {  unregister(object[i]);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients)  {  for(int  i  =  0;  i  <  object.length();  ++i)  {  unregister(object[i]);  }	  if(!useTransients)    {    for(int    i    =    0;    i    <    object.length();    ++i)    {    unregister(fieldValue[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
188	[BUG]  [BUGGY]  if(!useTransients)  {  for(int  i  =  0;  i  <  object.length();  ++i)  {  unregister(objectValue[i]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients)  {  for(int  i  =  0;  i  <  object.length();  ++i)  {  unregister(objectValue[i]);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients)  {  for(int  i  =  0;  i  <  object.length();  ++i)  {  unregister(objectValue[i]);  }	  if(!useTransients)    {    for(int    i    =    0;    i    <    object.length();    ++i)    {    unregister(fieldValue[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
189	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getStaticFields();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  Field[]  fields  =  clazz.getStaticFields();  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Field[]  fields  =  clazz.getStaticFields();	  Field[]    fields    =    clazz.getFields();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
190	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append( ", ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append( ", ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue!=  null)  {  builder.append( ", ");  }	  if(fieldValue!=    null)    {    builder.append(fieldValue);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
191	[BUG]  [BUGGY]  Builder.append(fieldValue[iConstant]);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  Builder.append(fieldValue[iConstant]);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Builder.append(fieldValue[iConstant]);	  Builder.append(excludeFields[iConstant]);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
192	[BUG]  [BUGGY]  Builder.append(object,  excludeFields[iConstant]);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  Builder.append(object,  excludeFields[iConstant]);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Builder.append(object,  excludeFields[iConstant]);	  Builder.append(excludeFields[iConstant]);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
193	[BUG]  [BUGGY]  Builder.append(object[iConstant]);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  Builder.append(object[iConstant]);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Builder.append(object[iConstant]);	  Builder.append(excludeFields[iConstant]);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
194	[BUG]  [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(object!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    object.length();    i++)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
195	[BUG]  [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  field.length();  i++)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  field.length();  i++)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(object!=  null)  {  for(int  i  =  0;  i  <  field.length();  i++)  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    object.length();    i++)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
196	[BUG]  [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(object!=  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    object.length();    i++)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
197	[BUG]  [BUGGY]  ||(fieldValue  ==  null  &&  fieldValue.equals( " ")))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  ||(fieldValue  ==  null  &&  fieldValue.equals( " ")))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	||(fieldValue  ==  null  &&  fieldValue.equals( " ")))  {  throw  new  IllegalStateException( " ");  }	  if(fieldValue    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
198	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  fieldValue.length()  ==  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fieldValue  ==  null  ||  fieldValue.length()  ==  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue  ==  null  ||  fieldValue.length()  ==  0)  {  throw  new  IllegalStateException( " ");  }	  if(fieldValue    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
199	[BUG]  [BUGGY]  if(excludeFields!=  null)  {  if(!useTransients)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(excludeFields!=  null)  {  if(!useTransients)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(excludeFields!=  null)  {  if(!useTransients)  {  throw  new  IllegalStateException( " ");  }	          if(!useTransients)    {    throw    new    IllegalStateException(       "       ");    }    if(!useTransients)    {    throw    new    IllegalStateException(       "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
200	[BUG]  [BUGGY]  if(excludeFields  ==  null)  {  if(!useTransients)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(excludeFields  ==  null)  {  if(!useTransients)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(excludeFields  ==  null)  {  if(!useTransients)  {  throw  new  IllegalStateException( " ");  }	          if(!useTransients)    {    throw    new    IllegalStateException(       "       ");    }    if(!useTransients)    {    throw    new    IllegalStateException(       "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
201	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  if(!useTransients)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fieldValue!=  null)  {  if(!useTransients)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue!=  null)  {  if(!useTransients)  {  throw  new  IllegalStateException( " ");  }	          if(!useTransients)    {    throw    new    IllegalStateException(       "       ");    }    if(!useTransients)    {    throw    new    IllegalStateException(       "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
202	[BUG]  [BUGGY]  if(excludeFields!=  null)  {  if(!useTransients  &&  excludeFields.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(excludeFields!=  null)  {  if(!useTransients  &&  excludeFields.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(excludeFields!=  null)  {  if(!useTransients  &&  excludeFields.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(!useTransients    &&    excludeFields.length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
203	[BUG]  [BUGGY]  if(excludeFields!=  null)  {  if(!useTransients)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(excludeFields!=  null)  {  if(!useTransients)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(excludeFields!=  null)  {  if(!useTransients)  {  throw  new  IllegalArgumentException( " ");  }	          if(!useTransients)    {    throw    new    IllegalArgumentException(       "       ");    }    if(!useTransients)    {    throw    new    IllegalArgumentException(       "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
204	[BUG]  [BUGGY]  if(excludeFields  ==  null)  {  if(!useTransients)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(excludeFields  ==  null)  {  if(!useTransients)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(excludeFields  ==  null)  {  if(!useTransients)  {  throw  new  IllegalArgumentException( " ");  }	          if(!useTransients)    {    throw    new    IllegalArgumentException(       "       ");    }    if(!useTransients)    {    throw    new    IllegalArgumentException(       "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
205	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  if(!useTransients)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fieldValue!=  null)  {  if(!useTransients)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue!=  null)  {  if(!useTransients)  {  throw  new  IllegalArgumentException( " ");  }	          if(!useTransients)    {    throw    new    IllegalArgumentException(       "       ");    }    if(!useTransients)    {    throw    new    IllegalArgumentException(       "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
206	[BUG]  [BUGGY]  int  i  =  0;  i  <  fieldValue.length;  ++i)  {  unregister(fieldValue[i]);  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  int  i  =  0;  i  <  fieldValue.length;  ++i)  {  unregister(fieldValue[i]);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	int  i  =  0;  i  <  fieldValue.length;  ++i)  {  unregister(fieldValue[i]);  }	  for(int    i    =    0;    i    <    fieldValue.length;    ++i)    {    unregister(fieldValue[i]);    }    	non-compiled	[CE]  >  expected	67	None	replace
207	[BUG]  [BUGGY]  int  i  =  0;  i  <  fieldValue.length();  i++)  {  throw  new  IllegalAccessException( " ");  }  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  int  i  =  0;  i  <  fieldValue.length();  i++)  {  throw  new  IllegalAccessException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	int  i  =  0;  i  <  fieldValue.length();  i++)  {  throw  new  IllegalAccessException( " ");  }	  for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  >  expected	10	None	replace
208	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  clazz);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  clazz);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Throwables.throw  new  IllegalStateException( " "  +  clazz);	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	22	None	replace
209	[BUG]  [BUGGY]  Throwables.throw  new  InternalError( " ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  Throwables.throw  new  InternalError( " ");  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Throwables.throw  new  InternalError( " ");	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	22	None	replace
210	[BUG]  [BUGGY]  if(fields!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fields!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fields!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(fields    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
211	[BUG]  [BUGGY]  fields  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  fields  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	fields  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(fields    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	30	None	replace
212	[BUG]  [BUGGY]  if(excludeFields!=  null)  {  if(!useTransients  ||  excludeFields.length  <  2)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(excludeFields!=  null)  {  if(!useTransients  ||  excludeFields.length  <  2)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(excludeFields!=  null)  {  if(!useTransients  ||  excludeFields.length  <  2)  {  throw  new  IllegalArgumentException( " ");  }	  if(!useTransients    ||    excludeFields.length    <    2)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
213	[BUG]  [BUGGY]  if(excludeFields!=  null  ||  excludeFields.length  <  2)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(excludeFields!=  null  ||  excludeFields.length  <  2)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(excludeFields!=  null  ||  excludeFields.length  <  2)  {  throw  new  IllegalArgumentException( " ");  }	  if(!useTransients    ||    excludeFields.length    <    2)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
214	[BUG]  [BUGGY]  if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('n');  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('n');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('n');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fields.length();    i++)    {    builder.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
215	[BUG]  [BUGGY]  if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('N');  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('N');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  builder.append('N');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fields.length();    i++)    {    builder.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
216	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('N').append(fieldValue);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('N').append(fieldValue);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append('N').append(fieldValue);  }	  for(int    i    =    0;    i    <    fields.length;    i++)    {    builder.append('N');    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
217	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  builder.append( ", ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append( ", ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue  ==  null)  {  builder.append( ", ");  }	  if(fieldValue!=    null)    {    builder.append(fieldValue);    }    else    {    unregister(object);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
218	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append( ", ");  }  else  {  unregister(object);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append( ", ");  }  else  {  unregister(object);  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue!=  null)  {  builder.append( ", ");  }  else  {  unregister(object);  }	  if(fieldValue!=    null)    {    builder.append(fieldValue);    }    else    {    unregister(object);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
219	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields(excludeFields);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  Field[]  fields  =  clazz.getFields(excludeFields);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Field[]  fields  =  clazz.getFields(excludeFields);	  Field[]    fields    =    clazz.getFields();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
220	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  excludeFields.length;  ++i)  {  unregister(fieldValue[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  for(int  i  =  0;  i  <  excludeFields.length;  ++i)  {  unregister(fieldValue[i]);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  excludeFields.length;  ++i)  {  unregister(fieldValue[i]);  }	  for(int    i    =    0;    i    <    fieldValue.length();    ++i)    {    unregister(fieldValue[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
221	[BUG]  [BUGGY]  if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length();  ++i)  {  unregister(fieldValue[i]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length();  ++i)  {  unregister(fieldValue[i]);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length();  ++i)  {  unregister(fieldValue[i]);  }	  if(!useTransients)    {    for(int    i    =    0;    i    <    fields.length();    ++i)    {    unregister(fieldValue[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
222	[BUG]  [BUGGY]  if(excludeFields!=  null)  {  if(!useTransients  &&  excludeFields.length  >  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]        IllegalStateException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(excludeFields!=  null)  {  if(!useTransients  &&  excludeFields.length  >  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(excludeFields!=  null)  {  if(!useTransients  &&  excludeFields.length  >  0)  {  throw  new  IllegalStateException( " ");  }	  if(!useTransients    &&    excludeFields.length    >    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
223	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append('n');  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append('n');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue!=  null)  {  builder.append('n');  }	  if(fieldValue!=    null)    {    builder.append(fieldValue);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
224	[BUG]  [BUGGY]  int  i  =  0;  i  <  fieldValue.length();  i++)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  int  i  =  0;  i  <  fieldValue.length();  i++)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	int  i  =  0;  i  <  fieldValue.length();  i++)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	4	None	replace
225	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fields.length();  ++i)  {  unregister(fieldValue[i],  excludeFields[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  for(int  i  =  0;  i  <  fields.length();  ++i)  {  unregister(fieldValue[i],  excludeFields[i]);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  fields.length();  ++i)  {  unregister(fieldValue[i],  excludeFields[i]);  }	  for(int    i    =    0;    i    <    fields.length();    ++i)    {    unregister(fieldValue[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
226	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  builder.append( ", ");  }  else  {  unregister(fieldValue);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fieldValue  ==  null)  {  builder.append( ", ");  }  else  {  unregister(fieldValue);  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue  ==  null)  {  builder.append( ", ");  }  else  {  unregister(fieldValue);  }	  if(fieldValue!=    null)    {    builder.append(fieldValue);    }    else    {    unregister(fieldValue);    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
227	[BUG]  [BUGGY]  if(!useTransients)  {  throw  new  IllegalArgumentException( " ".equals(excludeFields));  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients)  {  throw  new  IllegalArgumentException( " ".equals(excludeFields));  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients)  {  throw  new  IllegalArgumentException( " ".equals(excludeFields));  }	          if(!useTransients)    {    throw    new    IllegalArgumentException(       "       ");    }    If(!useTransients)    {    throw    new    IllegalArgumentException(       "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
228	[BUG]  [BUGGY]  Field[]  fields  =  getFields().toArray(fields);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  Field[]  fields  =  getFields().toArray(fields);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Field[]  fields  =  getFields().toArray(fields);	  Field[]    fields    =    getFields();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
229	[BUG]  [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  object.length();  ++i)  {  unregister(fieldValue[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  object.length();  ++i)  {  unregister(fieldValue[i]);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(object!=  null)  {  for(int  i  =  0;  i  <  object.length();  ++i)  {  unregister(fieldValue[i]);  }	  if(!useTransients)    {    for(int    i    =    0;    i    <    object.length();    ++i)    {    unregister(fieldValue[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
230	[BUG]  [BUGGY]  if(object!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(object!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(object!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
231	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fields.length();  ++i)  {  unregister(fieldValue[i].getName());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  for(int  i  =  0;  i  <  fields.length();  ++i)  {  unregister(fieldValue[i].getName());  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  fields.length();  ++i)  {  unregister(fieldValue[i].getName());  }	  if(!useTransients)    {    for(int    i    =    0;    i    <    fieldValue.length();    ++i)    {    unregister(fieldValue[i].getName());    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
232	[BUG]  [BUGGY]  if(!useTransients  ||  excludeFields)  {  builder.append(field);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients  ||  excludeFields)  {  builder.append(field);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients  ||  excludeFields)  {  builder.append(field);  }	  if(!useTransients)    {    builder.append(field);    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
233	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length;  ++i)  {  unregister(fieldValue[i].getName());  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length;  ++i)  {  unregister(fieldValue[i].getName());  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  fieldValue.length;  ++i)  {  unregister(fieldValue[i].getName());  }	  if(!useTransients)    {    for(int    i    =    0;    i    <    fieldValue.length;    ++i)    {    unregister(fieldValue[i].getName());    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
234	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fields.length;  ++i)  {  unregister(fieldValue[i].getName());  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  for(int  i  =  0;  i  <  fields.length;  ++i)  {  unregister(fieldValue[i].getName());  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  fields.length;  ++i)  {  unregister(fieldValue[i].getName());  }	  if(!useTransients)    {    for(int    i    =    0;    i    <    fieldValue.length;    ++i)    {    unregister(fieldValue[i].getName());    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
235	[BUG]  [BUGGY]  if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  unregister(fieldValue[i]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  unregister(fieldValue[i]);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  unregister(fieldValue[i]);  }	  if(!useTransients)    {    for(int    i    =    0;    i    <    fields.length;    ++i)    {    unregister(fieldValue[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
236	[BUG]  [BUGGY]  allowNonZeroOddNumber(fieldValue)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        IllegalArgumentException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  allowNonZeroOddNumber(fieldValue)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	allowNonZeroOddNumber(fieldValue)  {  throw  new  IllegalArgumentException( " ");  }	  if(useTransients)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	7	None	replace
237	[BUG]  [BUGGY]  allowNonZeroOddNumber(useTransients)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          IllegalArgumentException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  allowNonZeroOddNumber(useTransients)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	allowNonZeroOddNumber(useTransients)  {  throw  new  IllegalArgumentException( " ");  }	  if(useTransients)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	7	None	replace
238	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fieldValue.size();  ++i)  {  builder.append('n');  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fieldValue.size();  ++i)  {  builder.append('n');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fieldValue.size();  ++i)  {  builder.append('n');  }	  if(!useTransients)    {    for(int    i    =    0;    i    <    fieldValue.size();    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
239	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  builder.append('n');  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  builder.append('n');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  builder.append('n');  }	  if(!useTransients)    {    for(int    i    =    0;    i    <    fieldValue.size();    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
240	[BUG]  [BUGGY]  if(!useTransients)  {  builder.append(excludeFields[iTotal  +  1]);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients)  {  builder.append(excludeFields[iTotal  +  1]);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients)  {  builder.append(excludeFields[iTotal  +  1]);  }	  if(!useTransients)    {    builder.append(excludeFields[iTotal]);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
241	[BUG]  [BUGGY]  if(fields!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append('N');  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fields!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append('N');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fields!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append('N');  }	  if(fields!=    null)    {    for(int    i    =    0;    i    <    fields.length;    i++)    {    builder.append('N');    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
242	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Field[]  fields  =  clazz.getDeclaredFields(excludeFields);	  Field[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
243	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(fieldValue);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(fieldValue);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Field[]  fields  =  clazz.getDeclaredFields(fieldValue);	  Field[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
244	[BUG]  [BUGGY]  if(baseValue!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(baseValue!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(baseValue!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(baseValue    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
245	[BUG]  [BUGGY]  if(excludeFields!=  null)  {  if(!useTransients  ||  excludeFields.length  <  2)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]          IllegalStateException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(excludeFields!=  null)  {  if(!useTransients  ||  excludeFields.length  <  2)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(excludeFields!=  null)  {  if(!useTransients  ||  excludeFields.length  <  2)  {  throw  new  IllegalStateException( " ");  }	  if(!useTransients    ||    excludeFields.length    <    2)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
246	[BUG]  [BUGGY]  if(excludeFields!=  null  ||  excludeFields.length  <  2)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(excludeFields!=  null  ||  excludeFields.length  <  2)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(excludeFields!=  null  ||  excludeFields.length  <  2)  {  throw  new  IllegalStateException( " ");  }	  if(!useTransients    ||    excludeFields.length    <    2)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
247	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append( ", ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append( ", ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append( ", ");  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length;    i++)    {    builder.append(   ",   ");    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
248	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('N');  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('N');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('N');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    builder.append('N');    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
249	[BUG]  [BUGGY]  if(excludeFields!=  null)  {  if(!useTransients  ||  excludeFields.length  ==  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]        IllegalStateException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(excludeFields!=  null)  {  if(!useTransients  ||  excludeFields.length  ==  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(excludeFields!=  null)  {  if(!useTransients  ||  excludeFields.length  ==  0)  {  throw  new  IllegalStateException( " ");  }	  if(!useTransients    ||    excludeFields.length    ==    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
250	[BUG]  [BUGGY]  if(excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]          IllegalStateException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  throw  new  IllegalStateException( " ");  }	  if(!useTransients    ||    excludeFields.length    ==    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
251	[BUG]  [BUGGY]  ||!excludeFields)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]        IllegalStateException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  ||!excludeFields)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	||!excludeFields)  {  throw  new  IllegalStateException( " ");  }	  ||!useTransients)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
252	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('[');  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('[');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append('[');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
253	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fields.length();  i++)  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldValue    ==    null)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
254	[BUG]  [BUGGY]  If(object  ==  null)  {  throw  new  IllegalStateException( " ",  fieldValue);  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  If(object  ==  null)  {  throw  new  IllegalStateException( " ",  fieldValue);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	If(object  ==  null)  {  throw  new  IllegalStateException( " ",  fieldValue);  }	  If(object!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	34	None	replace
255	[BUG]  [BUGGY]  If(object  ==  null)  {  throw  new  IllegalStateException( " ".getMessage());  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  If(object  ==  null)  {  throw  new  IllegalStateException( " ".getMessage());  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	If(object  ==  null)  {  throw  new  IllegalStateException( " ".getMessage());  }	  If(object!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	34	None	replace
256	[BUG]  [BUGGY]  if(fields  ==  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fields  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fields  ==  null)  {  throw  new  IllegalStateException( " ");  }	  if(fields!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
257	[BUG]  [BUGGY]  fields!=  null  &&  excludeFields.length  >  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  fields!=  null  &&  excludeFields.length  >  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	fields!=  null  &&  excludeFields.length  >  0)  {  throw  new  IllegalStateException( " ");  }	  if(fields!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  not  a  statement	56	None	replace
258	[BUG]  [BUGGY]  builder.append('n');  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  builder.append('n');  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	builder.append('n');	  if(!useTransients)    {    builder.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
259	[BUG]  [BUGGY]  if(excludeFields!=  null)  {  if(!useTransients)  {  throw  new  IllegalStateException( " ".equals(fieldValue);  }  [CE]  [FE]          IllegalStateException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(excludeFields!=  null)  {  if(!useTransients)  {  throw  new  IllegalStateException( " ".equals(fieldValue);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(excludeFields!=  null)  {  if(!useTransients)  {  throw  new  IllegalStateException( " ".equals(fieldValue);  }	          if(!useTransients)    {    throw    new    IllegalStateException(       "       ");    }    If(!useTransients)    {    throw    new    IllegalStateException(       "       ");    }    	non-compiled	[CE]  	15	None	replace
260	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fieldValue.size();  ++i)  {  builder.append( ", ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fieldValue.size();  ++i)  {  builder.append( ", ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fieldValue.size();  ++i)  {  builder.append( ", ");  }	  if(!useTransients)    {    for(int    i    =    0;    i    <    fieldValue.size();    ++i)    {    builder.append(   ",   ");    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
261	[BUG]  [BUGGY]  if(!useTransients  ||  excludeFields.length  ==  0)  {  builder.append(object);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients  ||  excludeFields.length  ==  0)  {  builder.append(object);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients  ||  excludeFields.length  ==  0)  {  builder.append(object);  }	  if(!useTransients)    {    builder.append(object);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
262	[BUG]  [BUGGY]  if(!useTransients)  {  builder.append(object,  fieldValue);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients)  {  builder.append(object,  fieldValue);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients)  {  builder.append(object,  fieldValue);  }	  if(!useTransients)    {    builder.append(object);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
263	[BUG]  [BUGGY]  if(object  ==  null)  {  throw  new  IllegalStateException( ". ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(object  ==  null)  {  throw  new  IllegalStateException( ". ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(object  ==  null)  {  throw  new  IllegalStateException( ". ");  }	  if(object!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
264	[BUG]  [BUGGY]  if(object  ==  null)  {  throw  new  IllegalStateException( " ".);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(object  ==  null)  {  throw  new  IllegalStateException( " ".);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(object  ==  null)  {  throw  new  IllegalStateException( " ".);  }	  if(object!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
265	[BUG]  [BUGGY]  if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append( "[ ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append( "[ ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append( "[ ");  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fields.length;    i++)    {    builder.append('[');    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
266	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  builder.append(excludeFields[fieldValue]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fieldValue!=  null)  {  builder.append(excludeFields[fieldValue]);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue!=  null)  {  builder.append(excludeFields[fieldValue]);  }	  if(!useTransients)    {    builder.append(excludeFields[fieldValue]);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
267	[BUG]  [BUGGY]  builder.append(excludeFields[fieldValue]);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  builder.append(excludeFields[fieldValue]);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	builder.append(excludeFields[fieldValue]);	  if(!useTransients)    {    builder.append(excludeFields[fieldValue]);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
268	[BUG]  [BUGGY]  ||(fieldValue!=  null  &&  fieldValue.equals( "- ")))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  ||(fieldValue!=  null  &&  fieldValue.equals( "- ")))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	||(fieldValue!=  null  &&  fieldValue.equals( "- ")))  {  throw  new  IllegalArgumentException( " ");  }	  ||(fieldValue!=    null    &&    fieldValue.equals(   "   ")))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
269	[BUG]  [BUGGY]  if(excludeFields!=  null)  {  if(!useTransients  ||  excludeFields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(excludeFields!=  null)  {  if(!useTransients  ||  excludeFields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(excludeFields!=  null)  {  if(!useTransients  ||  excludeFields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(!useTransients    ||    excludeFields.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
270	[BUG]  [BUGGY]  if(excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(excludeFields  ==  null  ||  excludeFields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(!useTransients    ||    excludeFields.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
271	[BUG]  [BUGGY]  if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  builder.append( ", ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  builder.append( ", ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  builder.append( ", ");  }	  if(!useTransients)    {    for(int    i    =    0;    i    <    fields.length;    ++i)    {    builder.append(   ",   ");    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
272	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  object.getName());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  throw  new  IllegalStateException( " "  +  object.getName());  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	throw  new  IllegalStateException( " "  +  object.getName());	  throw    new    IllegalStateException(   "   "    +    clazz.getName());    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
273	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  clazz.toString());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  throw  new  IllegalStateException( " "  +  clazz.toString());  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	throw  new  IllegalStateException( " "  +  clazz.toString());	  throw    new    IllegalStateException(   "   "    +    clazz.getName());    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
274	[BUG]  [BUGGY]  AllFields(object  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  AllFields(object  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	AllFields(object  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  If(object    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	31	None	replace
275	[BUG]  [BUGGY]  ThreadLocal.getInstance(object)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  ThreadLocal.getInstance(object)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	ThreadLocal.getInstance(object)  {  throw  new  IllegalArgumentException( " ");  }	  If(object    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	31	None	replace
276	[BUG]  [BUGGY]  if(fieldValueLength  ==  0)  {  int  fieldValueLength  =  fieldValue.length;  unregister(fieldValueLength);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fieldValueLength  ==  0)  {  int  fieldValueLength  =  fieldValue.length;  unregister(fieldValueLength);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValueLength  ==  0)  {  int  fieldValueLength  =  fieldValue.length;  unregister(fieldValueLength);  }	  int    fieldValueLength    =    fieldValue.length;    unregister(fieldValueLength);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
277	[BUG]  [BUGGY]  int  fieldValueLength  =  fields.length;  unregister(fieldValueLength);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  int  fieldValueLength  =  fields.length;  unregister(fieldValueLength);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	int  fieldValueLength  =  fields.length;  unregister(fieldValueLength);	  int    fieldValueLength    =    fieldValue.length;    unregister(fieldValueLength);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
278	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append( "[ ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append( "[ ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append( "[ ");  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length;    i++)    {    builder.append(   "[   ");    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
279	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append('N');  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append('N');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue  ==  null)  {  for(int  i  =  0;  i  <  fieldValue.length;  i++)  {  builder.append('N');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length;    i++)    {    builder.append('N');    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
280	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  excludeFields.length  ==  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fieldValue  ==  null  ||  excludeFields.length  ==  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue  ==  null  ||  excludeFields.length  ==  0)  {  throw  new  IllegalStateException( " ");  }	  if(fieldValue    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
281	[BUG]  [BUGGY]  ThreadLocal.If(object!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  ThreadLocal.If(object!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	ThreadLocal.If(object!=  null)  {  throw  new  IllegalStateException( " ");  }	  If(object!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	34	None	replace
282	[BUG]  [BUGGY]  Class  <?>  clazz  =  object.getClass();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  Class  <?>  clazz  =  object.getClass();  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Class  <?>  clazz  =  object.getClass();	  If(object!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
283	[BUG]  [BUGGY]  Class  <?>  clazz  =  object.getComponentType();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  Class  <?>  clazz  =  object.getComponentType();  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Class  <?>  clazz  =  object.getComponentType();	  If(object!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
284	[BUG]  [BUGGY]  if(!useTransients  &&  excludeFields[iConstant]!=  null)  {  builder.append(excludeFields[iConstant]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients  &&  excludeFields[iConstant]!=  null)  {  builder.append(excludeFields[iConstant]);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients  &&  excludeFields[iConstant]!=  null)  {  builder.append(excludeFields[iConstant]);  }	  if(!useTransients)    {    builder.append(excludeFields[iConstant]);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
285	[BUG]  [BUGGY]  if(!useTransients)  {  builder.append(fieldValue[iConstant]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients)  {  builder.append(fieldValue[iConstant]);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients)  {  builder.append(fieldValue[iConstant]);  }	  if(!useTransients)    {    builder.append(excludeFields[iConstant]);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
286	[BUG]  [BUGGY]  if(!useTransients  &&  excludeFields[iTotal]!=  null)  {  builder.append(excludeFields[iTotal]);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients  &&  excludeFields[iTotal]!=  null)  {  builder.append(excludeFields[iTotal]);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients  &&  excludeFields[iTotal]!=  null)  {  builder.append(excludeFields[iTotal]);  }	  if(!useTransients)    {    builder.append(excludeFields[iTotal]);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
287	[BUG]  [BUGGY]  if(!useTransients)  {  builder.append(fieldValue[iTotal]);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients)  {  builder.append(fieldValue[iTotal]);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients)  {  builder.append(fieldValue[iTotal]);  }	  if(!useTransients)    {    builder.append(excludeFields[iTotal]);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
288	[BUG]  [BUGGY]  if(!useTransients)  {  for(int  i  =  0;  i  <  fieldValue.size();  ++i)  {  builder.append('N');  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients)  {  for(int  i  =  0;  i  <  fieldValue.size();  ++i)  {  builder.append('N');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients)  {  for(int  i  =  0;  i  <  fieldValue.size();  ++i)  {  builder.append('N');  }	  if(!useTransients)    {    for(int    i    =    0;    i    <    fieldValue.size();    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
289	[BUG]  [BUGGY]  if(!useTransients)  {  for(int  i  =  0;  i  <  object.size();  ++i)  {  builder.append('n');  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients)  {  for(int  i  =  0;  i  <  object.size();  ++i)  {  builder.append('n');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients)  {  for(int  i  =  0;  i  <  object.size();  ++i)  {  builder.append('n');  }	  if(!useTransients)    {    for(int    i    =    0;    i    <    fieldValue.size();    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
290	[BUG]  [BUGGY]  Builder.append( ", ").append(fieldValue);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  Builder.append( ", ").append(fieldValue);  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Builder.append( ", ").append(fieldValue);	  if(fieldValue!=    null)    {    builder.append(fieldValue);    }    else    {    unregister(object);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
291	[BUG]  [BUGGY]  aughtException.printStackTrace();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  aughtException.printStackTrace();  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	aughtException.printStackTrace();	  if(fieldValue!=    null)    {    builder.append(fieldValue);    }    else    {    unregister(object);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
292	[BUG]  [BUGGY]  Builder.append( ", ").append(fieldValue).append( ", ");  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  Builder.append( ", ").append(fieldValue).append( ", ");  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Builder.append( ", ").append(fieldValue).append( ", ");	  if(fieldValue!=    null)    {    builder.append(fieldValue);    }    else    {    unregister(object);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
293	[BUG]  [BUGGY]  if(baseValue  ==  null  ||!useTransients)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(baseValue  ==  null  ||!useTransients)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(baseValue  ==  null  ||!useTransients)  {  throw  new  IllegalArgumentException( " ");  }	  if(baseValue    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
294	[BUG]  [BUGGY]  ||!this.useTransients)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]        IllegalStateException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  ||!this.useTransients)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	||!this.useTransients)  {  throw  new  IllegalStateException( " ");  }	  ||!useTransients)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
295	[BUG]  [BUGGY]  if(excludeFields  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(excludeFields  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(excludeFields  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	          if(!useTransients)    {    throw    new    IllegalArgumentException(       "       ");    }    if(!useTransients)    {    throw    new    IllegalArgumentException(       "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
296	[BUG]  [BUGGY]  Class  <?>  fieldValue  =  object.getClass();  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  Class  <?>  fieldValue  =  object.getClass();  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Class  <?>  fieldValue  =  object.getClass();	          if(!useTransients)    {    throw    new    IllegalArgumentException(       "       ");    }    if(!useTransients)    {    throw    new    IllegalArgumentException(       "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
297	[BUG]  [BUGGY]  if(excludeFields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(excludeFields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(excludeFields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(!useTransients    ||    excludeFields.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
298	[BUG]  [BUGGY]  Field[]  fields  =  getFields().toArray(new  Field[0]);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  Field[]  fields  =  getFields().toArray(new  Field[0]);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Field[]  fields  =  getFields().toArray(new  Field[0]);	  Field[]    fields    =    getFields();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
299	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append( ", ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append( ", ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  fieldValue.length();  i++)  {  builder.append( ", ");  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    builder.append('[');    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
300	[BUG]  [BUGGY]  allowSelf(fieldValue);  [CE]  illegal  start  of  expression  [FE]          IllegalStateException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  allowSelf(fieldValue);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	allowSelf(fieldValue);	  if(useTransients)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
301	[BUG]  [BUGGY]  aughtException( " ");  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  aughtException( " ");  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	aughtException( " ");	  if(useTransients)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
302	[BUG]  [BUGGY]  aughtException( " ");  }  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  aughtException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	aughtException( " ");  }	  if(useTransients)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
303	[BUG]  [BUGGY]  mock( "Unknown  field  value ");  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  mock( "Unknown  field  value ");  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	mock( "Unknown  field  value ");	  if(useTransients)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
304	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length;  ++i)  {  unregister(fieldValue[i],  excludeFields[i]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length;  ++i)  {  unregister(fieldValue[i],  excludeFields[i]);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  fieldValue.length;  ++i)  {  unregister(fieldValue[i],  excludeFields[i]);  }	  for(int    i    =    0;    i    <    fieldValue.length;    ++i)    {    unregister(fieldValue[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
305	[BUG]  [BUGGY]  Integer[]  fields  =  clazz.getFields();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  unregister(fieldValue[i]);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  Integer[]  fields  =  clazz.getFields();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  unregister(fieldValue[i]);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Integer[]  fields  =  clazz.getFields();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  unregister(fieldValue[i]);  }	  Integer[]    fields    =    clazz.getConstants();    for(int    i    =    0;    i    <    fields.length;    ++i)    {    unregister(fieldValue[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
306	[BUG]  [BUGGY]  if(!useTransients  &&  fieldValue!=  null)  {  builder.append(field);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients  &&  fieldValue!=  null)  {  builder.append(field);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients  &&  fieldValue!=  null)  {  builder.append(field);  }	  if(!useTransients)    {    builder.append(field);    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
307	[BUG]  [BUGGY]  if(!useTransients  &&  excludeFields.length  >  0)  {  builder.append(field);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients  &&  excludeFields.length  >  0)  {  builder.append(field);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients  &&  excludeFields.length  >  0)  {  builder.append(field);  }	  if(!useTransients)    {    builder.append(field);    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
308	[BUG]  [BUGGY]  ||(fieldValue!=  null  &&  object.isEmpty()))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  ||(fieldValue!=  null  &&  object.isEmpty()))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	||(fieldValue!=  null  &&  object.isEmpty()))  {  throw  new  IllegalArgumentException( " ");  }	  ||(fieldValue!=    null    &&    fieldValue.isEmpty()))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
309	[BUG]  [BUGGY]  If(object!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  If(object!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	If(object!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  If(object    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	31	None	replace
310	[BUG]  [BUGGY]  parent  ==  null  ||  object  ==  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  parent  ==  null  ||  object  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	parent  ==  null  ||  object  ==  null)  {  throw  new  IllegalStateException( " ");  }	  if(object!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  not  a  statement	32	None	replace
311	[BUG]  [BUGGY]  parent!=  null  &&(object  ==  null  ||  object.equals( " ")))  {  throw  new  IllegalStateException( " ");  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  parent!=  null  &&(object  ==  null  ||  object.equals( " ")))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	parent!=  null  &&(object  ==  null  ||  object.equals( " ")))  {  throw  new  IllegalStateException( " ");  }	  if(object!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  not  a  statement	32	None	replace
312	[BUG]  [BUGGY]  parent  ==  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  parent  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	parent  ==  null)  {  throw  new  IllegalStateException( " ");  }	  if(object!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  not  a  statement	32	None	replace
313	[BUG]  [BUGGY]  parent!=  null  &&(object  ==  null  ||  object.isArray()))  {  throw  new  IllegalStateException( " ");  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  parent!=  null  &&(object  ==  null  ||  object.isArray()))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	parent!=  null  &&(object  ==  null  ||  object.isArray()))  {  throw  new  IllegalStateException( " ");  }	  if(object!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  not  a  statement	32	None	replace
314	[BUG]  [BUGGY]  Class  <?>  fieldValue  =  getClass().getComponentType();  [CE]  illegal  start  of  expression  [FE]          IllegalStateException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  Class  <?>  fieldValue  =  getClass().getComponentType();  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Class  <?>  fieldValue  =  getClass().getComponentType();	          if(!useTransients)    {    throw    new    IllegalStateException(       "       ");    }    If(!useTransients)    {    throw    new    IllegalStateException(       "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
315	[BUG]  [BUGGY]  Class  <?>  fieldValue  =  getClass();  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  Class  <?>  fieldValue  =  getClass();  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Class  <?>  fieldValue  =  getClass();	          if(!useTransients)    {    throw    new    IllegalStateException(       "       ");    }    If(!useTransients)    {    throw    new    IllegalStateException(       "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
316	[BUG]  [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  object.length;  i++)  {  builder.append('N');  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  object.length;  i++)  {  builder.append('N');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue!=  null)  {  for(int  i  =  0;  i  <  object.length;  i++)  {  builder.append('N');  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fieldValue.length;    i++)    {    builder.append('N');    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
317	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  object.length();  ++i)  {  unregister(fieldValue[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  for(int  i  =  0;  i  <  object.length();  ++i)  {  unregister(fieldValue[i]);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  object.length();  ++i)  {  unregister(fieldValue[i]);  }	  if(!useTransients)    {    for(int    i    =    0;    i    <    object.length();    ++i)    {    unregister(fieldValue[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
318	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length();  ++i)  {  unregister(fieldValue[i],  excludeFields[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  for(int  i  =  0;  i  <  fieldValue.length();  ++i)  {  unregister(fieldValue[i],  excludeFields[i]);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  fieldValue.length();  ++i)  {  unregister(fieldValue[i],  excludeFields[i]);  }	  for(int    i    =    0;    i    <    fieldValue.length();    ++i)    {    unregister(fieldValue[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
319	[BUG]  [BUGGY]  fields!=  null  &&  fields.length  >  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  fields!=  null  &&  fields.length  >  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	fields!=  null  &&  fields.length  >  0)  {  throw  new  IllegalStateException( " ");  }	  if(fields!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  not  a  statement	56	None	replace
320	[BUG]  [BUGGY]  fields!=  null  &&  excludeFields.length  >  0;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  fields!=  null  &&  excludeFields.length  >  0;  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	fields!=  null  &&  excludeFields.length  >  0;	  if(fields!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  not  a  statement	56	None	replace
321	[BUG]  [BUGGY]  fields!=  null  &&  excludeFields.length  >  0);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  fields!=  null  &&  excludeFields.length  >  0);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	fields!=  null  &&  excludeFields.length  >  0);	  if(fields!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  not  a  statement	56	None	replace
322	[BUG]  [BUGGY]  if(!useTransients)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  unregister(fieldValue[i],  excludeFields[i]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  unregister(fieldValue[i],  excludeFields[i]);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  unregister(fieldValue[i],  excludeFields[i]);  }	  if(!useTransients)    {    for(int    i    =    0;    i    <    fields.length;    ++i)    {    unregister(fieldValue[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
323	[BUG]  [BUGGY]  parent  ==  null  &&!useTransients)  {  throw  new  IllegalStateException( " ".equals(fieldValue));  }  [CE]  not  a  statement  [FE]            IllegalStateException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  parent  ==  null  &&!useTransients)  {  throw  new  IllegalStateException( " ".equals(fieldValue));  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	parent  ==  null  &&!useTransients)  {  throw  new  IllegalStateException( " ".equals(fieldValue));  }	  if(!useTransients)    {    throw    new    IllegalStateException(   "   ".equals(fieldValue));    }    	non-compiled	[CE]  not  a  statement	3	None	replace
324	[BUG]  [BUGGY]  parent  ==  null  ||!useTransients)  {  throw  new  IllegalStateException( " ".equals(fieldValue));  }  [CE]  not  a  statement  [FE]              IllegalStateException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  parent  ==  null  ||!useTransients)  {  throw  new  IllegalStateException( " ".equals(fieldValue));  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	parent  ==  null  ||!useTransients)  {  throw  new  IllegalStateException( " ".equals(fieldValue));  }	  if(!useTransients)    {    throw    new    IllegalStateException(   "   ".equals(fieldValue));    }    	non-compiled	[CE]  not  a  statement	3	None	replace
325	[BUG]  [BUGGY]  parent  ==  null  &&!useTransients)  {  throw  new  IllegalStateException( " ");  }  [CE]  not  a  statement  [FE]                IllegalStateException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  parent  ==  null  &&!useTransients)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	parent  ==  null  &&!useTransients)  {  throw  new  IllegalStateException( " ");  }	  if(!useTransients)    {    throw    new    IllegalStateException(   "   ".equals(fieldValue));    }    	non-compiled	[CE]  not  a  statement	3	None	replace
326	[BUG]  [BUGGY]  if(fieldValue  ==  null  ||  excludeFields.length  <  1)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fieldValue  ==  null  ||  excludeFields.length  <  1)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fieldValue  ==  null  ||  excludeFields.length  <  1)  {  throw  new  IllegalStateException( " ");  }	  if(fieldValue    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
327	[BUG]  [BUGGY]  if(!useTransients)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  builder.append(',');  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  builder.append(',');  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  builder.append(',');  }	  if(!useTransients)    {    for(int    i    =    0;    i    <    fields.length;    ++i)    {    builder.append(   ",   ");    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
328	[BUG]  [BUGGY]  if(excludeFields.length  ==  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]        IllegalStateException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(excludeFields.length  ==  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(excludeFields.length  ==  0)  {  throw  new  IllegalStateException( " ");  }	  if(!useTransients    ||    excludeFields.length    ==    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
329	[BUG]  [BUGGY]  ThreadLocal.getInstance().reportError( "Unexpected  IllegalStateException ");  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  ThreadLocal.getInstance().reportError( "Unexpected  IllegalStateException ");  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	ThreadLocal.getInstance().reportError( "Unexpected  IllegalStateException ");	  if(object    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
330	[BUG]  [BUGGY]  ThreadLocal.getInstance().reportError( "Unexpected  IllegalAccessException ");  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  ThreadLocal.getInstance().reportError( "Unexpected  IllegalAccessException ");  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	ThreadLocal.getInstance().reportError( "Unexpected  IllegalAccessException ");	  if(object    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
331	[BUG]  [BUGGY]  aught(IllegalArgumentException.class,  fieldValue);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  aught(IllegalArgumentException.class,  fieldValue);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	aught(IllegalArgumentException.class,  fieldValue);	  if(object    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
332	[BUG]  [BUGGY]  ThreadLocal.getInstance().reset();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  ThreadLocal.getInstance().reset();  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	ThreadLocal.getInstance().reset();	  if(object    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
333	[BUG]  [BUGGY]  Class  <?>  fieldValue  =  clazz.getSuperclass();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  Class  <?>  fieldValue  =  clazz.getSuperclass();  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Class  <?>  fieldValue  =  clazz.getSuperclass();	  if(fieldValue!=    null)    {    builder.append(fieldValue);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
334	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldValues.length;  ++i)  {  unregister(fieldValue[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  for(int  i  =  0;  i  <  fieldValues.length;  ++i)  {  unregister(fieldValue[i]);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  fieldValues.length;  ++i)  {  unregister(fieldValue[i]);  }	  for(int    i    =    0;    i    <    fields.length();    ++i)    {    unregister(fieldValue[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
335	[BUG]  [BUGGY]  fields  ==  null  ||  excludeFields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  fields  ==  null  ||  excludeFields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	fields  ==  null  ||  excludeFields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(fields    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	30	None	replace
336	[BUG]  [BUGGY]  ThreadLocal.getInstance().reportError( "Unexpected  field  value: "  +  clazz.getName());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  ThreadLocal.getInstance().reportError( "Unexpected  field  value: "  +  clazz.getName());  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	ThreadLocal.getInstance().reportError( "Unexpected  field  value: "  +  clazz.getName());	  if(fields    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
337	[BUG]  [BUGGY]  ThreadLocal.getInstance().reportError( "Missing  field  value: "  +  clazz.getName());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  ThreadLocal.getInstance().reportError( "Missing  field  value: "  +  clazz.getName());  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	ThreadLocal.getInstance().reportError( "Missing  field  value: "  +  clazz.getName());	  if(fields    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
338	[BUG]  [BUGGY]  if(!useTransients  &&  fieldValue.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients  &&  fieldValue.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients  &&  fieldValue.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(!useTransients    &&    excludeFields.length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
339	[BUG]  [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(object!=  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(object!=  null)  {  for(int  i  =  0;  i  <  object.length();  i++)  {  throw  new  IllegalStateException( " ");  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    object.length();    i++)    {    throw    new    IllegalAccessException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
340	[BUG]  [BUGGY]  Builder.append(excludeFields[iTotal  +  1]);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  Builder.append(excludeFields[iTotal  +  1]);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Builder.append(excludeFields[iTotal  +  1]);	  Builder.append(excludeFields[iConstant]);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
341	[BUG]  [BUGGY]  if(!useTransients  &&  fieldValue.length  >  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]        IllegalStateException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients  &&  fieldValue.length  >  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients  &&  fieldValue.length  >  0)  {  throw  new  IllegalStateException( " ");  }	  if(!useTransients    &&    excludeFields.length    >    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
342	[BUG]  [BUGGY]  if(!useTransients  &&  excludeFields[fieldValue]!=  null)  {  builder.append(excludeFields[fieldValue]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients  &&  excludeFields[fieldValue]!=  null)  {  builder.append(excludeFields[fieldValue]);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients  &&  excludeFields[fieldValue]!=  null)  {  builder.append(excludeFields[fieldValue]);  }	  if(!useTransients)    {    builder.append(excludeFields[fieldValue]);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
343	[BUG]  [BUGGY]  if(!useTransients)  {  builder.append(fieldValue,  excludeFields[fieldValue]);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients)  {  builder.append(fieldValue,  excludeFields[fieldValue]);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients)  {  builder.append(fieldValue,  excludeFields[fieldValue]);  }	  if(!useTransients)    {    builder.append(excludeFields[fieldValue]);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
344	[BUG]  [BUGGY]  if(!useTransients  &&  excludeFields.length  >  0)  {  builder.append('n');  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients  &&  excludeFields.length  >  0)  {  builder.append('n');  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients  &&  excludeFields.length  >  0)  {  builder.append('n');  }	  if(!useTransients)    {    builder.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
345	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ")  +  clazz.getName());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  throw  new  IllegalStateException( " ")  +  clazz.getName());  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	throw  new  IllegalStateException( " ")  +  clazz.getName());	  throw    new    IllegalStateException(   "   "    +    clazz.getName());    	non-compiled	[CE]  	68	None	replace
346	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Unknown  class: "  +  clazz.getName());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  throw  new  IllegalStateException( "Unknown  class: "  +  clazz.getName());  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	throw  new  IllegalStateException( "Unknown  class: "  +  clazz.getName());	  throw    new    IllegalStateException(   "   "    +    clazz.getName());    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
347	[BUG]  [BUGGY]  if(excludeFields.length  <  2)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]          IllegalStateException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(excludeFields.length  <  2)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(excludeFields.length  <  2)  {  throw  new  IllegalStateException( " ");  }	  if(!useTransients    ||    excludeFields.length    <    2)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
348	[BUG]  [BUGGY]  aught(IllegalArgumentException.class,   "Unexpected  IllegalArgumentException ");  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  aught(IllegalArgumentException.class,   "Unexpected  IllegalArgumentException ");  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	aught(IllegalArgumentException.class,   "Unexpected  IllegalArgumentException ");	  if(useTransients)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
349	[BUG]  [BUGGY]  aught(IllegalArgumentException.class,  fieldValue));  [CE]  ';'  expected  [FE]          IllegalArgumentException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  aught(IllegalArgumentException.class,  fieldValue));  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	aught(IllegalArgumentException.class,  fieldValue));	  if(useTransients)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	7	None	replace
350	[BUG]  [BUGGY]  aught(IllegalArgumentException.class),  e);  [CE]  ';'  expected  [FE]            IllegalArgumentException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  aught(IllegalArgumentException.class),  e);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	aught(IllegalArgumentException.class),  e);	  if(useTransients)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	7	None	replace
351	[BUG]  [BUGGY]  if(!useTransients  &&  excludeFields.length  >  0)  {  builder.append(object);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients  &&  excludeFields.length  >  0)  {  builder.append(object);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients  &&  excludeFields.length  >  0)  {  builder.append(object);  }	  if(!useTransients)    {    builder.append(object);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
352	[BUG]  [BUGGY]  if(!useTransients  &&  object!=  null)  {  builder.append(fieldValue);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients  &&  object!=  null)  {  builder.append(fieldValue);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients  &&  object!=  null)  {  builder.append(fieldValue);  }	  if(!useTransients)    {    builder.append(object);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
353	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ")  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  Throwables.throw  new  IllegalStateException( " ")  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Throwables.throw  new  IllegalStateException( " ")	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	22	None	replace
354	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " "));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  Throwables.throw  new  IllegalStateException( " "));  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	Throwables.throw  new  IllegalStateException( " "));	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	22	None	replace
355	[BUG]  [BUGGY]  parent  ==  null  &&!useTransients)  {  throw  new  IllegalArgumentException( " ".equals(fieldValue));  }  [CE]  not  a  statement  [FE]          IllegalArgumentException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  parent  ==  null  &&!useTransients)  {  throw  new  IllegalArgumentException( " ".equals(fieldValue));  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	parent  ==  null  &&!useTransients)  {  throw  new  IllegalArgumentException( " ".equals(fieldValue));  }	  if(!useTransients)    {    throw    new    IllegalArgumentException(   "   ".equals(fieldValue));    }    	non-compiled	[CE]  not  a  statement	8	None	replace
356	[BUG]  [BUGGY]  parent  ==  null  &&!useTransients)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]            IllegalArgumentException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  parent  ==  null  &&!useTransients)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	parent  ==  null  &&!useTransients)  {  throw  new  IllegalArgumentException( " ");  }	  if(!useTransients)    {    throw    new    IllegalArgumentException(   "   ".equals(fieldValue));    }    	non-compiled	[CE]  not  a  statement	8	None	replace
357	[BUG]  [BUGGY]  parent  ==  null  ||!useTransients)  {  throw  new  IllegalArgumentException( " ".equals(fieldValue));  }  [CE]  not  a  statement  [FE]              IllegalArgumentException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  parent  ==  null  ||!useTransients)  {  throw  new  IllegalArgumentException( " ".equals(fieldValue));  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	parent  ==  null  ||!useTransients)  {  throw  new  IllegalArgumentException( " ".equals(fieldValue));  }	  if(!useTransients)    {    throw    new    IllegalArgumentException(   "   ".equals(fieldValue));    }    	non-compiled	[CE]  not  a  statement	8	None	replace
358	[BUG]  [BUGGY]  parent  ==  null  &&!useTransients)  {  throw  new  IllegalArgumentException( " ").equals(fieldValue);  }  [CE]  not  a  statement  [FE]                IllegalArgumentException      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  parent  ==  null  &&!useTransients)  {  throw  new  IllegalArgumentException( " ").equals(fieldValue);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	parent  ==  null  &&!useTransients)  {  throw  new  IllegalArgumentException( " ").equals(fieldValue);  }	  if(!useTransients)    {    throw    new    IllegalArgumentException(   "   ".equals(fieldValue));    }    	non-compiled	[CE]  not  a  statement	8	None	replace
359	[BUG]  [BUGGY]          if(!useTransients)    {    throw    new    IllegalArgumentException(     "     ");    }    if(!useTransients)  {  throw  new  IllegalArgumentException(     "     ");  }  if(!useTransients)  {  throw  new  IllegalArgumentException( "   ");  }  if(!useTransients)  {  throw  new  IllegalArgumentException( "   ");  }  if(!useTransients)  {  throw  new  IllegalArgumentException( "   ");  }  }  [CE]  class,  interface,  or  enum  expected  [FE]    IllegalArgumentException    [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]          if(!useTransients)    {    throw    new    IllegalArgumentException(     "     ");    }    if(!useTransients)  {  throw  new  IllegalArgumentException(     "     ");  }  if(!useTransients)  {  throw  new  IllegalArgumentException( "   ");  }  if(!useTransients)  {  throw  new  IllegalArgumentException( "   ");  }  if(!useTransients)  {  throw  new  IllegalArgumentException( "   ");  }  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	                if(!useTransients)        {        throw        new        IllegalArgumentException(       "       ");        }        if(!useTransients)    {    throw    new    IllegalArgumentException(       "       ");    }    if(!useTransients)  {  throw  new  IllegalArgumentException( "   ");  }  if(!useTransients)  {  throw  new  IllegalArgumentException( "   ");  }  if(!useTransients)  {  throw  new  IllegalArgumentException( "   ");  }  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	add
360	[BUG]  [BUGGY]  if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append( ", ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append( ", ");  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  builder.append( ", ");  }	  if(fieldValue!=    null)    {    for(int    i    =    0;    i    <    fields.length;    i++)    {    builder.append('[');    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
361	[BUG]  [BUGGY]  unregister(fieldValue);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  unregister(fieldValue);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	unregister(fieldValue);	  int    fieldValueLength    =    fieldValue.length;    unregister(fieldValueLength);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
362	[BUG]  [BUGGY]  if(!useTransients  &&  excludeFields[0]!=  null)  {  builder.append(excludeFields[0]);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  if(!useTransients  &&  excludeFields[0]!=  null)  {  builder.append(excludeFields[0]);  }  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	if(!useTransients  &&  excludeFields[0]!=  null)  {  builder.append(excludeFields[0]);  }	  if(!useTransients)    {    builder.append(excludeFields[0]);    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
363	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fields.length;  i++)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {  unregister(object);      [BUGGY]  for(int  i  =  0;  i  <  fields.length;  i++)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	197	197	1	replace	for(int  i  =  0;  i  <  fields.length;  i++)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    fieldValue.length();    i++)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
