bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    int  size  =  elementPairs.size();  [CE]  variable  size  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]    IllegalArgumentException  [CONTEXT]  private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  [BUGGY]    int  size  =  elementPairs.size();  [BUGGY]  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	    int  size  =  elementPairs.size();		non-compiled	[CE]  variable  size  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	55	None	add
2	[BUG]  [BUGGY]    Object[]  sep  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]      IllegalArgumentException  [CONTEXT]  private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  [BUGGY]    Object[]  sep  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  [BUGGY]  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	    Object[]  sep  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);		non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	55	None	add
3	[BUG]  [BUGGY]    Object[]  sep  =  toFormatter(elementPairs.subList(2,  size,  notPrinter,  notParser);  [CE]  ')'  expected  [FE]        IllegalArgumentException  [CONTEXT]  private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  [BUGGY]    Object[]  sep  =  toFormatter(elementPairs.subList(2,  size,  notPrinter,  notParser);  [BUGGY]  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	    Object[]  sep  =  toFormatter(elementPairs.subList(2,  size,  notPrinter,  notParser);		non-compiled	[CE]  ')'  expected	55	None	add
4	[BUG]  [BUGGY]    Object[]  sep  =  toFormatter(elementPairs.subList(2,  size));  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]          IllegalArgumentException  [CONTEXT]  private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  [BUGGY]    Object[]  sep  =  toFormatter(elementPairs.subList(2,  size));  [BUGGY]  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	    Object[]  sep  =  toFormatter(elementPairs.subList(2,  size));		non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	55	None	add
5	[BUG]  [BUGGY]    Object[]  sep  =  toFormatter(elementPairs.subList(2,  size);  [CE]  ')'  expected  [FE]            IllegalArgumentException  [CONTEXT]  private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  [BUGGY]    Object[]  sep  =  toFormatter(elementPairs.subList(2,  size);  [BUGGY]  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	    Object[]  sep  =  toFormatter(elementPairs.subList(2,  size);		non-compiled	[CE]  ')'  expected	55	None	add
6	[BUG]  [BUGGY]  sep  =  f.finish(sep.getPrinter(),  f.getParser());  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException  [CONTEXT]  private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  [BUGGY]  sep  =  f.finish(sep.getPrinter(),  f.getParser());  [BUGGY]  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  f.finish(sep.getPrinter(),  f.getParser());	sep  =  sep.finish(f.getPrinter(),  f.getParser());  	non-compiled	[CE]  cannot  find  symbol	56	None	replace
7	[BUG]  [BUGGY]  sep  =  sep.finish(f.getPrinter(),  f.getParser(),  size);  [CE]  method  finish  in  class  Separator  cannot  be  applied  to  given  types;  [FE]      IllegalArgumentException  [CONTEXT]  private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  [BUGGY]  sep  =  sep.finish(f.getPrinter(),  f.getParser(),  size);  [BUGGY]  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  sep.finish(f.getPrinter(),  f.getParser(),  size);	sep  =  sep.finish(f.getPrinter(),  f.getParser());  	non-compiled	[CE]  method  finish  in  class  Separator  cannot  be  applied  to  given  types;	56	None	replace
8	[BUG]  [BUGGY]  sep  =  sep.finish(f.getPrinter(),  f.getSeparator());  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException  [CONTEXT]  private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  [BUGGY]  sep  =  sep.finish(f.getPrinter(),  f.getSeparator());  [BUGGY]  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  sep.finish(f.getPrinter(),  f.getSeparator());	sep  =  sep.finish(f.getPrinter(),  f.getParser());  	non-compiled	[CE]  cannot  find  symbol	56	None	replace
9	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          IllegalArgumentException  [CONTEXT]  private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  [BUGGY]    [BUGGY]  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	add	  	sep  =  sep.finish(f.getPrinter(),  f.getParser());  	compilable	  [FE]  NullPointerException  	56	5	replace
10	[BUG]  [BUGGY]    [FE]  NullPointerException  [FE]          IllegalArgumentException  [CONTEXT]  private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  [BUGGY]    [BUGGY]  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	  	sep  =  sep.finish(f.getPrinter(),  f.getParser());  	compilable	  [FE]  NullPointerException  	56	5	replace
11	[BUG]  [BUGGY]    Object[]  sep  =  createSeparator(elementPairs,  notPrinter,  notParser);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]    IllegalArgumentException  [CONTEXT]  private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  [BUGGY]    Object[]  sep  =  createSeparator(elementPairs,  notPrinter,  notParser);  [BUGGY]  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	    Object[]  sep  =  createSeparator(elementPairs,  notPrinter,  notParser);		non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	55	None	add
12	[BUG]  [BUGGY]    Preconditions.checkState(elementPairs.size()  ==  2);  [CE]  cannot  find  symbol  Preconditions  [FE]      IllegalArgumentException  [CONTEXT]  private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  [BUGGY]    Preconditions.checkState(elementPairs.size()  ==  2);  [BUGGY]  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	    Preconditions.checkState(elementPairs.size()  ==  2);		non-compiled	[CE]  cannot  find  symbol  Preconditions	55	None	add
13	[BUG]  [BUGGY]    Object[]  sep  =  createSeparator(elementPairs);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]        IllegalArgumentException  [CONTEXT]  private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  [BUGGY]    Object[]  sep  =  createSeparator(elementPairs);  [BUGGY]  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	    Object[]  sep  =  createSeparator(elementPairs);		non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	55	None	add
14	[BUG]  [BUGGY]    Preconditions.checkNotNull(sep);  [CE]  cannot  find  symbol  Preconditions  [FE]          IllegalArgumentException  [CONTEXT]  private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  [BUGGY]    Preconditions.checkNotNull(sep);  [BUGGY]  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	    Preconditions.checkNotNull(sep);		non-compiled	[CE]  cannot  find  symbol  Preconditions	55	None	add
15	[BUG]  [BUGGY]  sep  =  sep.finish(f.getPrinter(),  f.getParser(),  f.getBeforeParser());  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException  [CONTEXT]  private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  [BUGGY]  sep  =  sep.finish(f.getPrinter(),  f.getParser(),  f.getBeforeParser());  [BUGGY]  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  sep.finish(f.getPrinter(),  f.getParser(),  f.getBeforeParser());	sep  =  sep.finish(f.getPrinter(),  f.getParser());  	non-compiled	[CE]  cannot  find  symbol	56	None	replace
16	[BUG]  [BUGGY]  sep  =  sep.finish(f.getPrinter(),  f.getParser(),  f.getSeparator());  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException  [CONTEXT]  private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  [BUGGY]  sep  =  sep.finish(f.getPrinter(),  f.getParser(),  f.getSeparator());  [BUGGY]  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  sep.finish(f.getPrinter(),  f.getParser(),  f.getSeparator());	sep  =  sep.finish(f.getPrinter(),  f.getParser());  	non-compiled	[CE]  cannot  find  symbol	56	None	replace
17	[BUG]  [BUGGY]    Object[]  sep  =  createFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]    IllegalArgumentException  [CONTEXT]  private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  [BUGGY]    Object[]  sep  =  createFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  [BUGGY]  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	    Object[]  sep  =  createFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);		non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	55	None	add
18	[BUG]  [BUGGY]    Object[]  sep  =  createFormatter(elementPairs,  notPrinter,  notParser);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]      IllegalArgumentException  [CONTEXT]  private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  [BUGGY]    Object[]  sep  =  createFormatter(elementPairs,  notPrinter,  notParser);  [BUGGY]  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	    Object[]  sep  =  createFormatter(elementPairs,  notPrinter,  notParser);		non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	55	None	add
19	[BUG]  [BUGGY]    Object[]  sep  =  elementPairs.subList(2,  size);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]        IllegalArgumentException  [CONTEXT]  private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  [BUGGY]    Object[]  sep  =  elementPairs.subList(2,  size);  [BUGGY]  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	    Object[]  sep  =  elementPairs.subList(2,  size);		non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	55	None	add
20	[BUG]  [BUGGY]    Object[]  sep  =  createFormatter(elementPairs);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]          IllegalArgumentException  [CONTEXT]  private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  [BUGGY]    Object[]  sep  =  createFormatter(elementPairs);  [BUGGY]  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	    Object[]  sep  =  createFormatter(elementPairs);		non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	55	None	add
